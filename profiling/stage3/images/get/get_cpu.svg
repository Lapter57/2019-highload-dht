<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (9,515 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=25370] (204 samples, 2.14%)</title><rect x="10.0" y="723.0" width="25.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="734.0">[..</text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.04%)</title><rect x="10.5" y="707.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="10.5" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.5" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (194 samples, 2.04%)</title><rect x="11.2" y="707.0" width="24.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.2" y="718.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (63 samples, 0.66%)</title><rect x="11.7" y="691.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (3 samples, 0.03%)</title><rect x="11.7" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.03%)</title><rect x="11.7" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.7" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (60 samples, 0.63%)</title><rect x="12.1" y="675.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="686.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (51 samples, 0.54%)</title><rect x="12.9" y="659.0" width="6.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="15.9" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (43 samples, 0.45%)</title><rect x="13.8" y="643.0" width="5.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="16.8" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (43 samples, 0.45%)</title><rect x="13.8" y="627.0" width="5.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="16.8" y="638.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (40 samples, 0.42%)</title><rect x="14.2" y="611.0" width="5.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="17.2" y="622.0"></text>
</g>
<g>
<title>do_epoll_wait (39 samples, 0.41%)</title><rect x="14.3" y="595.0" width="4.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="17.3" y="606.0"></text>
</g>
<g>
<title>ep_poll (38 samples, 0.40%)</title><rect x="14.3" y="579.0" width="4.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="17.3" y="590.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (26 samples, 0.27%)</title><rect x="15.2" y="563.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="18.2" y="574.0"></text>
</g>
<g>
<title>ep_send_events_proc (13 samples, 0.14%)</title><rect x="16.2" y="547.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="19.2" y="558.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (12 samples, 0.13%)</title><rect x="16.3" y="531.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="19.3" y="542.0"></text>
</g>
<g>
<title>sock_poll (11 samples, 0.12%)</title><rect x="16.4" y="515.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="19.4" y="526.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.04%)</title><rect x="17.3" y="499.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="20.3" y="510.0"></text>
</g>
<g>
<title>mutex_lock (5 samples, 0.05%)</title><rect x="17.8" y="547.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="20.8" y="558.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (5 samples, 0.05%)</title><rect x="18.4" y="563.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="21.4" y="574.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.04%)</title><rect x="18.6" y="547.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="21.6" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.04%)</title><rect x="18.6" y="531.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="21.6" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.04%)</title><rect x="18.6" y="515.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="21.6" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (127 samples, 1.33%)</title><rect x="19.5" y="691.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.5" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (127 samples, 1.33%)</title><rect x="19.5" y="675.0" width="15.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.5" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (49 samples, 0.51%)</title><rect x="19.5" y="659.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.5" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (25 samples, 0.26%)</title><rect x="20.3" y="643.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (22 samples, 0.23%)</title><rect x="20.7" y="627.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.7" y="638.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (19 samples, 0.20%)</title><rect x="20.7" y="611.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.05%)</title><rect x="20.7" y="595.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.04%)</title><rect x="20.8" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.8" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="20.9" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="20.9" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="20.9" y="531.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.entity (14 samples, 0.15%)</title><rect x="21.3" y="595.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.executeAsync (13 samples, 0.14%)</title><rect x="21.4" y="579.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 0.14%)</title><rect x="21.4" y="563.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 0.12%)</title><rect x="21.7" y="547.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (5 samples, 0.05%)</title><rect x="21.7" y="531.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.05%)</title><rect x="21.7" y="515.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.05%)</title><rect x="21.7" y="499.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.05%)</title><rect x="21.7" y="483.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.05%)</title><rect x="21.7" y="467.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.05%)</title><rect x="21.7" y="451.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.7" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.04%)</title><rect x="21.8" y="435.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="24.8" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="21.9" y="419.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="24.9" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="21.9" y="403.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="24.9" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.03%)</title><rect x="21.9" y="387.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="24.9" y="398.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.03%)</title><rect x="21.9" y="371.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="24.9" y="382.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.03%)</title><rect x="21.9" y="355.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="24.9" y="366.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.03%)</title><rect x="21.9" y="339.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="24.9" y="350.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.03%)</title><rect x="21.9" y="323.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="24.9" y="334.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="21.9" y="307.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="24.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.06%)</title><rect x="22.3" y="531.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.06%)</title><rect x="22.3" y="515.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.06%)</title><rect x="22.3" y="499.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.06%)</title><rect x="22.3" y="483.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.03%)</title><rect x="23.0" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="23.0" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.17%)</title><rect x="23.4" y="643.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.06%)</title><rect x="23.9" y="627.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="23.9" y="611.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="23.9" y="595.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.06%)</title><rect x="23.9" y="579.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.05%)</title><rect x="24.8" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (78 samples, 0.82%)</title><rect x="25.6" y="659.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.6" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (77 samples, 0.81%)</title><rect x="25.7" y="643.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.09%)</title><rect x="26.0" y="627.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="29.0" y="638.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.09%)</title><rect x="26.0" y="611.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="29.0" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.05%)</title><rect x="26.0" y="595.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="29.0" y="606.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="26.0" y="579.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="29.0" y="590.0"></text>
</g>
<g>
<title>__libc_recv (65 samples, 0.68%)</title><rect x="27.1" y="627.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="30.1" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (53 samples, 0.56%)</title><rect x="28.6" y="611.0" width="6.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="31.6" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (53 samples, 0.56%)</title><rect x="28.6" y="595.0" width="6.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="31.6" y="606.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (46 samples, 0.48%)</title><rect x="29.5" y="579.0" width="5.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="32.5" y="590.0"></text>
</g>
<g>
<title>__sys_recvfrom (44 samples, 0.46%)</title><rect x="29.7" y="563.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="32.7" y="574.0"></text>
</g>
<g>
<title>inet_recvmsg (36 samples, 0.38%)</title><rect x="29.8" y="547.0" width="4.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="32.8" y="558.0"></text>
</g>
<g>
<title>tcp_recvmsg (36 samples, 0.38%)</title><rect x="29.8" y="531.0" width="4.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="32.8" y="542.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.04%)</title><rect x="30.2" y="515.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="33.2" y="526.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.04%)</title><rect x="30.2" y="499.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="33.2" y="510.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.03%)</title><rect x="30.3" y="483.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="33.3" y="494.0"></text>
</g>
<g>
<title>dst_release (3 samples, 0.03%)</title><rect x="30.3" y="467.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="33.3" y="478.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (15 samples, 0.16%)</title><rect x="30.7" y="515.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="33.7" y="526.0"></text>
</g>
<g>
<title>__ip_queue_xmit (15 samples, 0.16%)</title><rect x="30.7" y="499.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="33.7" y="510.0"></text>
</g>
<g>
<title>ip_local_out (6 samples, 0.06%)</title><rect x="30.7" y="483.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="33.7" y="494.0"></text>
</g>
<g>
<title>__ip_local_out (6 samples, 0.06%)</title><rect x="30.7" y="467.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="33.7" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.06%)</title><rect x="30.7" y="451.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="33.7" y="462.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (4 samples, 0.04%)</title><rect x="31.0" y="435.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="34.0" y="446.0"></text>
</g>
<g>
<title>ip_output (9 samples, 0.09%)</title><rect x="31.5" y="483.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="34.5" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (8 samples, 0.08%)</title><rect x="31.5" y="467.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="34.5" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (7 samples, 0.07%)</title><rect x="31.6" y="451.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="34.6" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (7 samples, 0.07%)</title><rect x="31.6" y="435.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="34.6" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (7 samples, 0.07%)</title><rect x="31.6" y="419.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="34.6" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (7 samples, 0.07%)</title><rect x="31.6" y="403.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="34.6" y="414.0"></text>
</g>
<g>
<title>net_rx_action (7 samples, 0.07%)</title><rect x="31.6" y="387.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="34.6" y="398.0"></text>
</g>
<g>
<title>process_backlog (7 samples, 0.07%)</title><rect x="31.6" y="371.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="34.6" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (7 samples, 0.07%)</title><rect x="31.6" y="355.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="34.6" y="366.0"></text>
</g>
<g>
<title>ip_rcv (6 samples, 0.06%)</title><rect x="31.7" y="339.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="34.7" y="350.0"></text>
</g>
<g>
<title>ip_local_deliver (5 samples, 0.05%)</title><rect x="31.7" y="323.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="34.7" y="334.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.03%)</title><rect x="31.7" y="307.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="34.7" y="318.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (3 samples, 0.03%)</title><rect x="31.7" y="291.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="34.7" y="302.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 0.03%)</title><rect x="31.7" y="275.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="34.7" y="286.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (11 samples, 0.12%)</title><rect x="32.7" y="515.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="35.7" y="526.0"></text>
</g>
<g>
<title>__skb_datagram_iter (11 samples, 0.12%)</title><rect x="32.7" y="499.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="35.7" y="510.0"></text>
</g>
<g>
<title>_copy_to_iter (4 samples, 0.04%)</title><rect x="32.8" y="483.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="35.8" y="494.0"></text>
</g>
<g>
<title>copyout (4 samples, 0.04%)</title><rect x="32.8" y="467.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="35.8" y="478.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (4 samples, 0.04%)</title><rect x="32.8" y="451.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="35.8" y="462.0"></text>
</g>
<g>
<title>simple_copy_to_iter (6 samples, 0.06%)</title><rect x="33.3" y="483.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="36.3" y="494.0"></text>
</g>
<g>
<title>__check_object_size (6 samples, 0.06%)</title><rect x="33.3" y="467.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="36.3" y="478.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.03%)</title><rect x="33.7" y="451.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="36.7" y="462.0"></text>
</g>
<g>
<title>sock_recvmsg (3 samples, 0.03%)</title><rect x="34.3" y="547.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="37.3" y="558.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 0.03%)</title><rect x="34.3" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="37.3" y="542.0"></text>
</g>
<g>
<title>sock_has_perm (3 samples, 0.03%)</title><rect x="34.3" y="515.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="37.3" y="526.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.04%)</title><rect x="34.7" y="547.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="37.7" y="558.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="34.7" y="531.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="37.7" y="542.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.03%)</title><rect x="34.8" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="37.8" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25371] (210 samples, 2.21%)</title><rect x="35.3" y="723.0" width="26.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="38.3" y="734.0">[..</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.03%)</title><rect x="36.2" y="707.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="39.2" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (198 samples, 2.08%)</title><rect x="36.8" y="707.0" width="24.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.8" y="718.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.04%)</title><rect x="36.9" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.04%)</title><rect x="36.9" y="675.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (62 samples, 0.65%)</title><rect x="37.4" y="691.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.4" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (60 samples, 0.63%)</title><rect x="37.7" y="675.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.7" y="686.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (56 samples, 0.59%)</title><rect x="37.7" y="659.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="40.7" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (43 samples, 0.45%)</title><rect x="39.3" y="643.0" width="5.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="42.3" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (43 samples, 0.45%)</title><rect x="39.3" y="627.0" width="5.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="42.3" y="638.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (34 samples, 0.36%)</title><rect x="40.4" y="611.0" width="4.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="43.4" y="622.0"></text>
</g>
<g>
<title>do_epoll_wait (34 samples, 0.36%)</title><rect x="40.4" y="595.0" width="4.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="43.4" y="606.0"></text>
</g>
<g>
<title>ep_poll (32 samples, 0.34%)</title><rect x="40.6" y="579.0" width="4.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="43.6" y="590.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (21 samples, 0.22%)</title><rect x="41.1" y="563.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="44.1" y="574.0"></text>
</g>
<g>
<title>ep_send_events_proc (14 samples, 0.15%)</title><rect x="41.4" y="547.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="44.4" y="558.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (11 samples, 0.12%)</title><rect x="41.7" y="531.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="44.7" y="542.0"></text>
</g>
<g>
<title>sock_poll (9 samples, 0.09%)</title><rect x="42.0" y="515.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="45.0" y="526.0"></text>
</g>
<g>
<title>tcp_poll (6 samples, 0.06%)</title><rect x="42.4" y="499.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="45.4" y="510.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.03%)</title><rect x="42.7" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="45.7" y="494.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.03%)</title><rect x="43.1" y="547.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="46.1" y="558.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (7 samples, 0.07%)</title><rect x="43.7" y="563.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="46.7" y="574.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="44.2" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="47.2" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.03%)</title><rect x="44.2" y="531.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="47.2" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="44.2" y="515.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="47.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (131 samples, 1.38%)</title><rect x="45.1" y="691.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.1" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (128 samples, 1.35%)</title><rect x="45.2" y="675.0" width="15.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.2" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (44 samples, 0.46%)</title><rect x="45.3" y="659.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (23 samples, 0.24%)</title><rect x="45.7" y="643.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="48.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (22 samples, 0.23%)</title><rect x="45.8" y="627.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.8" y="638.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (20 samples, 0.21%)</title><rect x="45.8" y="611.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.05%)</title><rect x="45.8" y="595.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.entity (15 samples, 0.16%)</title><rect x="46.5" y="595.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.executeAsync (15 samples, 0.16%)</title><rect x="46.5" y="579.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 0.15%)</title><rect x="46.6" y="563.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 0.13%)</title><rect x="46.8" y="547.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (7 samples, 0.07%)</title><rect x="46.8" y="531.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.07%)</title><rect x="46.8" y="515.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="49.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.07%)</title><rect x="46.8" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.07%)</title><rect x="46.8" y="483.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.07%)</title><rect x="46.8" y="467.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="49.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.07%)</title><rect x="46.8" y="451.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.8" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.06%)</title><rect x="47.0" y="435.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="50.0" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="47.2" y="419.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="50.2" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="47.2" y="403.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="50.2" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.04%)</title><rect x="47.2" y="387.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="50.2" y="398.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.04%)</title><rect x="47.2" y="371.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="50.2" y="382.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.04%)</title><rect x="47.2" y="355.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="50.2" y="366.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.03%)</title><rect x="47.3" y="339.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="50.3" y="350.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.03%)</title><rect x="47.3" y="323.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="50.3" y="334.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="47.3" y="307.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="50.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.05%)</title><rect x="47.7" y="531.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.05%)</title><rect x="47.7" y="515.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.05%)</title><rect x="47.7" y="499.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.05%)</title><rect x="47.7" y="483.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.14%)</title><rect x="48.6" y="643.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.6" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9 samples, 0.09%)</title><rect x="48.8" y="627.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.09%)</title><rect x="48.8" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.09%)</title><rect x="48.8" y="595.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.8" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.09%)</title><rect x="48.8" y="579.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="50.4" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.4" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="50.4" y="627.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="53.4" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (83 samples, 0.87%)</title><rect x="50.8" y="659.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.8" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (83 samples, 0.87%)</title><rect x="50.8" y="643.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="50.9" y="627.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="53.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="50.9" y="611.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="53.9" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (9 samples, 0.09%)</title><rect x="50.9" y="595.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="53.9" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.05%)</title><rect x="51.3" y="579.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="54.3" y="590.0"></text>
</g>
<g>
<title>__libc_recv (71 samples, 0.75%)</title><rect x="52.3" y="627.0" width="8.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="55.3" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (60 samples, 0.63%)</title><rect x="53.7" y="611.0" width="7.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="56.7" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (60 samples, 0.63%)</title><rect x="53.7" y="595.0" width="7.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="56.7" y="606.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (55 samples, 0.58%)</title><rect x="54.3" y="579.0" width="6.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="57.3" y="590.0"></text>
</g>
<g>
<title>__sys_recvfrom (55 samples, 0.58%)</title><rect x="54.3" y="563.0" width="6.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="57.3" y="574.0"></text>
</g>
<g>
<title>inet_recvmsg (44 samples, 0.46%)</title><rect x="54.8" y="547.0" width="5.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="57.8" y="558.0"></text>
</g>
<g>
<title>tcp_recvmsg (44 samples, 0.46%)</title><rect x="54.8" y="531.0" width="5.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="57.8" y="542.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.04%)</title><rect x="55.4" y="515.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="58.4" y="526.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.04%)</title><rect x="55.4" y="499.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="58.4" y="510.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.04%)</title><rect x="55.4" y="483.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="58.4" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (20 samples, 0.21%)</title><rect x="55.9" y="515.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="58.9" y="526.0"></text>
</g>
<g>
<title>__ip_queue_xmit (20 samples, 0.21%)</title><rect x="55.9" y="499.0" width="2.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="58.9" y="510.0"></text>
</g>
<g>
<title>ip_local_out (8 samples, 0.08%)</title><rect x="55.9" y="483.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="58.9" y="494.0"></text>
</g>
<g>
<title>__ip_local_out (8 samples, 0.08%)</title><rect x="55.9" y="467.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="58.9" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (8 samples, 0.08%)</title><rect x="55.9" y="451.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="58.9" y="462.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (3 samples, 0.03%)</title><rect x="56.4" y="435.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="59.4" y="446.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (3 samples, 0.03%)</title><rect x="56.4" y="419.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="59.4" y="430.0"></text>
</g>
<g>
<title>ip_output (12 samples, 0.13%)</title><rect x="56.9" y="483.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="59.9" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (12 samples, 0.13%)</title><rect x="56.9" y="467.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="59.9" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (9 samples, 0.09%)</title><rect x="57.2" y="451.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="60.2" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (9 samples, 0.09%)</title><rect x="57.2" y="435.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="60.2" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (9 samples, 0.09%)</title><rect x="57.2" y="419.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="60.2" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (9 samples, 0.09%)</title><rect x="57.2" y="403.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="60.2" y="414.0"></text>
</g>
<g>
<title>net_rx_action (9 samples, 0.09%)</title><rect x="57.2" y="387.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="60.2" y="398.0"></text>
</g>
<g>
<title>process_backlog (9 samples, 0.09%)</title><rect x="57.2" y="371.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="60.2" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (8 samples, 0.08%)</title><rect x="57.4" y="355.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="60.4" y="366.0"></text>
</g>
<g>
<title>ip_rcv (8 samples, 0.08%)</title><rect x="57.4" y="339.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="60.4" y="350.0"></text>
</g>
<g>
<title>ip_local_deliver (6 samples, 0.06%)</title><rect x="57.4" y="323.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="60.4" y="334.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (5 samples, 0.05%)</title><rect x="57.4" y="307.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="60.4" y="318.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (5 samples, 0.05%)</title><rect x="57.4" y="291.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="60.4" y="302.0"></text>
</g>
<g>
<title>tcp_v4_rcv (4 samples, 0.04%)</title><rect x="57.5" y="275.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="60.5" y="286.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (3 samples, 0.03%)</title><rect x="57.6" y="259.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="60.6" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.03%)</title><rect x="57.6" y="243.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="60.6" y="254.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (8 samples, 0.08%)</title><rect x="58.6" y="515.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="61.6" y="526.0"></text>
</g>
<g>
<title>__skb_datagram_iter (8 samples, 0.08%)</title><rect x="58.6" y="499.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="61.6" y="510.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.03%)</title><rect x="58.6" y="483.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="61.6" y="494.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.03%)</title><rect x="58.6" y="467.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="61.6" y="478.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (3 samples, 0.03%)</title><rect x="58.6" y="451.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="61.6" y="462.0"></text>
</g>
<g>
<title>simple_copy_to_iter (5 samples, 0.05%)</title><rect x="59.0" y="483.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="62.0" y="494.0"></text>
</g>
<g>
<title>__check_object_size (5 samples, 0.05%)</title><rect x="59.0" y="467.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="62.0" y="478.0"></text>
</g>
<g>
<title>__check_heap_object (3 samples, 0.03%)</title><rect x="59.1" y="451.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="62.1" y="462.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.03%)</title><rect x="59.6" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="62.6" y="526.0"></text>
</g>
<g>
<title>sock_recvmsg (3 samples, 0.03%)</title><rect x="60.2" y="547.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="63.2" y="558.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 0.03%)</title><rect x="60.2" y="531.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="63.2" y="542.0"></text>
</g>
<g>
<title>sock_has_perm (3 samples, 0.03%)</title><rect x="60.2" y="515.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="63.2" y="526.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.04%)</title><rect x="60.6" y="547.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="63.6" y="558.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="60.6" y="531.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="63.6" y="542.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.03%)</title><rect x="60.7" y="515.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="63.7" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25372] (204 samples, 2.14%)</title><rect x="61.3" y="723.0" width="25.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="64.3" y="734.0">[..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="61.6" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="64.6" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="61.6" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.6" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="61.6" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="64.6" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="61.6" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="64.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.04%)</title><rect x="62.0" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="65.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.03%)</title><rect x="62.1" y="691.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="65.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.03%)</title><rect x="62.1" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="65.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="62.1" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="65.1" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="62.1" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="65.1" y="654.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (190 samples, 2.00%)</title><rect x="63.1" y="707.0" width="23.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.1" y="718.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (75 samples, 0.79%)</title><rect x="63.3" y="691.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.3" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (3 samples, 0.03%)</title><rect x="63.5" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.5" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.03%)</title><rect x="63.5" y="659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.5" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (71 samples, 0.75%)</title><rect x="63.8" y="675.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.8" y="686.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (68 samples, 0.71%)</title><rect x="63.8" y="659.0" width="8.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="66.8" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (58 samples, 0.61%)</title><rect x="65.1" y="643.0" width="7.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="68.1" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (58 samples, 0.61%)</title><rect x="65.1" y="627.0" width="7.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="68.1" y="638.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (53 samples, 0.56%)</title><rect x="65.7" y="611.0" width="6.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="68.7" y="622.0"></text>
</g>
<g>
<title>do_epoll_wait (53 samples, 0.56%)</title><rect x="65.7" y="595.0" width="6.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="68.7" y="606.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="65.9" y="579.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="68.9" y="590.0"></text>
</g>
<g>
<title>ep_poll (45 samples, 0.47%)</title><rect x="66.3" y="579.0" width="5.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="69.3" y="590.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (31 samples, 0.33%)</title><rect x="67.2" y="563.0" width="3.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="70.2" y="574.0"></text>
</g>
<g>
<title>ep_send_events_proc (21 samples, 0.22%)</title><rect x="67.8" y="547.0" width="2.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="70.8" y="558.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (14 samples, 0.15%)</title><rect x="68.7" y="531.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="71.7" y="542.0"></text>
</g>
<g>
<title>sock_poll (12 samples, 0.13%)</title><rect x="68.9" y="515.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="71.9" y="526.0"></text>
</g>
<g>
<title>tcp_poll (6 samples, 0.06%)</title><rect x="69.7" y="499.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="72.7" y="510.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.03%)</title><rect x="70.0" y="483.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="73.0" y="494.0"></text>
</g>
<g>
<title>mutex_lock (5 samples, 0.05%)</title><rect x="70.4" y="547.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="73.4" y="558.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (7 samples, 0.07%)</title><rect x="71.0" y="563.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="74.0" y="574.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.05%)</title><rect x="71.3" y="547.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="74.3" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.05%)</title><rect x="71.3" y="531.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="74.3" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.04%)</title><rect x="71.4" y="515.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="74.4" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (113 samples, 1.19%)</title><rect x="72.6" y="691.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.6" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (113 samples, 1.19%)</title><rect x="72.6" y="675.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (46 samples, 0.48%)</title><rect x="72.8" y="659.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (23 samples, 0.24%)</title><rect x="73.7" y="643.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (21 samples, 0.22%)</title><rect x="74.0" y="627.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.0" y="638.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (19 samples, 0.20%)</title><rect x="74.0" y="611.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.04%)</title><rect x="74.0" y="595.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.entity (15 samples, 0.16%)</title><rect x="74.5" y="595.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.03%)</title><rect x="74.5" y="579.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.03%)</title><rect x="74.5" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.executeAsync (12 samples, 0.13%)</title><rect x="74.9" y="579.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.12%)</title><rect x="75.0" y="563.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (9 samples, 0.09%)</title><rect x="75.1" y="547.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (3 samples, 0.03%)</title><rect x="75.1" y="531.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.03%)</title><rect x="75.1" y="515.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.03%)</title><rect x="75.1" y="499.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.03%)</title><rect x="75.1" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.03%)</title><rect x="75.1" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.03%)</title><rect x="75.1" y="451.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.1" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.03%)</title><rect x="75.1" y="435.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="78.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.06%)</title><rect x="75.5" y="531.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.06%)</title><rect x="75.5" y="515.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.06%)</title><rect x="75.5" y="499.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.06%)</title><rect x="75.5" y="483.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.5" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.14%)</title><rect x="76.6" y="643.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.6" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.07%)</title><rect x="77.0" y="627.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="77.0" y="611.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="77.0" y="595.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.0" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.07%)</title><rect x="77.0" y="579.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.0" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.03%)</title><rect x="77.8" y="627.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (66 samples, 0.69%)</title><rect x="78.5" y="659.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.5" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (66 samples, 0.69%)</title><rect x="78.5" y="643.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="78.6" y="627.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="81.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="78.6" y="611.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="81.6" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.03%)</title><rect x="78.6" y="595.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="81.6" y="606.0"></text>
</g>
<g>
<title>__libc_recv (60 samples, 0.63%)</title><rect x="79.2" y="627.0" width="7.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="82.2" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (49 samples, 0.51%)</title><rect x="80.6" y="611.0" width="6.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="83.6" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (49 samples, 0.51%)</title><rect x="80.6" y="595.0" width="6.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="83.6" y="606.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (45 samples, 0.47%)</title><rect x="81.1" y="579.0" width="5.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="84.1" y="590.0"></text>
</g>
<g>
<title>__sys_recvfrom (44 samples, 0.46%)</title><rect x="81.2" y="563.0" width="5.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="84.2" y="574.0"></text>
</g>
<g>
<title>inet_recvmsg (40 samples, 0.42%)</title><rect x="81.2" y="547.0" width="4.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="84.2" y="558.0"></text>
</g>
<g>
<title>tcp_recvmsg (40 samples, 0.42%)</title><rect x="81.2" y="531.0" width="4.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="84.2" y="542.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.05%)</title><rect x="81.9" y="515.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="84.9" y="526.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.04%)</title><rect x="81.9" y="499.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="84.9" y="510.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.04%)</title><rect x="81.9" y="483.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="84.9" y="494.0"></text>
</g>
<g>
<title>dst_release (3 samples, 0.03%)</title><rect x="81.9" y="467.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="84.9" y="478.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (16 samples, 0.17%)</title><rect x="82.5" y="515.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="85.5" y="526.0"></text>
</g>
<g>
<title>__ip_queue_xmit (15 samples, 0.16%)</title><rect x="82.7" y="499.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="85.7" y="510.0"></text>
</g>
<g>
<title>ip_local_out (3 samples, 0.03%)</title><rect x="82.8" y="483.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="85.8" y="494.0"></text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.03%)</title><rect x="82.8" y="467.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="85.8" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (3 samples, 0.03%)</title><rect x="82.8" y="451.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="85.8" y="462.0"></text>
</g>
<g>
<title>ip_output (11 samples, 0.12%)</title><rect x="83.2" y="483.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="86.2" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (8 samples, 0.08%)</title><rect x="83.2" y="467.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="86.2" y="478.0"></text>
</g>
<g>
<title>__dev_queue_xmit (3 samples, 0.03%)</title><rect x="83.3" y="451.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="86.3" y="462.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.03%)</title><rect x="83.3" y="435.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="86.3" y="446.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.03%)</title><rect x="83.3" y="419.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="86.3" y="430.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 0.04%)</title><rect x="83.7" y="451.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="86.7" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (4 samples, 0.04%)</title><rect x="83.7" y="435.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="86.7" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (4 samples, 0.04%)</title><rect x="83.7" y="419.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="86.7" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (4 samples, 0.04%)</title><rect x="83.7" y="403.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="86.7" y="414.0"></text>
</g>
<g>
<title>net_rx_action (4 samples, 0.04%)</title><rect x="83.7" y="387.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="86.7" y="398.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.04%)</title><rect x="83.7" y="371.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="86.7" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (3 samples, 0.03%)</title><rect x="83.8" y="355.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="86.8" y="366.0"></text>
</g>
<g>
<title>ip_rcv (3 samples, 0.03%)</title><rect x="83.8" y="339.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="86.8" y="350.0"></text>
</g>
<g>
<title>nf_hook_slow (3 samples, 0.03%)</title><rect x="84.2" y="467.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="87.2" y="478.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (8 samples, 0.08%)</title><rect x="84.9" y="515.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="87.9" y="526.0"></text>
</g>
<g>
<title>__skb_datagram_iter (8 samples, 0.08%)</title><rect x="84.9" y="499.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="87.9" y="510.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.05%)</title><rect x="84.9" y="483.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="87.9" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.03%)</title><rect x="85.5" y="483.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="88.5" y="494.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.03%)</title><rect x="85.5" y="467.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="88.5" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25373] (214 samples, 2.25%)</title><rect x="86.6" y="723.0" width="26.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="89.6" y="734.0">[..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.05%)</title><rect x="86.9" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="89.9" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.05%)</title><rect x="86.9" y="691.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="89.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.05%)</title><rect x="86.9" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="89.9" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.05%)</title><rect x="86.9" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="89.9" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.04%)</title><rect x="87.0" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="90.0" y="654.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.04%)</title><rect x="87.8" y="707.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="90.8" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="87.8" y="691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="90.8" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.03%)</title><rect x="87.8" y="675.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="90.8" y="686.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (199 samples, 2.09%)</title><rect x="88.5" y="707.0" width="24.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.5" y="718.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (66 samples, 0.69%)</title><rect x="89.0" y="691.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.0" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (65 samples, 0.68%)</title><rect x="89.1" y="675.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.1" y="686.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (60 samples, 0.63%)</title><rect x="89.2" y="659.0" width="7.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="92.2" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (52 samples, 0.55%)</title><rect x="90.2" y="643.0" width="6.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="93.2" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (52 samples, 0.55%)</title><rect x="90.2" y="627.0" width="6.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="93.2" y="638.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (49 samples, 0.51%)</title><rect x="90.6" y="611.0" width="6.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="93.6" y="622.0"></text>
</g>
<g>
<title>do_epoll_wait (49 samples, 0.51%)</title><rect x="90.6" y="595.0" width="6.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="93.6" y="606.0"></text>
</g>
<g>
<title>ep_poll (49 samples, 0.51%)</title><rect x="90.6" y="579.0" width="6.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="93.6" y="590.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (35 samples, 0.37%)</title><rect x="91.6" y="563.0" width="4.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="94.6" y="574.0"></text>
</g>
<g>
<title>ep_send_events_proc (20 samples, 0.21%)</title><rect x="92.8" y="547.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="95.8" y="558.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (17 samples, 0.18%)</title><rect x="93.2" y="531.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="96.2" y="542.0"></text>
</g>
<g>
<title>sock_poll (13 samples, 0.14%)</title><rect x="93.7" y="515.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="96.7" y="526.0"></text>
</g>
<g>
<title>tcp_poll (5 samples, 0.05%)</title><rect x="94.7" y="499.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="97.7" y="510.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.03%)</title><rect x="95.0" y="483.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="98.0" y="494.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.03%)</title><rect x="95.3" y="547.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="98.3" y="558.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (6 samples, 0.06%)</title><rect x="95.9" y="563.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="98.9" y="574.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.04%)</title><rect x="96.2" y="547.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="99.2" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.04%)</title><rect x="96.2" y="531.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="99.2" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="96.3" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="99.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (129 samples, 1.36%)</title><rect x="97.2" y="691.0" width="16.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.2" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (129 samples, 1.36%)</title><rect x="97.2" y="675.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.2" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (51 samples, 0.54%)</title><rect x="97.3" y="659.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (29 samples, 0.30%)</title><rect x="98.2" y="643.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.2" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (27 samples, 0.28%)</title><rect x="98.4" y="627.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.4" y="638.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (23 samples, 0.24%)</title><rect x="98.4" y="611.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.4" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.06%)</title><rect x="98.4" y="595.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.entity (17 samples, 0.18%)</title><rect x="99.2" y="595.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.executeAsync (16 samples, 0.17%)</title><rect x="99.3" y="579.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 0.17%)</title><rect x="99.3" y="563.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 0.17%)</title><rect x="99.3" y="547.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 0.12%)</title><rect x="99.3" y="531.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.12%)</title><rect x="99.3" y="515.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.12%)</title><rect x="99.3" y="499.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.12%)</title><rect x="99.3" y="483.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.12%)</title><rect x="99.3" y="467.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.11%)</title><rect x="99.4" y="451.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.4" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 0.09%)</title><rect x="99.5" y="435.0" width="1.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="102.5" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.08%)</title><rect x="99.7" y="419.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="102.7" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (8 samples, 0.08%)</title><rect x="99.7" y="403.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="102.7" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 0.08%)</title><rect x="99.7" y="387.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="102.7" y="398.0"></text>
</g>
<g>
<title>do_futex (8 samples, 0.08%)</title><rect x="99.7" y="371.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="102.7" y="382.0"></text>
</g>
<g>
<title>futex_wake (8 samples, 0.08%)</title><rect x="99.7" y="355.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="102.7" y="366.0"></text>
</g>
<g>
<title>wake_up_q (8 samples, 0.08%)</title><rect x="99.7" y="339.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="102.7" y="350.0"></text>
</g>
<g>
<title>try_to_wake_up (8 samples, 0.08%)</title><rect x="99.7" y="323.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="102.7" y="334.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (8 samples, 0.08%)</title><rect x="99.7" y="307.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="102.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.05%)</title><rect x="100.7" y="531.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.05%)</title><rect x="100.7" y="515.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.05%)</title><rect x="100.7" y="499.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.05%)</title><rect x="100.7" y="483.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.04%)</title><rect x="101.3" y="611.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="104.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="101.3" y="595.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="104.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.11%)</title><rect x="101.8" y="643.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.07%)</title><rect x="101.9" y="627.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="101.9" y="611.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="101.9" y="595.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.07%)</title><rect x="101.9" y="579.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.05%)</title><rect x="103.0" y="643.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.0" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (77 samples, 0.81%)</title><rect x="103.6" y="659.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.6" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (77 samples, 0.81%)</title><rect x="103.6" y="643.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.11%)</title><rect x="103.6" y="627.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="106.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.11%)</title><rect x="103.6" y="611.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="106.6" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.05%)</title><rect x="103.6" y="595.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="106.6" y="606.0"></text>
</g>
<g>
<title>__libc_recv (3 samples, 0.03%)</title><rect x="104.3" y="595.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="107.3" y="606.0"></text>
</g>
<g>
<title>__libc_recv (67 samples, 0.70%)</title><rect x="104.9" y="627.0" width="8.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="107.9" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (59 samples, 0.62%)</title><rect x="105.9" y="611.0" width="7.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="108.9" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (59 samples, 0.62%)</title><rect x="105.9" y="595.0" width="7.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="108.9" y="606.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (57 samples, 0.60%)</title><rect x="106.1" y="579.0" width="7.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="109.1" y="590.0"></text>
</g>
<g>
<title>__sys_recvfrom (57 samples, 0.60%)</title><rect x="106.1" y="563.0" width="7.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="109.1" y="574.0"></text>
</g>
<g>
<title>inet_recvmsg (41 samples, 0.43%)</title><rect x="106.6" y="547.0" width="5.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="109.6" y="558.0"></text>
</g>
<g>
<title>tcp_recvmsg (41 samples, 0.43%)</title><rect x="106.6" y="531.0" width="5.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="109.6" y="542.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.05%)</title><rect x="107.1" y="515.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="110.1" y="526.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.04%)</title><rect x="107.1" y="499.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="110.1" y="510.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.04%)</title><rect x="107.1" y="483.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="110.1" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (15 samples, 0.16%)</title><rect x="107.7" y="515.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="110.7" y="526.0"></text>
</g>
<g>
<title>__ip_queue_xmit (12 samples, 0.13%)</title><rect x="108.0" y="499.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="111.0" y="510.0"></text>
</g>
<g>
<title>ip_local_out (5 samples, 0.05%)</title><rect x="108.0" y="483.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="111.0" y="494.0"></text>
</g>
<g>
<title>__ip_local_out (5 samples, 0.05%)</title><rect x="108.0" y="467.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="111.0" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (5 samples, 0.05%)</title><rect x="108.0" y="451.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="111.0" y="462.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (4 samples, 0.04%)</title><rect x="108.0" y="435.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="111.0" y="446.0"></text>
</g>
<g>
<title>ip_output (7 samples, 0.07%)</title><rect x="108.6" y="483.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="111.6" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (6 samples, 0.06%)</title><rect x="108.6" y="467.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="111.6" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (5 samples, 0.05%)</title><rect x="108.7" y="451.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="111.7" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (5 samples, 0.05%)</title><rect x="108.7" y="435.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="111.7" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (5 samples, 0.05%)</title><rect x="108.7" y="419.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="111.7" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (5 samples, 0.05%)</title><rect x="108.7" y="403.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="111.7" y="414.0"></text>
</g>
<g>
<title>net_rx_action (5 samples, 0.05%)</title><rect x="108.7" y="387.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="111.7" y="398.0"></text>
</g>
<g>
<title>process_backlog (5 samples, 0.05%)</title><rect x="108.7" y="371.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="111.7" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (5 samples, 0.05%)</title><rect x="108.7" y="355.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="111.7" y="366.0"></text>
</g>
<g>
<title>ip_rcv (5 samples, 0.05%)</title><rect x="108.7" y="339.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="111.7" y="350.0"></text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.03%)</title><rect x="108.7" y="323.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="111.7" y="334.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.04%)</title><rect x="109.6" y="515.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="112.6" y="526.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.03%)</title><rect x="109.7" y="499.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="112.7" y="510.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (8 samples, 0.08%)</title><rect x="110.6" y="515.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="113.6" y="526.0"></text>
</g>
<g>
<title>__skb_datagram_iter (7 samples, 0.07%)</title><rect x="110.7" y="499.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="113.7" y="510.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.05%)</title><rect x="110.8" y="483.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="113.8" y="494.0"></text>
</g>
<g>
<title>copyout (5 samples, 0.05%)</title><rect x="110.8" y="467.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="113.8" y="478.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.05%)</title><rect x="110.8" y="451.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="113.8" y="462.0"></text>
</g>
<g>
<title>sock_recvmsg (6 samples, 0.06%)</title><rect x="111.7" y="547.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="114.7" y="558.0"></text>
</g>
<g>
<title>security_socket_recvmsg (6 samples, 0.06%)</title><rect x="111.7" y="531.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="114.7" y="542.0"></text>
</g>
<g>
<title>sock_has_perm (5 samples, 0.05%)</title><rect x="111.8" y="515.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="114.8" y="526.0"></text>
</g>
<g>
<title>avc_has_perm (3 samples, 0.03%)</title><rect x="112.1" y="499.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="115.1" y="510.0"></text>
</g>
<g>
<title>sockfd_lookup_light (6 samples, 0.06%)</title><rect x="112.4" y="547.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="115.4" y="558.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.05%)</title><rect x="112.6" y="531.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="115.6" y="542.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.05%)</title><rect x="112.6" y="515.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="115.6" y="526.0"></text>
</g>
<g>
<title>[tid=25354] (62 samples, 0.65%)</title><rect x="113.2" y="723.0" width="7.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="116.2" y="734.0"></text>
</g>
<g>
<title>start_thread (62 samples, 0.65%)</title><rect x="113.2" y="707.0" width="7.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="116.2" y="718.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (62 samples, 0.65%)</title><rect x="113.2" y="691.0" width="7.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="116.2" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (62 samples, 0.65%)</title><rect x="113.2" y="675.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="116.2" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (59 samples, 0.62%)</title><rect x="113.3" y="659.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="116.3" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (51 samples, 0.54%)</title><rect x="113.3" y="643.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="116.3" y="654.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (6 samples, 0.06%)</title><rect x="113.8" y="627.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="116.8" y="638.0"></text>
</g>
<g>
<title>SpinPause (41 samples, 0.43%)</title><rect x="114.5" y="627.0" width="5.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="117.5" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.05%)</title><rect x="120.0" y="643.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="123.0" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.05%)</title><rect x="120.0" y="627.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="123.0" y="638.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (4 samples, 0.04%)</title><rect x="120.1" y="611.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="123.1" y="622.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (4 samples, 0.04%)</title><rect x="120.1" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="123.1" y="606.0"></text>
</g>
<g>
<title>[tid=25359] (78 samples, 0.82%)</title><rect x="121.0" y="723.0" width="9.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="124.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="121.0" y="707.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="124.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="121.0" y="691.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="124.0" y="702.0"></text>
</g>
<g>
<title>start_thread (73 samples, 0.77%)</title><rect x="121.6" y="707.0" width="9.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="124.6" y="718.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (73 samples, 0.77%)</title><rect x="121.6" y="691.0" width="9.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="124.6" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (73 samples, 0.77%)</title><rect x="121.6" y="675.0" width="9.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="124.6" y="686.0"></text>
</g>
<g>
<title>VMThread::loop() (73 samples, 0.77%)</title><rect x="121.6" y="659.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="124.6" y="670.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (22 samples, 0.23%)</title><rect x="121.7" y="643.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.7" y="654.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (3 samples, 0.03%)</title><rect x="123.7" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="126.7" y="638.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (3 samples, 0.03%)</title><rect x="124.1" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="127.1" y="638.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.04%)</title><rect x="124.5" y="643.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="127.5" y="654.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (10 samples, 0.11%)</title><rect x="125.0" y="643.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="128.0" y="654.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (10 samples, 0.11%)</title><rect x="125.0" y="627.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="128.0" y="638.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (10 samples, 0.11%)</title><rect x="125.0" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="128.0" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (10 samples, 0.11%)</title><rect x="125.0" y="595.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="128.0" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (3 samples, 0.03%)</title><rect x="125.2" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="128.2" y="590.0"></text>
</g>
<g>
<title>__GI_sched_yield (36 samples, 0.38%)</title><rect x="126.2" y="643.0" width="4.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="129.2" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 0.15%)</title><rect x="128.9" y="627.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="131.9" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (14 samples, 0.15%)</title><rect x="128.9" y="611.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="131.9" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (10 samples, 0.11%)</title><rect x="129.4" y="595.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="132.4" y="606.0"></text>
</g>
<g>
<title>schedule (10 samples, 0.11%)</title><rect x="129.4" y="579.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="132.4" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (10 samples, 0.11%)</title><rect x="129.4" y="563.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="132.4" y="574.0"></text>
</g>
<g>
<title>[tid=25363] (49 samples, 0.51%)</title><rect x="130.7" y="723.0" width="6.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="133.7" y="734.0"></text>
</g>
<g>
<title>start_thread (47 samples, 0.49%)</title><rect x="130.9" y="707.0" width="5.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="133.9" y="718.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (47 samples, 0.49%)</title><rect x="130.9" y="691.0" width="5.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="133.9" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (47 samples, 0.49%)</title><rect x="130.9" y="675.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="133.9" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (47 samples, 0.49%)</title><rect x="130.9" y="659.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="133.9" y="670.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (47 samples, 0.49%)</title><rect x="130.9" y="643.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="133.9" y="654.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (47 samples, 0.49%)</title><rect x="130.9" y="627.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="133.9" y="638.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (47 samples, 0.49%)</title><rect x="130.9" y="611.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="133.9" y="622.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (47 samples, 0.49%)</title><rect x="130.9" y="595.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="133.9" y="606.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 0.33%)</title><rect x="130.9" y="579.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="133.9" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.03%)</title><rect x="131.3" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="134.3" y="574.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.03%)</title><rect x="131.3" y="547.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="134.3" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.04%)</title><rect x="131.8" y="563.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="134.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.04%)</title><rect x="131.8" y="547.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="134.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 0.21%)</title><rect x="132.3" y="563.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="135.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.03%)</title><rect x="132.8" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="135.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.03%)</title><rect x="133.3" y="547.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="136.3" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.03%)</title><rect x="133.8" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="136.8" y="558.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 0.11%)</title><rect x="134.8" y="579.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="137.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (6 samples, 0.06%)</title><rect x="135.0" y="563.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="138.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="136.1" y="579.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="139.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="136.1" y="563.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="139.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="136.1" y="547.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="139.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="136.1" y="531.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="139.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="136.1" y="515.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="139.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="136.1" y="499.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="139.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="136.2" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="139.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="136.2" y="467.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="139.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="136.2" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="139.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="136.2" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="139.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="136.2" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="139.2" y="430.0"></text>
</g>
<g>
<title>[tid=25367] (3 samples, 0.03%)</title><rect x="137.0" y="723.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="140.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="137.0" y="707.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="140.0" y="718.0"></text>
</g>
<g>
<title>[tid=25388] (68 samples, 0.71%)</title><rect x="137.4" y="723.0" width="8.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="140.4" y="734.0"></text>
</g>
<g>
<title>start_thread (65 samples, 0.68%)</title><rect x="137.7" y="707.0" width="8.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="140.7" y="718.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (65 samples, 0.68%)</title><rect x="137.7" y="691.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="140.7" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (65 samples, 0.68%)</title><rect x="137.7" y="675.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="140.7" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (61 samples, 0.64%)</title><rect x="138.0" y="659.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="141.0" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (47 samples, 0.49%)</title><rect x="138.0" y="643.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="141.0" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 0.06%)</title><rect x="138.4" y="627.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="141.4" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.03%)</title><rect x="138.7" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="141.7" y="622.0"></text>
</g>
<g>
<title>SpinPause (36 samples, 0.38%)</title><rect x="139.3" y="627.0" width="4.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="142.3" y="638.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (10 samples, 0.11%)</title><rect x="143.8" y="643.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="146.8" y="654.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (10 samples, 0.11%)</title><rect x="143.8" y="627.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="146.8" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (10 samples, 0.11%)</title><rect x="143.8" y="611.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="146.8" y="622.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (10 samples, 0.11%)</title><rect x="143.8" y="595.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="146.8" y="606.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (10 samples, 0.11%)</title><rect x="143.8" y="579.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="146.8" y="590.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.03%)</title><rect x="143.8" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="146.8" y="574.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (7 samples, 0.07%)</title><rect x="144.2" y="563.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="147.2" y="574.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (5 samples, 0.05%)</title><rect x="144.2" y="547.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="147.2" y="558.0"></text>
</g>
<g>
<title>[tid=25389] (63 samples, 0.66%)</title><rect x="145.8" y="723.0" width="7.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="148.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="145.8" y="707.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="148.8" y="718.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (4 samples, 0.04%)</title><rect x="145.8" y="691.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="148.8" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="145.8" y="675.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="148.8" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="145.8" y="659.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="148.8" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.03%)</title><rect x="145.9" y="643.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="148.9" y="654.0"></text>
</g>
<g>
<title>start_thread (58 samples, 0.61%)</title><rect x="146.4" y="707.0" width="7.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="149.4" y="718.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (58 samples, 0.61%)</title><rect x="146.4" y="691.0" width="7.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="149.4" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (58 samples, 0.61%)</title><rect x="146.4" y="675.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="149.4" y="686.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="146.4" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="149.4" y="670.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (54 samples, 0.57%)</title><rect x="146.8" y="659.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="149.8" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (40 samples, 0.42%)</title><rect x="146.8" y="643.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="149.8" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.05%)</title><rect x="147.2" y="627.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="150.2" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.03%)</title><rect x="147.3" y="611.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="150.3" y="622.0"></text>
</g>
<g>
<title>SpinPause (31 samples, 0.33%)</title><rect x="147.9" y="627.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="150.9" y="638.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (5 samples, 0.05%)</title><rect x="151.7" y="643.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="154.7" y="654.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.05%)</title><rect x="151.7" y="627.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="154.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (5 samples, 0.05%)</title><rect x="151.7" y="611.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="154.7" y="622.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (5 samples, 0.05%)</title><rect x="151.7" y="595.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="154.7" y="606.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.05%)</title><rect x="151.7" y="579.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="154.7" y="590.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (4 samples, 0.04%)</title><rect x="151.9" y="563.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="154.9" y="574.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.03%)</title><rect x="151.9" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="154.9" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (7 samples, 0.07%)</title><rect x="152.5" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="155.5" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.05%)</title><rect x="152.5" y="627.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="155.5" y="638.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (5 samples, 0.05%)</title><rect x="152.5" y="611.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="155.5" y="622.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (5 samples, 0.05%)</title><rect x="152.5" y="595.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="155.5" y="606.0"></text>
</g>
<g>
<title>[tid=25390] (63 samples, 0.66%)</title><rect x="153.6" y="723.0" width="7.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="156.6" y="734.0"></text>
</g>
<g>
<title>start_thread (61 samples, 0.64%)</title><rect x="153.9" y="707.0" width="7.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="156.9" y="718.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (61 samples, 0.64%)</title><rect x="153.9" y="691.0" width="7.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="156.9" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (61 samples, 0.64%)</title><rect x="153.9" y="675.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="156.9" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (58 samples, 0.61%)</title><rect x="154.1" y="659.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="157.1" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (41 samples, 0.43%)</title><rect x="154.1" y="643.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="157.1" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.05%)</title><rect x="154.1" y="627.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="157.1" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.04%)</title><rect x="154.2" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="157.2" y="622.0"></text>
</g>
<g>
<title>SpinPause (34 samples, 0.36%)</title><rect x="155.0" y="627.0" width="4.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="158.0" y="638.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (7 samples, 0.07%)</title><rect x="159.2" y="643.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="162.2" y="654.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.07%)</title><rect x="159.2" y="627.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="162.2" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (7 samples, 0.07%)</title><rect x="159.2" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="162.2" y="622.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (7 samples, 0.07%)</title><rect x="159.2" y="595.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="162.2" y="606.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.07%)</title><rect x="159.2" y="579.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="162.2" y="590.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (5 samples, 0.05%)</title><rect x="159.4" y="563.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="162.4" y="574.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (5 samples, 0.05%)</title><rect x="159.4" y="547.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="162.4" y="558.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.04%)</title><rect x="160.1" y="643.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="163.1" y="654.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.04%)</title><rect x="160.1" y="627.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="163.1" y="638.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="160.2" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="163.2" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.06%)</title><rect x="160.6" y="643.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="163.6" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.05%)</title><rect x="160.7" y="627.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="163.7" y="638.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (5 samples, 0.05%)</title><rect x="160.7" y="611.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="163.7" y="622.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (4 samples, 0.04%)</title><rect x="160.8" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="163.8" y="606.0"></text>
</g>
<g>
<title>[worker-0 tid=25395] (1,646 samples, 17.30%)</title><rect x="161.4" y="723.0" width="204.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="164.4" y="734.0">[worker-0 tid=25395]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (10 samples, 0.11%)</title><rect x="161.7" y="707.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="164.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (9 samples, 0.09%)</title><rect x="161.8" y="691.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="164.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (7 samples, 0.07%)</title><rect x="162.0" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="165.0" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.07%)</title><rect x="162.0" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="165.0" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.05%)</title><rect x="162.2" y="643.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="165.2" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="162.3" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="165.3" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.03%)</title><rect x="162.3" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="165.3" y="622.0"></text>
</g>
<g>
<title>[unknown_Java] (31 samples, 0.33%)</title><rect x="163.0" y="707.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="166.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,602 samples, 16.84%)</title><rect x="166.9" y="707.0" width="198.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="169.9" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,602 samples, 16.84%)</title><rect x="166.9" y="691.0" width="198.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.9" y="702.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,602 samples, 16.84%)</title><rect x="166.9" y="675.0" width="198.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="169.9" y="686.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (21 samples, 0.22%)</title><rect x="166.9" y="659.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (20 samples, 0.21%)</title><rect x="166.9" y="643.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 0.12%)</title><rect x="167.1" y="627.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 0.11%)</title><rect x="167.3" y="611.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 0.11%)</title><rect x="167.3" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.3" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (5 samples, 0.05%)</title><rect x="167.3" y="579.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="170.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="167.9" y="579.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="170.9" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.05%)</title><rect x="167.9" y="563.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="170.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.05%)</title><rect x="168.7" y="627.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.05%)</title><rect x="168.7" y="611.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.05%)</title><rect x="168.7" y="595.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.05%)</title><rect x="168.7" y="579.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.03%)</title><rect x="169.0" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.0" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.03%)</title><rect x="169.0" y="547.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="172.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$65/1115085888.run (1,581 samples, 16.62%)</title><rect x="169.5" y="659.0" width="196.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="172.5" y="670.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$executeAsync$3 (1,581 samples, 16.62%)</title><rect x="169.5" y="643.0" width="196.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.5" y="654.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (240 samples, 2.52%)</title><rect x="169.5" y="627.0" width="29.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.5" y="638.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (238 samples, 2.50%)</title><rect x="169.7" y="611.0" width="29.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.7" y="622.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.03%)</title><rect x="169.7" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.7" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (235 samples, 2.47%)</title><rect x="170.1" y="595.0" width="29.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.1" y="606.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (235 samples, 2.47%)</title><rect x="170.1" y="579.0" width="29.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.1" y="590.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (235 samples, 2.47%)</title><rect x="170.1" y="563.0" width="29.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.1" y="574.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (234 samples, 2.46%)</title><rect x="170.2" y="547.0" width="29.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="173.2" y="558.0">on..</text>
</g>
<g>
<title>.annobin_send.c (224 samples, 2.35%)</title><rect x="170.5" y="531.0" width="27.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="173.5" y="542.0">...</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (211 samples, 2.22%)</title><rect x="172.1" y="515.0" width="26.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="175.1" y="526.0">e..</text>
</g>
<g>
<title>do_syscall_64 (211 samples, 2.22%)</title><rect x="172.1" y="499.0" width="26.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="175.1" y="510.0">d..</text>
</g>
<g>
<title>__x64_sys_sendto (206 samples, 2.17%)</title><rect x="172.7" y="483.0" width="25.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="175.7" y="494.0">_..</text>
</g>
<g>
<title>__sys_sendto (206 samples, 2.17%)</title><rect x="172.7" y="467.0" width="25.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="175.7" y="478.0">_..</text>
</g>
<g>
<title>sock_sendmsg (194 samples, 2.04%)</title><rect x="173.0" y="451.0" width="24.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="176.0" y="462.0">s..</text>
</g>
<g>
<title>tcp_sendmsg (191 samples, 2.01%)</title><rect x="173.3" y="435.0" width="23.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="176.3" y="446.0">t..</text>
</g>
<g>
<title>tcp_sendmsg_locked (190 samples, 2.00%)</title><rect x="173.5" y="419.0" width="23.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="176.5" y="430.0">t..</text>
</g>
<g>
<title>__tcp_push_pending_frames (176 samples, 1.85%)</title><rect x="173.8" y="403.0" width="21.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="176.8" y="414.0">_..</text>
</g>
<g>
<title>tcp_write_xmit (176 samples, 1.85%)</title><rect x="173.8" y="387.0" width="21.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="176.8" y="398.0">t..</text>
</g>
<g>
<title>__tcp_transmit_skb (167 samples, 1.76%)</title><rect x="174.1" y="371.0" width="20.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="177.1" y="382.0"></text>
</g>
<g>
<title>__ip_queue_xmit (164 samples, 1.72%)</title><rect x="174.2" y="355.0" width="20.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="177.2" y="366.0"></text>
</g>
<g>
<title>ip_local_out (39 samples, 0.41%)</title><rect x="174.4" y="339.0" width="4.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="177.4" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (39 samples, 0.41%)</title><rect x="174.4" y="323.0" width="4.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="177.4" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (39 samples, 0.41%)</title><rect x="174.4" y="307.0" width="4.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="177.4" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (10 samples, 0.11%)</title><rect x="174.4" y="291.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="177.4" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (5 samples, 0.05%)</title><rect x="175.8" y="291.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="178.8" y="302.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.03%)</title><rect x="176.4" y="291.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="179.4" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (15 samples, 0.16%)</title><rect x="177.2" y="291.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="180.2" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (10 samples, 0.11%)</title><rect x="177.3" y="275.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="180.3" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (3 samples, 0.03%)</title><rect x="178.7" y="275.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="181.7" y="286.0"></text>
</g>
<g>
<title>ip_output (123 samples, 1.29%)</title><rect x="179.3" y="339.0" width="15.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="182.3" y="350.0"></text>
</g>
<g>
<title>ip_finish_output2 (113 samples, 1.19%)</title><rect x="179.5" y="323.0" width="14.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="182.5" y="334.0"></text>
</g>
<g>
<title>__dev_queue_xmit (3 samples, 0.03%)</title><rect x="180.0" y="307.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="183.0" y="318.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (106 samples, 1.11%)</title><rect x="180.4" y="307.0" width="13.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="183.4" y="318.0"></text>
</g>
<g>
<title>do_softirq.part.0 (106 samples, 1.11%)</title><rect x="180.4" y="291.0" width="13.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="183.4" y="302.0"></text>
</g>
<g>
<title>do_softirq_own_stack (104 samples, 1.09%)</title><rect x="180.6" y="275.0" width="12.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="183.6" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (104 samples, 1.09%)</title><rect x="180.6" y="259.0" width="12.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="183.6" y="270.0"></text>
</g>
<g>
<title>net_rx_action (103 samples, 1.08%)</title><rect x="180.8" y="243.0" width="12.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="183.8" y="254.0"></text>
</g>
<g>
<title>process_backlog (102 samples, 1.07%)</title><rect x="180.9" y="227.0" width="12.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="183.9" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (100 samples, 1.05%)</title><rect x="181.1" y="211.0" width="12.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="184.1" y="222.0"></text>
</g>
<g>
<title>ip_rcv (98 samples, 1.03%)</title><rect x="181.4" y="195.0" width="12.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="184.4" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (76 samples, 0.80%)</title><rect x="181.5" y="179.0" width="9.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="184.5" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (61 samples, 0.64%)</title><rect x="181.5" y="163.0" width="7.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="184.5" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (61 samples, 0.64%)</title><rect x="181.5" y="147.0" width="7.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="184.5" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (58 samples, 0.61%)</title><rect x="181.9" y="131.0" width="7.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="184.9" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (50 samples, 0.53%)</title><rect x="182.8" y="115.0" width="6.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="185.8" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (50 samples, 0.53%)</title><rect x="182.8" y="99.0" width="6.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="185.8" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.03%)</title><rect x="183.0" y="83.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="186.0" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (6 samples, 0.06%)</title><rect x="183.4" y="83.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="186.4" y="94.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.04%)</title><rect x="183.6" y="67.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="186.6" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.04%)</title><rect x="183.6" y="51.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="186.6" y="62.0"></text>
</g>
<g>
<title>tcp_ack (17 samples, 0.18%)</title><rect x="184.1" y="83.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="187.1" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.05%)</title><rect x="185.0" y="67.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="188.0" y="78.0"></text>
</g>
<g>
<title>tcp_data_queue (18 samples, 0.19%)</title><rect x="186.3" y="83.0" width="2.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="189.3" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (15 samples, 0.16%)</title><rect x="186.5" y="67.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="189.5" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (14 samples, 0.15%)</title><rect x="186.6" y="51.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="189.6" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (14 samples, 0.15%)</title><rect x="186.6" y="35.0" width="1.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="189.6" y="46.0"></text>
</g>
<g>
<title>nf_hook_slow (15 samples, 0.16%)</title><rect x="189.1" y="163.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="192.1" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (12 samples, 0.13%)</title><rect x="189.2" y="147.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="192.2" y="158.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (3 samples, 0.03%)</title><rect x="190.3" y="131.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="193.3" y="142.0"></text>
</g>
<g>
<title>nf_hook_slow (20 samples, 0.21%)</title><rect x="191.1" y="179.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="194.1" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (11 samples, 0.12%)</title><rect x="191.6" y="163.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="194.6" y="174.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (3 samples, 0.03%)</title><rect x="192.9" y="163.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="195.9" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (8 samples, 0.08%)</title><rect x="193.5" y="323.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="196.5" y="334.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (4 samples, 0.04%)</title><rect x="194.9" y="371.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="197.9" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (8 samples, 0.08%)</title><rect x="195.8" y="403.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="198.8" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.08%)</title><rect x="195.8" y="387.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="198.8" y="398.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.03%)</title><rect x="196.4" y="371.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="199.4" y="382.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.11%)</title><rect x="197.0" y="451.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="200.0" y="462.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.11%)</title><rect x="197.0" y="435.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="200.0" y="446.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.08%)</title><rect x="197.3" y="419.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="200.3" y="430.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.06%)</title><rect x="198.4" y="531.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="201.4" y="542.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.06%)</title><rect x="198.4" y="515.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="201.4" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.06%)</title><rect x="198.4" y="499.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="201.4" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.03%)</title><rect x="198.8" y="483.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="201.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$81/1409716107.get (1,341 samples, 14.09%)</title><rect x="199.2" y="627.0" width="166.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.2" y="638.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$entity$0 (1,341 samples, 14.09%)</title><rect x="199.2" y="611.0" width="166.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.2" y="622.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.get (1,341 samples, 14.09%)</title><rect x="199.2" y="595.0" width="166.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.2" y="606.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,336 samples, 14.04%)</title><rect x="199.7" y="579.0" width="165.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.7" y="590.0">ru/mail/polis/dao/DAO..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (104 samples, 1.09%)</title><rect x="199.7" y="563.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (104 samples, 1.09%)</title><rect x="199.7" y="547.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (104 samples, 1.09%)</title><rect x="199.7" y="531.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (104 samples, 1.09%)</title><rect x="199.7" y="515.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (103 samples, 1.08%)</title><rect x="199.7" y="499.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (100 samples, 1.05%)</title><rect x="199.7" y="483.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.7" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (56 samples, 0.59%)</title><rect x="200.0" y="467.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (56 samples, 0.59%)</title><rect x="200.0" y="451.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.0" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (56 samples, 0.59%)</title><rect x="200.0" y="435.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (55 samples, 0.58%)</title><rect x="200.1" y="419.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.1" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (55 samples, 0.58%)</title><rect x="200.1" y="403.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (49 samples, 0.51%)</title><rect x="200.9" y="387.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (49 samples, 0.51%)</title><rect x="200.9" y="371.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (49 samples, 0.51%)</title><rect x="200.9" y="355.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (49 samples, 0.51%)</title><rect x="200.9" y="339.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (49 samples, 0.51%)</title><rect x="200.9" y="323.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (49 samples, 0.51%)</title><rect x="200.9" y="307.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.9" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (47 samples, 0.49%)</title><rect x="201.1" y="291.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (47 samples, 0.49%)</title><rect x="201.1" y="275.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (26 samples, 0.27%)</title><rect x="201.5" y="259.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (25 samples, 0.26%)</title><rect x="201.6" y="243.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.6" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (24 samples, 0.25%)</title><rect x="201.6" y="227.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.05%)</title><rect x="202.8" y="211.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.8" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.03%)</title><rect x="203.1" y="195.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.04%)</title><rect x="203.7" y="211.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.7" y="222.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="204.2" y="211.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="207.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (17 samples, 0.18%)</title><rect x="204.7" y="259.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (17 samples, 0.18%)</title><rect x="204.7" y="243.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.7" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.13%)</title><rect x="204.7" y="227.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.13%)</title><rect x="204.7" y="211.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.7" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (12 samples, 0.13%)</title><rect x="204.7" y="195.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="204.7" y="179.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.7" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="204.7" y="163.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="204.7" y="147.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="204.7" y="131.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.7" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="205.1" y="115.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.1" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="205.4" y="99.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="206.2" y="227.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (42 samples, 0.44%)</title><rect x="206.9" y="467.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.9" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (42 samples, 0.44%)</title><rect x="206.9" y="451.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.9" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (42 samples, 0.44%)</title><rect x="206.9" y="435.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.9" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (42 samples, 0.44%)</title><rect x="206.9" y="419.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.9" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (42 samples, 0.44%)</title><rect x="206.9" y="403.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.9" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (42 samples, 0.44%)</title><rect x="206.9" y="387.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.9" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (13 samples, 0.14%)</title><rect x="206.9" y="371.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (13 samples, 0.14%)</title><rect x="206.9" y="355.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (13 samples, 0.14%)</title><rect x="206.9" y="339.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (13 samples, 0.14%)</title><rect x="206.9" y="323.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (5 samples, 0.05%)</title><rect x="207.4" y="307.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="207.4" y="291.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="207.4" y="275.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="207.4" y="259.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="207.4" y="243.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="210.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="207.4" y="227.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="207.4" y="211.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="207.4" y="195.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.4" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="207.6" y="179.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (4 samples, 0.04%)</title><rect x="208.1" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.03%)</title><rect x="208.2" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.2" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="208.2" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="208.2" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.2" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="208.2" y="243.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="208.2" y="227.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="208.2" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.2" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="208.2" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (29 samples, 0.30%)</title><rect x="208.5" y="371.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (29 samples, 0.30%)</title><rect x="208.5" y="355.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (29 samples, 0.30%)</title><rect x="208.5" y="339.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (29 samples, 0.30%)</title><rect x="208.5" y="323.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.5" y="334.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="208.7" y="307.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="211.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (22 samples, 0.23%)</title><rect x="209.0" y="307.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (22 samples, 0.23%)</title><rect x="209.0" y="291.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.0" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (22 samples, 0.23%)</title><rect x="209.0" y="275.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.0" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (22 samples, 0.23%)</title><rect x="209.0" y="259.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="209.0" y="243.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="209.0" y="227.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.0" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.08%)</title><rect x="209.2" y="211.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.04%)</title><rect x="209.5" y="195.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (11 samples, 0.12%)</title><rect x="210.4" y="243.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (11 samples, 0.12%)</title><rect x="210.4" y="227.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.11%)</title><rect x="210.4" y="211.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.11%)</title><rect x="210.4" y="195.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.4" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.11%)</title><rect x="210.4" y="179.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.4" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="210.4" y="163.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.4" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="210.4" y="147.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="210.4" y="131.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="210.4" y="115.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.4" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="210.7" y="99.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.7" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="211.2" y="83.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (3 samples, 0.03%)</title><rect x="211.8" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="214.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (3 samples, 0.03%)</title><rect x="213.1" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,225 samples, 12.87%)</title><rect x="213.5" y="563.0" width="151.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.5" y="574.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,212 samples, 12.74%)</title><rect x="215.1" y="547.0" width="150.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.1" y="558.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (1,026 samples, 10.78%)</title><rect x="215.1" y="531.0" width="127.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.1" y="542.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.03%)</title><rect x="215.4" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (70 samples, 0.74%)</title><rect x="215.7" y="515.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (70 samples, 0.74%)</title><rect x="215.7" y="499.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (69 samples, 0.73%)</title><rect x="215.9" y="483.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (3 samples, 0.03%)</title><rect x="216.0" y="467.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (65 samples, 0.68%)</title><rect x="216.4" y="467.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (15 samples, 0.16%)</title><rect x="217.1" y="451.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (4 samples, 0.04%)</title><rect x="217.7" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.06%)</title><rect x="218.2" y="435.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.06%)</title><rect x="218.2" y="419.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.2" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.06%)</title><rect x="218.2" y="403.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.2" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.05%)</title><rect x="218.3" y="387.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (4 samples, 0.04%)</title><rect x="218.5" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (44 samples, 0.46%)</title><rect x="219.0" y="451.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (18 samples, 0.19%)</title><rect x="222.2" y="435.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (4 samples, 0.04%)</title><rect x="223.1" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.07%)</title><rect x="223.6" y="419.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.07%)</title><rect x="223.6" y="403.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.6" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.07%)</title><rect x="223.6" y="387.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.05%)</title><rect x="223.8" y="371.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.8" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.05%)</title><rect x="223.8" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (25 samples, 0.26%)</title><rect x="224.4" y="515.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (7 samples, 0.07%)</title><rect x="224.4" y="499.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (7 samples, 0.07%)</title><rect x="224.4" y="483.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (7 samples, 0.07%)</title><rect x="224.4" y="467.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.4" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.06%)</title><rect x="224.4" y="451.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.06%)</title><rect x="224.4" y="435.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (16 samples, 0.17%)</title><rect x="225.3" y="499.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (15 samples, 0.16%)</title><rect x="225.4" y="483.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (13 samples, 0.14%)</title><rect x="225.5" y="467.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (13 samples, 0.14%)</title><rect x="225.5" y="451.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (13 samples, 0.14%)</title><rect x="225.5" y="435.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (12 samples, 0.13%)</title><rect x="225.7" y="419.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (12 samples, 0.13%)</title><rect x="225.7" y="403.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (11 samples, 0.12%)</title><rect x="225.8" y="387.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.06%)</title><rect x="226.4" y="371.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (926 samples, 9.73%)</title><rect x="227.5" y="515.0" width="114.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.5" y="526.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (923 samples, 9.70%)</title><rect x="227.8" y="499.0" width="114.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.8" y="510.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (923 samples, 9.70%)</title><rect x="227.8" y="483.0" width="114.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.8" y="494.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (234 samples, 2.46%)</title><rect x="230.0" y="467.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.0" y="478.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (171 samples, 1.80%)</title><rect x="234.6" y="451.0" width="21.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.6" y="462.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (7 samples, 0.07%)</title><rect x="244.4" y="435.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (27 samples, 0.28%)</title><rect x="245.3" y="435.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.3" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.09%)</title><rect x="247.5" y="419.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.5" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (6 samples, 0.06%)</title><rect x="248.6" y="435.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.6" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (21 samples, 0.22%)</title><rect x="249.3" y="435.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.3" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.08%)</title><rect x="251.0" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (20 samples, 0.21%)</title><rect x="252.0" y="435.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.0" y="446.0"></text>
</g>
<g>
<title>vtable stub (11 samples, 0.12%)</title><rect x="254.4" y="435.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="257.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 0.14%)</title><rect x="255.8" y="451.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.8" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.05%)</title><rect x="256.8" y="435.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (6 samples, 0.06%)</title><rect x="257.4" y="451.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.4" y="462.0"></text>
</g>
<g>
<title>vtable stub (7 samples, 0.07%)</title><rect x="258.2" y="451.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="261.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (333 samples, 3.50%)</title><rect x="259.0" y="467.0" width="41.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.0" y="478.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (123 samples, 1.29%)</title><rect x="259.0" y="451.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (123 samples, 1.29%)</title><rect x="259.0" y="435.0" width="15.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.11%)</title><rect x="262.7" y="419.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.7" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (83 samples, 0.87%)</title><rect x="264.0" y="419.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (83 samples, 0.87%)</title><rect x="264.0" y="403.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.0" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (83 samples, 0.87%)</title><rect x="264.0" y="387.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (83 samples, 0.87%)</title><rect x="264.0" y="371.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (83 samples, 0.87%)</title><rect x="264.0" y="355.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (83 samples, 0.87%)</title><rect x="264.0" y="339.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (50 samples, 0.53%)</title><rect x="264.0" y="323.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.08%)</title><rect x="268.1" y="307.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.08%)</title><rect x="268.1" y="291.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.08%)</title><rect x="268.1" y="275.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (9 samples, 0.09%)</title><rect x="269.1" y="307.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.1" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (33 samples, 0.35%)</title><rect x="270.2" y="323.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.12%)</title><rect x="272.2" y="307.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.06%)</title><rect x="273.5" y="307.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.06%)</title><rect x="273.5" y="291.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.06%)</title><rect x="273.5" y="275.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (210 samples, 2.21%)</title><rect x="274.3" y="451.0" width="26.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.3" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (210 samples, 2.21%)</title><rect x="274.3" y="435.0" width="26.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.3" y="446.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (210 samples, 2.21%)</title><rect x="274.3" y="419.0" width="26.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.3" y="430.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (210 samples, 2.21%)</title><rect x="274.3" y="403.0" width="26.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.3" y="414.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (210 samples, 2.21%)</title><rect x="274.3" y="387.0" width="26.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.3" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (210 samples, 2.21%)</title><rect x="274.3" y="371.0" width="26.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.3" y="382.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (210 samples, 2.21%)</title><rect x="274.3" y="355.0" width="26.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.3" y="366.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (185 samples, 1.94%)</title><rect x="274.3" y="339.0" width="22.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.3" y="350.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (185 samples, 1.94%)</title><rect x="274.3" y="323.0" width="22.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.3" y="334.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (16 samples, 0.17%)</title><rect x="294.1" y="307.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (16 samples, 0.17%)</title><rect x="294.1" y="291.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.1" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.09%)</title><rect x="296.1" y="307.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.1" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.26%)</title><rect x="297.2" y="339.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.2" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.26%)</title><rect x="297.2" y="323.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="299.5" y="307.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="299.9" y="307.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="299.9" y="291.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (338 samples, 3.55%)</title><rect x="300.3" y="467.0" width="41.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.3" y="478.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (196 samples, 2.06%)</title><rect x="300.3" y="451.0" width="24.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.3" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (196 samples, 2.06%)</title><rect x="300.3" y="435.0" width="24.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.3" y="446.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.05%)</title><rect x="303.9" y="419.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.9" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (162 samples, 1.70%)</title><rect x="304.5" y="419.0" width="20.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.5" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (162 samples, 1.70%)</title><rect x="304.5" y="403.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.5" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (162 samples, 1.70%)</title><rect x="304.5" y="387.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (162 samples, 1.70%)</title><rect x="304.5" y="371.0" width="20.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (162 samples, 1.70%)</title><rect x="304.5" y="355.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.5" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (162 samples, 1.70%)</title><rect x="304.5" y="339.0" width="20.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.5" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (138 samples, 1.45%)</title><rect x="304.5" y="323.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.5" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (138 samples, 1.45%)</title><rect x="304.5" y="307.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.08%)</title><rect x="320.7" y="291.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.08%)</title><rect x="320.7" y="275.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.7" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.25%)</title><rect x="321.6" y="323.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.25%)</title><rect x="321.6" y="307.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="324.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.08%)</title><rect x="322.6" y="291.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.08%)</title><rect x="323.6" y="291.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.6" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.08%)</title><rect x="323.6" y="275.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.6" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (142 samples, 1.49%)</title><rect x="324.6" y="451.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (142 samples, 1.49%)</title><rect x="324.6" y="435.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.6" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (142 samples, 1.49%)</title><rect x="324.6" y="419.0" width="17.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.6" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (142 samples, 1.49%)</title><rect x="324.6" y="403.0" width="17.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="327.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (142 samples, 1.49%)</title><rect x="324.6" y="387.0" width="17.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="327.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (142 samples, 1.49%)</title><rect x="324.6" y="371.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="327.6" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (142 samples, 1.49%)</title><rect x="324.6" y="355.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (96 samples, 1.01%)</title><rect x="324.6" y="339.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (96 samples, 1.01%)</title><rect x="324.6" y="323.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (96 samples, 1.01%)</title><rect x="324.6" y="307.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.14%)</title><rect x="334.2" y="291.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="337.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.06%)</title><rect x="335.8" y="291.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (46 samples, 0.48%)</title><rect x="336.5" y="339.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="339.5" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (46 samples, 0.48%)</title><rect x="336.5" y="323.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (46 samples, 0.48%)</title><rect x="336.5" y="307.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.5" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.05%)</title><rect x="341.0" y="291.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.05%)</title><rect x="341.6" y="291.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.reduceIterators (186 samples, 1.95%)</title><rect x="342.4" y="531.0" width="23.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="345.4" y="542.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (150 samples, 1.58%)</title><rect x="342.4" y="515.0" width="18.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.4" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (150 samples, 1.58%)</title><rect x="342.4" y="499.0" width="18.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.4" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (5 samples, 0.05%)</title><rect x="343.6" y="483.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.03%)</title><rect x="343.8" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.03%)</title><rect x="343.8" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.8" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (133 samples, 1.40%)</title><rect x="344.2" y="483.0" width="16.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="347.2" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (133 samples, 1.40%)</title><rect x="344.2" y="467.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.2" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (133 samples, 1.40%)</title><rect x="344.2" y="451.0" width="16.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.2" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (133 samples, 1.40%)</title><rect x="344.2" y="435.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (133 samples, 1.40%)</title><rect x="344.2" y="419.0" width="16.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (133 samples, 1.40%)</title><rect x="344.2" y="403.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.2" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (67 samples, 0.70%)</title><rect x="344.2" y="387.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (67 samples, 0.70%)</title><rect x="344.2" y="371.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="347.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (67 samples, 0.70%)</title><rect x="344.2" y="355.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (67 samples, 0.70%)</title><rect x="344.2" y="339.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (20 samples, 0.21%)</title><rect x="344.2" y="323.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (13 samples, 0.14%)</title><rect x="344.2" y="307.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="347.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (13 samples, 0.14%)</title><rect x="344.2" y="291.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.2" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.09%)</title><rect x="344.7" y="275.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="344.7" y="259.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.7" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="344.7" y="243.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="344.7" y="227.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="347.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="344.7" y="211.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="345.1" y="195.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.1" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="345.2" y="179.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.2" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="345.3" y="163.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="348.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="345.3" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="348.3" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.03%)</title><rect x="345.3" y="131.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.3" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (7 samples, 0.07%)</title><rect x="345.8" y="307.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="345.8" y="291.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="345.8" y="275.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="345.8" y="259.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="348.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="345.8" y="243.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="345.8" y="227.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="348.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="345.8" y="211.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (18 samples, 0.19%)</title><rect x="346.7" y="323.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.09%)</title><rect x="346.7" y="307.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.7" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.09%)</title><rect x="346.7" y="291.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="346.9" y="275.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="346.9" y="259.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="346.9" y="243.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="346.9" y="227.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="346.9" y="211.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.9" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="346.9" y="195.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.9" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.07%)</title><rect x="346.9" y="179.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.07%)</title><rect x="346.9" y="163.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.9" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (9 samples, 0.09%)</title><rect x="347.8" y="307.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.09%)</title><rect x="347.8" y="291.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="347.8" y="275.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="347.8" y="259.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="347.8" y="243.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="347.8" y="227.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="347.8" y="211.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.8" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.07%)</title><rect x="347.8" y="195.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.8" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.07%)</title><rect x="347.8" y="179.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.07%)</title><rect x="347.8" y="163.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (8 samples, 0.08%)</title><rect x="348.9" y="323.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.08%)</title><rect x="348.9" y="307.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.08%)</title><rect x="348.9" y="291.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.08%)</title><rect x="348.9" y="275.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="351.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="348.9" y="259.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="348.9" y="243.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="348.9" y="227.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="348.9" y="211.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="351.9" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="349.2" y="195.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="352.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (21 samples, 0.22%)</title><rect x="349.9" y="323.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.11%)</title><rect x="349.9" y="307.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="352.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.11%)</title><rect x="349.9" y="291.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="352.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.11%)</title><rect x="349.9" y="275.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="349.9" y="259.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="349.9" y="243.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="349.9" y="227.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="349.9" y="211.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (11 samples, 0.12%)</title><rect x="351.2" y="307.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="351.2" y="291.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.2" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="351.2" y="275.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="351.2" y="259.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="351.2" y="243.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="351.2" y="227.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.2" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="351.2" y="211.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (66 samples, 0.69%)</title><rect x="352.5" y="387.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (66 samples, 0.69%)</title><rect x="352.5" y="371.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (66 samples, 0.69%)</title><rect x="352.5" y="355.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (66 samples, 0.69%)</title><rect x="352.5" y="339.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.5" y="350.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="353.6" y="323.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="356.6" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (54 samples, 0.57%)</title><rect x="354.0" y="323.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (54 samples, 0.57%)</title><rect x="354.0" y="307.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (49 samples, 0.51%)</title><rect x="354.5" y="291.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (49 samples, 0.51%)</title><rect x="354.5" y="275.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.5" y="286.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="354.5" y="259.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="357.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (26 samples, 0.27%)</title><rect x="354.9" y="259.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 0.24%)</title><rect x="355.3" y="243.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="358.3" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (19 samples, 0.20%)</title><rect x="355.4" y="227.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="356.7" y="211.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.03%)</title><rect x="357.2" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (18 samples, 0.19%)</title><rect x="358.1" y="259.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (18 samples, 0.19%)</title><rect x="358.1" y="243.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (13 samples, 0.14%)</title><rect x="358.1" y="227.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (13 samples, 0.14%)</title><rect x="358.1" y="211.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (13 samples, 0.14%)</title><rect x="358.1" y="195.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.1" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="358.1" y="179.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.1" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="358.1" y="163.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="358.1" y="147.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="358.1" y="131.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="358.6" y="115.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="359.0" y="99.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="362.0" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="359.7" y="227.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="360.0" y="211.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="360.0" y="195.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="360.0" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.0" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="360.0" y="163.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="363.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="360.0" y="147.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="360.0" y="131.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (36 samples, 0.38%)</title><rect x="361.0" y="515.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (35 samples, 0.37%)</title><rect x="361.1" y="499.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (34 samples, 0.36%)</title><rect x="361.2" y="483.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.2" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (20 samples, 0.21%)</title><rect x="361.2" y="467.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.2" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (20 samples, 0.21%)</title><rect x="361.2" y="451.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.2" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (20 samples, 0.21%)</title><rect x="361.2" y="435.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.20%)</title><rect x="361.3" y="419.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.3" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.20%)</title><rect x="361.3" y="403.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (16 samples, 0.17%)</title><rect x="361.7" y="387.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (16 samples, 0.17%)</title><rect x="361.7" y="371.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="364.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (16 samples, 0.17%)</title><rect x="361.7" y="355.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (16 samples, 0.17%)</title><rect x="361.7" y="339.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (16 samples, 0.17%)</title><rect x="361.7" y="323.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (16 samples, 0.17%)</title><rect x="361.7" y="307.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (14 samples, 0.15%)</title><rect x="362.0" y="291.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.0" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (14 samples, 0.15%)</title><rect x="362.0" y="275.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (12 samples, 0.13%)</title><rect x="362.2" y="259.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (12 samples, 0.13%)</title><rect x="362.2" y="243.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="362.2" y="227.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.06%)</title><rect x="362.2" y="211.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.06%)</title><rect x="362.2" y="195.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="362.2" y="179.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.2" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="362.2" y="163.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="362.2" y="147.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="362.2" y="131.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.2" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="362.3" y="115.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.3" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="362.9" y="227.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.9" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="363.1" y="211.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.1" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="363.1" y="195.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="363.1" y="179.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.1" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="363.1" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="363.1" y="147.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="363.1" y="131.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.1" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (14 samples, 0.15%)</title><rect x="363.7" y="467.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.7" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (14 samples, 0.15%)</title><rect x="363.7" y="451.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.7" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (14 samples, 0.15%)</title><rect x="363.7" y="435.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="366.7" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (14 samples, 0.15%)</title><rect x="363.7" y="419.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.15%)</title><rect x="363.7" y="403.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.7" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.15%)</title><rect x="363.7" y="387.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.7" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.07%)</title><rect x="363.7" y="371.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.06%)</title><rect x="363.8" y="355.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.06%)</title><rect x="363.8" y="339.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (6 samples, 0.06%)</title><rect x="363.8" y="323.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.03%)</title><rect x="363.9" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (7 samples, 0.07%)</title><rect x="364.6" y="371.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.07%)</title><rect x="364.6" y="355.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.6" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (7 samples, 0.07%)</title><rect x="364.6" y="339.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.6" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.07%)</title><rect x="364.6" y="323.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.6" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (6 samples, 0.06%)</title><rect x="364.7" y="307.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.06%)</title><rect x="364.7" y="291.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.7" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (6 samples, 0.06%)</title><rect x="364.7" y="275.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.7" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (6 samples, 0.06%)</title><rect x="364.7" y="259.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="364.7" y="243.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="364.7" y="227.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.7" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.03%)</title><rect x="364.7" y="211.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.7" y="222.0"></text>
</g>
<g>
<title>[worker-1 tid=25394] (1,679 samples, 17.65%)</title><rect x="365.6" y="723.0" width="208.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="368.6" y="734.0">[worker-1 tid=25394]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (8 samples, 0.08%)</title><rect x="365.6" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="368.6" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.05%)</title><rect x="365.8" y="691.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="368.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.05%)</title><rect x="365.8" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="368.8" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.04%)</title><rect x="365.8" y="659.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="368.8" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (23 samples, 0.24%)</title><rect x="366.5" y="707.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="369.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,647 samples, 17.31%)</title><rect x="369.5" y="707.0" width="204.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.5" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,647 samples, 17.31%)</title><rect x="369.5" y="691.0" width="204.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="372.5" y="702.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,647 samples, 17.31%)</title><rect x="369.5" y="675.0" width="204.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.5" y="686.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (24 samples, 0.25%)</title><rect x="369.8" y="659.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="372.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (24 samples, 0.25%)</title><rect x="369.8" y="643.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 0.15%)</title><rect x="370.4" y="627.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.14%)</title><rect x="370.5" y="611.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.14%)</title><rect x="370.5" y="595.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="373.5" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.03%)</title><rect x="370.5" y="579.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="373.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.11%)</title><rect x="370.9" y="579.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="373.9" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_wait (9 samples, 0.09%)</title><rect x="370.9" y="563.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="373.9" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.06%)</title><rect x="371.3" y="547.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="374.3" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.06%)</title><rect x="371.3" y="531.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="374.3" y="542.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.05%)</title><rect x="371.4" y="515.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="374.4" y="526.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.05%)</title><rect x="371.4" y="499.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="374.4" y="510.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.04%)</title><rect x="371.5" y="483.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="374.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.05%)</title><rect x="372.1" y="627.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="375.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.05%)</title><rect x="372.1" y="611.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.05%)</title><rect x="372.1" y="595.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="375.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.05%)</title><rect x="372.1" y="579.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$65/1115085888.run (1,621 samples, 17.04%)</title><rect x="372.7" y="659.0" width="201.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.7" y="670.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$executeAsync$3 (1,621 samples, 17.04%)</title><rect x="372.7" y="643.0" width="201.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="375.7" y="654.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (273 samples, 2.87%)</title><rect x="372.9" y="627.0" width="33.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.9" y="638.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (267 samples, 2.81%)</title><rect x="373.6" y="611.0" width="33.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.6" y="622.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.04%)</title><rect x="373.6" y="595.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.6" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (263 samples, 2.76%)</title><rect x="374.1" y="595.0" width="32.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.1" y="606.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (263 samples, 2.76%)</title><rect x="374.1" y="579.0" width="32.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.1" y="590.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (259 samples, 2.72%)</title><rect x="374.6" y="563.0" width="32.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.6" y="574.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (259 samples, 2.72%)</title><rect x="374.6" y="547.0" width="32.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.6" y="558.0">on..</text>
</g>
<g>
<title>.annobin_send.c (253 samples, 2.66%)</title><rect x="374.7" y="531.0" width="31.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="377.7" y="542.0">.a..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (243 samples, 2.55%)</title><rect x="376.0" y="515.0" width="30.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="379.0" y="526.0">en..</text>
</g>
<g>
<title>do_syscall_64 (243 samples, 2.55%)</title><rect x="376.0" y="499.0" width="30.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="379.0" y="510.0">do..</text>
</g>
<g>
<title>__x64_sys_sendto (236 samples, 2.48%)</title><rect x="376.7" y="483.0" width="29.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="379.7" y="494.0">__..</text>
</g>
<g>
<title>__sys_sendto (235 samples, 2.47%)</title><rect x="376.8" y="467.0" width="29.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="379.8" y="478.0">__..</text>
</g>
<g>
<title>sock_sendmsg (228 samples, 2.40%)</title><rect x="377.1" y="451.0" width="28.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="380.1" y="462.0">so..</text>
</g>
<g>
<title>security_socket_sendmsg (5 samples, 0.05%)</title><rect x="377.1" y="435.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="380.1" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (4 samples, 0.04%)</title><rect x="377.2" y="419.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="380.2" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg (223 samples, 2.34%)</title><rect x="377.7" y="435.0" width="27.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="380.7" y="446.0">t..</text>
</g>
<g>
<title>tcp_sendmsg_locked (220 samples, 2.31%)</title><rect x="378.1" y="419.0" width="27.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="381.1" y="430.0">t..</text>
</g>
<g>
<title>__tcp_push_pending_frames (202 samples, 2.12%)</title><rect x="378.4" y="403.0" width="25.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="381.4" y="414.0">_..</text>
</g>
<g>
<title>tcp_write_xmit (202 samples, 2.12%)</title><rect x="378.4" y="387.0" width="25.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="381.4" y="398.0">t..</text>
</g>
<g>
<title>__tcp_transmit_skb (191 samples, 2.01%)</title><rect x="378.6" y="371.0" width="23.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="381.6" y="382.0">_..</text>
</g>
<g>
<title>__ip_queue_xmit (179 samples, 1.88%)</title><rect x="378.7" y="355.0" width="22.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="381.7" y="366.0">_..</text>
</g>
<g>
<title>ip_local_out (45 samples, 0.47%)</title><rect x="378.8" y="339.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="381.8" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (45 samples, 0.47%)</title><rect x="378.8" y="323.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="381.8" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (44 samples, 0.46%)</title><rect x="378.9" y="307.0" width="5.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="381.9" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (15 samples, 0.16%)</title><rect x="378.9" y="291.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="381.9" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (3 samples, 0.03%)</title><rect x="381.3" y="291.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="384.3" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (17 samples, 0.18%)</title><rect x="381.7" y="291.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="384.7" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (6 samples, 0.06%)</title><rect x="381.9" y="275.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="384.9" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (5 samples, 0.05%)</title><rect x="382.9" y="275.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="385.9" y="286.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (3 samples, 0.03%)</title><rect x="383.2" y="259.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="386.2" y="270.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (4 samples, 0.04%)</title><rect x="383.8" y="291.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="386.8" y="302.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (4 samples, 0.04%)</title><rect x="383.8" y="275.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="386.8" y="286.0"></text>
</g>
<g>
<title>ip_output (133 samples, 1.40%)</title><rect x="384.4" y="339.0" width="16.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="387.4" y="350.0"></text>
</g>
<g>
<title>ip_finish_output2 (114 samples, 1.20%)</title><rect x="384.6" y="323.0" width="14.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="387.6" y="334.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (106 samples, 1.11%)</title><rect x="385.6" y="307.0" width="13.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="388.6" y="318.0"></text>
</g>
<g>
<title>do_softirq.part.0 (106 samples, 1.11%)</title><rect x="385.6" y="291.0" width="13.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="388.6" y="302.0"></text>
</g>
<g>
<title>do_softirq_own_stack (104 samples, 1.09%)</title><rect x="385.9" y="275.0" width="12.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="388.9" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (104 samples, 1.09%)</title><rect x="385.9" y="259.0" width="12.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="388.9" y="270.0"></text>
</g>
<g>
<title>net_rx_action (103 samples, 1.08%)</title><rect x="386.0" y="243.0" width="12.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="389.0" y="254.0"></text>
</g>
<g>
<title>process_backlog (102 samples, 1.07%)</title><rect x="386.1" y="227.0" width="12.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="389.1" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (98 samples, 1.03%)</title><rect x="386.6" y="211.0" width="12.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="389.6" y="222.0"></text>
</g>
<g>
<title>ip_rcv (98 samples, 1.03%)</title><rect x="386.6" y="195.0" width="12.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="389.6" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (71 samples, 0.75%)</title><rect x="386.9" y="179.0" width="8.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="389.9" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (55 samples, 0.58%)</title><rect x="387.1" y="163.0" width="6.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="390.1" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (55 samples, 0.58%)</title><rect x="387.1" y="147.0" width="6.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="390.1" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (54 samples, 0.57%)</title><rect x="387.3" y="131.0" width="6.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="390.3" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (4 samples, 0.04%)</title><rect x="387.6" y="115.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="390.6" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.03%)</title><rect x="388.2" y="115.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="391.2" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.03%)</title><rect x="388.2" y="99.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="391.2" y="110.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (3 samples, 0.03%)</title><rect x="388.2" y="83.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="391.2" y="94.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (43 samples, 0.45%)</title><rect x="388.6" y="115.0" width="5.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="391.6" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (42 samples, 0.44%)</title><rect x="388.7" y="99.0" width="5.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="391.7" y="110.0"></text>
</g>
<g>
<title>tcp_ack (8 samples, 0.08%)</title><rect x="389.2" y="83.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="392.2" y="94.0"></text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.03%)</title><rect x="390.2" y="83.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="393.2" y="94.0"></text>
</g>
<g>
<title>tcp_data_queue (24 samples, 0.25%)</title><rect x="390.6" y="83.0" width="3.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="393.6" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (21 samples, 0.22%)</title><rect x="391.0" y="67.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="394.0" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (19 samples, 0.20%)</title><rect x="391.2" y="51.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="394.2" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (19 samples, 0.20%)</title><rect x="391.2" y="35.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="394.2" y="46.0"></text>
</g>
<g>
<title>nf_hook_slow (14 samples, 0.15%)</title><rect x="393.9" y="163.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="396.9" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (13 samples, 0.14%)</title><rect x="393.9" y="147.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="396.9" y="158.0"></text>
</g>
<g>
<title>nf_hook_slow (24 samples, 0.25%)</title><rect x="395.8" y="179.0" width="3.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="398.8" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (18 samples, 0.19%)</title><rect x="396.2" y="163.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="399.2" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (15 samples, 0.16%)</title><rect x="399.0" y="323.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="402.0" y="334.0"></text>
</g>
<g>
<title>selinux_ip_postroute (7 samples, 0.07%)</title><rect x="399.8" y="307.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="402.8" y="318.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.03%)</title><rect x="400.9" y="355.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="403.9" y="366.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.03%)</title><rect x="401.5" y="355.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="404.5" y="366.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.04%)</title><rect x="402.3" y="371.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="405.3" y="382.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.05%)</title><rect x="402.8" y="371.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="405.8" y="382.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.03%)</title><rect x="402.9" y="355.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="405.9" y="366.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.03%)</title><rect x="402.9" y="339.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="405.9" y="350.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (8 samples, 0.08%)</title><rect x="403.6" y="403.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="406.6" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.08%)</title><rect x="403.6" y="387.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="406.6" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (4 samples, 0.04%)</title><rect x="403.7" y="371.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="406.7" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.04%)</title><rect x="403.7" y="355.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="406.7" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.03%)</title><rect x="404.2" y="371.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="407.2" y="382.0"></text>
</g>
<g>
<title>sockfd_lookup_light (5 samples, 0.05%)</title><rect x="405.4" y="451.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="408.4" y="462.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="405.5" y="435.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="408.5" y="446.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.03%)</title><rect x="405.6" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="408.6" y="430.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="406.1" y="531.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="409.1" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="406.1" y="515.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="409.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$81/1409716107.get (1,347 samples, 14.16%)</title><rect x="406.7" y="627.0" width="167.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.7" y="638.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$entity$0 (1,347 samples, 14.16%)</title><rect x="406.7" y="611.0" width="167.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.7" y="622.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.get (1,347 samples, 14.16%)</title><rect x="406.7" y="595.0" width="167.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.7" y="606.0">ru/mail/polis/service..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.06%)</title><rect x="406.7" y="579.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.06%)</title><rect x="406.7" y="563.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.7" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="406.7" y="547.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="406.7" y="531.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.7" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="406.8" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="407.0" y="499.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.0" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="407.0" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,341 samples, 14.09%)</title><rect x="407.5" y="579.0" width="166.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.5" y="590.0">ru/mail/polis/dao/DAO..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (97 samples, 1.02%)</title><rect x="407.5" y="563.0" width="12.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.5" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (97 samples, 1.02%)</title><rect x="407.5" y="547.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.5" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (97 samples, 1.02%)</title><rect x="407.5" y="531.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (97 samples, 1.02%)</title><rect x="407.5" y="515.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (96 samples, 1.01%)</title><rect x="407.5" y="499.0" width="11.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="410.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (90 samples, 0.95%)</title><rect x="407.6" y="483.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.6" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (58 samples, 0.61%)</title><rect x="407.6" y="467.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (58 samples, 0.61%)</title><rect x="407.6" y="451.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.6" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (58 samples, 0.61%)</title><rect x="407.6" y="435.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (57 samples, 0.60%)</title><rect x="407.7" y="419.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (57 samples, 0.60%)</title><rect x="407.7" y="403.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (54 samples, 0.57%)</title><rect x="408.1" y="387.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (54 samples, 0.57%)</title><rect x="408.1" y="371.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (54 samples, 0.57%)</title><rect x="408.1" y="355.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (54 samples, 0.57%)</title><rect x="408.1" y="339.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (53 samples, 0.56%)</title><rect x="408.2" y="323.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (53 samples, 0.56%)</title><rect x="408.2" y="307.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.2" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (48 samples, 0.50%)</title><rect x="408.8" y="291.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="411.8" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (48 samples, 0.50%)</title><rect x="408.8" y="275.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.8" y="286.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="408.8" y="259.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="411.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (18 samples, 0.19%)</title><rect x="409.2" y="259.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.18%)</title><rect x="409.3" y="243.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="412.3" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.15%)</title><rect x="409.5" y="227.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.05%)</title><rect x="409.9" y="211.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (27 samples, 0.28%)</title><rect x="411.4" y="259.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (27 samples, 0.28%)</title><rect x="411.4" y="243.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (22 samples, 0.23%)</title><rect x="411.4" y="227.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (22 samples, 0.23%)</title><rect x="411.4" y="211.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (22 samples, 0.23%)</title><rect x="411.4" y="195.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.4" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (22 samples, 0.23%)</title><rect x="411.4" y="179.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.4" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (22 samples, 0.23%)</title><rect x="411.4" y="163.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.23%)</title><rect x="411.4" y="147.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.23%)</title><rect x="411.4" y="131.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="412.6" y="115.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="413.5" y="99.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="414.2" y="227.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (32 samples, 0.34%)</title><rect x="414.8" y="467.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.8" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (32 samples, 0.34%)</title><rect x="414.8" y="451.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="417.8" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (32 samples, 0.34%)</title><rect x="414.8" y="435.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.8" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (32 samples, 0.34%)</title><rect x="414.8" y="419.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (32 samples, 0.34%)</title><rect x="414.8" y="403.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.8" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (32 samples, 0.34%)</title><rect x="414.8" y="387.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.8" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (18 samples, 0.19%)</title><rect x="414.8" y="371.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (17 samples, 0.18%)</title><rect x="414.9" y="355.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (17 samples, 0.18%)</title><rect x="414.9" y="339.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (17 samples, 0.18%)</title><rect x="414.9" y="323.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (4 samples, 0.04%)</title><rect x="414.9" y="307.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="414.9" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="414.9" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (5 samples, 0.05%)</title><rect x="415.4" y="307.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="415.4" y="291.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="418.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="415.4" y="275.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="415.7" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.7" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="415.7" y="243.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="415.7" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="415.7" y="211.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="415.7" y="195.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.7" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="415.7" y="179.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="418.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.04%)</title><rect x="416.0" y="307.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="416.0" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="416.0" y="275.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="416.0" y="259.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="416.0" y="243.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="416.0" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="419.0" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="416.0" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="416.0" y="195.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (4 samples, 0.04%)</title><rect x="416.5" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (14 samples, 0.15%)</title><rect x="417.0" y="371.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (14 samples, 0.15%)</title><rect x="417.0" y="355.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="420.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (14 samples, 0.15%)</title><rect x="417.0" y="339.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.15%)</title><rect x="417.0" y="323.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (11 samples, 0.12%)</title><rect x="417.3" y="307.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="420.3" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.12%)</title><rect x="417.3" y="291.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.3" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (11 samples, 0.12%)</title><rect x="417.3" y="275.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.3" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (11 samples, 0.12%)</title><rect x="417.3" y="259.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="417.3" y="243.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="417.3" y="227.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.3" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.03%)</title><rect x="417.3" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (7 samples, 0.07%)</title><rect x="417.8" y="243.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (7 samples, 0.07%)</title><rect x="417.8" y="227.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.8" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="417.8" y="211.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="417.8" y="195.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="417.8" y="179.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="420.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="417.8" y="163.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.8" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="417.8" y="147.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="417.8" y="131.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="417.8" y="115.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="420.8" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="418.0" y="99.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="421.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$72/878358964.apply (3 samples, 0.03%)</title><rect x="419.0" y="483.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.03%)</title><rect x="419.0" y="467.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,241 samples, 13.04%)</title><rect x="419.9" y="563.0" width="153.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.9" y="574.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,226 samples, 12.88%)</title><rect x="421.7" y="547.0" width="152.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="424.7" y="558.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (1,023 samples, 10.75%)</title><rect x="421.7" y="531.0" width="126.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.7" y="542.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/util/ArrayList.add (12 samples, 0.13%)</title><rect x="421.9" y="515.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.9" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 0.09%)</title><rect x="422.2" y="499.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="425.2" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (9 samples, 0.09%)</title><rect x="422.2" y="483.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="425.2" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (9 samples, 0.09%)</title><rect x="422.2" y="467.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.2" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="422.8" y="451.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (58 samples, 0.61%)</title><rect x="423.3" y="515.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (58 samples, 0.61%)</title><rect x="423.3" y="499.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (56 samples, 0.59%)</title><rect x="423.6" y="483.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (54 samples, 0.57%)</title><rect x="423.8" y="467.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (15 samples, 0.16%)</title><rect x="424.8" y="451.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.8" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (7 samples, 0.07%)</title><rect x="425.0" y="435.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.07%)</title><rect x="425.8" y="435.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.07%)</title><rect x="425.8" y="419.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.8" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.07%)</title><rect x="425.8" y="403.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.8" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.04%)</title><rect x="426.2" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="429.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (31 samples, 0.33%)</title><rect x="426.7" y="451.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (14 samples, 0.15%)</title><rect x="428.8" y="435.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="431.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (4 samples, 0.04%)</title><rect x="429.4" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="429.9" y="419.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="429.9" y="403.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.9" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.05%)</title><rect x="429.9" y="387.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.9" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="430.2" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="433.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (26 samples, 0.27%)</title><rect x="430.7" y="515.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="433.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (4 samples, 0.04%)</title><rect x="430.7" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (4 samples, 0.04%)</title><rect x="430.7" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (4 samples, 0.04%)</title><rect x="430.7" y="467.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (20 samples, 0.21%)</title><rect x="431.2" y="499.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (18 samples, 0.19%)</title><rect x="431.4" y="483.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (16 samples, 0.17%)</title><rect x="431.7" y="467.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="434.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (16 samples, 0.17%)</title><rect x="431.7" y="451.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (16 samples, 0.17%)</title><rect x="431.7" y="435.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (15 samples, 0.16%)</title><rect x="431.8" y="419.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (15 samples, 0.16%)</title><rect x="431.8" y="403.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (14 samples, 0.15%)</title><rect x="431.9" y="387.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.09%)</title><rect x="432.5" y="371.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="435.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="433.0" y="355.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="436.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="433.0" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.0" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="433.0" y="323.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="436.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (925 samples, 9.72%)</title><rect x="433.9" y="515.0" width="114.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="436.9" y="526.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (921 samples, 9.68%)</title><rect x="434.0" y="499.0" width="114.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="437.0" y="510.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (919 samples, 9.66%)</title><rect x="434.3" y="483.0" width="113.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.3" y="494.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (213 samples, 2.24%)</title><rect x="437.2" y="467.0" width="26.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.2" y="478.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (162 samples, 1.70%)</title><rect x="440.2" y="451.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (11 samples, 0.12%)</title><rect x="449.4" y="435.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (16 samples, 0.17%)</title><rect x="450.7" y="435.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.7" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.05%)</title><rect x="452.1" y="419.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (9 samples, 0.09%)</title><rect x="452.7" y="435.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="455.7" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.13%)</title><rect x="453.8" y="435.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.8" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.05%)</title><rect x="454.7" y="419.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (29 samples, 0.30%)</title><rect x="455.3" y="435.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.3" y="446.0"></text>
</g>
<g>
<title>vtable stub (11 samples, 0.12%)</title><rect x="458.9" y="435.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="461.9" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (14 samples, 0.15%)</title><rect x="460.3" y="451.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="463.3" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.09%)</title><rect x="460.9" y="435.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (8 samples, 0.08%)</title><rect x="462.0" y="451.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.0" y="462.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="463.0" y="451.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="466.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (315 samples, 3.31%)</title><rect x="463.6" y="467.0" width="39.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.6" y="478.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (131 samples, 1.38%)</title><rect x="463.6" y="451.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="466.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (131 samples, 1.38%)</title><rect x="463.6" y="435.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (13 samples, 0.14%)</title><rect x="466.5" y="419.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="469.5" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (95 samples, 1.00%)</title><rect x="468.1" y="419.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="471.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (95 samples, 1.00%)</title><rect x="468.1" y="403.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.1" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (95 samples, 1.00%)</title><rect x="468.1" y="387.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (95 samples, 1.00%)</title><rect x="468.1" y="371.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="471.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (95 samples, 1.00%)</title><rect x="468.1" y="355.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (95 samples, 1.00%)</title><rect x="468.1" y="339.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (56 samples, 0.59%)</title><rect x="468.1" y="323.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.18%)</title><rect x="471.8" y="307.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="474.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (17 samples, 0.18%)</title><rect x="471.8" y="291.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.8" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (17 samples, 0.18%)</title><rect x="471.8" y="275.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="474.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (9 samples, 0.09%)</title><rect x="473.9" y="307.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="476.9" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (39 samples, 0.41%)</title><rect x="475.1" y="323.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="478.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.09%)</title><rect x="477.4" y="307.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (11 samples, 0.12%)</title><rect x="478.5" y="307.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.12%)</title><rect x="478.5" y="291.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.12%)</title><rect x="478.5" y="275.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (184 samples, 1.93%)</title><rect x="479.9" y="451.0" width="22.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.9" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (184 samples, 1.93%)</title><rect x="479.9" y="435.0" width="22.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="482.9" y="446.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="479.9" y="419.0" width="22.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.9" y="430.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="479.9" y="403.0" width="22.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.9" y="414.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="479.9" y="387.0" width="22.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.9" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="479.9" y="371.0" width="22.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.9" y="382.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="479.9" y="355.0" width="22.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.9" y="366.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (167 samples, 1.76%)</title><rect x="479.9" y="339.0" width="20.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (167 samples, 1.76%)</title><rect x="479.9" y="323.0" width="20.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.12%)</title><rect x="498.2" y="307.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (11 samples, 0.12%)</title><rect x="498.2" y="291.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.08%)</title><rect x="499.6" y="307.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.6" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.18%)</title><rect x="500.6" y="339.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="503.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.18%)</title><rect x="500.6" y="323.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="501.6" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="504.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="502.2" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="502.2" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (367 samples, 3.86%)</title><rect x="502.7" y="467.0" width="45.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.7" y="478.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (220 samples, 2.31%)</title><rect x="502.8" y="451.0" width="27.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.8" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (220 samples, 2.31%)</title><rect x="502.8" y="435.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.8" y="446.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.09%)</title><rect x="506.2" y="419.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="509.2" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (184 samples, 1.93%)</title><rect x="507.3" y="419.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.3" y="430.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="507.3" y="403.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.3" y="414.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="507.3" y="387.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.3" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="507.3" y="371.0" width="22.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.3" y="382.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="507.3" y="355.0" width="22.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.3" y="366.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (184 samples, 1.93%)</title><rect x="507.3" y="339.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.3" y="350.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (161 samples, 1.69%)</title><rect x="507.3" y="323.0" width="20.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (161 samples, 1.69%)</title><rect x="507.3" y="307.0" width="20.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (17 samples, 0.18%)</title><rect x="525.0" y="291.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="528.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (17 samples, 0.18%)</title><rect x="525.0" y="275.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.0" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (23 samples, 0.24%)</title><rect x="527.3" y="323.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="530.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (23 samples, 0.24%)</title><rect x="527.3" y="307.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="530.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="527.6" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.17%)</title><rect x="528.1" y="291.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="531.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (16 samples, 0.17%)</title><rect x="528.1" y="275.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.1" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (146 samples, 1.53%)</title><rect x="530.1" y="451.0" width="18.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (146 samples, 1.53%)</title><rect x="530.1" y="435.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="530.1" y="419.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.1" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="530.1" y="403.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="530.1" y="387.0" width="18.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="530.1" y="371.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="530.1" y="355.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="533.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (106 samples, 1.11%)</title><rect x="530.1" y="339.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (106 samples, 1.11%)</title><rect x="530.1" y="323.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="533.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (106 samples, 1.11%)</title><rect x="530.1" y="307.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="533.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="541.2" y="291.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.07%)</title><rect x="542.4" y="291.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (40 samples, 0.42%)</title><rect x="543.3" y="339.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.3" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (40 samples, 0.42%)</title><rect x="543.3" y="323.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.3" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (40 samples, 0.42%)</title><rect x="543.3" y="307.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.3" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.07%)</title><rect x="546.4" y="291.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.4" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.07%)</title><rect x="547.2" y="291.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="550.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (3 samples, 0.03%)</title><rect x="548.2" y="499.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="551.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.reduceIterators (203 samples, 2.13%)</title><rect x="548.6" y="531.0" width="25.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="551.6" y="542.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (169 samples, 1.78%)</title><rect x="548.7" y="515.0" width="21.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="551.7" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (169 samples, 1.78%)</title><rect x="548.7" y="499.0" width="21.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.7" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (157 samples, 1.65%)</title><rect x="550.0" y="483.0" width="19.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (157 samples, 1.65%)</title><rect x="550.0" y="467.0" width="19.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (156 samples, 1.64%)</title><rect x="550.1" y="451.0" width="19.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="553.1" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (156 samples, 1.64%)</title><rect x="550.1" y="435.0" width="19.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.1" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (154 samples, 1.62%)</title><rect x="550.3" y="419.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="553.3" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (154 samples, 1.62%)</title><rect x="550.3" y="403.0" width="19.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.3" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (73 samples, 0.77%)</title><rect x="550.3" y="387.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (73 samples, 0.77%)</title><rect x="550.3" y="371.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (70 samples, 0.74%)</title><rect x="550.7" y="355.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (70 samples, 0.74%)</title><rect x="550.7" y="339.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (28 samples, 0.29%)</title><rect x="550.8" y="323.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (18 samples, 0.19%)</title><rect x="550.8" y="307.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="553.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (18 samples, 0.19%)</title><rect x="550.8" y="291.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="553.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="551.7" y="275.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="554.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="551.7" y="259.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="554.7" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="551.7" y="243.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="551.7" y="227.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="554.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="551.7" y="211.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="552.2" y="195.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="555.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (10 samples, 0.11%)</title><rect x="553.1" y="307.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.11%)</title><rect x="553.1" y="291.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="556.1" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="553.1" y="275.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="556.1" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="553.1" y="259.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="553.1" y="243.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="556.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="553.1" y="227.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="553.1" y="211.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (20 samples, 0.21%)</title><rect x="554.3" y="323.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (16 samples, 0.17%)</title><rect x="554.3" y="307.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (16 samples, 0.17%)</title><rect x="554.3" y="291.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (14 samples, 0.15%)</title><rect x="554.5" y="275.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="557.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.15%)</title><rect x="554.5" y="259.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="557.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (14 samples, 0.15%)</title><rect x="554.5" y="243.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="557.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.15%)</title><rect x="554.5" y="227.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="557.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.15%)</title><rect x="554.5" y="211.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.15%)</title><rect x="554.5" y="195.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.5" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="554.5" y="179.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.5" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="554.5" y="163.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.5" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="555.8" y="179.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="558.8" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="555.8" y="163.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="558.8" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.04%)</title><rect x="556.3" y="307.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="559.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="556.3" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="556.3" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="556.3" y="259.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="556.3" y="243.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="559.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="556.3" y="227.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="559.3" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="556.3" y="211.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="559.3" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="556.3" y="195.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.3" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="556.3" y="179.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="556.3" y="163.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="559.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (8 samples, 0.08%)</title><rect x="556.8" y="323.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.08%)</title><rect x="556.8" y="307.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="559.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.08%)</title><rect x="556.8" y="291.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.08%)</title><rect x="556.8" y="275.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.8" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="556.8" y="259.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="559.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="556.8" y="243.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="556.8" y="227.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="556.8" y="211.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="559.8" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="557.2" y="195.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="560.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (13 samples, 0.14%)</title><rect x="557.8" y="323.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="560.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="557.8" y="307.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="557.8" y="291.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="560.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="557.8" y="275.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.8" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="557.8" y="259.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="557.8" y="243.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="557.8" y="227.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="557.8" y="211.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6 samples, 0.06%)</title><rect x="558.6" y="307.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="561.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.06%)</title><rect x="558.6" y="291.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="558.6" y="275.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="558.6" y="259.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="561.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="558.6" y="243.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="558.6" y="227.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="558.6" y="211.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (81 samples, 0.85%)</title><rect x="559.4" y="387.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (81 samples, 0.85%)</title><rect x="559.4" y="371.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.4" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (81 samples, 0.85%)</title><rect x="559.4" y="355.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="562.4" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (81 samples, 0.85%)</title><rect x="559.4" y="339.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.4" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.03%)</title><rect x="561.1" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="564.1" y="334.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.04%)</title><rect x="561.5" y="323.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="564.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (57 samples, 0.60%)</title><rect x="562.0" y="323.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="565.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (57 samples, 0.60%)</title><rect x="562.0" y="307.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="565.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (52 samples, 0.55%)</title><rect x="562.5" y="291.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="565.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (52 samples, 0.55%)</title><rect x="562.5" y="275.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="565.5" y="286.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="562.5" y="259.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="565.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 0.28%)</title><rect x="562.9" y="259.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="565.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (25 samples, 0.26%)</title><rect x="563.1" y="243.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="566.1" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (20 samples, 0.21%)</title><rect x="563.5" y="227.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.06%)</title><rect x="564.6" y="211.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="567.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.04%)</title><rect x="564.8" y="195.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="567.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.03%)</title><rect x="565.3" y="211.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="568.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (22 samples, 0.23%)</title><rect x="566.2" y="259.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (22 samples, 0.23%)</title><rect x="566.2" y="243.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="569.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (17 samples, 0.18%)</title><rect x="566.2" y="227.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="569.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (17 samples, 0.18%)</title><rect x="566.2" y="211.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (17 samples, 0.18%)</title><rect x="566.2" y="195.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="566.2" y="179.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.2" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="566.2" y="163.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="566.2" y="147.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="566.2" y="131.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="569.2" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="566.7" y="115.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.7" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="567.7" y="99.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="570.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="568.3" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="571.3" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="568.4" y="211.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="568.4" y="195.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="571.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="568.4" y="179.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.4" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="568.4" y="163.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="568.4" y="147.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="571.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="568.4" y="131.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (33 samples, 0.35%)</title><rect x="569.7" y="515.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="572.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (33 samples, 0.35%)</title><rect x="569.7" y="499.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (33 samples, 0.35%)</title><rect x="569.7" y="483.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="572.7" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (25 samples, 0.26%)</title><rect x="569.7" y="467.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="572.7" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (25 samples, 0.26%)</title><rect x="569.7" y="451.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.7" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (25 samples, 0.26%)</title><rect x="569.7" y="435.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="572.7" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (25 samples, 0.26%)</title><rect x="569.7" y="419.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (25 samples, 0.26%)</title><rect x="569.7" y="403.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (23 samples, 0.24%)</title><rect x="569.9" y="387.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (23 samples, 0.24%)</title><rect x="569.9" y="371.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="572.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (23 samples, 0.24%)</title><rect x="569.9" y="355.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (23 samples, 0.24%)</title><rect x="569.9" y="339.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="572.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (23 samples, 0.24%)</title><rect x="569.9" y="323.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (23 samples, 0.24%)</title><rect x="569.9" y="307.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="572.9" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (21 samples, 0.22%)</title><rect x="570.2" y="291.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.2" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (21 samples, 0.22%)</title><rect x="570.2" y="275.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.11%)</title><rect x="570.3" y="259.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="573.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.11%)</title><rect x="570.3" y="243.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.3" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.08%)</title><rect x="570.4" y="227.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="573.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="570.8" y="211.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="573.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (9 samples, 0.09%)</title><rect x="571.5" y="259.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (9 samples, 0.09%)</title><rect x="571.5" y="243.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.5" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="571.5" y="227.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="571.5" y="211.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="571.5" y="195.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.5" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="571.5" y="179.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="574.5" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="571.5" y="163.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="574.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="571.5" y="147.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="571.5" y="131.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.5" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="571.9" y="115.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="574.9" y="126.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (8 samples, 0.08%)</title><rect x="572.8" y="467.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.8" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (8 samples, 0.08%)</title><rect x="572.8" y="451.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.8" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (8 samples, 0.08%)</title><rect x="572.8" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.8" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (8 samples, 0.08%)</title><rect x="572.8" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.07%)</title><rect x="572.9" y="403.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="575.9" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.07%)</title><rect x="572.9" y="387.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="575.9" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3 samples, 0.03%)</title><rect x="572.9" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="575.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (4 samples, 0.04%)</title><rect x="573.3" y="371.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="576.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.04%)</title><rect x="573.3" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="576.3" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (4 samples, 0.04%)</title><rect x="573.3" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="576.3" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="573.3" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.3" y="334.0"></text>
</g>
<g>
<title>[worker-2 tid=25392] (1,643 samples, 17.27%)</title><rect x="573.8" y="723.0" width="203.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="576.8" y="734.0">[worker-2 tid=25392]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (7 samples, 0.07%)</title><rect x="573.9" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="576.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (6 samples, 0.06%)</title><rect x="573.9" y="691.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="576.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (6 samples, 0.06%)</title><rect x="573.9" y="675.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="576.9" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.05%)</title><rect x="573.9" y="659.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="576.9" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.04%)</title><rect x="573.9" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="576.9" y="654.0"></text>
</g>
<g>
<title>[unknown_Java] (22 samples, 0.23%)</title><rect x="574.9" y="707.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="577.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,612 samples, 16.94%)</title><rect x="577.6" y="707.0" width="199.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.6" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,612 samples, 16.94%)</title><rect x="577.6" y="691.0" width="199.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="580.6" y="702.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,612 samples, 16.94%)</title><rect x="577.6" y="675.0" width="199.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="580.6" y="686.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (27 samples, 0.28%)</title><rect x="577.7" y="659.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="580.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (26 samples, 0.27%)</title><rect x="577.9" y="643.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="580.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 0.17%)</title><rect x="578.0" y="627.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 0.16%)</title><rect x="578.1" y="611.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (14 samples, 0.15%)</title><rect x="578.2" y="595.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="581.2" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (8 samples, 0.08%)</title><rect x="578.2" y="579.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="581.2" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.03%)</title><rect x="578.9" y="563.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="581.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.06%)</title><rect x="579.2" y="579.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="582.2" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.05%)</title><rect x="579.4" y="563.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="582.4" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="579.6" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="582.6" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="579.6" y="531.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="582.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.08%)</title><rect x="580.1" y="627.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.08%)</title><rect x="580.1" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.08%)</title><rect x="580.1" y="595.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.08%)</title><rect x="580.1" y="579.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.05%)</title><rect x="580.5" y="563.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="583.5" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.05%)</title><rect x="580.5" y="547.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="583.5" y="558.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="580.7" y="531.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="583.7" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="580.7" y="515.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="583.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$65/1115085888.run (1,584 samples, 16.65%)</title><rect x="581.1" y="659.0" width="196.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.1" y="670.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$executeAsync$3 (1,584 samples, 16.65%)</title><rect x="581.1" y="643.0" width="196.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.1" y="654.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (264 samples, 2.77%)</title><rect x="581.2" y="627.0" width="32.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.2" y="638.0">on..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.03%)</title><rect x="581.8" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="581.8" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="584.8" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="581.8" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (253 samples, 2.66%)</title><rect x="582.2" y="611.0" width="31.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="585.2" y="622.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.09%)</title><rect x="582.2" y="595.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="585.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.03%)</title><rect x="582.9" y="579.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="585.9" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.03%)</title><rect x="582.9" y="563.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="585.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="582.9" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (244 samples, 2.56%)</title><rect x="583.3" y="595.0" width="30.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.3" y="606.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (244 samples, 2.56%)</title><rect x="583.3" y="579.0" width="30.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="586.3" y="590.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (243 samples, 2.55%)</title><rect x="583.4" y="563.0" width="30.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.4" y="574.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (243 samples, 2.55%)</title><rect x="583.4" y="547.0" width="30.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="586.4" y="558.0">on..</text>
</g>
<g>
<title>.annobin_send.c (233 samples, 2.45%)</title><rect x="583.8" y="531.0" width="28.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="586.8" y="542.0">.a..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="585.2" y="515.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="588.2" y="526.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (218 samples, 2.29%)</title><rect x="585.7" y="515.0" width="27.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="588.7" y="526.0">e..</text>
</g>
<g>
<title>do_syscall_64 (218 samples, 2.29%)</title><rect x="585.7" y="499.0" width="27.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="588.7" y="510.0">d..</text>
</g>
<g>
<title>__x64_sys_sendto (212 samples, 2.23%)</title><rect x="586.4" y="483.0" width="26.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="589.4" y="494.0">_..</text>
</g>
<g>
<title>__sys_sendto (212 samples, 2.23%)</title><rect x="586.4" y="467.0" width="26.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="589.4" y="478.0">_..</text>
</g>
<g>
<title>sock_sendmsg (200 samples, 2.10%)</title><rect x="586.5" y="451.0" width="24.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="589.5" y="462.0">s..</text>
</g>
<g>
<title>tcp_sendmsg (198 samples, 2.08%)</title><rect x="586.8" y="435.0" width="24.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="589.8" y="446.0">t..</text>
</g>
<g>
<title>tcp_sendmsg_locked (197 samples, 2.07%)</title><rect x="586.9" y="419.0" width="24.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="589.9" y="430.0">t..</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.03%)</title><rect x="587.3" y="403.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="590.3" y="414.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (178 samples, 1.87%)</title><rect x="587.7" y="403.0" width="22.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="590.7" y="414.0">_..</text>
</g>
<g>
<title>tcp_write_xmit (178 samples, 1.87%)</title><rect x="587.7" y="387.0" width="22.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="590.7" y="398.0">t..</text>
</g>
<g>
<title>__tcp_transmit_skb (170 samples, 1.79%)</title><rect x="587.8" y="371.0" width="21.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="590.8" y="382.0">_..</text>
</g>
<g>
<title>__ip_queue_xmit (161 samples, 1.69%)</title><rect x="588.5" y="355.0" width="20.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="591.5" y="366.0"></text>
</g>
<g>
<title>ip_local_out (31 samples, 0.33%)</title><rect x="588.8" y="339.0" width="3.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="591.8" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (31 samples, 0.33%)</title><rect x="588.8" y="323.0" width="3.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="591.8" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (30 samples, 0.32%)</title><rect x="588.9" y="307.0" width="3.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="591.9" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (6 samples, 0.06%)</title><rect x="589.0" y="291.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="592.0" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (4 samples, 0.04%)</title><rect x="589.9" y="291.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="592.9" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (11 samples, 0.12%)</title><rect x="590.8" y="291.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="593.8" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (5 samples, 0.05%)</title><rect x="590.9" y="275.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="593.9" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (5 samples, 0.05%)</title><rect x="591.5" y="275.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="594.5" y="286.0"></text>
</g>
<g>
<title>ip_output (128 samples, 1.35%)</title><rect x="592.6" y="339.0" width="15.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="595.6" y="350.0"></text>
</g>
<g>
<title>ip_finish_output2 (119 samples, 1.25%)</title><rect x="592.7" y="323.0" width="14.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="595.7" y="334.0"></text>
</g>
<g>
<title>__dev_queue_xmit (5 samples, 0.05%)</title><rect x="594.0" y="307.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="597.0" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (5 samples, 0.05%)</title><rect x="594.0" y="291.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="597.0" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (5 samples, 0.05%)</title><rect x="594.0" y="275.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="597.0" y="286.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.03%)</title><rect x="594.1" y="259.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="597.1" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.03%)</title><rect x="594.1" y="243.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="597.1" y="254.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (104 samples, 1.09%)</title><rect x="594.6" y="307.0" width="12.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="597.6" y="318.0"></text>
</g>
<g>
<title>do_softirq.part.0 (104 samples, 1.09%)</title><rect x="594.6" y="291.0" width="12.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="597.6" y="302.0"></text>
</g>
<g>
<title>do_softirq_own_stack (104 samples, 1.09%)</title><rect x="594.6" y="275.0" width="12.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="597.6" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (104 samples, 1.09%)</title><rect x="594.6" y="259.0" width="12.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="597.6" y="270.0"></text>
</g>
<g>
<title>net_rx_action (103 samples, 1.08%)</title><rect x="594.7" y="243.0" width="12.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="597.7" y="254.0"></text>
</g>
<g>
<title>process_backlog (100 samples, 1.05%)</title><rect x="595.1" y="227.0" width="12.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="598.1" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (99 samples, 1.04%)</title><rect x="595.2" y="211.0" width="12.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="598.2" y="222.0"></text>
</g>
<g>
<title>ip_rcv (99 samples, 1.04%)</title><rect x="595.2" y="195.0" width="12.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="598.2" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (81 samples, 0.85%)</title><rect x="595.3" y="179.0" width="10.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="598.3" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (68 samples, 0.71%)</title><rect x="595.5" y="163.0" width="8.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="598.5" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (66 samples, 0.69%)</title><rect x="595.7" y="147.0" width="8.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="598.7" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (66 samples, 0.69%)</title><rect x="595.7" y="131.0" width="8.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="598.7" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (12 samples, 0.13%)</title><rect x="596.3" y="115.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="599.3" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (48 samples, 0.50%)</title><rect x="598.0" y="115.0" width="5.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="601.0" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (48 samples, 0.50%)</title><rect x="598.0" y="99.0" width="5.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="601.0" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (9 samples, 0.09%)</title><rect x="598.3" y="83.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="601.3" y="94.0"></text>
</g>
<g>
<title>__wake_up_common_lock (9 samples, 0.09%)</title><rect x="598.3" y="67.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="601.3" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (9 samples, 0.09%)</title><rect x="598.3" y="51.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="601.3" y="62.0"></text>
</g>
<g>
<title>tcp_ack (10 samples, 0.11%)</title><rect x="599.4" y="83.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="602.4" y="94.0"></text>
</g>
<g>
<title>tcp_data_queue (23 samples, 0.24%)</title><rect x="600.7" y="83.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="603.7" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (21 samples, 0.22%)</title><rect x="600.7" y="67.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="603.7" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (20 samples, 0.21%)</title><rect x="600.8" y="51.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="603.8" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (20 samples, 0.21%)</title><rect x="600.8" y="35.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="603.8" y="46.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.03%)</title><rect x="603.5" y="83.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="606.5" y="94.0"></text>
</g>
<g>
<title>nf_hook_slow (12 samples, 0.13%)</title><rect x="603.9" y="163.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="606.9" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (10 samples, 0.11%)</title><rect x="604.0" y="147.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="607.0" y="158.0"></text>
</g>
<g>
<title>nf_hook_slow (15 samples, 0.16%)</title><rect x="605.6" y="179.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="608.6" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (14 samples, 0.15%)</title><rect x="605.8" y="163.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="608.8" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (8 samples, 0.08%)</title><rect x="607.5" y="323.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="610.5" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (3 samples, 0.03%)</title><rect x="607.5" y="307.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="610.5" y="318.0"></text>
</g>
<g>
<title>selinux_ip_postroute (3 samples, 0.03%)</title><rect x="608.1" y="307.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="611.1" y="318.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (4 samples, 0.04%)</title><rect x="609.2" y="371.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="612.2" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (8 samples, 0.08%)</title><rect x="609.7" y="403.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="612.7" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.08%)</title><rect x="609.7" y="387.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="612.7" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (4 samples, 0.04%)</title><rect x="609.7" y="371.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="612.7" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (3 samples, 0.03%)</title><rect x="609.9" y="355.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="612.9" y="366.0"></text>
</g>
<g>
<title>tcp_send_mss (3 samples, 0.03%)</title><rect x="610.9" y="403.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="613.9" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.03%)</title><rect x="610.9" y="387.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="613.9" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (11 samples, 0.12%)</title><rect x="611.3" y="451.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="614.3" y="462.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.12%)</title><rect x="611.3" y="435.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="614.3" y="446.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.07%)</title><rect x="611.8" y="419.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="614.8" y="430.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.07%)</title><rect x="612.7" y="531.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="615.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.07%)</title><rect x="612.7" y="515.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="615.7" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.06%)</title><rect x="612.8" y="499.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="615.8" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="613.1" y="483.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="616.1" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="613.6" y="611.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$81/1409716107.get (1,319 samples, 13.86%)</title><rect x="614.0" y="627.0" width="163.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.0" y="638.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$entity$0 (1,319 samples, 13.86%)</title><rect x="614.0" y="611.0" width="163.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.0" y="622.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.get (1,319 samples, 13.86%)</title><rect x="614.0" y="595.0" width="163.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.0" y="606.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,315 samples, 13.82%)</title><rect x="614.3" y="579.0" width="163.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.3" y="590.0">ru/mail/polis/dao/DAO..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (119 samples, 1.25%)</title><rect x="614.3" y="563.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (119 samples, 1.25%)</title><rect x="614.3" y="547.0" width="14.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.3" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (119 samples, 1.25%)</title><rect x="614.3" y="531.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.3" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (117 samples, 1.23%)</title><rect x="614.6" y="515.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (115 samples, 1.21%)</title><rect x="614.7" y="499.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (101 samples, 1.06%)</title><rect x="614.9" y="483.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.9" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (71 samples, 0.75%)</title><rect x="614.9" y="467.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.9" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (71 samples, 0.75%)</title><rect x="614.9" y="451.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.9" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (71 samples, 0.75%)</title><rect x="614.9" y="435.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="617.9" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (69 samples, 0.73%)</title><rect x="615.2" y="419.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (69 samples, 0.73%)</title><rect x="615.2" y="403.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="618.2" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5 samples, 0.05%)</title><rect x="615.6" y="387.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="618.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (61 samples, 0.64%)</title><rect x="616.2" y="387.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="619.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (61 samples, 0.64%)</title><rect x="616.2" y="371.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="619.2" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (61 samples, 0.64%)</title><rect x="616.2" y="355.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="619.2" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (61 samples, 0.64%)</title><rect x="616.2" y="339.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.2" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (61 samples, 0.64%)</title><rect x="616.2" y="323.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="619.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (61 samples, 0.64%)</title><rect x="616.2" y="307.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="619.2" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (58 samples, 0.61%)</title><rect x="616.6" y="291.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="619.6" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (57 samples, 0.60%)</title><rect x="616.7" y="275.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="619.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (28 samples, 0.29%)</title><rect x="616.8" y="259.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="619.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 0.28%)</title><rect x="616.9" y="243.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="619.9" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (24 samples, 0.25%)</title><rect x="617.1" y="227.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.06%)</title><rect x="618.8" y="211.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="621.8" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.03%)</title><rect x="619.2" y="195.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (26 samples, 0.27%)</title><rect x="620.3" y="259.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (26 samples, 0.27%)</title><rect x="620.3" y="243.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (21 samples, 0.22%)</title><rect x="620.3" y="227.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (21 samples, 0.22%)</title><rect x="620.3" y="211.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (21 samples, 0.22%)</title><rect x="620.3" y="195.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (21 samples, 0.22%)</title><rect x="620.3" y="179.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (21 samples, 0.22%)</title><rect x="620.3" y="163.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.22%)</title><rect x="620.3" y="147.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.22%)</title><rect x="620.3" y="131.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.3" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="621.0" y="115.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.0" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="621.6" y="99.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.6" y="110.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="622.3" y="99.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="625.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="622.9" y="227.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.9" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (30 samples, 0.32%)</title><rect x="623.7" y="467.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.7" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (30 samples, 0.32%)</title><rect x="623.7" y="451.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.7" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (30 samples, 0.32%)</title><rect x="623.7" y="435.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.7" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (30 samples, 0.32%)</title><rect x="623.7" y="419.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30 samples, 0.32%)</title><rect x="623.7" y="403.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="626.7" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30 samples, 0.32%)</title><rect x="623.7" y="387.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.7" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (16 samples, 0.17%)</title><rect x="623.7" y="371.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (16 samples, 0.17%)</title><rect x="623.7" y="355.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="626.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (16 samples, 0.17%)</title><rect x="623.7" y="339.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="626.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (16 samples, 0.17%)</title><rect x="623.7" y="323.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="626.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (6 samples, 0.06%)</title><rect x="623.7" y="307.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.7" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="623.7" y="291.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="623.7" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="623.9" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.9" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="623.9" y="243.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.9" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="623.9" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="623.9" y="211.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="623.9" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.04%)</title><rect x="624.7" y="307.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="627.7" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="624.7" y="291.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="627.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="624.7" y="275.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="624.7" y="259.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="627.7" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="624.7" y="243.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="624.7" y="227.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="624.7" y="211.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="627.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="624.7" y="195.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (4 samples, 0.04%)</title><rect x="625.2" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="628.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (14 samples, 0.15%)</title><rect x="625.7" y="371.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="628.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (14 samples, 0.15%)</title><rect x="625.7" y="355.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="628.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (14 samples, 0.15%)</title><rect x="625.7" y="339.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="628.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.15%)</title><rect x="625.7" y="323.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (13 samples, 0.14%)</title><rect x="625.9" y="307.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="628.9" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (13 samples, 0.14%)</title><rect x="625.9" y="291.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.9" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (11 samples, 0.12%)</title><rect x="626.1" y="275.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.1" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (11 samples, 0.12%)</title><rect x="626.1" y="259.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="629.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.06%)</title><rect x="626.2" y="243.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.06%)</title><rect x="626.2" y="227.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.2" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.06%)</title><rect x="626.2" y="211.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="626.4" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="629.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (4 samples, 0.04%)</title><rect x="627.0" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="630.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="627.0" y="227.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="630.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="627.0" y="211.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="630.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="627.0" y="195.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="627.0" y="179.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="627.0" y="163.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.0" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="627.0" y="147.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="627.0" y="131.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="627.0" y="115.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5 samples, 0.05%)</title><rect x="627.5" y="483.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="630.5" y="494.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="627.6" y="467.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="630.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$72/878358964.apply (7 samples, 0.07%)</title><rect x="628.1" y="483.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (7 samples, 0.07%)</title><rect x="628.1" y="467.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="628.1" y="451.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="628.1" y="435.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="628.1" y="419.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="631.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="628.1" y="403.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.1" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="628.1" y="387.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="631.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="628.1" y="371.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="628.1" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="628.1" y="339.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.1" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 0.03%)</title><rect x="629.1" y="563.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (3 samples, 0.03%)</title><rect x="629.1" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$80/527983093.apply (3 samples, 0.03%)</title><rect x="629.1" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="632.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (3 samples, 0.03%)</title><rect x="629.1" y="515.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="632.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,192 samples, 12.53%)</title><rect x="629.6" y="563.0" width="147.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.6" y="574.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,177 samples, 12.37%)</title><rect x="631.4" y="547.0" width="146.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="634.4" y="558.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (990 samples, 10.40%)</title><rect x="631.4" y="531.0" width="122.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.4" y="542.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 0.09%)</title><rect x="631.4" y="515.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.4" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.06%)</title><rect x="631.8" y="499.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.8" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.06%)</title><rect x="631.8" y="483.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.8" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.06%)</title><rect x="631.8" y="467.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="634.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (82 samples, 0.86%)</title><rect x="632.7" y="515.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (82 samples, 0.86%)</title><rect x="632.7" y="499.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (78 samples, 0.82%)</title><rect x="633.2" y="483.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (5 samples, 0.05%)</title><rect x="633.3" y="467.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="636.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (72 samples, 0.76%)</title><rect x="633.9" y="467.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="636.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (19 samples, 0.20%)</title><rect x="636.0" y="451.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.05%)</title><rect x="636.8" y="435.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.08%)</title><rect x="637.4" y="435.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="640.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.08%)</title><rect x="637.4" y="419.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.4" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.08%)</title><rect x="637.4" y="403.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="640.4" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.06%)</title><rect x="637.6" y="387.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.05%)</title><rect x="637.8" y="371.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (36 samples, 0.38%)</title><rect x="638.4" y="451.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (13 samples, 0.14%)</title><rect x="641.2" y="435.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (7 samples, 0.07%)</title><rect x="641.5" y="419.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="642.4" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="642.4" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.4" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="642.4" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (10 samples, 0.11%)</title><rect x="642.8" y="515.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="645.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (6 samples, 0.06%)</title><rect x="643.2" y="499.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (6 samples, 0.06%)</title><rect x="643.2" y="483.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="646.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (4 samples, 0.04%)</title><rect x="643.5" y="467.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="643.5" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (4 samples, 0.04%)</title><rect x="643.5" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="646.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (4 samples, 0.04%)</title><rect x="643.5" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (4 samples, 0.04%)</title><rect x="643.5" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="646.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (4 samples, 0.04%)</title><rect x="643.5" y="387.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (888 samples, 9.33%)</title><rect x="644.1" y="515.0" width="110.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.1" y="526.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (885 samples, 9.30%)</title><rect x="644.5" y="499.0" width="109.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.5" y="510.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (882 samples, 9.27%)</title><rect x="644.8" y="483.0" width="109.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.8" y="494.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (224 samples, 2.35%)</title><rect x="647.3" y="467.0" width="27.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="650.3" y="478.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (167 samples, 1.76%)</title><rect x="650.4" y="451.0" width="20.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (14 samples, 0.15%)</title><rect x="659.5" y="435.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.5" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (30 samples, 0.32%)</title><rect x="661.2" y="435.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.2" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 0.15%)</title><rect x="663.2" y="419.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.2" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (6 samples, 0.06%)</title><rect x="664.9" y="435.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.9" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.13%)</title><rect x="665.7" y="435.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.7" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.04%)</title><rect x="666.7" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="669.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (25 samples, 0.26%)</title><rect x="667.2" y="435.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.2" y="446.0"></text>
</g>
<g>
<title>vtable stub (7 samples, 0.07%)</title><rect x="670.3" y="435.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="673.3" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (23 samples, 0.24%)</title><rect x="671.1" y="451.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="674.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (12 samples, 0.13%)</title><rect x="672.5" y="435.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.04%)</title><rect x="674.0" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.0" y="462.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="674.5" y="451.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="677.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (292 samples, 3.07%)</title><rect x="675.1" y="467.0" width="36.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="678.1" y="478.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (102 samples, 1.07%)</title><rect x="675.1" y="451.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="678.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (102 samples, 1.07%)</title><rect x="675.1" y="435.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="679.1" y="419.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="682.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (66 samples, 0.69%)</title><rect x="679.6" y="419.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="679.6" y="403.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="682.6" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="679.6" y="387.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="679.6" y="371.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="682.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="679.6" y="355.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="682.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="679.6" y="339.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="682.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (46 samples, 0.48%)</title><rect x="679.6" y="323.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.15%)</title><rect x="682.3" y="307.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.15%)</title><rect x="682.3" y="291.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.3" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (14 samples, 0.15%)</title><rect x="682.3" y="275.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (10 samples, 0.11%)</title><rect x="684.0" y="307.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="687.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (20 samples, 0.21%)</title><rect x="685.3" y="323.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="688.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.06%)</title><rect x="686.1" y="307.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.1" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.07%)</title><rect x="686.9" y="307.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="689.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.07%)</title><rect x="686.9" y="291.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="689.9" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.07%)</title><rect x="686.9" y="275.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (190 samples, 2.00%)</title><rect x="687.7" y="451.0" width="23.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.7" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (190 samples, 2.00%)</title><rect x="687.7" y="435.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.7" y="446.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (190 samples, 2.00%)</title><rect x="687.7" y="419.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.7" y="430.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (190 samples, 2.00%)</title><rect x="687.7" y="403.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.7" y="414.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (190 samples, 2.00%)</title><rect x="687.7" y="387.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.7" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (190 samples, 2.00%)</title><rect x="687.7" y="371.0" width="23.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.7" y="382.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (190 samples, 2.00%)</title><rect x="687.7" y="355.0" width="23.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.7" y="366.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (177 samples, 1.86%)</title><rect x="687.7" y="339.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="690.7" y="350.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (177 samples, 1.86%)</title><rect x="687.7" y="323.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="690.7" y="334.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.11%)</title><rect x="707.6" y="307.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="707.6" y="291.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.6" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.06%)</title><rect x="708.8" y="307.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="711.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.14%)</title><rect x="709.7" y="339.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.7" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.14%)</title><rect x="709.7" y="323.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.07%)</title><rect x="710.4" y="307.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.07%)</title><rect x="710.4" y="291.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (346 samples, 3.64%)</title><rect x="711.3" y="467.0" width="42.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.3" y="478.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (194 samples, 2.04%)</title><rect x="711.4" y="451.0" width="24.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.4" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (194 samples, 2.04%)</title><rect x="711.4" y="435.0" width="24.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.4" y="446.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.09%)</title><rect x="714.8" y="419.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="717.8" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (158 samples, 1.66%)</title><rect x="715.9" y="419.0" width="19.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.9" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (158 samples, 1.66%)</title><rect x="715.9" y="403.0" width="19.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.9" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (158 samples, 1.66%)</title><rect x="715.9" y="387.0" width="19.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="718.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (158 samples, 1.66%)</title><rect x="715.9" y="371.0" width="19.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (158 samples, 1.66%)</title><rect x="715.9" y="355.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="718.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (158 samples, 1.66%)</title><rect x="715.9" y="339.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (137 samples, 1.44%)</title><rect x="715.9" y="323.0" width="17.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="718.9" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (137 samples, 1.44%)</title><rect x="715.9" y="307.0" width="17.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.13%)</title><rect x="731.3" y="291.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="734.3" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.13%)</title><rect x="731.3" y="275.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="734.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.22%)</title><rect x="732.9" y="323.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="735.9" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.22%)</title><rect x="732.9" y="307.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="735.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="733.7" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.09%)</title><rect x="734.4" y="291.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="737.4" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.09%)</title><rect x="734.4" y="275.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (151 samples, 1.59%)</title><rect x="735.5" y="451.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="738.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (151 samples, 1.59%)</title><rect x="735.5" y="435.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.5" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (151 samples, 1.59%)</title><rect x="735.5" y="419.0" width="18.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="738.5" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (151 samples, 1.59%)</title><rect x="735.5" y="403.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (151 samples, 1.59%)</title><rect x="735.5" y="387.0" width="18.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (151 samples, 1.59%)</title><rect x="735.5" y="371.0" width="18.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="738.5" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (151 samples, 1.59%)</title><rect x="735.5" y="355.0" width="18.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="738.5" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (101 samples, 1.06%)</title><rect x="735.5" y="339.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="738.5" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (101 samples, 1.06%)</title><rect x="735.5" y="323.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="738.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (101 samples, 1.06%)</title><rect x="735.5" y="307.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="738.5" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (23 samples, 0.24%)</title><rect x="743.9" y="291.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="746.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.11%)</title><rect x="746.8" y="291.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (50 samples, 0.53%)</title><rect x="748.0" y="339.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (50 samples, 0.53%)</title><rect x="748.0" y="323.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (50 samples, 0.53%)</title><rect x="748.0" y="307.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="751.0" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.06%)</title><rect x="752.6" y="291.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="755.6" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.07%)</title><rect x="753.3" y="291.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.reduceIterators (187 samples, 1.97%)</title><rect x="754.2" y="531.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.2" y="542.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (163 samples, 1.71%)</title><rect x="754.3" y="515.0" width="20.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.3" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (162 samples, 1.70%)</title><rect x="754.5" y="499.0" width="20.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (141 samples, 1.48%)</title><rect x="756.8" y="483.0" width="17.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="759.8" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (141 samples, 1.48%)</title><rect x="756.8" y="467.0" width="17.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.8" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (3 samples, 0.03%)</title><rect x="756.8" y="451.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="759.8" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="756.8" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.8" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (138 samples, 1.45%)</title><rect x="757.2" y="451.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.2" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (138 samples, 1.45%)</title><rect x="757.2" y="435.0" width="17.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (138 samples, 1.45%)</title><rect x="757.2" y="419.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (138 samples, 1.45%)</title><rect x="757.2" y="403.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.2" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (64 samples, 0.67%)</title><rect x="757.2" y="387.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="760.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (62 samples, 0.65%)</title><rect x="757.4" y="371.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (62 samples, 0.65%)</title><rect x="757.4" y="355.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (62 samples, 0.65%)</title><rect x="757.4" y="339.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="760.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (23 samples, 0.24%)</title><rect x="757.4" y="323.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.13%)</title><rect x="757.4" y="307.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.13%)</title><rect x="757.4" y="291.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="760.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="758.1" y="275.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.1" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="758.1" y="259.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.1" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="758.1" y="243.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="758.1" y="227.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="758.1" y="211.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="758.3" y="195.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="761.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (11 samples, 0.12%)</title><rect x="758.9" y="307.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="758.9" y="291.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="758.9" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="761.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="758.9" y="259.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="761.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="758.9" y="243.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="758.9" y="227.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="758.9" y="211.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="761.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (17 samples, 0.18%)</title><rect x="760.3" y="323.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 0.16%)</title><rect x="760.3" y="307.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 0.16%)</title><rect x="760.3" y="291.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (13 samples, 0.14%)</title><rect x="760.5" y="275.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="763.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="760.5" y="259.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="763.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="760.5" y="243.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="760.5" y="227.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="763.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="760.5" y="211.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="763.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="760.5" y="195.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="763.5" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.13%)</title><rect x="760.5" y="179.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.5" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.13%)</title><rect x="760.5" y="163.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (6 samples, 0.06%)</title><rect x="762.4" y="323.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="765.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="762.4" y="307.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="765.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.06%)</title><rect x="762.4" y="291.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="765.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.06%)</title><rect x="762.4" y="275.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="765.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="762.4" y="259.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="765.4" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="762.4" y="243.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="765.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="762.4" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="762.4" y="211.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="765.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (16 samples, 0.17%)</title><rect x="763.1" y="323.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="763.1" y="307.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="763.1" y="291.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="766.1" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="763.1" y="275.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="766.1" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="763.1" y="259.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.1" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="763.1" y="243.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="766.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="763.1" y="227.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="763.1" y="211.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (9 samples, 0.09%)</title><rect x="764.0" y="307.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.09%)</title><rect x="764.0" y="291.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="764.0" y="275.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.0" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="764.0" y="259.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="764.0" y="243.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="767.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="764.0" y="227.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="767.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="764.0" y="211.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (74 samples, 0.78%)</title><rect x="765.1" y="387.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="768.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (74 samples, 0.78%)</title><rect x="765.1" y="371.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="768.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (74 samples, 0.78%)</title><rect x="765.1" y="355.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="768.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (74 samples, 0.78%)</title><rect x="765.1" y="339.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="768.1" y="350.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="766.4" y="323.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="769.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (60 samples, 0.63%)</title><rect x="766.7" y="323.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (60 samples, 0.63%)</title><rect x="766.7" y="307.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (55 samples, 0.58%)</title><rect x="767.1" y="291.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="770.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (55 samples, 0.58%)</title><rect x="767.1" y="275.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="770.1" y="286.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.05%)</title><rect x="767.2" y="259.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="770.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (26 samples, 0.27%)</title><rect x="767.9" y="259.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (25 samples, 0.26%)</title><rect x="768.0" y="243.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.0" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (20 samples, 0.21%)</title><rect x="768.5" y="227.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.05%)</title><rect x="769.2" y="211.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="772.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (3 samples, 0.03%)</title><rect x="769.8" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.8" y="222.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.04%)</title><rect x="770.5" y="211.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="773.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (23 samples, 0.24%)</title><rect x="771.1" y="259.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="774.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (23 samples, 0.24%)</title><rect x="771.1" y="243.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="774.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (17 samples, 0.18%)</title><rect x="771.1" y="227.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="774.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (17 samples, 0.18%)</title><rect x="771.1" y="211.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="774.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (17 samples, 0.18%)</title><rect x="771.1" y="195.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.1" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="771.1" y="179.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="774.1" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="771.1" y="163.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="774.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="771.1" y="147.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="771.1" y="131.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.1" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="771.6" y="115.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="772.3" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="773.2" y="227.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="776.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="773.4" y="211.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="776.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="773.4" y="195.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="773.4" y="179.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.4" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="773.4" y="163.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="773.4" y="147.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="773.4" y="131.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (23 samples, 0.24%)</title><rect x="774.6" y="515.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (23 samples, 0.24%)</title><rect x="774.6" y="499.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="777.6" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (23 samples, 0.24%)</title><rect x="774.6" y="483.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="777.6" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (18 samples, 0.19%)</title><rect x="774.6" y="467.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (18 samples, 0.19%)</title><rect x="774.6" y="451.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="777.6" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (18 samples, 0.19%)</title><rect x="774.6" y="435.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="777.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16 samples, 0.17%)</title><rect x="774.8" y="419.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16 samples, 0.17%)</title><rect x="774.8" y="403.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="777.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (15 samples, 0.16%)</title><rect x="774.9" y="387.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="777.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (15 samples, 0.16%)</title><rect x="774.9" y="371.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="777.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (15 samples, 0.16%)</title><rect x="774.9" y="355.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="777.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (15 samples, 0.16%)</title><rect x="774.9" y="339.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="777.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (15 samples, 0.16%)</title><rect x="774.9" y="323.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (15 samples, 0.16%)</title><rect x="774.9" y="307.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="777.9" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (13 samples, 0.14%)</title><rect x="775.2" y="291.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.2" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (13 samples, 0.14%)</title><rect x="775.2" y="275.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="775.3" y="259.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="775.3" y="243.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="778.3" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="775.4" y="227.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (7 samples, 0.07%)</title><rect x="775.9" y="259.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (7 samples, 0.07%)</title><rect x="775.9" y="243.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="775.9" y="227.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="775.9" y="211.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="778.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="775.9" y="195.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="778.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="775.9" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="775.9" y="163.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="775.9" y="147.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="775.9" y="131.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.9" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5 samples, 0.05%)</title><rect x="776.8" y="467.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.8" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5 samples, 0.05%)</title><rect x="776.8" y="451.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.8" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5 samples, 0.05%)</title><rect x="776.8" y="435.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.8" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5 samples, 0.05%)</title><rect x="776.8" y="419.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.05%)</title><rect x="776.8" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.8" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.05%)</title><rect x="776.8" y="387.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.8" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3 samples, 0.03%)</title><rect x="776.8" y="371.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.03%)</title><rect x="776.8" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="779.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.03%)</title><rect x="776.8" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="779.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (3 samples, 0.03%)</title><rect x="776.8" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="779.8" y="334.0"></text>
</g>
<g>
<title>[worker-3 tid=25393] (1,646 samples, 17.30%)</title><rect x="777.5" y="723.0" width="204.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="780.5" y="734.0">[worker-3 tid=25393]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (9 samples, 0.09%)</title><rect x="777.5" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="780.5" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (7 samples, 0.07%)</title><rect x="777.7" y="691.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="780.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (6 samples, 0.06%)</title><rect x="777.8" y="675.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="780.8" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.06%)</title><rect x="777.8" y="659.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="780.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.04%)</title><rect x="777.9" y="643.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="780.9" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="778.0" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.03%)</title><rect x="778.0" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="781.0" y="622.0"></text>
</g>
<g>
<title>[unknown_Java] (18 samples, 0.19%)</title><rect x="779.0" y="707.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="782.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,616 samples, 16.98%)</title><rect x="781.2" y="707.0" width="200.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.2" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,616 samples, 16.98%)</title><rect x="781.2" y="691.0" width="200.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.2" y="702.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,616 samples, 16.98%)</title><rect x="781.2" y="675.0" width="200.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.2" y="686.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 0.19%)</title><rect x="781.2" y="659.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="784.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (16 samples, 0.17%)</title><rect x="781.5" y="643.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (11 samples, 0.12%)</title><rect x="781.6" y="627.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.08%)</title><rect x="782.0" y="611.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.08%)</title><rect x="782.0" y="595.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.0" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.03%)</title><rect x="782.2" y="579.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="785.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="782.6" y="579.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="785.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.04%)</title><rect x="783.0" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="786.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.04%)</title><rect x="783.0" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.04%)</title><rect x="783.0" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="786.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.04%)</title><rect x="783.0" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="786.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$65/1115085888.run (1,598 samples, 16.79%)</title><rect x="783.5" y="659.0" width="198.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="786.5" y="670.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$executeAsync$3 (1,598 samples, 16.79%)</title><rect x="783.5" y="643.0" width="198.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="786.5" y="654.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (241 samples, 2.53%)</title><rect x="783.5" y="627.0" width="29.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="786.5" y="638.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (231 samples, 2.43%)</title><rect x="784.1" y="611.0" width="28.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.1" y="622.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.09%)</title><rect x="784.2" y="595.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.04%)</title><rect x="784.8" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.04%)</title><rect x="784.8" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="784.8" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="787.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (221 samples, 2.32%)</title><rect x="785.3" y="595.0" width="27.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.3" y="606.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (221 samples, 2.32%)</title><rect x="785.3" y="579.0" width="27.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.3" y="590.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (220 samples, 2.31%)</title><rect x="785.5" y="563.0" width="27.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="788.5" y="574.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (220 samples, 2.31%)</title><rect x="785.5" y="547.0" width="27.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.5" y="558.0">o..</text>
</g>
<g>
<title>.annobin_send.c (212 samples, 2.23%)</title><rect x="785.6" y="531.0" width="26.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="788.6" y="542.0">...</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (204 samples, 2.14%)</title><rect x="786.6" y="515.0" width="25.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="789.6" y="526.0">e..</text>
</g>
<g>
<title>do_syscall_64 (204 samples, 2.14%)</title><rect x="786.6" y="499.0" width="25.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="789.6" y="510.0">d..</text>
</g>
<g>
<title>__x64_sys_sendto (197 samples, 2.07%)</title><rect x="787.4" y="483.0" width="24.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="790.4" y="494.0">_..</text>
</g>
<g>
<title>__sys_sendto (197 samples, 2.07%)</title><rect x="787.4" y="467.0" width="24.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="790.4" y="478.0">_..</text>
</g>
<g>
<title>sock_sendmsg (186 samples, 1.95%)</title><rect x="787.8" y="451.0" width="23.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="790.8" y="462.0">s..</text>
</g>
<g>
<title>tcp_sendmsg (183 samples, 1.92%)</title><rect x="788.2" y="435.0" width="22.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="791.2" y="446.0">t..</text>
</g>
<g>
<title>release_sock (3 samples, 0.03%)</title><rect x="788.2" y="419.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="791.2" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (180 samples, 1.89%)</title><rect x="788.6" y="419.0" width="22.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="791.6" y="430.0">t..</text>
</g>
<g>
<title>__check_object_size (4 samples, 0.04%)</title><rect x="789.1" y="403.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="792.1" y="414.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.03%)</title><rect x="789.2" y="387.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="792.2" y="398.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (163 samples, 1.71%)</title><rect x="789.6" y="403.0" width="20.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="792.6" y="414.0"></text>
</g>
<g>
<title>tcp_write_xmit (163 samples, 1.71%)</title><rect x="789.6" y="387.0" width="20.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="792.6" y="398.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (155 samples, 1.63%)</title><rect x="789.9" y="371.0" width="19.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="792.9" y="382.0"></text>
</g>
<g>
<title>__ip_queue_xmit (151 samples, 1.59%)</title><rect x="790.2" y="355.0" width="18.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="793.2" y="366.0"></text>
</g>
<g>
<title>ip_local_out (39 samples, 0.41%)</title><rect x="790.5" y="339.0" width="4.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="793.5" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (39 samples, 0.41%)</title><rect x="790.5" y="323.0" width="4.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="793.5" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (37 samples, 0.39%)</title><rect x="790.8" y="307.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="793.8" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (13 samples, 0.14%)</title><rect x="790.8" y="291.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="793.8" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (18 samples, 0.19%)</title><rect x="793.0" y="291.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="796.0" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (6 samples, 0.06%)</title><rect x="793.0" y="275.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="796.0" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (7 samples, 0.07%)</title><rect x="794.0" y="275.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="797.0" y="286.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (3 samples, 0.03%)</title><rect x="794.9" y="275.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="797.9" y="286.0"></text>
</g>
<g>
<title>ip_output (109 samples, 1.15%)</title><rect x="795.4" y="339.0" width="13.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="798.4" y="350.0"></text>
</g>
<g>
<title>ip_finish_output2 (92 samples, 0.97%)</title><rect x="795.8" y="323.0" width="11.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="798.8" y="334.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 0.04%)</title><rect x="796.1" y="307.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="799.1" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (4 samples, 0.04%)</title><rect x="796.1" y="291.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="799.1" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.04%)</title><rect x="796.1" y="275.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="799.1" y="286.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.03%)</title><rect x="796.1" y="259.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="799.1" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.03%)</title><rect x="796.1" y="243.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="799.1" y="254.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (85 samples, 0.89%)</title><rect x="796.6" y="307.0" width="10.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="799.6" y="318.0"></text>
</g>
<g>
<title>do_softirq.part.0 (85 samples, 0.89%)</title><rect x="796.6" y="291.0" width="10.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="799.6" y="302.0"></text>
</g>
<g>
<title>do_softirq_own_stack (84 samples, 0.88%)</title><rect x="796.7" y="275.0" width="10.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="799.7" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (84 samples, 0.88%)</title><rect x="796.7" y="259.0" width="10.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="799.7" y="270.0"></text>
</g>
<g>
<title>net_rx_action (82 samples, 0.86%)</title><rect x="797.0" y="243.0" width="10.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="800.0" y="254.0"></text>
</g>
<g>
<title>process_backlog (82 samples, 0.86%)</title><rect x="797.0" y="227.0" width="10.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="800.0" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (77 samples, 0.81%)</title><rect x="797.6" y="211.0" width="9.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="800.6" y="222.0"></text>
</g>
<g>
<title>ip_rcv (75 samples, 0.79%)</title><rect x="797.9" y="195.0" width="9.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="800.9" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (59 samples, 0.62%)</title><rect x="797.9" y="179.0" width="7.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="800.9" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (48 samples, 0.50%)</title><rect x="798.0" y="163.0" width="5.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="801.0" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (48 samples, 0.50%)</title><rect x="798.0" y="147.0" width="5.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="801.0" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (47 samples, 0.49%)</title><rect x="798.1" y="131.0" width="5.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="801.1" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (4 samples, 0.04%)</title><rect x="798.5" y="115.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="801.5" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (38 samples, 0.40%)</title><rect x="799.1" y="115.0" width="4.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="802.1" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (38 samples, 0.40%)</title><rect x="799.1" y="99.0" width="4.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="802.1" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.04%)</title><rect x="799.6" y="83.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="802.6" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.03%)</title><rect x="800.1" y="83.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="803.1" y="94.0"></text>
</g>
<g>
<title>tcp_ack (9 samples, 0.09%)</title><rect x="800.5" y="83.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="803.5" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.05%)</title><rect x="800.8" y="67.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="803.8" y="78.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.03%)</title><rect x="801.1" y="51.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="804.1" y="62.0"></text>
</g>
<g>
<title>tcp_data_queue (16 samples, 0.17%)</title><rect x="801.7" y="83.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="804.7" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (16 samples, 0.17%)</title><rect x="801.7" y="67.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="804.7" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (15 samples, 0.16%)</title><rect x="801.8" y="51.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="804.8" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (15 samples, 0.16%)</title><rect x="801.8" y="35.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="804.8" y="46.0"></text>
</g>
<g>
<title>nf_hook_slow (10 samples, 0.11%)</title><rect x="803.9" y="163.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="806.9" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (8 samples, 0.08%)</title><rect x="803.9" y="147.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="806.9" y="158.0"></text>
</g>
<g>
<title>nf_hook_slow (16 samples, 0.17%)</title><rect x="805.2" y="179.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="808.2" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (12 samples, 0.13%)</title><rect x="805.4" y="163.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="808.4" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (12 samples, 0.13%)</title><rect x="807.4" y="323.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="810.4" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (7 samples, 0.07%)</title><rect x="807.5" y="307.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="810.5" y="318.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.03%)</title><rect x="809.4" y="371.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="812.4" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.03%)</title><rect x="809.8" y="403.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="812.8" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.03%)</title><rect x="809.8" y="387.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="812.8" y="398.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.04%)</title><rect x="810.3" y="403.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="813.3" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.03%)</title><rect x="810.4" y="387.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="813.4" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.08%)</title><rect x="810.9" y="451.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="813.9" y="462.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.08%)</title><rect x="810.9" y="435.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="813.9" y="446.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.07%)</title><rect x="811.0" y="419.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="814.0" y="430.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="812.0" y="531.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="815.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="812.0" y="515.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="815.0" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.03%)</title><rect x="812.0" y="499.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="815.0" y="510.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.03%)</title><rect x="812.4" y="531.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="815.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.05%)</title><rect x="812.7" y="611.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="813.0" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.0" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="813.0" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="816.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$81/1409716107.get (1,357 samples, 14.26%)</title><rect x="813.4" y="627.0" width="168.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.4" y="638.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$entity$0 (1,356 samples, 14.25%)</title><rect x="813.5" y="611.0" width="168.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.5" y="622.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.get (1,356 samples, 14.25%)</title><rect x="813.5" y="595.0" width="168.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.5" y="606.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,351 samples, 14.20%)</title><rect x="814.1" y="579.0" width="167.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.1" y="590.0">ru/mail/polis/dao/DAO..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (129 samples, 1.36%)</title><rect x="814.1" y="563.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (129 samples, 1.36%)</title><rect x="814.1" y="547.0" width="16.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.1" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (129 samples, 1.36%)</title><rect x="814.1" y="531.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (129 samples, 1.36%)</title><rect x="814.1" y="515.0" width="16.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="817.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (129 samples, 1.36%)</title><rect x="814.1" y="499.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (120 samples, 1.26%)</title><rect x="814.2" y="483.0" width="14.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.2" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (71 samples, 0.75%)</title><rect x="814.4" y="467.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.4" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (71 samples, 0.75%)</title><rect x="814.4" y="451.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.4" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (71 samples, 0.75%)</title><rect x="814.4" y="435.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.4" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (70 samples, 0.74%)</title><rect x="814.5" y="419.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (70 samples, 0.74%)</title><rect x="814.5" y="403.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (64 samples, 0.67%)</title><rect x="815.2" y="387.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (64 samples, 0.67%)</title><rect x="815.2" y="371.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="818.2" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (64 samples, 0.67%)</title><rect x="815.2" y="355.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="818.2" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (64 samples, 0.67%)</title><rect x="815.2" y="339.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.2" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (63 samples, 0.66%)</title><rect x="815.4" y="323.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="818.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (63 samples, 0.66%)</title><rect x="815.4" y="307.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="818.4" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (55 samples, 0.58%)</title><rect x="816.3" y="291.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="819.3" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (55 samples, 0.58%)</title><rect x="816.3" y="275.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (21 samples, 0.22%)</title><rect x="816.3" y="259.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 0.21%)</title><rect x="816.5" y="243.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="819.5" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (19 samples, 0.20%)</title><rect x="816.5" y="227.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="819.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.11%)</title><rect x="817.1" y="211.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="820.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.06%)</title><rect x="817.6" y="195.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="820.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (33 samples, 0.35%)</title><rect x="818.9" y="259.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="821.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (33 samples, 0.35%)</title><rect x="818.9" y="243.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (29 samples, 0.30%)</title><rect x="818.9" y="227.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (29 samples, 0.30%)</title><rect x="818.9" y="211.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (29 samples, 0.30%)</title><rect x="818.9" y="195.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="821.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (29 samples, 0.30%)</title><rect x="818.9" y="179.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (29 samples, 0.30%)</title><rect x="818.9" y="163.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (29 samples, 0.30%)</title><rect x="818.9" y="147.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (29 samples, 0.30%)</title><rect x="818.9" y="131.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="821.9" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (21 samples, 0.22%)</title><rect x="819.8" y="115.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.8" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.06%)</title><rect x="820.8" y="99.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.8" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="821.2" y="83.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="824.2" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="821.2" y="67.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.2" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.03%)</title><rect x="821.2" y="51.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="824.2" y="62.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="821.8" y="99.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="824.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="822.5" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="825.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (48 samples, 0.50%)</title><rect x="823.2" y="467.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.2" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (48 samples, 0.50%)</title><rect x="823.2" y="451.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.2" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (48 samples, 0.50%)</title><rect x="823.2" y="435.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="826.2" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (48 samples, 0.50%)</title><rect x="823.2" y="419.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (48 samples, 0.50%)</title><rect x="823.2" y="403.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.2" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (48 samples, 0.50%)</title><rect x="823.2" y="387.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="826.2" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (23 samples, 0.24%)</title><rect x="823.2" y="371.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (20 samples, 0.21%)</title><rect x="823.5" y="355.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (20 samples, 0.21%)</title><rect x="823.5" y="339.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="826.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (20 samples, 0.21%)</title><rect x="823.5" y="323.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (10 samples, 0.11%)</title><rect x="823.5" y="307.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="823.5" y="291.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.5" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.06%)</title><rect x="823.5" y="275.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="823.7" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="826.7" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="823.7" y="243.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="823.7" y="227.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="826.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="823.7" y="211.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="823.7" y="195.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="826.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.04%)</title><rect x="824.3" y="291.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="824.3" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="827.3" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="824.3" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.3" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="824.3" y="243.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="827.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="824.3" y="227.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="824.3" y="211.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.3" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="824.3" y="195.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="827.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (4 samples, 0.04%)</title><rect x="824.8" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="827.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (4 samples, 0.04%)</title><rect x="825.5" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="828.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (25 samples, 0.26%)</title><rect x="826.0" y="371.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (25 samples, 0.26%)</title><rect x="826.0" y="355.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="829.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (25 samples, 0.26%)</title><rect x="826.0" y="339.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="829.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (25 samples, 0.26%)</title><rect x="826.0" y="323.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.0" y="334.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="826.1" y="307.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="829.1" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (21 samples, 0.22%)</title><rect x="826.5" y="307.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="829.5" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (21 samples, 0.22%)</title><rect x="826.5" y="291.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="829.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (20 samples, 0.21%)</title><rect x="826.6" y="275.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="829.6" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (20 samples, 0.21%)</title><rect x="826.6" y="259.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="829.6" y="270.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="826.6" y="243.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="829.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.06%)</title><rect x="827.0" y="243.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="830.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="827.1" y="227.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="830.1" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.05%)</title><rect x="827.1" y="211.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="830.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (10 samples, 0.11%)</title><rect x="827.8" y="243.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="830.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (10 samples, 0.11%)</title><rect x="827.8" y="227.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.8" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="827.8" y="211.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="830.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="827.8" y="195.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="830.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="827.8" y="179.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="830.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="827.8" y="163.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="830.8" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="827.8" y="147.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="830.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="827.8" y="131.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="827.8" y="115.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="830.8" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="827.9" y="99.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="830.9" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="828.6" y="211.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="831.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.04%)</title><rect x="829.1" y="483.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="832.1" y="494.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="829.1" y="467.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="832.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$72/878358964.apply (4 samples, 0.04%)</title><rect x="829.6" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="832.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="829.6" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="832.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="829.6" y="451.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.6" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="829.6" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.6" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="829.6" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="829.6" y="403.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="832.6" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="829.6" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="829.6" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="829.6" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="829.6" y="339.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.6" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 0.03%)</title><rect x="830.1" y="563.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (3 samples, 0.03%)</title><rect x="830.6" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="833.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,215 samples, 12.77%)</title><rect x="831.0" y="563.0" width="150.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.0" y="574.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,206 samples, 12.67%)</title><rect x="832.1" y="547.0" width="149.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="835.1" y="558.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (1,019 samples, 10.71%)</title><rect x="832.1" y="531.0" width="126.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="835.1" y="542.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.04%)</title><rect x="832.3" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="835.3" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.04%)</title><rect x="832.3" y="499.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.3" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.04%)</title><rect x="832.3" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="835.3" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.04%)</title><rect x="832.3" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="835.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (87 samples, 0.91%)</title><rect x="832.8" y="515.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="835.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (87 samples, 0.91%)</title><rect x="832.8" y="499.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="835.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (86 samples, 0.90%)</title><rect x="833.0" y="483.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (4 samples, 0.04%)</title><rect x="833.0" y="467.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="836.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (82 samples, 0.86%)</title><rect x="833.5" y="467.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (24 samples, 0.25%)</title><rect x="834.2" y="451.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.2" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.05%)</title><rect x="834.9" y="435.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="837.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.14%)</title><rect x="835.6" y="435.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.14%)</title><rect x="835.6" y="419.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="838.6" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 0.14%)</title><rect x="835.6" y="403.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.6" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.11%)</title><rect x="835.9" y="387.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.9" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (7 samples, 0.07%)</title><rect x="836.3" y="371.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="839.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (52 samples, 0.55%)</title><rect x="837.2" y="451.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (25 samples, 0.26%)</title><rect x="840.5" y="435.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (6 samples, 0.06%)</title><rect x="841.3" y="419.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.14%)</title><rect x="842.0" y="419.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="845.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.14%)</title><rect x="842.0" y="403.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="845.0" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 0.14%)</title><rect x="842.0" y="387.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.11%)</title><rect x="842.4" y="371.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="845.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (8 samples, 0.08%)</title><rect x="842.6" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="845.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (22 samples, 0.23%)</title><rect x="843.6" y="515.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (18 samples, 0.19%)</title><rect x="844.0" y="499.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (18 samples, 0.19%)</title><rect x="844.0" y="483.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (18 samples, 0.19%)</title><rect x="844.0" y="467.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="847.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (18 samples, 0.19%)</title><rect x="844.0" y="451.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="847.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (18 samples, 0.19%)</title><rect x="844.0" y="435.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="847.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (16 samples, 0.17%)</title><rect x="844.2" y="419.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="847.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (16 samples, 0.17%)</title><rect x="844.2" y="403.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (16 samples, 0.17%)</title><rect x="844.2" y="387.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.06%)</title><rect x="845.5" y="371.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="848.5" y="382.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.03%)</title><rect x="845.9" y="355.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="848.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (904 samples, 9.50%)</title><rect x="846.4" y="515.0" width="112.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="849.4" y="526.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (901 samples, 9.47%)</title><rect x="846.5" y="499.0" width="111.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.5" y="510.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (900 samples, 9.46%)</title><rect x="846.6" y="483.0" width="111.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="849.6" y="494.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (231 samples, 2.43%)</title><rect x="849.7" y="467.0" width="28.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.7" y="478.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (165 samples, 1.73%)</title><rect x="854.3" y="451.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (11 samples, 0.12%)</title><rect x="863.7" y="435.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.7" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (17 samples, 0.18%)</title><rect x="865.1" y="435.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.1" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.06%)</title><rect x="866.4" y="419.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="869.4" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (17 samples, 0.18%)</title><rect x="867.4" y="435.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="870.4" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.04%)</title><rect x="869.0" y="419.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="872.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (21 samples, 0.22%)</title><rect x="869.5" y="435.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="872.5" y="446.0"></text>
</g>
<g>
<title>vtable stub (21 samples, 0.22%)</title><rect x="872.2" y="435.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="875.2" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (18 samples, 0.19%)</title><rect x="874.8" y="451.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="877.8" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (11 samples, 0.12%)</title><rect x="875.6" y="435.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="878.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (8 samples, 0.08%)</title><rect x="877.0" y="451.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="880.0" y="462.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="878.0" y="451.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="881.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (296 samples, 3.11%)</title><rect x="878.4" y="467.0" width="36.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.4" y="478.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (89 samples, 0.94%)</title><rect x="878.4" y="451.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="881.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (89 samples, 0.94%)</title><rect x="878.4" y="435.0" width="11.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="881.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.06%)</title><rect x="880.5" y="419.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="883.5" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (65 samples, 0.68%)</title><rect x="881.2" y="419.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.2" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (65 samples, 0.68%)</title><rect x="881.2" y="403.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.2" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (65 samples, 0.68%)</title><rect x="881.2" y="387.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="884.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (65 samples, 0.68%)</title><rect x="881.2" y="371.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (65 samples, 0.68%)</title><rect x="881.2" y="355.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="884.2" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (65 samples, 0.68%)</title><rect x="881.2" y="339.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="884.2" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (37 samples, 0.39%)</title><rect x="881.2" y="323.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="884.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="883.8" y="307.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="886.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.11%)</title><rect x="883.8" y="291.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="886.8" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="883.8" y="275.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="886.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (5 samples, 0.05%)</title><rect x="885.0" y="307.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="888.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (28 samples, 0.29%)</title><rect x="885.8" y="323.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.8" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.07%)</title><rect x="887.4" y="307.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="890.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.08%)</title><rect x="888.3" y="307.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="891.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.08%)</title><rect x="888.3" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.3" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.08%)</title><rect x="888.3" y="275.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="891.3" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (207 samples, 2.18%)</title><rect x="889.4" y="451.0" width="25.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="892.4" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (207 samples, 2.18%)</title><rect x="889.4" y="435.0" width="25.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="892.4" y="446.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (207 samples, 2.18%)</title><rect x="889.4" y="419.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="892.4" y="430.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (207 samples, 2.18%)</title><rect x="889.4" y="403.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="892.4" y="414.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (207 samples, 2.18%)</title><rect x="889.4" y="387.0" width="25.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="892.4" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (207 samples, 2.18%)</title><rect x="889.4" y="371.0" width="25.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="892.4" y="382.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (207 samples, 2.18%)</title><rect x="889.4" y="355.0" width="25.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="892.4" y="366.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (188 samples, 1.98%)</title><rect x="889.4" y="339.0" width="23.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="892.4" y="350.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (188 samples, 1.98%)</title><rect x="889.4" y="323.0" width="23.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.4" y="334.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.11%)</title><rect x="910.6" y="307.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="910.6" y="291.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="913.6" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.07%)</title><rect x="911.8" y="307.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.20%)</title><rect x="912.7" y="339.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.7" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.20%)</title><rect x="912.7" y="323.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="915.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.08%)</title><rect x="914.1" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="917.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.08%)</title><rect x="914.1" y="291.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="917.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (348 samples, 3.66%)</title><rect x="915.1" y="467.0" width="43.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="918.1" y="478.0">ru/m..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (212 samples, 2.23%)</title><rect x="915.1" y="451.0" width="26.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="918.1" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (212 samples, 2.23%)</title><rect x="915.1" y="435.0" width="26.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="918.1" y="446.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.07%)</title><rect x="917.9" y="419.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.9" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (182 samples, 1.91%)</title><rect x="918.8" y="419.0" width="22.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="921.8" y="430.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (182 samples, 1.91%)</title><rect x="918.8" y="403.0" width="22.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.8" y="414.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (182 samples, 1.91%)</title><rect x="918.8" y="387.0" width="22.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="921.8" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (182 samples, 1.91%)</title><rect x="918.8" y="371.0" width="22.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.8" y="382.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (182 samples, 1.91%)</title><rect x="918.8" y="355.0" width="22.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.8" y="366.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (182 samples, 1.91%)</title><rect x="918.8" y="339.0" width="22.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.8" y="350.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (163 samples, 1.71%)</title><rect x="918.8" y="323.0" width="20.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="921.8" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (163 samples, 1.71%)</title><rect x="918.8" y="307.0" width="20.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.14%)</title><rect x="937.4" y="291.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="940.4" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.14%)</title><rect x="937.4" y="275.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.4" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.20%)</title><rect x="939.0" y="323.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="942.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.20%)</title><rect x="939.0" y="307.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="942.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (13 samples, 0.14%)</title><rect x="939.7" y="291.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="942.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (13 samples, 0.14%)</title><rect x="939.7" y="275.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="942.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (136 samples, 1.43%)</title><rect x="941.4" y="451.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="944.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (136 samples, 1.43%)</title><rect x="941.4" y="435.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (136 samples, 1.43%)</title><rect x="941.4" y="419.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.4" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (136 samples, 1.43%)</title><rect x="941.4" y="403.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="944.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (136 samples, 1.43%)</title><rect x="941.4" y="387.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (136 samples, 1.43%)</title><rect x="941.4" y="371.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.4" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (136 samples, 1.43%)</title><rect x="941.4" y="355.0" width="16.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="944.4" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (77 samples, 0.81%)</title><rect x="941.4" y="339.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="944.4" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (77 samples, 0.81%)</title><rect x="941.4" y="323.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (77 samples, 0.81%)</title><rect x="941.4" y="307.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.09%)</title><rect x="948.3" y="291.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="951.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.12%)</title><rect x="949.4" y="291.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="952.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (59 samples, 0.62%)</title><rect x="950.9" y="339.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (59 samples, 0.62%)</title><rect x="950.9" y="323.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (59 samples, 0.62%)</title><rect x="950.9" y="307.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="953.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="955.9" y="291.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="958.9" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.09%)</title><rect x="957.1" y="291.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="960.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.reduceIterators (187 samples, 1.97%)</title><rect x="958.5" y="531.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="961.5" y="542.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (154 samples, 1.62%)</title><rect x="958.5" y="515.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.5" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (154 samples, 1.62%)</title><rect x="958.5" y="499.0" width="19.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="961.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.03%)</title><rect x="959.5" y="483.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.03%)</title><rect x="959.5" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.03%)</title><rect x="959.5" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="962.5" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (142 samples, 1.49%)</title><rect x="959.8" y="483.0" width="17.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="962.8" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (142 samples, 1.49%)</title><rect x="959.8" y="467.0" width="17.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="962.8" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (3 samples, 0.03%)</title><rect x="959.8" y="451.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.8" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="959.8" y="435.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.8" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (139 samples, 1.46%)</title><rect x="960.2" y="451.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="963.2" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (139 samples, 1.46%)</title><rect x="960.2" y="435.0" width="17.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="963.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (137 samples, 1.44%)</title><rect x="960.4" y="419.0" width="17.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="963.4" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (137 samples, 1.44%)</title><rect x="960.4" y="403.0" width="17.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="963.4" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (61 samples, 0.64%)</title><rect x="960.4" y="387.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="963.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (60 samples, 0.63%)</title><rect x="960.6" y="371.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="963.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (60 samples, 0.63%)</title><rect x="960.6" y="355.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="963.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (60 samples, 0.63%)</title><rect x="960.6" y="339.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (19 samples, 0.20%)</title><rect x="960.6" y="323.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="963.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (11 samples, 0.12%)</title><rect x="960.6" y="307.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="963.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (11 samples, 0.12%)</title><rect x="960.6" y="291.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="963.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.09%)</title><rect x="960.8" y="275.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="963.8" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="960.8" y="259.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="963.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="960.8" y="243.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="963.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="960.8" y="227.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="963.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="960.8" y="211.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="963.8" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="961.1" y="195.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="964.1" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="961.4" y="179.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="964.4" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (8 samples, 0.08%)</title><rect x="961.9" y="307.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.08%)</title><rect x="961.9" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="964.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="961.9" y="275.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="964.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="961.9" y="259.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="964.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="961.9" y="243.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="964.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="961.9" y="227.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="964.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="961.9" y="211.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="964.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (20 samples, 0.21%)</title><rect x="962.9" y="323.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="965.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 0.16%)</title><rect x="962.9" y="307.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 0.16%)</title><rect x="962.9" y="291.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="965.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="963.4" y="275.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="966.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="963.4" y="259.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="966.4" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="963.4" y="243.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="966.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="963.4" y="227.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="966.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="963.4" y="211.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="966.4" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="963.4" y="195.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="966.4" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="963.4" y="179.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="966.4" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="963.4" y="163.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="966.4" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (5 samples, 0.05%)</title><rect x="964.8" y="307.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="967.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="964.8" y="291.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="967.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="964.8" y="275.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="967.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="964.8" y="259.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="967.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="964.8" y="243.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="967.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="964.8" y="227.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="964.8" y="211.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.8" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="964.8" y="195.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="967.8" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="964.8" y="179.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="967.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="964.8" y="163.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="967.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (5 samples, 0.05%)</title><rect x="965.4" y="323.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="968.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="965.4" y="307.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="968.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="965.4" y="291.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="968.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="965.4" y="275.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="965.4" y="259.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="968.4" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="965.4" y="243.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="968.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="965.4" y="227.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="968.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="965.4" y="211.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="968.4" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="965.7" y="195.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="968.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (16 samples, 0.17%)</title><rect x="966.0" y="323.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="969.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 0.16%)</title><rect x="966.0" y="307.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="969.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 0.16%)</title><rect x="966.0" y="291.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="969.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (15 samples, 0.16%)</title><rect x="966.0" y="275.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="969.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="966.0" y="259.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="969.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="966.0" y="243.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="969.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="966.0" y="227.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="969.0" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="966.0" y="211.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="969.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="966.9" y="195.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="969.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (76 samples, 0.80%)</title><rect x="968.0" y="387.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (76 samples, 0.80%)</title><rect x="968.0" y="371.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="971.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (76 samples, 0.80%)</title><rect x="968.0" y="355.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="971.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (76 samples, 0.80%)</title><rect x="968.0" y="339.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="971.0" y="350.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="969.3" y="323.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="972.3" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (62 samples, 0.65%)</title><rect x="969.6" y="323.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.6" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (62 samples, 0.65%)</title><rect x="969.6" y="307.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.6" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (58 samples, 0.61%)</title><rect x="970.1" y="291.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="973.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (58 samples, 0.61%)</title><rect x="970.1" y="275.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="973.1" y="286.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="970.2" y="259.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="973.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (30 samples, 0.32%)</title><rect x="970.6" y="259.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="973.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (29 samples, 0.30%)</title><rect x="970.7" y="243.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="973.7" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (23 samples, 0.24%)</title><rect x="970.9" y="227.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.04%)</title><rect x="972.2" y="211.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="975.2" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.03%)</title><rect x="972.4" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="975.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.03%)</title><rect x="972.9" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="975.9" y="222.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.04%)</title><rect x="973.2" y="211.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="976.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="973.7" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="976.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.03%)</title><rect x="973.7" y="211.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (23 samples, 0.24%)</title><rect x="974.3" y="259.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="977.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (23 samples, 0.24%)</title><rect x="974.3" y="243.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="977.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (16 samples, 0.17%)</title><rect x="974.3" y="227.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="977.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (16 samples, 0.17%)</title><rect x="974.3" y="211.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="977.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (16 samples, 0.17%)</title><rect x="974.3" y="195.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="977.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (16 samples, 0.17%)</title><rect x="974.3" y="179.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="977.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (16 samples, 0.17%)</title><rect x="974.3" y="163.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (16 samples, 0.17%)</title><rect x="974.3" y="147.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="977.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (16 samples, 0.17%)</title><rect x="974.3" y="131.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="977.3" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="975.3" y="115.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="978.3" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="976.3" y="227.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (33 samples, 0.35%)</title><rect x="977.6" y="515.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="980.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (33 samples, 0.35%)</title><rect x="977.6" y="499.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="980.6" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (33 samples, 0.35%)</title><rect x="977.6" y="483.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.6" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (20 samples, 0.21%)</title><rect x="977.6" y="467.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="980.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (20 samples, 0.21%)</title><rect x="977.6" y="451.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="980.6" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (20 samples, 0.21%)</title><rect x="977.6" y="435.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="980.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.20%)</title><rect x="977.7" y="419.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="980.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.20%)</title><rect x="977.7" y="403.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="980.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (17 samples, 0.18%)</title><rect x="977.9" y="387.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (17 samples, 0.18%)</title><rect x="977.9" y="371.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="980.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (17 samples, 0.18%)</title><rect x="977.9" y="355.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="980.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (17 samples, 0.18%)</title><rect x="977.9" y="339.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="980.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (17 samples, 0.18%)</title><rect x="977.9" y="323.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="980.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (17 samples, 0.18%)</title><rect x="977.9" y="307.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.9" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (17 samples, 0.18%)</title><rect x="977.9" y="291.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="980.9" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (17 samples, 0.18%)</title><rect x="977.9" y="275.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="980.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.09%)</title><rect x="977.9" y="259.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="980.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.09%)</title><rect x="977.9" y="243.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="980.9" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.09%)</title><rect x="977.9" y="227.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="980.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (6 samples, 0.06%)</title><rect x="979.1" y="259.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="982.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.06%)</title><rect x="979.1" y="243.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="982.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="979.1" y="227.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="982.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.06%)</title><rect x="979.1" y="211.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="982.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.06%)</title><rect x="979.1" y="195.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="982.1" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="979.1" y="179.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="982.1" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="979.1" y="163.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="982.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="979.1" y="147.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="982.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="979.1" y="131.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="982.1" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (13 samples, 0.14%)</title><rect x="980.0" y="467.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="983.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (13 samples, 0.14%)</title><rect x="980.0" y="451.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="983.0" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13 samples, 0.14%)</title><rect x="980.0" y="435.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="983.0" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13 samples, 0.14%)</title><rect x="980.0" y="419.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="983.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.14%)</title><rect x="980.0" y="403.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.0" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.14%)</title><rect x="980.0" y="387.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.0" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.07%)</title><rect x="980.0" y="371.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="983.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.06%)</title><rect x="980.2" y="355.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="983.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.06%)</title><rect x="980.2" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="983.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (6 samples, 0.06%)</title><rect x="980.2" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="983.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (3 samples, 0.03%)</title><rect x="980.2" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (6 samples, 0.06%)</title><rect x="980.9" y="371.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (6 samples, 0.06%)</title><rect x="980.9" y="355.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="983.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (6 samples, 0.06%)</title><rect x="980.9" y="339.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.06%)</title><rect x="980.9" y="323.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (5 samples, 0.05%)</title><rect x="981.0" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="984.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.05%)</title><rect x="981.0" y="291.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="984.0" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (5 samples, 0.05%)</title><rect x="981.0" y="275.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="984.0" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.05%)</title><rect x="981.0" y="259.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="984.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (3 samples, 0.03%)</title><rect x="981.3" y="243.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.03%)</title><rect x="981.3" y="227.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="984.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="981.3" y="211.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="984.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="981.3" y="195.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="984.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="981.3" y="179.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="984.3" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="981.3" y="163.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.3" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="981.3" y="147.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="984.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="981.3" y="131.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="984.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="981.3" y="115.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="984.3" y="126.0"></text>
</g>
<g>
<title>[worker-4 tid=25396] (1,680 samples, 17.66%)</title><rect x="981.7" y="723.0" width="208.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="984.7" y="734.0">[worker-4 tid=25396]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (8 samples, 0.08%)</title><rect x="981.7" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (7 samples, 0.07%)</title><rect x="981.8" y="691.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (7 samples, 0.07%)</title><rect x="981.8" y="675.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="984.8" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.07%)</title><rect x="981.8" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.06%)</title><rect x="981.9" y="643.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.9" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="982.0" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.0" y="638.0"></text>
</g>
<g>
<title>[unknown_Java] (16 samples, 0.17%)</title><rect x="982.6" y="707.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="985.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,656 samples, 17.40%)</title><rect x="984.6" y="707.0" width="205.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.6" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,656 samples, 17.40%)</title><rect x="984.6" y="691.0" width="205.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="987.6" y="702.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,656 samples, 17.40%)</title><rect x="984.6" y="675.0" width="205.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="987.6" y="686.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 0.17%)</title><rect x="985.0" y="659.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="988.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (14 samples, 0.15%)</title><rect x="985.3" y="643.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="988.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 0.11%)</title><rect x="985.4" y="627.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="988.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.07%)</title><rect x="985.7" y="611.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="988.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.07%)</title><rect x="985.7" y="595.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.7" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.03%)</title><rect x="985.7" y="579.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="988.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="986.1" y="579.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="989.1" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.04%)</title><rect x="986.1" y="563.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="989.1" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="986.2" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="989.2" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="986.2" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="989.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.03%)</title><rect x="986.6" y="627.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="989.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.03%)</title><rect x="986.6" y="611.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="989.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.03%)</title><rect x="986.6" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.03%)</title><rect x="986.6" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="989.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$65/1115085888.run (1,637 samples, 17.20%)</title><rect x="987.0" y="659.0" width="203.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="990.0" y="670.0">ru/mail/polis/service/shakh..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$executeAsync$3 (1,637 samples, 17.20%)</title><rect x="987.0" y="643.0" width="203.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="990.0" y="654.0">ru/mail/polis/service/shakh..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (246 samples, 2.59%)</title><rect x="987.0" y="627.0" width="30.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="990.0" y="638.0">on..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.03%)</title><rect x="987.9" y="611.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="990.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="987.9" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="990.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="987.9" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="990.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (236 samples, 2.48%)</title><rect x="988.2" y="611.0" width="29.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="991.2" y="622.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.06%)</title><rect x="988.2" y="595.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="991.2" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (230 samples, 2.42%)</title><rect x="989.0" y="595.0" width="28.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="992.0" y="606.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (230 samples, 2.42%)</title><rect x="989.0" y="579.0" width="28.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="992.0" y="590.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (228 samples, 2.40%)</title><rect x="989.2" y="563.0" width="28.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="992.2" y="574.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (228 samples, 2.40%)</title><rect x="989.2" y="547.0" width="28.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="992.2" y="558.0">on..</text>
</g>
<g>
<title>.annobin_send.c (217 samples, 2.28%)</title><rect x="989.6" y="531.0" width="26.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="992.6" y="542.0">...</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (210 samples, 2.21%)</title><rect x="990.5" y="515.0" width="26.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="993.5" y="526.0">e..</text>
</g>
<g>
<title>do_syscall_64 (210 samples, 2.21%)</title><rect x="990.5" y="499.0" width="26.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="993.5" y="510.0">d..</text>
</g>
<g>
<title>__x64_sys_sendto (203 samples, 2.13%)</title><rect x="991.3" y="483.0" width="25.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="994.3" y="494.0">_..</text>
</g>
<g>
<title>__sys_sendto (202 samples, 2.12%)</title><rect x="991.5" y="467.0" width="25.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="994.5" y="478.0">_..</text>
</g>
<g>
<title>sock_sendmsg (196 samples, 2.06%)</title><rect x="991.7" y="451.0" width="24.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="994.7" y="462.0">s..</text>
</g>
<g>
<title>security_socket_sendmsg (7 samples, 0.07%)</title><rect x="991.7" y="435.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="994.7" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (7 samples, 0.07%)</title><rect x="991.7" y="419.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="994.7" y="430.0"></text>
</g>
<g>
<title>avc_has_perm (3 samples, 0.03%)</title><rect x="992.2" y="403.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="995.2" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (189 samples, 1.99%)</title><rect x="992.6" y="435.0" width="23.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="995.6" y="446.0">t..</text>
</g>
<g>
<title>tcp_sendmsg_locked (189 samples, 1.99%)</title><rect x="992.6" y="419.0" width="23.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="995.6" y="430.0">t..</text>
</g>
<g>
<title>__tcp_push_pending_frames (178 samples, 1.87%)</title><rect x="992.8" y="403.0" width="22.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="995.8" y="414.0">_..</text>
</g>
<g>
<title>tcp_write_xmit (178 samples, 1.87%)</title><rect x="992.8" y="387.0" width="22.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="995.8" y="398.0">t..</text>
</g>
<g>
<title>__tcp_transmit_skb (171 samples, 1.80%)</title><rect x="993.2" y="371.0" width="21.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="996.2" y="382.0">_..</text>
</g>
<g>
<title>__ip_queue_xmit (167 samples, 1.76%)</title><rect x="993.4" y="355.0" width="20.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="996.4" y="366.0"></text>
</g>
<g>
<title>__sk_dst_check (5 samples, 0.05%)</title><rect x="993.4" y="339.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="996.4" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (4 samples, 0.04%)</title><rect x="993.6" y="323.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="996.6" y="334.0"></text>
</g>
<g>
<title>ip_local_out (39 samples, 0.41%)</title><rect x="994.1" y="339.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="997.1" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (39 samples, 0.41%)</title><rect x="994.1" y="323.0" width="4.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="997.1" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (39 samples, 0.41%)</title><rect x="994.1" y="307.0" width="4.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="997.1" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (8 samples, 0.08%)</title><rect x="994.2" y="291.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="997.2" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (8 samples, 0.08%)</title><rect x="995.4" y="291.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="998.4" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (7 samples, 0.07%)</title><rect x="995.5" y="275.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="998.5" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (12 samples, 0.13%)</title><rect x="996.9" y="291.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="999.9" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (4 samples, 0.04%)</title><rect x="997.0" y="275.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1000.0" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (5 samples, 0.05%)</title><rect x="997.7" y="275.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1000.7" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (4 samples, 0.04%)</title><rect x="998.4" y="291.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1001.4" y="302.0"></text>
</g>
<g>
<title>ip_output (123 samples, 1.29%)</title><rect x="998.9" y="339.0" width="15.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1001.9" y="350.0"></text>
</g>
<g>
<title>ip_finish_output2 (115 samples, 1.21%)</title><rect x="999.0" y="323.0" width="14.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1002.0" y="334.0"></text>
</g>
<g>
<title>__dev_queue_xmit (5 samples, 0.05%)</title><rect x="999.4" y="307.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1002.4" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.03%)</title><rect x="999.5" y="291.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1002.5" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.03%)</title><rect x="999.5" y="275.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1002.5" y="286.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (107 samples, 1.12%)</title><rect x="1000.0" y="307.0" width="13.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1003.0" y="318.0"></text>
</g>
<g>
<title>do_softirq.part.0 (107 samples, 1.12%)</title><rect x="1000.0" y="291.0" width="13.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1003.0" y="302.0"></text>
</g>
<g>
<title>do_softirq_own_stack (105 samples, 1.10%)</title><rect x="1000.3" y="275.0" width="13.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1003.3" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (105 samples, 1.10%)</title><rect x="1000.3" y="259.0" width="13.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1003.3" y="270.0"></text>
</g>
<g>
<title>net_rx_action (103 samples, 1.08%)</title><rect x="1000.4" y="243.0" width="12.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1003.4" y="254.0"></text>
</g>
<g>
<title>process_backlog (102 samples, 1.07%)</title><rect x="1000.5" y="227.0" width="12.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1003.5" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (97 samples, 1.02%)</title><rect x="1001.1" y="211.0" width="12.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1004.1" y="222.0"></text>
</g>
<g>
<title>ip_rcv (96 samples, 1.01%)</title><rect x="1001.2" y="195.0" width="12.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1004.2" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (74 samples, 0.78%)</title><rect x="1001.5" y="179.0" width="9.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1004.5" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (61 samples, 0.64%)</title><rect x="1001.6" y="163.0" width="7.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1004.6" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (61 samples, 0.64%)</title><rect x="1001.6" y="147.0" width="7.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1004.6" y="158.0"></text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.03%)</title><rect x="1001.6" y="131.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1004.6" y="142.0"></text>
</g>
<g>
<title>tcp_v4_rcv (58 samples, 0.61%)</title><rect x="1002.0" y="131.0" width="7.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1005.0" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (6 samples, 0.06%)</title><rect x="1002.4" y="115.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1005.4" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (47 samples, 0.49%)</title><rect x="1003.4" y="115.0" width="5.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1006.4" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (47 samples, 0.49%)</title><rect x="1003.4" y="99.0" width="5.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1006.4" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.03%)</title><rect x="1003.5" y="83.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1006.5" y="94.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.03%)</title><rect x="1003.5" y="67.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1006.5" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="1003.5" y="51.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1006.5" y="62.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.03%)</title><rect x="1003.9" y="83.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1006.9" y="94.0"></text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.03%)</title><rect x="1003.9" y="67.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1006.9" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="1003.9" y="51.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1006.9" y="62.0"></text>
</g>
<g>
<title>tcp_ack (18 samples, 0.19%)</title><rect x="1004.2" y="83.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1007.2" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.03%)</title><rect x="1005.0" y="67.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1008.0" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.03%)</title><rect x="1005.7" y="67.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1008.7" y="78.0"></text>
</g>
<g>
<title>tcp_data_queue (21 samples, 0.22%)</title><rect x="1006.5" y="83.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1009.5" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (17 samples, 0.18%)</title><rect x="1007.0" y="67.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1010.0" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (15 samples, 0.16%)</title><rect x="1007.2" y="51.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1010.2" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (15 samples, 0.16%)</title><rect x="1007.2" y="35.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1010.2" y="46.0"></text>
</g>
<g>
<title>nf_hook_slow (12 samples, 0.13%)</title><rect x="1009.2" y="163.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1012.2" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (12 samples, 0.13%)</title><rect x="1009.2" y="147.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1012.2" y="158.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (3 samples, 0.03%)</title><rect x="1010.3" y="131.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1013.3" y="142.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.03%)</title><rect x="1010.7" y="179.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1013.7" y="190.0"></text>
</g>
<g>
<title>nf_hook_slow (17 samples, 0.18%)</title><rect x="1011.0" y="179.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1014.0" y="190.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (3 samples, 0.03%)</title><rect x="1011.2" y="163.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1014.2" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (11 samples, 0.12%)</title><rect x="1011.5" y="163.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1014.5" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (7 samples, 0.07%)</title><rect x="1013.3" y="323.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1016.3" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (3 samples, 0.03%)</title><rect x="1013.5" y="307.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1016.5" y="318.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (4 samples, 0.04%)</title><rect x="1014.9" y="403.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1017.9" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (4 samples, 0.04%)</title><rect x="1014.9" y="387.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1017.9" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (3 samples, 0.03%)</title><rect x="1014.9" y="371.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1017.9" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (3 samples, 0.03%)</title><rect x="1014.9" y="355.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1017.9" y="366.0"></text>
</g>
<g>
<title>tcp_send_mss (3 samples, 0.03%)</title><rect x="1015.6" y="403.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1018.6" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.03%)</title><rect x="1015.6" y="387.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1018.6" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.04%)</title><rect x="1016.0" y="451.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1019.0" y="462.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="1016.1" y="435.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1019.1" y="446.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.03%)</title><rect x="1016.1" y="419.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1019.1" y="430.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="1016.5" y="531.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1019.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="1016.5" y="515.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1019.5" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.04%)</title><rect x="1016.5" y="499.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1019.5" y="510.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.03%)</title><rect x="1017.1" y="531.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1020.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer$$Lambda$81/1409716107.get (1,390 samples, 14.61%)</title><rect x="1017.6" y="627.0" width="172.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.6" y="638.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.lambda$entity$0 (1,390 samples, 14.61%)</title><rect x="1017.6" y="611.0" width="172.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.6" y="622.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/AsyncHttpServer.get (1,390 samples, 14.61%)</title><rect x="1017.6" y="595.0" width="172.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1020.6" y="606.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,386 samples, 14.57%)</title><rect x="1018.1" y="579.0" width="171.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.1" y="590.0">ru/mail/polis/dao/DAO...</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (116 samples, 1.22%)</title><rect x="1018.1" y="563.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1021.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (116 samples, 1.22%)</title><rect x="1018.1" y="547.0" width="14.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1021.1" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (116 samples, 1.22%)</title><rect x="1018.1" y="531.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1021.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (114 samples, 1.20%)</title><rect x="1018.4" y="515.0" width="14.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (114 samples, 1.20%)</title><rect x="1018.4" y="499.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1021.4" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (111 samples, 1.17%)</title><rect x="1018.5" y="483.0" width="13.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1021.5" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (75 samples, 0.79%)</title><rect x="1018.5" y="467.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1021.5" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (75 samples, 0.79%)</title><rect x="1018.5" y="451.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.5" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (75 samples, 0.79%)</title><rect x="1018.5" y="435.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1021.5" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (73 samples, 0.77%)</title><rect x="1018.7" y="419.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1021.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (73 samples, 0.77%)</title><rect x="1018.7" y="403.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (66 samples, 0.69%)</title><rect x="1019.5" y="387.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1022.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (66 samples, 0.69%)</title><rect x="1019.5" y="371.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (66 samples, 0.69%)</title><rect x="1019.5" y="355.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1022.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (66 samples, 0.69%)</title><rect x="1019.5" y="339.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1022.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (66 samples, 0.69%)</title><rect x="1019.5" y="323.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1022.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (66 samples, 0.69%)</title><rect x="1019.5" y="307.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.5" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (63 samples, 0.66%)</title><rect x="1019.9" y="291.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.9" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (63 samples, 0.66%)</title><rect x="1019.9" y="275.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1022.9" y="286.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.03%)</title><rect x="1019.9" y="259.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1022.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 0.28%)</title><rect x="1020.2" y="259.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (26 samples, 0.27%)</title><rect x="1020.3" y="243.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.3" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (24 samples, 0.25%)</title><rect x="1020.6" y="227.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1023.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.06%)</title><rect x="1021.8" y="211.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1024.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.04%)</title><rect x="1022.6" y="211.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1025.6" y="222.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.04%)</title><rect x="1023.1" y="211.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1026.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (32 samples, 0.34%)</title><rect x="1023.6" y="259.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1026.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (32 samples, 0.34%)</title><rect x="1023.6" y="243.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1026.6" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (26 samples, 0.27%)</title><rect x="1023.6" y="227.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1026.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (26 samples, 0.27%)</title><rect x="1023.6" y="211.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1026.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (26 samples, 0.27%)</title><rect x="1023.6" y="195.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1026.6" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (26 samples, 0.27%)</title><rect x="1023.6" y="179.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1026.6" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (26 samples, 0.27%)</title><rect x="1023.6" y="163.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1026.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (26 samples, 0.27%)</title><rect x="1023.6" y="147.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1026.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (26 samples, 0.27%)</title><rect x="1023.6" y="131.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1026.6" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="1024.9" y="115.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1027.9" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="1025.8" y="99.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1028.8" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="1025.8" y="83.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.8" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="1025.8" y="67.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.8" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.04%)</title><rect x="1025.8" y="51.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1028.8" y="62.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="1026.4" y="99.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1029.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="1026.8" y="227.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1029.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1027.0" y="211.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1030.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1027.0" y="195.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1030.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1027.0" y="179.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1030.0" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1027.0" y="163.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1030.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="1027.0" y="147.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1030.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="1027.0" y="131.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1030.0" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (36 samples, 0.38%)</title><rect x="1027.8" y="467.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1030.8" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (36 samples, 0.38%)</title><rect x="1027.8" y="451.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.8" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (36 samples, 0.38%)</title><rect x="1027.8" y="435.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1030.8" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (36 samples, 0.38%)</title><rect x="1027.8" y="419.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1030.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (36 samples, 0.38%)</title><rect x="1027.8" y="403.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1030.8" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (36 samples, 0.38%)</title><rect x="1027.8" y="387.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1030.8" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (17 samples, 0.18%)</title><rect x="1027.8" y="371.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (15 samples, 0.16%)</title><rect x="1028.0" y="355.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1031.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (15 samples, 0.16%)</title><rect x="1028.0" y="339.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1031.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (15 samples, 0.16%)</title><rect x="1028.0" y="323.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1031.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (7 samples, 0.07%)</title><rect x="1028.0" y="307.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1031.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="1028.0" y="291.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1031.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="1028.0" y="275.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1028.0" y="259.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1031.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1028.0" y="243.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1031.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1028.0" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1031.0" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1028.0" y="211.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1031.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1028.0" y="195.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.0" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1028.2" y="179.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1031.2" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.03%)</title><rect x="1028.5" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1031.5" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1028.5" y="275.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1028.5" y="259.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1028.5" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1028.5" y="227.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1031.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1028.5" y="211.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1028.5" y="195.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1031.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.04%)</title><rect x="1029.0" y="307.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1032.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="1029.0" y="291.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="1029.0" y="275.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1032.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1029.0" y="259.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1032.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1029.0" y="243.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1029.0" y="227.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1032.0" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1029.0" y="211.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1029.0" y="195.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (3 samples, 0.03%)</title><rect x="1029.5" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1032.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (19 samples, 0.20%)</title><rect x="1029.9" y="371.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (19 samples, 0.20%)</title><rect x="1029.9" y="355.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (19 samples, 0.20%)</title><rect x="1029.9" y="339.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (19 samples, 0.20%)</title><rect x="1029.9" y="323.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (13 samples, 0.14%)</title><rect x="1030.5" y="307.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1033.5" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (13 samples, 0.14%)</title><rect x="1030.5" y="291.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (12 samples, 0.13%)</title><rect x="1030.6" y="275.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1033.6" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (12 samples, 0.13%)</title><rect x="1030.6" y="259.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="1030.6" y="243.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="1030.6" y="227.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1033.6" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="1030.6" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (7 samples, 0.07%)</title><rect x="1031.1" y="243.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1034.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (7 samples, 0.07%)</title><rect x="1031.1" y="227.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1034.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="1031.1" y="211.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1034.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.06%)</title><rect x="1031.1" y="195.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.1" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1031.1" y="179.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1034.1" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1031.1" y="163.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.1" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1031.1" y="147.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1031.1" y="131.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1031.1" y="115.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1034.1" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1031.4" y="99.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1034.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,266 samples, 13.31%)</title><rect x="1033.0" y="563.0" width="157.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1036.0" y="574.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,249 samples, 13.13%)</title><rect x="1035.1" y="547.0" width="154.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1038.1" y="558.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (1,058 samples, 11.12%)</title><rect x="1035.2" y="531.0" width="131.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1038.2" y="542.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 0.09%)</title><rect x="1035.4" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1038.4" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (7 samples, 0.07%)</title><rect x="1035.6" y="499.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1038.6" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7 samples, 0.07%)</title><rect x="1035.6" y="483.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1038.6" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7 samples, 0.07%)</title><rect x="1035.6" y="467.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1038.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (79 samples, 0.83%)</title><rect x="1036.6" y="515.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (79 samples, 0.83%)</title><rect x="1036.6" y="499.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (78 samples, 0.82%)</title><rect x="1036.7" y="483.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (3 samples, 0.03%)</title><rect x="1036.7" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1039.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (75 samples, 0.79%)</title><rect x="1037.1" y="467.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (18 samples, 0.19%)</title><rect x="1038.7" y="451.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1041.7" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (3 samples, 0.03%)</title><rect x="1039.2" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1042.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="1039.6" y="435.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1042.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="1039.6" y="419.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.6" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.12%)</title><rect x="1039.6" y="403.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1042.6" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.05%)</title><rect x="1040.3" y="387.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1043.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.05%)</title><rect x="1040.3" y="371.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1043.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (44 samples, 0.46%)</title><rect x="1040.9" y="451.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1043.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 0.24%)</title><rect x="1043.5" y="435.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1046.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (9 samples, 0.09%)</title><rect x="1044.3" y="419.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.08%)</title><rect x="1045.4" y="419.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1048.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.08%)</title><rect x="1045.4" y="403.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1048.4" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.08%)</title><rect x="1045.4" y="387.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.4" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="1046.0" y="371.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (28 samples, 0.29%)</title><rect x="1046.4" y="515.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1049.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.joinIterators (26 samples, 0.27%)</title><rect x="1046.5" y="499.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (26 samples, 0.27%)</title><rect x="1046.5" y="483.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (25 samples, 0.26%)</title><rect x="1046.5" y="467.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1049.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (25 samples, 0.26%)</title><rect x="1046.5" y="451.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1049.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (25 samples, 0.26%)</title><rect x="1046.5" y="435.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1049.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (24 samples, 0.25%)</title><rect x="1046.6" y="419.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1049.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (24 samples, 0.25%)</title><rect x="1046.6" y="403.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.04%)</title><rect x="1046.6" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (20 samples, 0.21%)</title><rect x="1047.1" y="387.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1050.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.07%)</title><rect x="1048.7" y="371.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="1049.1" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1052.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="1049.1" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1052.1" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="1049.1" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (940 samples, 9.88%)</title><rect x="1049.9" y="515.0" width="116.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1052.9" y="526.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (936 samples, 9.84%)</title><rect x="1050.1" y="499.0" width="116.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.1" y="510.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (935 samples, 9.83%)</title><rect x="1050.2" y="483.0" width="116.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1053.2" y="494.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (248 samples, 2.61%)</title><rect x="1053.0" y="467.0" width="30.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1056.0" y="478.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (190 samples, 2.00%)</title><rect x="1057.6" y="451.0" width="23.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.6" y="462.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (11 samples, 0.12%)</title><rect x="1067.5" y="435.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.5" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (28 samples, 0.29%)</title><rect x="1068.8" y="435.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1071.8" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (18 samples, 0.19%)</title><rect x="1070.1" y="419.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1073.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (10 samples, 0.11%)</title><rect x="1072.3" y="435.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.3" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.21%)</title><rect x="1073.6" y="435.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.6" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.08%)</title><rect x="1075.0" y="419.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1078.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (27 samples, 0.28%)</title><rect x="1076.0" y="435.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1079.0" y="446.0"></text>
</g>
<g>
<title>vtable stub (14 samples, 0.15%)</title><rect x="1079.4" y="435.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1082.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 0.14%)</title><rect x="1081.1" y="451.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.04%)</title><rect x="1082.2" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1085.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (6 samples, 0.06%)</title><rect x="1082.7" y="451.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1085.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (331 samples, 3.48%)</title><rect x="1083.7" y="467.0" width="41.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1086.7" y="478.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (109 samples, 1.15%)</title><rect x="1083.7" y="451.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1086.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (109 samples, 1.15%)</title><rect x="1083.7" y="435.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1086.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.12%)</title><rect x="1087.7" y="419.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1090.7" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (66 samples, 0.69%)</title><rect x="1089.1" y="419.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1092.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="1089.1" y="403.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1092.1" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="1089.1" y="387.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1092.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="1089.1" y="371.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1092.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="1089.1" y="355.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1092.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (66 samples, 0.69%)</title><rect x="1089.1" y="339.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1092.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (42 samples, 0.44%)</title><rect x="1089.1" y="323.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1092.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.09%)</title><rect x="1092.5" y="307.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1095.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.09%)</title><rect x="1092.5" y="291.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1095.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.09%)</title><rect x="1092.5" y="275.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1095.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (5 samples, 0.05%)</title><rect x="1093.6" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1096.6" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.25%)</title><rect x="1094.3" y="323.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1097.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.06%)</title><rect x="1096.0" y="307.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1099.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="1096.7" y="307.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1099.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="1096.7" y="291.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1099.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="1096.7" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1099.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (222 samples, 2.33%)</title><rect x="1097.2" y="451.0" width="27.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1100.2" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (222 samples, 2.33%)</title><rect x="1097.2" y="435.0" width="27.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1100.2" y="446.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (222 samples, 2.33%)</title><rect x="1097.2" y="419.0" width="27.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.2" y="430.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (222 samples, 2.33%)</title><rect x="1097.2" y="403.0" width="27.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1100.2" y="414.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (222 samples, 2.33%)</title><rect x="1097.2" y="387.0" width="27.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.2" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (222 samples, 2.33%)</title><rect x="1097.2" y="371.0" width="27.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1100.2" y="382.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (222 samples, 2.33%)</title><rect x="1097.2" y="355.0" width="27.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1100.2" y="366.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (197 samples, 2.07%)</title><rect x="1097.2" y="339.0" width="24.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1100.2" y="350.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (197 samples, 2.07%)</title><rect x="1097.2" y="323.0" width="24.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1100.2" y="334.0">j..</text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.03%)</title><rect x="1118.8" y="307.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1121.8" y="318.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.03%)</title><rect x="1118.8" y="291.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1121.8" y="302.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.03%)</title><rect x="1118.8" y="275.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1121.8" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="1118.8" y="259.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1121.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.08%)</title><rect x="1119.2" y="307.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1122.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.08%)</title><rect x="1119.2" y="291.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1122.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (11 samples, 0.12%)</title><rect x="1120.2" y="307.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1123.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.26%)</title><rect x="1121.7" y="339.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1124.7" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.26%)</title><rect x="1121.7" y="323.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.09%)</title><rect x="1122.9" y="307.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1125.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.06%)</title><rect x="1124.0" y="307.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1127.0" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.06%)</title><rect x="1124.0" y="291.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1127.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (334 samples, 3.51%)</title><rect x="1124.8" y="467.0" width="41.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1127.8" y="478.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (188 samples, 1.98%)</title><rect x="1124.8" y="451.0" width="23.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.8" y="462.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (188 samples, 1.98%)</title><rect x="1124.8" y="435.0" width="23.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1127.8" y="446.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.06%)</title><rect x="1128.2" y="419.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1131.2" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (154 samples, 1.62%)</title><rect x="1129.0" y="419.0" width="19.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1132.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (154 samples, 1.62%)</title><rect x="1129.0" y="403.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1132.0" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (154 samples, 1.62%)</title><rect x="1129.0" y="387.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1132.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (154 samples, 1.62%)</title><rect x="1129.0" y="371.0" width="19.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1132.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (154 samples, 1.62%)</title><rect x="1129.0" y="355.0" width="19.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1132.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (154 samples, 1.62%)</title><rect x="1129.0" y="339.0" width="19.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1132.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (135 samples, 1.42%)</title><rect x="1129.0" y="323.0" width="16.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1132.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (135 samples, 1.42%)</title><rect x="1129.0" y="307.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1132.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.08%)</title><rect x="1144.7" y="291.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1147.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.08%)</title><rect x="1144.7" y="275.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1147.7" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.20%)</title><rect x="1145.7" y="323.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1148.7" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (19 samples, 0.20%)</title><rect x="1145.7" y="307.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1148.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.06%)</title><rect x="1146.0" y="291.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1149.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.12%)</title><rect x="1146.7" y="291.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1149.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.12%)</title><rect x="1146.7" y="275.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1149.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (146 samples, 1.53%)</title><rect x="1148.1" y="451.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1151.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (146 samples, 1.53%)</title><rect x="1148.1" y="435.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1151.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="1148.1" y="419.0" width="18.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1151.1" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="1148.1" y="403.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1151.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="1148.1" y="387.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1151.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="1148.1" y="371.0" width="18.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1151.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (146 samples, 1.53%)</title><rect x="1148.1" y="355.0" width="18.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1151.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (86 samples, 0.90%)</title><rect x="1148.1" y="339.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1151.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (86 samples, 0.90%)</title><rect x="1148.1" y="323.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1151.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (86 samples, 0.90%)</title><rect x="1148.1" y="307.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1151.1" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (11 samples, 0.12%)</title><rect x="1156.4" y="291.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1159.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.08%)</title><rect x="1157.8" y="291.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1160.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (60 samples, 0.63%)</title><rect x="1158.7" y="339.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1161.7" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (60 samples, 0.63%)</title><rect x="1158.7" y="323.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1161.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (60 samples, 0.63%)</title><rect x="1158.7" y="307.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1161.7" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (15 samples, 0.16%)</title><rect x="1163.2" y="291.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1166.2" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.09%)</title><rect x="1165.1" y="291.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.reduceIterators (190 samples, 2.00%)</title><rect x="1166.4" y="531.0" width="23.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1169.4" y="542.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (166 samples, 1.74%)</title><rect x="1166.4" y="515.0" width="20.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1169.4" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (166 samples, 1.74%)</title><rect x="1166.4" y="499.0" width="20.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1169.4" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.03%)</title><rect x="1168.3" y="483.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1171.3" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.03%)</title><rect x="1168.3" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1171.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.03%)</title><rect x="1168.3" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1171.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.03%)</title><rect x="1168.3" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1171.3" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (144 samples, 1.51%)</title><rect x="1168.9" y="483.0" width="17.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1171.9" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (144 samples, 1.51%)</title><rect x="1168.9" y="467.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (3 samples, 0.03%)</title><rect x="1169.0" y="451.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1172.0" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="1169.0" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1172.0" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (140 samples, 1.47%)</title><rect x="1169.4" y="451.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1172.4" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (140 samples, 1.47%)</title><rect x="1169.4" y="435.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1172.4" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (138 samples, 1.45%)</title><rect x="1169.7" y="419.0" width="17.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (138 samples, 1.45%)</title><rect x="1169.7" y="403.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1172.7" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (65 samples, 0.68%)</title><rect x="1169.7" y="387.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1172.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (64 samples, 0.67%)</title><rect x="1169.8" y="371.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1172.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (64 samples, 0.67%)</title><rect x="1169.8" y="355.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1172.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (64 samples, 0.67%)</title><rect x="1169.8" y="339.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1172.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (22 samples, 0.23%)</title><rect x="1169.8" y="323.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1172.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.11%)</title><rect x="1169.8" y="307.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1172.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.11%)</title><rect x="1169.8" y="291.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1172.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1169.8" y="275.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1172.8" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1169.8" y="259.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1172.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1169.8" y="243.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1172.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1169.8" y="227.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1172.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1169.8" y="211.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1172.8" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1170.5" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1173.5" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (12 samples, 0.13%)</title><rect x="1171.0" y="307.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1174.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1171.0" y="291.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1174.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1171.0" y="275.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1174.0" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1171.0" y="259.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1174.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1171.0" y="243.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1174.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1171.0" y="227.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1174.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1171.0" y="211.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1174.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (19 samples, 0.20%)</title><rect x="1172.5" y="323.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1175.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (11 samples, 0.12%)</title><rect x="1172.5" y="307.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1175.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (11 samples, 0.12%)</title><rect x="1172.5" y="291.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1175.5" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="1172.5" y="275.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1175.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="1172.5" y="259.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1175.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="1172.5" y="243.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1175.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="1172.5" y="227.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1175.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="1172.5" y="211.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1175.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="1172.5" y="195.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1175.5" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="1172.5" y="179.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1175.5" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="1172.5" y="163.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1175.5" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (8 samples, 0.08%)</title><rect x="1173.9" y="307.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.08%)</title><rect x="1173.9" y="291.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="1173.9" y="275.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="1173.9" y="259.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1176.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="1173.9" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="1173.9" y="227.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1176.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="1173.9" y="211.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.9" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.06%)</title><rect x="1173.9" y="195.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1176.9" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.06%)</title><rect x="1173.9" y="179.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1176.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.06%)</title><rect x="1173.9" y="163.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1176.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (6 samples, 0.06%)</title><rect x="1174.9" y="323.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1177.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.06%)</title><rect x="1174.9" y="307.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1177.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.06%)</title><rect x="1174.9" y="291.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1177.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1174.9" y="275.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1177.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1174.9" y="259.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1177.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1174.9" y="243.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1174.9" y="227.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="1174.9" y="211.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1175.0" y="195.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1178.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (17 samples, 0.18%)</title><rect x="1175.6" y="323.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1178.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.11%)</title><rect x="1175.6" y="307.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1178.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.11%)</title><rect x="1175.6" y="291.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1178.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1175.6" y="275.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1178.6" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1175.6" y="259.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1178.6" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1175.6" y="243.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1178.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1175.6" y="227.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1178.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="1175.6" y="211.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1178.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1176.2" y="195.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1179.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (7 samples, 0.07%)</title><rect x="1176.9" y="307.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1179.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1176.9" y="291.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1179.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1176.9" y="275.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1179.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1176.9" y="259.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1179.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1176.9" y="243.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1179.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1176.9" y="227.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1179.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1176.9" y="211.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1179.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (73 samples, 0.77%)</title><rect x="1177.7" y="387.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (73 samples, 0.77%)</title><rect x="1177.7" y="371.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (73 samples, 0.77%)</title><rect x="1177.7" y="355.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (73 samples, 0.77%)</title><rect x="1177.7" y="339.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1180.7" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.03%)</title><rect x="1178.8" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.04%)</title><rect x="1179.2" y="323.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1182.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (54 samples, 0.57%)</title><rect x="1179.7" y="323.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1182.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (54 samples, 0.57%)</title><rect x="1179.7" y="307.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1182.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (51 samples, 0.54%)</title><rect x="1180.1" y="291.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1183.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (51 samples, 0.54%)</title><rect x="1180.1" y="275.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1183.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 0.21%)</title><rect x="1180.5" y="259.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1183.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.20%)</title><rect x="1180.6" y="243.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1183.6" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (17 samples, 0.18%)</title><rect x="1180.7" y="227.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1183.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.04%)</title><rect x="1181.6" y="211.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1184.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (3 samples, 0.03%)</title><rect x="1182.1" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1185.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (27 samples, 0.28%)</title><rect x="1182.9" y="259.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (27 samples, 0.28%)</title><rect x="1182.9" y="243.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (17 samples, 0.18%)</title><rect x="1182.9" y="227.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (17 samples, 0.18%)</title><rect x="1182.9" y="211.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (17 samples, 0.18%)</title><rect x="1182.9" y="195.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1185.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="1182.9" y="179.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1185.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="1182.9" y="163.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1185.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="1182.9" y="147.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1185.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.18%)</title><rect x="1182.9" y="131.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1185.9" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="1183.6" y="115.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1186.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="1184.5" y="99.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.11%)</title><rect x="1185.0" y="227.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1188.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1185.4" y="211.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1188.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1185.4" y="195.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1188.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1185.4" y="179.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1188.4" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1185.4" y="163.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1188.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.07%)</title><rect x="1185.4" y="147.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1188.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.07%)</title><rect x="1185.4" y="131.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1188.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (3 samples, 0.03%)</title><rect x="1186.4" y="323.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (24 samples, 0.25%)</title><rect x="1187.0" y="515.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1190.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (24 samples, 0.25%)</title><rect x="1187.0" y="499.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1190.0" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (24 samples, 0.25%)</title><rect x="1187.0" y="483.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1190.0" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (20 samples, 0.21%)</title><rect x="1187.0" y="467.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1190.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (20 samples, 0.21%)</title><rect x="1187.0" y="451.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1190.0" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (20 samples, 0.21%)</title><rect x="1187.0" y="435.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1190.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.21%)</title><rect x="1187.0" y="419.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1190.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.21%)</title><rect x="1187.0" y="403.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (19 samples, 0.20%)</title><rect x="1187.1" y="387.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (19 samples, 0.20%)</title><rect x="1187.1" y="371.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1190.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (19 samples, 0.20%)</title><rect x="1187.1" y="355.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1190.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (19 samples, 0.20%)</title><rect x="1187.1" y="339.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (19 samples, 0.20%)</title><rect x="1187.1" y="323.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.1" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (19 samples, 0.20%)</title><rect x="1187.1" y="307.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.1" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (17 samples, 0.18%)</title><rect x="1187.4" y="291.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1190.4" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (17 samples, 0.18%)</title><rect x="1187.4" y="275.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.08%)</title><rect x="1187.4" y="259.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1190.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.07%)</title><rect x="1187.5" y="243.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1190.5" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.07%)</title><rect x="1187.5" y="227.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1190.5" y="238.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.03%)</title><rect x="1187.9" y="211.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1190.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$66/474651931.apply (9 samples, 0.09%)</title><rect x="1188.4" y="259.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1191.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (9 samples, 0.09%)</title><rect x="1188.4" y="243.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1191.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.07%)</title><rect x="1188.4" y="227.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1191.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.07%)</title><rect x="1188.4" y="211.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1188.4" y="195.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1191.4" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1188.4" y="179.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1191.4" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1188.4" y="163.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1191.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1188.4" y="147.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1188.4" y="131.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1191.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1188.8" y="115.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1191.8" y="126.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (4 samples, 0.04%)</title><rect x="1189.5" y="467.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.5" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (4 samples, 0.04%)</title><rect x="1189.5" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1192.5" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (4 samples, 0.04%)</title><rect x="1189.5" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.5" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (4 samples, 0.04%)</title><rect x="1189.5" y="419.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1192.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.04%)</title><rect x="1189.5" y="403.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.5" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.04%)</title><rect x="1189.5" y="387.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1192.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$71/123226378.compare (4 samples, 0.04%)</title><rect x="1189.5" y="371.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.04%)</title><rect x="1189.5" y="355.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (4 samples, 0.04%)</title><rect x="1189.5" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="1189.5" y="323.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1192.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1759248044.compare (4 samples, 0.04%)</title><rect x="1189.5" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.5" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="1189.5" y="291.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$67/1497891062.compare (3 samples, 0.03%)</title><rect x="1189.6" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1192.6" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.03%)</title><rect x="1189.6" y="259.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1192.6" y="270.0"></text>
</g>
</g>
</svg>
