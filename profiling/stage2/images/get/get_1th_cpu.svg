<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (8,280 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=13275] (1,869 samples, 22.57%)</title><rect x="10.0" y="755.0" width="266.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="766.0">[NIO Selector #0 tid=13275]</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (2 samples, 0.02%)</title><rect x="10.0" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (14 samples, 0.17%)</title><rect x="10.3" y="739.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.02%)</title><rect x="10.3" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (11 samples, 0.13%)</title><rect x="10.6" y="723.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (11 samples, 0.13%)</title><rect x="10.6" y="707.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.6" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 0.10%)</title><rect x="10.6" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.6" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="10.6" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.6" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.05%)</title><rect x="11.0" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.0" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="11.7" y="691.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="14.7" y="702.0"></text>
</g>
<g>
<title>[unknown_Java] (18 samples, 0.22%)</title><rect x="12.4" y="739.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="15.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="14.7" y="723.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="17.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="14.7" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="17.7" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,833 samples, 22.14%)</title><rect x="15.1" y="739.0" width="261.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.1" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.06%)</title><rect x="15.8" y="723.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.8" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.06%)</title><rect x="15.8" y="707.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.8" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (126 samples, 1.52%)</title><rect x="16.6" y="723.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.02%)</title><rect x="16.8" y="707.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.02%)</title><rect x="16.8" y="691.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (122 samples, 1.47%)</title><rect x="17.1" y="707.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.1" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (110 samples, 1.33%)</title><rect x="17.6" y="691.0" width="15.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="20.6" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (82 samples, 0.99%)</title><rect x="21.5" y="675.0" width="11.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="24.5" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (82 samples, 0.99%)</title><rect x="21.5" y="659.0" width="11.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="24.5" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (81 samples, 0.98%)</title><rect x="21.7" y="643.0" width="11.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="24.7" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (79 samples, 0.95%)</title><rect x="22.0" y="627.0" width="11.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="25.0" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.05%)</title><rect x="22.1" y="611.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="25.1" y="622.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.04%)</title><rect x="22.3" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="25.3" y="606.0"></text>
</g>
<g>
<title>ep_poll (71 samples, 0.86%)</title><rect x="22.7" y="611.0" width="10.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="25.7" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (27 samples, 0.33%)</title><rect x="23.7" y="595.0" width="3.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="26.7" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (16 samples, 0.19%)</title><rect x="24.7" y="579.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="27.7" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (10 samples, 0.12%)</title><rect x="25.5" y="563.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="28.5" y="574.0"></text>
</g>
<g>
<title>sock_poll (8 samples, 0.10%)</title><rect x="25.8" y="547.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="28.8" y="558.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.05%)</title><rect x="26.4" y="531.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="29.4" y="542.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.04%)</title><rect x="27.1" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="30.1" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (37 samples, 0.45%)</title><rect x="27.5" y="595.0" width="5.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="30.5" y="606.0"></text>
</g>
<g>
<title>schedule (31 samples, 0.37%)</title><rect x="28.4" y="579.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="31.4" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (27 samples, 0.33%)</title><rect x="29.0" y="563.0" width="3.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="32.0" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (26 samples, 0.31%)</title><rect x="29.1" y="547.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="32.1" y="558.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.04%)</title><rect x="32.8" y="611.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="35.8" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.04%)</title><rect x="33.2" y="691.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="36.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="33.7" y="691.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="36.7" y="702.0"></text>
</g>
<g>
<title>__GI___clock_gettime (2 samples, 0.02%)</title><rect x="33.9" y="691.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="36.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,697 samples, 20.50%)</title><rect x="34.5" y="723.0" width="241.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.5" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,696 samples, 20.48%)</title><rect x="34.7" y="707.0" width="241.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="718.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,583 samples, 19.12%)</title><rect x="34.7" y="691.0" width="225.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="37.7" y="702.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,542 samples, 18.62%)</title><rect x="36.9" y="675.0" width="219.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.9" y="686.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,541 samples, 18.61%)</title><rect x="37.1" y="659.0" width="219.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.1" y="670.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,524 samples, 18.41%)</title><rect x="37.1" y="643.0" width="217.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.1" y="654.0">RequestHandler1_entity.handle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (558 samples, 6.74%)</title><rect x="37.1" y="627.0" width="79.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.1" y="638.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (548 samples, 6.62%)</title><rect x="38.2" y="611.0" width="78.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.2" y="622.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.24%)</title><rect x="38.2" y="595.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.14%)</title><rect x="39.4" y="579.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.4" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.06%)</title><rect x="39.6" y="563.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.06%)</title><rect x="39.6" y="547.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.02%)</title><rect x="40.1" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="40.4" y="563.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="40.4" y="547.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (528 samples, 6.38%)</title><rect x="41.1" y="595.0" width="75.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.1" y="606.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (528 samples, 6.38%)</title><rect x="41.1" y="579.0" width="75.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.1" y="590.0">one/nio/..</text>
</g>
<g>
<title>gettimeofday (7 samples, 0.08%)</title><rect x="41.1" y="563.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="44.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (520 samples, 6.28%)</title><rect x="42.2" y="563.0" width="74.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.2" y="574.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (520 samples, 6.28%)</title><rect x="42.2" y="547.0" width="74.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.2" y="558.0">one/nio/..</text>
</g>
<g>
<title>.annobin_send.c (505 samples, 6.10%)</title><rect x="42.4" y="531.0" width="71.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="45.4" y="542.0">.annobin..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (490 samples, 5.92%)</title><rect x="44.5" y="515.0" width="69.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="47.5" y="526.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (490 samples, 5.92%)</title><rect x="44.5" y="499.0" width="69.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="47.5" y="510.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_sendto (481 samples, 5.81%)</title><rect x="45.8" y="483.0" width="68.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="48.8" y="494.0">__x64_s..</text>
</g>
<g>
<title>__sys_sendto (481 samples, 5.81%)</title><rect x="45.8" y="467.0" width="68.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="48.8" y="478.0">__sys_s..</text>
</g>
<g>
<title>fput (2 samples, 0.02%)</title><rect x="46.2" y="451.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="49.2" y="462.0"></text>
</g>
<g>
<title>sock_sendmsg (466 samples, 5.63%)</title><rect x="46.8" y="451.0" width="66.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="49.8" y="462.0">sock_se..</text>
</g>
<g>
<title>security_socket_sendmsg (6 samples, 0.07%)</title><rect x="46.9" y="435.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="49.9" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (5 samples, 0.06%)</title><rect x="47.1" y="419.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="50.1" y="430.0"></text>
</g>
<g>
<title>avc_has_perm (5 samples, 0.06%)</title><rect x="47.1" y="403.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="50.1" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (459 samples, 5.54%)</title><rect x="47.8" y="435.0" width="65.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="50.8" y="446.0">tcp_sen..</text>
</g>
<g>
<title>release_sock (2 samples, 0.02%)</title><rect x="47.8" y="419.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="50.8" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (457 samples, 5.52%)</title><rect x="48.1" y="419.0" width="65.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="51.1" y="430.0">tcp_sen..</text>
</g>
<g>
<title>__tcp_push_pending_frames (422 samples, 5.10%)</title><rect x="48.9" y="403.0" width="60.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="51.9" y="414.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (422 samples, 5.10%)</title><rect x="48.9" y="387.0" width="60.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="51.9" y="398.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_transmit_skb (408 samples, 4.93%)</title><rect x="49.5" y="371.0" width="58.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="52.5" y="382.0">__tcp_..</text>
</g>
<g>
<title>__ip_queue_xmit (399 samples, 4.82%)</title><rect x="49.8" y="355.0" width="56.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="52.8" y="366.0">__ip_q..</text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.05%)</title><rect x="50.0" y="339.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="53.0" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.02%)</title><rect x="50.3" y="323.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="53.3" y="334.0"></text>
</g>
<g>
<title>ip_local_out (77 samples, 0.93%)</title><rect x="50.8" y="339.0" width="10.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="53.8" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (77 samples, 0.93%)</title><rect x="50.8" y="323.0" width="10.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="53.8" y="334.0"></text>
</g>
<g>
<title>ip_send_check (3 samples, 0.04%)</title><rect x="50.8" y="307.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="53.8" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (74 samples, 0.89%)</title><rect x="51.2" y="307.0" width="10.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="54.2" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (24 samples, 0.29%)</title><rect x="51.5" y="291.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="54.5" y="302.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.02%)</title><rect x="54.9" y="291.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="57.9" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (6 samples, 0.07%)</title><rect x="55.2" y="291.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="58.2" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (3 samples, 0.04%)</title><rect x="55.6" y="275.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="58.6" y="286.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (3 samples, 0.04%)</title><rect x="56.2" y="291.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="59.2" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (2 samples, 0.02%)</title><rect x="56.6" y="291.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="59.6" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (25 samples, 0.30%)</title><rect x="56.9" y="291.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="59.9" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (6 samples, 0.07%)</title><rect x="57.9" y="275.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="60.9" y="286.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (3 samples, 0.04%)</title><rect x="58.9" y="275.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="61.9" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (8 samples, 0.10%)</title><rect x="59.3" y="275.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="62.3" y="286.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (2 samples, 0.02%)</title><rect x="60.2" y="259.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="63.2" y="270.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (8 samples, 0.10%)</title><rect x="60.4" y="291.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="63.4" y="302.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (3 samples, 0.04%)</title><rect x="60.9" y="275.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="63.9" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (2 samples, 0.02%)</title><rect x="61.3" y="275.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="64.3" y="286.0"></text>
</g>
<g>
<title>ip_output (315 samples, 3.80%)</title><rect x="61.7" y="339.0" width="44.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="64.7" y="350.0">ip_o..</text>
</g>
<g>
<title>ip_finish_output2 (289 samples, 3.49%)</title><rect x="62.6" y="323.0" width="41.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="65.6" y="334.0">ip_..</text>
</g>
<g>
<title>__dev_queue_xmit (23 samples, 0.28%)</title><rect x="63.4" y="307.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="66.4" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (15 samples, 0.18%)</title><rect x="64.6" y="291.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="67.6" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (15 samples, 0.18%)</title><rect x="64.6" y="275.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="67.6" y="286.0"></text>
</g>
<g>
<title>netif_rx (9 samples, 0.11%)</title><rect x="64.7" y="259.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="67.7" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (9 samples, 0.11%)</title><rect x="64.7" y="243.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="67.7" y="254.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.04%)</title><rect x="65.3" y="227.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="68.3" y="238.0"></text>
</g>
<g>
<title>ktime_get_with_offset (2 samples, 0.02%)</title><rect x="65.7" y="227.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="68.7" y="238.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.02%)</title><rect x="65.7" y="211.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="68.7" y="222.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (3 samples, 0.04%)</title><rect x="66.0" y="259.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="69.0" y="270.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.02%)</title><rect x="66.4" y="259.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="69.4" y="270.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (260 samples, 3.14%)</title><rect x="66.7" y="307.0" width="37.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="69.7" y="318.0">__l..</text>
</g>
<g>
<title>do_softirq.part.0 (259 samples, 3.13%)</title><rect x="66.9" y="291.0" width="36.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="69.9" y="302.0">do_..</text>
</g>
<g>
<title>do_softirq_own_stack (254 samples, 3.07%)</title><rect x="67.6" y="275.0" width="36.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="70.6" y="286.0">do_..</text>
</g>
<g>
<title>__softirqentry_text_start (254 samples, 3.07%)</title><rect x="67.6" y="259.0" width="36.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="70.6" y="270.0">__s..</text>
</g>
<g>
<title>net_rx_action (247 samples, 2.98%)</title><rect x="68.6" y="243.0" width="35.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="71.6" y="254.0">net..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.02%)</title><rect x="68.9" y="227.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="71.9" y="238.0"></text>
</g>
<g>
<title>process_backlog (242 samples, 2.92%)</title><rect x="69.3" y="227.0" width="34.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="72.3" y="238.0">pr..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (234 samples, 2.83%)</title><rect x="70.4" y="211.0" width="33.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="73.4" y="222.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.04%)</title><rect x="70.4" y="195.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="73.4" y="206.0"></text>
</g>
<g>
<title>ip_rcv (231 samples, 2.79%)</title><rect x="70.9" y="195.0" width="32.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="73.9" y="206.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (186 samples, 2.25%)</title><rect x="70.9" y="179.0" width="26.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="73.9" y="190.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (157 samples, 1.90%)</title><rect x="71.0" y="163.0" width="22.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="74.0" y="174.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (157 samples, 1.90%)</title><rect x="71.0" y="147.0" width="22.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="74.0" y="158.0">i..</text>
</g>
<g>
<title>tcp_v4_rcv (155 samples, 1.87%)</title><rect x="71.3" y="131.0" width="22.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="74.3" y="142.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (7 samples, 0.08%)</title><rect x="73.0" y="115.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="76.0" y="126.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.02%)</title><rect x="73.7" y="99.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="76.7" y="110.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.04%)</title><rect x="74.0" y="115.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="77.0" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.04%)</title><rect x="74.0" y="99.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="77.0" y="110.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (3 samples, 0.04%)</title><rect x="74.0" y="83.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="77.0" y="94.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (133 samples, 1.61%)</title><rect x="74.4" y="115.0" width="19.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="77.4" y="126.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.02%)</title><rect x="74.6" y="99.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="77.6" y="110.0"></text>
</g>
<g>
<title>tcp_rcv_established (130 samples, 1.57%)</title><rect x="74.8" y="99.0" width="18.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.8" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.07%)</title><rect x="74.8" y="83.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="77.8" y="94.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.07%)</title><rect x="74.8" y="67.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="77.8" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="75.3" y="51.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="78.3" y="62.0"></text>
</g>
<g>
<title>tcp_ack (28 samples, 0.34%)</title><rect x="75.7" y="83.0" width="4.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="78.7" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.04%)</title><rect x="77.3" y="67.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="80.3" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.02%)</title><rect x="77.3" y="51.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="80.3" y="62.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.04%)</title><rect x="77.8" y="67.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="80.8" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.02%)</title><rect x="78.3" y="67.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="81.3" y="78.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.05%)</title><rect x="79.1" y="67.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="82.1" y="78.0"></text>
</g>
<g>
<title>tcp_data_queue (94 samples, 1.14%)</title><rect x="79.7" y="83.0" width="13.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="82.7" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (91 samples, 1.10%)</title><rect x="80.1" y="67.0" width="13.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="83.1" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (90 samples, 1.09%)</title><rect x="80.3" y="51.0" width="12.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="83.3" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (90 samples, 1.09%)</title><rect x="80.3" y="35.0" width="12.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="83.3" y="46.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.02%)</title><rect x="93.1" y="83.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="96.1" y="94.0"></text>
</g>
<g>
<title>nf_hook_slow (28 samples, 0.34%)</title><rect x="93.4" y="163.0" width="4.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="96.4" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (22 samples, 0.27%)</title><rect x="93.7" y="147.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="96.7" y="158.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (6 samples, 0.07%)</title><rect x="95.4" y="131.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="98.4" y="142.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (4 samples, 0.05%)</title><rect x="96.2" y="131.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="99.2" y="142.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.02%)</title><rect x="96.8" y="147.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="99.8" y="158.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.05%)</title><rect x="97.4" y="179.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="100.4" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish (7 samples, 0.08%)</title><rect x="97.9" y="179.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="100.9" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (5 samples, 0.06%)</title><rect x="98.2" y="163.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="101.2" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (34 samples, 0.41%)</title><rect x="98.9" y="179.0" width="4.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="101.9" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (25 samples, 0.30%)</title><rect x="99.1" y="163.0" width="3.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="102.1" y="174.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (2 samples, 0.02%)</title><rect x="102.6" y="163.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="105.6" y="174.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (3 samples, 0.04%)</title><rect x="102.9" y="163.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="105.9" y="174.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (3 samples, 0.04%)</title><rect x="103.3" y="163.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="106.3" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (20 samples, 0.24%)</title><rect x="103.8" y="323.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="106.8" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (7 samples, 0.08%)</title><rect x="104.1" y="307.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="107.1" y="318.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (3 samples, 0.04%)</title><rect x="105.3" y="307.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="108.3" y="318.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (2 samples, 0.02%)</title><rect x="105.5" y="291.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="108.5" y="302.0"></text>
</g>
<g>
<title>selinux_ip_postroute (3 samples, 0.04%)</title><rect x="105.9" y="307.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="108.9" y="318.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (2 samples, 0.02%)</title><rect x="106.3" y="307.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="109.3" y="318.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.04%)</title><rect x="106.6" y="355.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="109.6" y="366.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.04%)</title><rect x="107.1" y="355.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="110.1" y="366.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (7 samples, 0.08%)</title><rect x="107.8" y="371.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="110.8" y="382.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="108.2" y="355.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="111.2" y="366.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.04%)</title><rect x="108.2" y="339.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="111.2" y="350.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.02%)</title><rect x="108.8" y="371.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.8" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (17 samples, 0.21%)</title><rect x="109.2" y="403.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="112.2" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (16 samples, 0.19%)</title><rect x="109.3" y="387.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="112.3" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (6 samples, 0.07%)</title><rect x="109.5" y="371.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="112.5" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.06%)</title><rect x="109.6" y="355.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="112.6" y="366.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.02%)</title><rect x="110.0" y="339.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="113.0" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (7 samples, 0.08%)</title><rect x="110.3" y="371.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="113.3" y="382.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.02%)</title><rect x="111.3" y="371.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="114.3" y="382.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.02%)</title><rect x="111.6" y="403.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="114.6" y="414.0"></text>
</g>
<g>
<title>tcp_send_mss (5 samples, 0.06%)</title><rect x="112.2" y="403.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="115.2" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (5 samples, 0.06%)</title><rect x="112.2" y="387.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="115.2" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="112.5" y="371.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="115.5" y="382.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.10%)</title><rect x="113.2" y="451.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="116.2" y="462.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.08%)</title><rect x="113.3" y="435.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="116.3" y="446.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.07%)</title><rect x="113.5" y="419.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="116.5" y="430.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.13%)</title><rect x="114.5" y="531.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="117.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.13%)</title><rect x="114.5" y="515.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="117.5" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (10 samples, 0.12%)</title><rect x="114.6" y="499.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="117.6" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.06%)</title><rect x="115.3" y="483.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="118.3" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="115.5" y="467.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="118.5" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.02%)</title><rect x="115.7" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="118.7" y="478.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.02%)</title><rect x="116.0" y="531.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="119.0" y="542.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.02%)</title><rect x="116.3" y="611.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.08%)</title><rect x="116.6" y="627.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="119.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.05%)</title><rect x="116.6" y="611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.6" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.05%)</title><rect x="116.6" y="595.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.6" y="606.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="117.3" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="117.3" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="117.3" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="117.3" y="563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (959 samples, 11.58%)</title><rect x="117.6" y="627.0" width="136.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="120.6" y="638.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/lang/String.getBytes (6 samples, 0.07%)</title><rect x="117.7" y="611.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (6 samples, 0.07%)</title><rect x="117.7" y="595.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (5 samples, 0.06%)</title><rect x="117.9" y="579.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="120.9" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.04%)</title><rect x="118.2" y="563.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.08%)</title><rect x="118.6" y="611.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.08%)</title><rect x="118.6" y="595.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.07%)</title><rect x="118.7" y="579.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (6 samples, 0.07%)</title><rect x="118.7" y="563.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (6 samples, 0.07%)</title><rect x="118.7" y="547.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (6 samples, 0.07%)</title><rect x="118.7" y="531.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="121.7" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (4 samples, 0.05%)</title><rect x="119.0" y="515.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (939 samples, 11.34%)</title><rect x="119.7" y="611.0" width="133.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.7" y="622.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (24 samples, 0.29%)</title><rect x="119.7" y="595.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.7" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (24 samples, 0.29%)</title><rect x="119.7" y="579.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.7" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (24 samples, 0.29%)</title><rect x="119.7" y="563.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (24 samples, 0.29%)</title><rect x="119.7" y="547.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (24 samples, 0.29%)</title><rect x="119.7" y="531.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.23%)</title><rect x="120.0" y="515.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.0" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5 samples, 0.06%)</title><rect x="120.0" y="499.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (5 samples, 0.06%)</title><rect x="120.0" y="483.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (4 samples, 0.05%)</title><rect x="120.2" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.2" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.04%)</title><rect x="120.3" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.3" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.04%)</title><rect x="120.3" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (3 samples, 0.04%)</title><rect x="120.3" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (3 samples, 0.04%)</title><rect x="120.3" y="403.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.3" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (3 samples, 0.04%)</title><rect x="120.3" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.3" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.04%)</title><rect x="120.3" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.3" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (3 samples, 0.04%)</title><rect x="120.3" y="355.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.3" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.04%)</title><rect x="120.3" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.3" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (3 samples, 0.04%)</title><rect x="120.3" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.3" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.04%)</title><rect x="120.3" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="120.3" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="120.3" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.3" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="120.3" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.3" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (14 samples, 0.17%)</title><rect x="120.7" y="499.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.7" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (14 samples, 0.17%)</title><rect x="120.7" y="483.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.7" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (14 samples, 0.17%)</title><rect x="120.7" y="467.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.7" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (14 samples, 0.17%)</title><rect x="120.7" y="451.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.7" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.17%)</title><rect x="120.7" y="435.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.7" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.17%)</title><rect x="120.7" y="419.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.08%)</title><rect x="120.7" y="403.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.08%)</title><rect x="120.7" y="387.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.08%)</title><rect x="120.7" y="371.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (7 samples, 0.08%)</title><rect x="120.7" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.02%)</title><rect x="120.7" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (2 samples, 0.02%)</title><rect x="121.2" y="339.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="121.2" y="323.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="121.2" y="307.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.2" y="291.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.2" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.2" y="275.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.2" y="259.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.2" y="243.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.2" y="227.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (2 samples, 0.02%)</title><rect x="121.4" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="121.4" y="323.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="124.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="121.4" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.4" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.4" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.4" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.4" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.4" y="243.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.4" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="121.4" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="124.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (7 samples, 0.08%)</title><rect x="121.7" y="403.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.08%)</title><rect x="121.7" y="387.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (7 samples, 0.08%)</title><rect x="121.7" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="124.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="121.7" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="124.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (7 samples, 0.08%)</title><rect x="121.7" y="339.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="121.7" y="323.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (7 samples, 0.08%)</title><rect x="121.7" y="307.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.08%)</title><rect x="121.7" y="291.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.06%)</title><rect x="121.9" y="275.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="122.2" y="259.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.2" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="122.2" y="243.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$64/1828395560.apply (3 samples, 0.04%)</title><rect x="122.7" y="515.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="125.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.04%)</title><rect x="122.7" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (12 samples, 0.14%)</title><rect x="123.2" y="595.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="126.2" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (11 samples, 0.13%)</title><rect x="123.3" y="579.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$68/1913378084.apply (9 samples, 0.11%)</title><rect x="123.6" y="563.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (9 samples, 0.11%)</title><rect x="123.6" y="547.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.07%)</title><rect x="123.6" y="531.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.07%)</title><rect x="123.6" y="515.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.07%)</title><rect x="123.6" y="499.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.07%)</title><rect x="123.6" y="483.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="123.6" y="467.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.6" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="123.7" y="451.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="123.7" y="435.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="123.7" y="419.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (3 samples, 0.04%)</title><rect x="124.4" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.4" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="124.6" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="124.6" y="499.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="124.6" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="124.6" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.05%)</title><rect x="124.9" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.9" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="125.0" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.02%)</title><rect x="125.4" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.4" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="125.4" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.4" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="125.4" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.4" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="125.4" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="128.4" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="125.4" y="531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="128.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (896 samples, 10.82%)</title><rect x="125.9" y="595.0" width="127.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.9" y="606.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (896 samples, 10.82%)</title><rect x="125.9" y="579.0" width="127.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.9" y="590.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (768 samples, 9.28%)</title><rect x="125.9" y="563.0" width="109.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="128.9" y="574.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.10%)</title><rect x="125.9" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="128.9" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="126.0" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="129.0" y="542.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="126.7" y="531.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="129.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (39 samples, 0.47%)</title><rect x="127.0" y="547.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (37 samples, 0.45%)</title><rect x="127.3" y="531.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (31 samples, 0.37%)</title><rect x="128.1" y="515.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (28 samples, 0.34%)</title><rect x="128.6" y="499.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.05%)</title><rect x="129.3" y="483.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.3" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="129.6" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="129.6" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.6" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="129.6" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.6" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="129.6" y="419.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (19 samples, 0.23%)</title><rect x="129.9" y="483.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.10%)</title><rect x="131.4" y="467.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="132.1" y="451.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="132.1" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.02%)</title><rect x="132.6" y="547.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (5 samples, 0.06%)</title><rect x="132.8" y="547.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (5 samples, 0.06%)</title><rect x="132.8" y="531.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (5 samples, 0.06%)</title><rect x="132.8" y="515.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (4 samples, 0.05%)</title><rect x="133.0" y="499.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (4 samples, 0.05%)</title><rect x="133.0" y="483.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (83 samples, 1.00%)</title><rect x="133.6" y="547.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="136.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (8 samples, 0.10%)</title><rect x="133.7" y="531.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.10%)</title><rect x="133.7" y="515.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (8 samples, 0.10%)</title><rect x="133.7" y="499.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.02%)</title><rect x="133.7" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.7" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.02%)</title><rect x="133.7" y="467.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.7" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.02%)</title><rect x="133.7" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.7" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.02%)</title><rect x="133.7" y="435.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.02%)</title><rect x="134.0" y="483.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="137.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.02%)</title><rect x="134.0" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="134.0" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (4 samples, 0.05%)</title><rect x="134.3" y="483.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (4 samples, 0.05%)</title><rect x="134.3" y="467.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (2 samples, 0.02%)</title><rect x="135.0" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (55 samples, 0.66%)</title><rect x="135.3" y="531.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.3" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (5 samples, 0.06%)</title><rect x="135.3" y="515.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (5 samples, 0.06%)</title><rect x="135.3" y="499.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.3" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap.entrySet (3 samples, 0.04%)</title><rect x="135.6" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="138.6" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.02%)</title><rect x="136.0" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (41 samples, 0.50%)</title><rect x="136.6" y="515.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (40 samples, 0.48%)</title><rect x="136.6" y="499.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (39 samples, 0.47%)</title><rect x="136.7" y="483.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (38 samples, 0.46%)</title><rect x="136.8" y="467.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="139.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (4 samples, 0.05%)</title><rect x="136.8" y="451.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (4 samples, 0.05%)</title><rect x="136.8" y="435.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.04%)</title><rect x="137.0" y="419.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="137.0" y="403.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="137.0" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.0" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="137.1" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="140.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="137.1" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.02%)</title><rect x="137.1" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (34 samples, 0.41%)</title><rect x="137.4" y="451.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (34 samples, 0.41%)</title><rect x="137.4" y="435.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.02%)</title><rect x="137.5" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="137.5" y="403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="137.5" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (31 samples, 0.37%)</title><rect x="137.8" y="419.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (18 samples, 0.22%)</title><rect x="139.7" y="403.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.7" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (9 samples, 0.11%)</title><rect x="140.3" y="387.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.06%)</title><rect x="141.5" y="387.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.06%)</title><rect x="141.5" y="371.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.5" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.02%)</title><rect x="141.7" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.7" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="142.0" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.02%)</title><rect x="142.0" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (5 samples, 0.06%)</title><rect x="142.4" y="515.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (2 samples, 0.02%)</title><rect x="142.8" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 0.02%)</title><rect x="142.8" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (16 samples, 0.19%)</title><rect x="143.1" y="531.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (10 samples, 0.12%)</title><rect x="143.1" y="515.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.1" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (9 samples, 0.11%)</title><rect x="143.2" y="499.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.2" y="510.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.04%)</title><rect x="143.4" y="483.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="146.4" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (4 samples, 0.05%)</title><rect x="144.0" y="483.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (4 samples, 0.05%)</title><rect x="144.0" y="467.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 0.02%)</title><rect x="144.2" y="451.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (6 samples, 0.07%)</title><rect x="144.5" y="515.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (6 samples, 0.07%)</title><rect x="144.5" y="499.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (2 samples, 0.02%)</title><rect x="144.5" y="483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.05%)</title><rect x="144.8" y="483.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.04%)</title><rect x="144.8" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.02%)</title><rect x="145.0" y="451.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (631 samples, 7.62%)</title><rect x="145.4" y="547.0" width="89.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.4" y="558.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (631 samples, 7.62%)</title><rect x="145.4" y="531.0" width="89.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.4" y="542.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (628 samples, 7.58%)</title><rect x="145.8" y="515.0" width="89.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.8" y="526.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.13%)</title><rect x="146.1" y="499.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="149.1" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.13%)</title><rect x="146.1" y="483.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.1" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.05%)</title><rect x="147.1" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (110 samples, 1.33%)</title><rect x="147.7" y="499.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="150.7" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (26 samples, 0.31%)</title><rect x="147.7" y="483.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="150.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (4 samples, 0.05%)</title><rect x="149.4" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="152.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (10 samples, 0.12%)</title><rect x="149.9" y="467.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (9 samples, 0.11%)</title><rect x="150.1" y="451.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (9 samples, 0.11%)</title><rect x="150.1" y="435.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (49 samples, 0.59%)</title><rect x="151.4" y="483.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (47 samples, 0.57%)</title><rect x="151.7" y="467.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (47 samples, 0.57%)</title><rect x="151.7" y="451.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (47 samples, 0.57%)</title><rect x="151.7" y="435.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.7" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (42 samples, 0.51%)</title><rect x="152.4" y="419.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (42 samples, 0.51%)</title><rect x="152.4" y="403.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (38 samples, 0.46%)</title><rect x="152.9" y="387.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.9" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (38 samples, 0.46%)</title><rect x="152.9" y="371.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.9" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="152.9" y="355.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="153.4" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="153.4" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.05%)</title><rect x="153.4" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (31 samples, 0.37%)</title><rect x="153.9" y="355.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="155.6" y="339.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.14%)</title><rect x="156.6" y="339.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.08%)</title><rect x="157.4" y="323.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.08%)</title><rect x="157.4" y="307.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (24 samples, 0.29%)</title><rect x="158.4" y="483.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="161.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (24 samples, 0.29%)</title><rect x="158.4" y="467.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (24 samples, 0.29%)</title><rect x="158.4" y="451.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="161.4" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (23 samples, 0.28%)</title><rect x="158.5" y="435.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (23 samples, 0.28%)</title><rect x="158.5" y="419.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (23 samples, 0.28%)</title><rect x="158.5" y="403.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.5" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (23 samples, 0.28%)</title><rect x="158.5" y="387.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.5" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.13%)</title><rect x="158.5" y="371.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.13%)</title><rect x="158.5" y="355.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.12%)</title><rect x="158.6" y="339.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.12%)</title><rect x="158.6" y="323.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.14%)</title><rect x="160.1" y="371.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.1" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.14%)</title><rect x="160.1" y="355.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.06%)</title><rect x="160.6" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="161.3" y="339.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.04%)</title><rect x="161.3" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="164.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.13%)</title><rect x="161.8" y="483.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.8" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.13%)</title><rect x="161.8" y="467.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="164.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.13%)</title><rect x="161.8" y="451.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="164.8" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.06%)</title><rect x="162.6" y="435.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (505 samples, 6.10%)</title><rect x="163.3" y="499.0" width="72.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.3" y="510.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (312 samples, 3.77%)</title><rect x="177.3" y="483.0" width="44.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.3" y="494.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (310 samples, 3.74%)</title><rect x="177.6" y="467.0" width="44.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.6" y="478.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (289 samples, 3.49%)</title><rect x="180.6" y="451.0" width="41.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.6" y="462.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (287 samples, 3.47%)</title><rect x="180.9" y="435.0" width="40.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.9" y="446.0">jav..</text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.04%)</title><rect x="206.5" y="419.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="209.5" y="430.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.04%)</title><rect x="206.5" y="403.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="209.5" y="414.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.04%)</title><rect x="206.5" y="387.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="209.5" y="398.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.04%)</title><rect x="206.5" y="371.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="209.5" y="382.0"></text>
</g>
<g>
<title>run_timer_softirq (2 samples, 0.02%)</title><rect x="206.7" y="355.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="209.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.06%)</title><rect x="207.0" y="419.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.0" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (91 samples, 1.10%)</title><rect x="207.7" y="419.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (68 samples, 0.82%)</title><rect x="209.5" y="403.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (68 samples, 0.82%)</title><rect x="209.5" y="387.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (65 samples, 0.79%)</title><rect x="209.9" y="371.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.9" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.19%)</title><rect x="215.1" y="355.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.13%)</title><rect x="215.8" y="339.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.13%)</title><rect x="215.8" y="323.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.12%)</title><rect x="215.9" y="307.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.9" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.16%)</title><rect x="217.4" y="355.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.4" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="217.8" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.07%)</title><rect x="218.4" y="339.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.07%)</title><rect x="218.4" y="323.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.07%)</title><rect x="218.4" y="307.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.12%)</title><rect x="219.2" y="403.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.2" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.10%)</title><rect x="220.6" y="419.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (56 samples, 0.68%)</title><rect x="221.8" y="483.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (52 samples, 0.63%)</title><rect x="222.3" y="467.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.3" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (51 samples, 0.62%)</title><rect x="222.5" y="451.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (42 samples, 0.51%)</title><rect x="223.8" y="435.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 0.50%)</title><rect x="223.9" y="419.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 0.50%)</title><rect x="223.9" y="403.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.9" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (41 samples, 0.50%)</title><rect x="223.9" y="387.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.9" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.17%)</title><rect x="224.2" y="371.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.17%)</title><rect x="224.2" y="355.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.17%)</title><rect x="224.2" y="339.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.16%)</title><rect x="224.3" y="323.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.30%)</title><rect x="226.2" y="371.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.30%)</title><rect x="226.2" y="355.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.10%)</title><rect x="227.0" y="339.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.13%)</title><rect x="228.2" y="339.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="229.2" y="323.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (39 samples, 0.47%)</title><rect x="229.8" y="483.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.reachabilityFence (10 samples, 0.12%)</title><rect x="231.0" y="467.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (7 samples, 0.08%)</title><rect x="231.5" y="451.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.5" y="462.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (4 samples, 0.05%)</title><rect x="232.5" y="467.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.5" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (7 samples, 0.08%)</title><rect x="233.0" y="467.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (9 samples, 0.11%)</title><rect x="234.0" y="467.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (128 samples, 1.55%)</title><rect x="235.3" y="563.0" width="18.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (104 samples, 1.26%)</title><rect x="235.5" y="547.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.5" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (104 samples, 1.26%)</title><rect x="235.5" y="531.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (13 samples, 0.16%)</title><rect x="236.6" y="515.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.6" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (11 samples, 0.13%)</title><rect x="236.9" y="499.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.9" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (9 samples, 0.11%)</title><rect x="237.2" y="483.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (9 samples, 0.11%)</title><rect x="237.2" y="467.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$64/1828395560.apply (7 samples, 0.08%)</title><rect x="237.4" y="451.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.07%)</title><rect x="237.6" y="435.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.6" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="237.6" y="419.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.05%)</title><rect x="237.6" y="403.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="237.6" y="387.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="237.7" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.7" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="237.9" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.9" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (5 samples, 0.06%)</title><rect x="238.6" y="515.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.6" y="526.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="239.0" y="499.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="242.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (74 samples, 0.89%)</title><rect x="239.3" y="515.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.3" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (74 samples, 0.89%)</title><rect x="239.3" y="499.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.3" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (72 samples, 0.87%)</title><rect x="239.6" y="483.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (72 samples, 0.87%)</title><rect x="239.6" y="467.0" width="10.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (70 samples, 0.85%)</title><rect x="239.9" y="451.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.9" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (69 samples, 0.83%)</title><rect x="240.0" y="435.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (35 samples, 0.42%)</title><rect x="240.0" y="419.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (6 samples, 0.07%)</title><rect x="240.4" y="403.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.4" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.02%)</title><rect x="240.7" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (2 samples, 0.02%)</title><rect x="241.0" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (26 samples, 0.31%)</title><rect x="241.3" y="403.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (26 samples, 0.31%)</title><rect x="241.3" y="387.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (26 samples, 0.31%)</title><rect x="241.3" y="371.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (12 samples, 0.14%)</title><rect x="241.4" y="355.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.4" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.10%)</title><rect x="241.4" y="339.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.10%)</title><rect x="241.4" y="323.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.08%)</title><rect x="241.6" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="241.6" y="291.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.6" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="242.3" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="242.3" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="242.3" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.3" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="242.3" y="227.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="242.7" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.7" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="242.7" y="323.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.04%)</title><rect x="242.7" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.7" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.04%)</title><rect x="242.7" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (6 samples, 0.07%)</title><rect x="243.1" y="355.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="243.1" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="243.1" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="243.1" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="243.1" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.1" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="243.1" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="243.1" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="243.1" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.04%)</title><rect x="243.4" y="339.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="243.4" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="243.4" y="307.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="243.4" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="243.4" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="243.4" y="259.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="243.4" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="243.6" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.6" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="243.6" y="211.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="243.6" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.05%)</title><rect x="244.0" y="355.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="244.0" y="339.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.05%)</title><rect x="244.0" y="323.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="244.1" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="244.1" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.1" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="244.1" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="244.1" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="244.1" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.1" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="244.3" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (3 samples, 0.04%)</title><rect x="244.6" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="244.7" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="244.7" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="244.7" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.7" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="244.7" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="244.7" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="244.7" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.7" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="244.7" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="244.7" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (34 samples, 0.41%)</title><rect x="245.0" y="419.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (34 samples, 0.41%)</title><rect x="245.0" y="403.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.0" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (34 samples, 0.41%)</title><rect x="245.0" y="387.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (34 samples, 0.41%)</title><rect x="245.0" y="371.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (34 samples, 0.41%)</title><rect x="245.0" y="355.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (34 samples, 0.41%)</title><rect x="245.0" y="339.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.0" y="350.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="245.0" y="323.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="248.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (31 samples, 0.37%)</title><rect x="245.4" y="323.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (31 samples, 0.37%)</title><rect x="245.4" y="307.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.18%)</title><rect x="245.7" y="291.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.18%)</title><rect x="245.7" y="275.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.7" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.13%)</title><rect x="246.0" y="259.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="246.7" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.04%)</title><rect x="247.1" y="243.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="247.6" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.02%)</title><rect x="247.6" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (14 samples, 0.17%)</title><rect x="247.9" y="291.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (13 samples, 0.16%)</title><rect x="248.0" y="275.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.14%)</title><rect x="248.1" y="259.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.14%)</title><rect x="248.1" y="243.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.12%)</title><rect x="248.4" y="227.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.12%)</title><rect x="248.4" y="211.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.4" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.11%)</title><rect x="248.6" y="195.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.11%)</title><rect x="248.6" y="179.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.11%)</title><rect x="248.6" y="163.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.6" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="249.3" y="147.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.3" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.05%)</title><rect x="249.3" y="131.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (3 samples, 0.04%)</title><rect x="249.8" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (22 samples, 0.27%)</title><rect x="250.4" y="547.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (22 samples, 0.27%)</title><rect x="250.4" y="531.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.4" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (21 samples, 0.25%)</title><rect x="250.6" y="515.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.6" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (14 samples, 0.17%)</title><rect x="250.6" y="499.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (14 samples, 0.17%)</title><rect x="250.6" y="483.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (12 samples, 0.14%)</title><rect x="250.8" y="467.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.14%)</title><rect x="250.8" y="451.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.8" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.14%)</title><rect x="250.8" y="435.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (11 samples, 0.13%)</title><rect x="251.0" y="419.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (11 samples, 0.13%)</title><rect x="251.0" y="403.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.0" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (11 samples, 0.13%)</title><rect x="251.0" y="387.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.13%)</title><rect x="251.0" y="371.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (10 samples, 0.12%)</title><rect x="251.1" y="355.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.12%)</title><rect x="251.1" y="339.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (10 samples, 0.12%)</title><rect x="251.1" y="323.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.1" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (10 samples, 0.12%)</title><rect x="251.1" y="307.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.05%)</title><rect x="251.4" y="291.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.05%)</title><rect x="251.4" y="275.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.4" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="251.6" y="259.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (4 samples, 0.05%)</title><rect x="252.0" y="291.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.04%)</title><rect x="252.1" y="275.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.1" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="252.1" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.1" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="252.1" y="243.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.1" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="252.1" y="227.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="252.1" y="211.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.1" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="252.1" y="195.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="252.1" y="179.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="252.1" y="163.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.1" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="252.1" y="147.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.1" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="252.1" y="131.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.1" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="252.1" y="115.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="252.1" y="99.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.1" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.02%)</title><rect x="252.1" y="83.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.1" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7 samples, 0.08%)</title><rect x="252.6" y="499.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7 samples, 0.08%)</title><rect x="252.6" y="483.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (7 samples, 0.08%)</title><rect x="252.6" y="467.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (7 samples, 0.08%)</title><rect x="252.6" y="451.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.08%)</title><rect x="252.6" y="435.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.08%)</title><rect x="252.6" y="419.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.6" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3 samples, 0.04%)</title><rect x="252.6" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.04%)</title><rect x="252.6" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.04%)</title><rect x="252.6" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (3 samples, 0.04%)</title><rect x="252.6" y="355.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.04%)</title><rect x="252.6" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="252.6" y="323.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="252.6" y="307.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="252.6" y="291.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="252.6" y="275.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="252.6" y="259.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="252.6" y="243.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="252.6" y="227.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (4 samples, 0.05%)</title><rect x="253.0" y="403.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.05%)</title><rect x="253.0" y="387.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (4 samples, 0.05%)</title><rect x="253.0" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.05%)</title><rect x="253.0" y="355.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (4 samples, 0.05%)</title><rect x="253.0" y="339.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.05%)</title><rect x="253.0" y="323.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (4 samples, 0.05%)</title><rect x="253.0" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.05%)</title><rect x="253.0" y="291.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="253.0" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="253.0" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.0" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="253.0" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="253.0" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (2 samples, 0.02%)</title><rect x="253.3" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (5 samples, 0.06%)</title><rect x="253.6" y="611.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.upsert (5 samples, 0.06%)</title><rect x="253.6" y="595.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.6" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="253.7" y="579.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="256.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.setToFlush (2 samples, 0.02%)</title><rect x="254.0" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getSizeOfFlushedRow (2 samples, 0.02%)</title><rect x="254.0" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.0" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.02%)</title><rect x="254.0" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.0" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.06%)</title><rect x="254.3" y="643.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.06%)</title><rect x="254.3" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="254.4" y="611.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.02%)</title><rect x="254.4" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="254.7" y="611.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="254.7" y="595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.02%)</title><rect x="254.7" y="579.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.04%)</title><rect x="255.0" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9 samples, 0.11%)</title><rect x="255.4" y="643.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.10%)</title><rect x="255.4" y="627.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.4" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.10%)</title><rect x="255.4" y="611.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.08%)</title><rect x="255.5" y="595.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="258.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.04%)</title><rect x="256.1" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="256.1" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.19%)</title><rect x="256.7" y="675.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.11%)</title><rect x="257.4" y="659.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.4" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.11%)</title><rect x="257.4" y="643.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.4" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.02%)</title><rect x="258.7" y="659.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="261.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.02%)</title><rect x="259.0" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.04%)</title><rect x="259.3" y="675.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="262.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="259.7" y="675.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.7" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="259.7" y="659.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.7" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (113 samples, 1.36%)</title><rect x="260.3" y="691.0" width="16.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.3" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (111 samples, 1.34%)</title><rect x="260.5" y="675.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.29%)</title><rect x="261.0" y="659.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="264.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.29%)</title><rect x="261.0" y="643.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="264.0" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 0.25%)</title><rect x="261.0" y="627.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="264.0" y="638.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.04%)</title><rect x="261.2" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="264.2" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="261.7" y="611.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="264.7" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (12 samples, 0.14%)</title><rect x="262.1" y="611.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="265.1" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.04%)</title><rect x="262.1" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="265.1" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.04%)</title><rect x="262.5" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="265.5" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (6 samples, 0.07%)</title><rect x="263.0" y="595.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="266.0" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.04%)</title><rect x="264.0" y="627.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="267.0" y="638.0"></text>
</g>
<g>
<title>__libc_recv (82 samples, 0.99%)</title><rect x="264.4" y="659.0" width="11.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="267.4" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (67 samples, 0.81%)</title><rect x="266.5" y="643.0" width="9.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="269.5" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (67 samples, 0.81%)</title><rect x="266.5" y="627.0" width="9.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="269.5" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (58 samples, 0.70%)</title><rect x="267.8" y="611.0" width="8.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="270.8" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (57 samples, 0.69%)</title><rect x="267.9" y="595.0" width="8.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="270.9" y="606.0"></text>
</g>
<g>
<title>inet_recvmsg (30 samples, 0.36%)</title><rect x="268.4" y="579.0" width="4.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="271.4" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (30 samples, 0.36%)</title><rect x="268.4" y="563.0" width="4.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="271.4" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.05%)</title><rect x="269.2" y="547.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="272.2" y="558.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.05%)</title><rect x="269.2" y="531.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="272.2" y="542.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.05%)</title><rect x="269.2" y="515.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="272.2" y="526.0"></text>
</g>
<g>
<title>sock_rfree (4 samples, 0.05%)</title><rect x="269.2" y="499.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="272.2" y="510.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.02%)</title><rect x="269.8" y="547.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="272.8" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.02%)</title><rect x="270.1" y="547.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="273.1" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.02%)</title><rect x="270.1" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="273.1" y="542.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.04%)</title><rect x="270.4" y="547.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="273.4" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.02%)</title><rect x="270.5" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="273.5" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (7 samples, 0.08%)</title><rect x="270.8" y="547.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="273.8" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (7 samples, 0.08%)</title><rect x="270.8" y="531.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="273.8" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.02%)</title><rect x="270.9" y="515.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="273.9" y="526.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.02%)</title><rect x="270.9" y="499.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="273.9" y="510.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.02%)</title><rect x="270.9" y="483.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="273.9" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (4 samples, 0.05%)</title><rect x="271.2" y="515.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="274.2" y="526.0"></text>
</g>
<g>
<title>__check_object_size (4 samples, 0.05%)</title><rect x="271.2" y="499.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="274.2" y="510.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.02%)</title><rect x="271.4" y="483.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="274.4" y="494.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.02%)</title><rect x="271.8" y="547.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="274.8" y="558.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (3 samples, 0.04%)</title><rect x="272.2" y="547.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="275.2" y="558.0"></text>
</g>
<g>
<title>sock_recvmsg (17 samples, 0.21%)</title><rect x="272.6" y="579.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="275.6" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (17 samples, 0.21%)</title><rect x="272.6" y="563.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="275.6" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (16 samples, 0.19%)</title><rect x="272.8" y="547.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="275.8" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (10 samples, 0.12%)</title><rect x="273.6" y="531.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="276.6" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7 samples, 0.08%)</title><rect x="275.1" y="579.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="278.1" y="590.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.07%)</title><rect x="275.2" y="563.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="278.2" y="574.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.02%)</title><rect x="275.8" y="547.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="278.8" y="558.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.02%)</title><rect x="276.1" y="659.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="279.1" y="670.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=13276] (1,870 samples, 22.58%)</title><rect x="276.4" y="755.0" width="266.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="279.4" y="766.0">[NIO Selector #1 tid=13276]</text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.02%)</title><rect x="276.4" y="739.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="279.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (19 samples, 0.23%)</title><rect x="276.8" y="739.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="279.8" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (13 samples, 0.16%)</title><rect x="277.4" y="723.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="280.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (12 samples, 0.14%)</title><rect x="277.5" y="707.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="280.5" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 0.14%)</title><rect x="277.5" y="691.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="280.5" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="277.5" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="280.5" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (7 samples, 0.08%)</title><rect x="278.1" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="281.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (6 samples, 0.07%)</title><rect x="278.1" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="281.1" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (4 samples, 0.05%)</title><rect x="278.4" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="281.4" y="654.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.02%)</title><rect x="278.6" y="627.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="281.6" y="638.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.02%)</title><rect x="279.2" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="282.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="279.5" y="739.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="282.5" y="750.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.02%)</title><rect x="279.5" y="723.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="282.5" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (17 samples, 0.21%)</title><rect x="279.8" y="739.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="282.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="281.9" y="723.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="284.9" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.02%)</title><rect x="282.2" y="739.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="285.2" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="282.2" y="723.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="285.2" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="282.2" y="707.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="285.2" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="282.2" y="691.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="285.2" y="702.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="282.2" y="675.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="285.2" y="686.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.02%)</title><rect x="282.2" y="659.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="285.2" y="670.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.02%)</title><rect x="282.2" y="643.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="285.2" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.02%)</title><rect x="282.2" y="627.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="285.2" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="282.2" y="611.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="285.2" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,826 samples, 22.05%)</title><rect x="282.6" y="739.0" width="260.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.6" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (136 samples, 1.64%)</title><rect x="282.8" y="723.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.8" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.02%)</title><rect x="283.1" y="707.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.1" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.02%)</title><rect x="283.1" y="691.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.1" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (132 samples, 1.59%)</title><rect x="283.3" y="707.0" width="18.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (113 samples, 1.36%)</title><rect x="283.6" y="691.0" width="16.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="286.6" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (87 samples, 1.05%)</title><rect x="287.3" y="675.0" width="12.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="290.3" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (87 samples, 1.05%)</title><rect x="287.3" y="659.0" width="12.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="290.3" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (75 samples, 0.91%)</title><rect x="289.0" y="643.0" width="10.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="292.0" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (75 samples, 0.91%)</title><rect x="289.0" y="627.0" width="10.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="292.0" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.05%)</title><rect x="289.2" y="611.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="292.2" y="622.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.02%)</title><rect x="289.5" y="595.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="292.5" y="606.0"></text>
</g>
<g>
<title>ep_poll (69 samples, 0.83%)</title><rect x="289.8" y="611.0" width="9.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="292.8" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (32 samples, 0.39%)</title><rect x="290.7" y="595.0" width="4.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="293.7" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (22 samples, 0.27%)</title><rect x="291.7" y="579.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="294.7" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (15 samples, 0.18%)</title><rect x="292.7" y="563.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="295.7" y="574.0"></text>
</g>
<g>
<title>sock_poll (12 samples, 0.14%)</title><rect x="293.2" y="547.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="296.2" y="558.0"></text>
</g>
<g>
<title>tcp_poll (10 samples, 0.12%)</title><rect x="293.5" y="531.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="296.5" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.05%)</title><rect x="294.3" y="515.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="297.3" y="526.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.02%)</title><rect x="295.0" y="579.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="298.0" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (30 samples, 0.36%)</title><rect x="295.3" y="595.0" width="4.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="298.3" y="606.0"></text>
</g>
<g>
<title>schedule (25 samples, 0.30%)</title><rect x="296.0" y="579.0" width="3.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="299.0" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (22 samples, 0.27%)</title><rect x="296.4" y="563.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="299.4" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (20 samples, 0.24%)</title><rect x="296.7" y="547.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="299.7" y="558.0"></text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (3 samples, 0.04%)</title><rect x="299.7" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="302.7" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (3 samples, 0.04%)</title><rect x="299.7" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="302.7" y="686.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (2 samples, 0.02%)</title><rect x="299.7" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="302.7" y="670.0"></text>
</g>
<g>
<title>__GI___clock_gettime (5 samples, 0.06%)</title><rect x="300.3" y="691.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="303.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="300.6" y="675.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="303.6" y="686.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.02%)</title><rect x="301.0" y="691.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="304.0" y="702.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.04%)</title><rect x="301.3" y="691.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="304.3" y="702.0"></text>
</g>
<g>
<title>_init (3 samples, 0.04%)</title><rect x="301.7" y="691.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="304.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,689 samples, 20.40%)</title><rect x="302.1" y="723.0" width="240.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.1" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,684 samples, 20.34%)</title><rect x="302.6" y="707.0" width="240.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.6" y="718.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,558 samples, 18.82%)</title><rect x="302.7" y="691.0" width="222.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.7" y="702.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,515 samples, 18.30%)</title><rect x="304.1" y="675.0" width="216.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="307.1" y="686.0">one/nio/http/HttpSession.han..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,511 samples, 18.25%)</title><rect x="304.7" y="659.0" width="215.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.7" y="670.0">one/nio/http/HttpServer.hand..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,501 samples, 18.13%)</title><rect x="304.7" y="643.0" width="213.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.7" y="654.0">RequestHandler1_entity.handl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (536 samples, 6.47%)</title><rect x="304.7" y="627.0" width="76.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.7" y="638.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (525 samples, 6.34%)</title><rect x="305.9" y="611.0" width="74.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.9" y="622.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (19 samples, 0.23%)</title><rect x="305.9" y="595.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.13%)</title><rect x="307.0" y="579.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.0" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.02%)</title><rect x="307.1" y="563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.1" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="307.4" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="307.9" y="563.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.9" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="307.9" y="547.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (506 samples, 6.11%)</title><rect x="308.6" y="595.0" width="72.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.6" y="606.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (503 samples, 6.07%)</title><rect x="309.0" y="579.0" width="71.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.0" y="590.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (503 samples, 6.07%)</title><rect x="309.0" y="563.0" width="71.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.0" y="574.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (503 samples, 6.07%)</title><rect x="309.0" y="547.0" width="71.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.0" y="558.0">one/nio/..</text>
</g>
<g>
<title>.annobin_send.c (488 samples, 5.89%)</title><rect x="309.7" y="531.0" width="69.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="312.7" y="542.0">.annobi..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.04%)</title><rect x="312.0" y="515.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="315.0" y="526.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (469 samples, 5.66%)</title><rect x="312.4" y="515.0" width="66.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="315.4" y="526.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (469 samples, 5.66%)</title><rect x="312.4" y="499.0" width="66.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="315.4" y="510.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_sendto (462 samples, 5.58%)</title><rect x="313.4" y="483.0" width="65.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="316.4" y="494.0">__x64_s..</text>
</g>
<g>
<title>__sys_sendto (461 samples, 5.57%)</title><rect x="313.6" y="467.0" width="65.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="316.6" y="478.0">__sys_s..</text>
</g>
<g>
<title>fput (2 samples, 0.02%)</title><rect x="313.8" y="451.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="316.8" y="462.0"></text>
</g>
<g>
<title>sock_sendmsg (454 samples, 5.48%)</title><rect x="314.1" y="451.0" width="64.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="317.1" y="462.0">sock_se..</text>
</g>
<g>
<title>security_socket_sendmsg (6 samples, 0.07%)</title><rect x="314.1" y="435.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="317.1" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (5 samples, 0.06%)</title><rect x="314.3" y="419.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="317.3" y="430.0"></text>
</g>
<g>
<title>avc_has_perm (5 samples, 0.06%)</title><rect x="314.3" y="403.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="317.3" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (448 samples, 5.41%)</title><rect x="315.0" y="435.0" width="63.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="318.0" y="446.0">tcp_sen..</text>
</g>
<g>
<title>tcp_sendmsg_locked (445 samples, 5.37%)</title><rect x="315.4" y="419.0" width="63.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="318.4" y="430.0">tcp_sen..</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.04%)</title><rect x="316.0" y="403.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="319.0" y="414.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (402 samples, 4.86%)</title><rect x="316.4" y="403.0" width="57.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="319.4" y="414.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (402 samples, 4.86%)</title><rect x="316.4" y="387.0" width="57.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="319.4" y="398.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_transmit_skb (386 samples, 4.66%)</title><rect x="317.0" y="371.0" width="55.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="320.0" y="382.0">__tcp..</text>
</g>
<g>
<title>__ip_queue_xmit (369 samples, 4.46%)</title><rect x="318.1" y="355.0" width="52.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="321.1" y="366.0">__ip_..</text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.05%)</title><rect x="318.5" y="339.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="321.5" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="318.7" y="323.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="321.7" y="334.0"></text>
</g>
<g>
<title>ip_local_out (75 samples, 0.91%)</title><rect x="319.1" y="339.0" width="10.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="322.1" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (75 samples, 0.91%)</title><rect x="319.1" y="323.0" width="10.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="322.1" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (74 samples, 0.89%)</title><rect x="319.3" y="307.0" width="10.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="322.3" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (19 samples, 0.23%)</title><rect x="319.4" y="291.0" width="2.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="322.4" y="302.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.02%)</title><rect x="322.1" y="291.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="325.1" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (3 samples, 0.04%)</title><rect x="322.4" y="291.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="325.4" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (2 samples, 0.02%)</title><rect x="322.5" y="275.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="325.5" y="286.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.02%)</title><rect x="322.8" y="291.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="325.8" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (2 samples, 0.02%)</title><rect x="323.1" y="291.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="326.1" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (6 samples, 0.07%)</title><rect x="323.4" y="291.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="326.4" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (35 samples, 0.42%)</title><rect x="324.2" y="291.0" width="5.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="327.2" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (7 samples, 0.08%)</title><rect x="324.7" y="275.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="327.7" y="286.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (2 samples, 0.02%)</title><rect x="325.7" y="275.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="328.7" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (20 samples, 0.24%)</title><rect x="325.9" y="275.0" width="2.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="328.9" y="286.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.04%)</title><rect x="327.8" y="259.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="330.8" y="270.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (4 samples, 0.05%)</title><rect x="328.2" y="259.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="331.2" y="270.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (3 samples, 0.04%)</title><rect x="328.8" y="275.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="331.8" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (2 samples, 0.02%)</title><rect x="329.2" y="291.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="332.2" y="302.0"></text>
</g>
<g>
<title>selinux_ipv4_output (2 samples, 0.02%)</title><rect x="329.5" y="291.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="332.5" y="302.0"></text>
</g>
<g>
<title>ip_output (287 samples, 3.47%)</title><rect x="329.8" y="339.0" width="40.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="332.8" y="350.0">ip_..</text>
</g>
<g>
<title>ip_finish_output2 (271 samples, 3.27%)</title><rect x="329.9" y="323.0" width="38.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="332.9" y="334.0">ip_..</text>
</g>
<g>
<title>__dev_queue_xmit (17 samples, 0.21%)</title><rect x="330.7" y="307.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="333.7" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (13 samples, 0.16%)</title><rect x="331.2" y="291.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="334.2" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (11 samples, 0.13%)</title><rect x="331.5" y="275.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="334.5" y="286.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.04%)</title><rect x="331.8" y="259.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="334.8" y="270.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.05%)</title><rect x="332.2" y="259.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="335.2" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.05%)</title><rect x="332.2" y="243.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="335.2" y="254.0"></text>
</g>
<g>
<title>ktime_get_with_offset (2 samples, 0.02%)</title><rect x="332.5" y="227.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="335.5" y="238.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (249 samples, 3.01%)</title><rect x="333.1" y="307.0" width="35.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="336.1" y="318.0">__l..</text>
</g>
<g>
<title>do_softirq.part.0 (248 samples, 3.00%)</title><rect x="333.2" y="291.0" width="35.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="336.2" y="302.0">do_..</text>
</g>
<g>
<title>do_softirq_own_stack (244 samples, 2.95%)</title><rect x="333.8" y="275.0" width="34.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="336.8" y="286.0">do..</text>
</g>
<g>
<title>__softirqentry_text_start (244 samples, 2.95%)</title><rect x="333.8" y="259.0" width="34.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="336.8" y="270.0">__..</text>
</g>
<g>
<title>net_rx_action (239 samples, 2.89%)</title><rect x="334.4" y="243.0" width="34.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="337.4" y="254.0">ne..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.02%)</title><rect x="334.6" y="227.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="337.6" y="238.0"></text>
</g>
<g>
<title>process_backlog (235 samples, 2.84%)</title><rect x="334.9" y="227.0" width="33.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="337.9" y="238.0">pr..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (234 samples, 2.83%)</title><rect x="335.1" y="211.0" width="33.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="338.1" y="222.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.07%)</title><rect x="335.1" y="195.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="338.1" y="206.0"></text>
</g>
<g>
<title>ip_rcv (228 samples, 2.75%)</title><rect x="335.9" y="195.0" width="32.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="338.9" y="206.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (185 samples, 2.23%)</title><rect x="335.9" y="179.0" width="26.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="338.9" y="190.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (161 samples, 1.94%)</title><rect x="336.1" y="163.0" width="22.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="339.1" y="174.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (160 samples, 1.93%)</title><rect x="336.2" y="147.0" width="22.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="339.2" y="158.0">i..</text>
</g>
<g>
<title>raw_local_deliver (4 samples, 0.05%)</title><rect x="336.6" y="131.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="339.6" y="142.0"></text>
</g>
<g>
<title>tcp_v4_rcv (153 samples, 1.85%)</title><rect x="337.2" y="131.0" width="21.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="340.2" y="142.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (9 samples, 0.11%)</title><rect x="337.8" y="115.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="340.8" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.04%)</title><rect x="339.2" y="115.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="342.2" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.02%)</title><rect x="339.3" y="99.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="342.3" y="110.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (2 samples, 0.02%)</title><rect x="339.3" y="83.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="342.3" y="94.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (135 samples, 1.63%)</title><rect x="339.6" y="115.0" width="19.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="342.6" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (134 samples, 1.62%)</title><rect x="339.8" y="99.0" width="19.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="342.8" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (9 samples, 0.11%)</title><rect x="339.9" y="83.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="342.9" y="94.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.11%)</title><rect x="339.9" y="67.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="342.9" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.08%)</title><rect x="340.1" y="51.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="343.1" y="62.0"></text>
</g>
<g>
<title>tcp_ack (24 samples, 0.29%)</title><rect x="341.2" y="83.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="344.2" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.02%)</title><rect x="342.2" y="67.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="345.2" y="78.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.02%)</title><rect x="342.5" y="67.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="345.5" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.04%)</title><rect x="342.9" y="67.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="345.9" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.02%)</title><rect x="343.1" y="51.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="346.1" y="62.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.02%)</title><rect x="344.0" y="67.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="347.0" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.02%)</title><rect x="344.6" y="83.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="347.6" y="94.0"></text>
</g>
<g>
<title>tcp_data_queue (97 samples, 1.17%)</title><rect x="344.9" y="83.0" width="13.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="347.9" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (92 samples, 1.11%)</title><rect x="345.2" y="67.0" width="13.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="348.2" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (86 samples, 1.04%)</title><rect x="346.0" y="51.0" width="12.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="349.0" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (86 samples, 1.04%)</title><rect x="346.0" y="35.0" width="12.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="349.0" y="46.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.02%)</title><rect x="358.3" y="67.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="361.3" y="78.0"></text>
</g>
<g>
<title>nf_hook_slow (23 samples, 0.28%)</title><rect x="359.0" y="163.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="362.0" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (17 samples, 0.21%)</title><rect x="359.2" y="147.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="362.2" y="158.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (4 samples, 0.05%)</title><rect x="360.6" y="131.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="363.6" y="142.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (3 samples, 0.04%)</title><rect x="361.1" y="131.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="364.1" y="142.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (3 samples, 0.04%)</title><rect x="361.9" y="147.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="364.9" y="158.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.02%)</title><rect x="362.3" y="179.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="365.3" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.02%)</title><rect x="362.6" y="179.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="365.6" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.02%)</title><rect x="362.6" y="163.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="365.6" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (39 samples, 0.47%)</title><rect x="362.9" y="179.0" width="5.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="365.9" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (34 samples, 0.41%)</title><rect x="363.1" y="163.0" width="4.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="366.1" y="174.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (2 samples, 0.02%)</title><rect x="368.0" y="163.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="371.0" y="174.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.05%)</title><rect x="368.6" y="323.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="371.6" y="334.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="368.7" y="307.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="371.7" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (11 samples, 0.13%)</title><rect x="369.1" y="323.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="372.1" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (4 samples, 0.05%)</title><rect x="369.4" y="307.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="372.4" y="318.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (3 samples, 0.04%)</title><rect x="370.0" y="307.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="373.0" y="318.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (3 samples, 0.04%)</title><rect x="370.0" y="291.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="373.0" y="302.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.02%)</title><rect x="370.7" y="355.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="373.7" y="366.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.02%)</title><rect x="371.0" y="355.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="374.0" y="366.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.02%)</title><rect x="371.3" y="355.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="374.3" y="366.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (4 samples, 0.05%)</title><rect x="372.3" y="371.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="375.3" y="382.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.06%)</title><rect x="372.8" y="371.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="375.8" y="382.0"></text>
</g>
<g>
<title>_copy_from_iter_full (3 samples, 0.04%)</title><rect x="373.7" y="403.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="376.7" y="414.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.02%)</title><rect x="373.8" y="387.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="376.8" y="398.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (12 samples, 0.14%)</title><rect x="374.1" y="403.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="377.1" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (12 samples, 0.14%)</title><rect x="374.1" y="387.0" width="1.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="377.1" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (4 samples, 0.05%)</title><rect x="374.5" y="371.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="377.5" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.05%)</title><rect x="374.5" y="355.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="377.5" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.05%)</title><rect x="375.1" y="371.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="378.1" y="382.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.02%)</title><rect x="375.8" y="403.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="378.8" y="414.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.02%)</title><rect x="376.1" y="403.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="379.1" y="414.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.02%)</title><rect x="376.4" y="403.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="379.4" y="414.0"></text>
</g>
<g>
<title>tcp_send_mss (11 samples, 0.13%)</title><rect x="376.7" y="403.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="379.7" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (10 samples, 0.12%)</title><rect x="376.8" y="387.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="379.8" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.06%)</title><rect x="377.4" y="371.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="380.4" y="382.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.02%)</title><rect x="378.3" y="403.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="381.3" y="414.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.02%)</title><rect x="378.5" y="403.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="381.5" y="414.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.04%)</title><rect x="378.8" y="451.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="381.8" y="462.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="378.8" y="435.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="381.8" y="446.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.02%)</title><rect x="379.0" y="419.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="382.0" y="430.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.10%)</title><rect x="379.4" y="531.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="382.4" y="542.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.10%)</title><rect x="379.4" y="515.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="382.4" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (7 samples, 0.08%)</title><rect x="379.4" y="499.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="382.4" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.05%)</title><rect x="379.8" y="483.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="382.8" y="494.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.02%)</title><rect x="380.8" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.12%)</title><rect x="381.1" y="627.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.05%)</title><rect x="381.1" y="611.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.1" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.05%)</title><rect x="381.1" y="595.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.04%)</title><rect x="381.7" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="382.1" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (955 samples, 11.53%)</title><rect x="382.5" y="627.0" width="136.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.5" y="638.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.06%)</title><rect x="382.5" y="611.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (5 samples, 0.06%)</title><rect x="382.5" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.05%)</title><rect x="382.7" y="579.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.7" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.05%)</title><rect x="382.7" y="563.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.7" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="383.0" y="547.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="386.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.05%)</title><rect x="383.2" y="611.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.2" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.05%)</title><rect x="383.2" y="595.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.05%)</title><rect x="383.2" y="579.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.05%)</title><rect x="383.2" y="563.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.05%)</title><rect x="383.2" y="547.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="386.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (4 samples, 0.05%)</title><rect x="383.2" y="531.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.04%)</title><rect x="383.4" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="386.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (937 samples, 11.32%)</title><rect x="384.1" y="611.0" width="133.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.1" y="622.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (23 samples, 0.28%)</title><rect x="384.1" y="595.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.1" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (23 samples, 0.28%)</title><rect x="384.1" y="579.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (23 samples, 0.28%)</title><rect x="384.1" y="563.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (23 samples, 0.28%)</title><rect x="384.1" y="547.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (23 samples, 0.28%)</title><rect x="384.1" y="531.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.23%)</title><rect x="384.1" y="515.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.1" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (7 samples, 0.08%)</title><rect x="384.1" y="499.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.1" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (7 samples, 0.08%)</title><rect x="384.1" y="483.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.1" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (6 samples, 0.07%)</title><rect x="384.2" y="467.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.2" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.06%)</title><rect x="384.4" y="451.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.4" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.06%)</title><rect x="384.4" y="435.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (5 samples, 0.06%)</title><rect x="384.4" y="419.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (5 samples, 0.06%)</title><rect x="384.4" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.4" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (5 samples, 0.06%)</title><rect x="384.4" y="387.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.06%)</title><rect x="384.4" y="371.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.4" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (5 samples, 0.06%)</title><rect x="384.4" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.4" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.06%)</title><rect x="384.4" y="339.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="387.4" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (5 samples, 0.06%)</title><rect x="384.4" y="323.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.06%)</title><rect x="384.4" y="307.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (3 samples, 0.04%)</title><rect x="384.7" y="291.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.04%)</title><rect x="384.7" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.7" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="384.7" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.7" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="384.7" y="243.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.7" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="384.7" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="384.7" y="211.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="387.7" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="384.7" y="195.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="384.7" y="179.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="384.7" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.7" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="384.8" y="147.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.8" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="384.8" y="131.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.8" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (12 samples, 0.14%)</title><rect x="385.1" y="499.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.1" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (12 samples, 0.14%)</title><rect x="385.1" y="483.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.1" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (12 samples, 0.14%)</title><rect x="385.1" y="467.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.1" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (12 samples, 0.14%)</title><rect x="385.1" y="451.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.1" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.14%)</title><rect x="385.1" y="435.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="388.1" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.14%)</title><rect x="385.1" y="419.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.1" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (6 samples, 0.07%)</title><rect x="385.1" y="403.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.04%)</title><rect x="385.5" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.04%)</title><rect x="385.5" y="371.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (3 samples, 0.04%)</title><rect x="385.5" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.02%)</title><rect x="385.5" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="385.5" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="385.5" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (6 samples, 0.07%)</title><rect x="385.9" y="403.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (6 samples, 0.07%)</title><rect x="385.9" y="387.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.9" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (6 samples, 0.07%)</title><rect x="385.9" y="371.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="385.9" y="355.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (6 samples, 0.07%)</title><rect x="385.9" y="339.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="385.9" y="323.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (5 samples, 0.06%)</title><rect x="386.1" y="307.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.1" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.06%)</title><rect x="386.1" y="291.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="386.1" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="389.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="386.2" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.2" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="386.2" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (2 samples, 0.02%)</title><rect x="386.5" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="386.5" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$64/1828395560.apply (4 samples, 0.05%)</title><rect x="386.8" y="515.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.05%)</title><rect x="386.8" y="499.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.8" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="386.9" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.9" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="386.9" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="389.9" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="386.9" y="451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="389.9" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="386.9" y="435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.9" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (7 samples, 0.08%)</title><rect x="387.4" y="595.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (7 samples, 0.08%)</title><rect x="387.4" y="579.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$68/1913378084.apply (7 samples, 0.08%)</title><rect x="387.4" y="563.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (4 samples, 0.05%)</title><rect x="387.8" y="547.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="387.8" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.8" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="387.8" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.8" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="387.8" y="499.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.8" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.8" y="483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.8" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.8" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.8" y="451.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.8" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.8" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (2 samples, 0.02%)</title><rect x="388.1" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="391.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="388.1" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.1" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="388.1" y="499.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="391.1" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.1" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.1" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.1" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.1" y="451.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.1" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.1" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.1" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.1" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.02%)</title><rect x="388.4" y="595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="391.4" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="388.4" y="579.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (903 samples, 10.91%)</title><rect x="388.9" y="595.0" width="128.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.9" y="606.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (903 samples, 10.91%)</title><rect x="388.9" y="579.0" width="128.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.9" y="590.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (749 samples, 9.05%)</title><rect x="388.9" y="563.0" width="106.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.9" y="574.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.02%)</title><rect x="389.2" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="392.2" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.02%)</title><rect x="389.5" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.5" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.02%)</title><rect x="389.5" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="392.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (38 samples, 0.46%)</title><rect x="389.8" y="547.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="392.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (38 samples, 0.46%)</title><rect x="389.8" y="531.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="392.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (31 samples, 0.37%)</title><rect x="390.6" y="515.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (28 samples, 0.34%)</title><rect x="391.1" y="499.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 0.06%)</title><rect x="391.5" y="483.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="391.9" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="391.9" y="451.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (20 samples, 0.24%)</title><rect x="392.2" y="483.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.11%)</title><rect x="393.8" y="467.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (4 samples, 0.05%)</title><rect x="394.5" y="451.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="397.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.02%)</title><rect x="395.2" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.&lt;init&gt; (2 samples, 0.02%)</title><rect x="395.2" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (3 samples, 0.04%)</title><rect x="395.5" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="395.5" y="531.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="398.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (3 samples, 0.04%)</title><rect x="395.5" y="515.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (3 samples, 0.04%)</title><rect x="395.5" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (3 samples, 0.04%)</title><rect x="395.5" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="398.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (95 samples, 1.15%)</title><rect x="396.1" y="547.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.04%)</title><rect x="396.5" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.02%)</title><rect x="396.6" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.02%)</title><rect x="396.6" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (71 samples, 0.86%)</title><rect x="397.2" y="531.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.2" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (3 samples, 0.04%)</title><rect x="397.3" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (3 samples, 0.04%)</title><rect x="397.3" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="400.3" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (2 samples, 0.02%)</title><rect x="397.3" y="483.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.3" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.06%)</title><rect x="397.8" y="515.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (2 samples, 0.02%)</title><rect x="398.2" y="499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.02%)</title><rect x="398.6" y="515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="401.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (52 samples, 0.63%)</title><rect x="398.9" y="515.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (3 samples, 0.04%)</title><rect x="398.9" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (47 samples, 0.57%)</title><rect x="399.3" y="499.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="402.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (46 samples, 0.56%)</title><rect x="399.5" y="483.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="402.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (44 samples, 0.53%)</title><rect x="399.5" y="467.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (3 samples, 0.04%)</title><rect x="399.6" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (3 samples, 0.04%)</title><rect x="399.6" y="435.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (40 samples, 0.48%)</title><rect x="400.1" y="451.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (39 samples, 0.47%)</title><rect x="400.2" y="435.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.02%)</title><rect x="400.3" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="400.3" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="400.3" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (36 samples, 0.43%)</title><rect x="400.6" y="419.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (26 samples, 0.31%)</title><rect x="402.1" y="403.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.1" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (7 samples, 0.08%)</title><rect x="402.8" y="387.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.17%)</title><rect x="403.8" y="387.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.17%)</title><rect x="403.8" y="371.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.8" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.13%)</title><rect x="404.2" y="355.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.06%)</title><rect x="404.6" y="339.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.04%)</title><rect x="405.3" y="339.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.04%)</title><rect x="405.3" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (2 samples, 0.02%)</title><rect x="405.8" y="467.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.02%)</title><rect x="406.0" y="499.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (7 samples, 0.08%)</title><rect x="406.3" y="515.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (5 samples, 0.06%)</title><rect x="406.6" y="499.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.6" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (3 samples, 0.04%)</title><rect x="406.6" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="409.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.&lt;init&gt; (3 samples, 0.04%)</title><rect x="406.6" y="467.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="406.6" y="451.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (16 samples, 0.19%)</title><rect x="407.3" y="531.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.3" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7 samples, 0.08%)</title><rect x="407.3" y="515.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.3" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7 samples, 0.08%)</title><rect x="407.3" y="499.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.3" y="510.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="407.3" y="483.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="410.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (3 samples, 0.04%)</title><rect x="407.9" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (8 samples, 0.10%)</title><rect x="408.5" y="515.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (8 samples, 0.10%)</title><rect x="408.5" y="499.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (4 samples, 0.05%)</title><rect x="408.9" y="483.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (4 samples, 0.05%)</title><rect x="408.9" y="467.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (604 samples, 7.29%)</title><rect x="409.6" y="547.0" width="86.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="412.6" y="558.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (604 samples, 7.29%)</title><rect x="409.6" y="531.0" width="86.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="412.6" y="542.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (604 samples, 7.29%)</title><rect x="409.6" y="515.0" width="86.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.6" y="526.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.14%)</title><rect x="410.2" y="499.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.2" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (12 samples, 0.14%)</title><rect x="410.2" y="483.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.2" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.10%)</title><rect x="410.6" y="467.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.05%)</title><rect x="411.2" y="451.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (107 samples, 1.29%)</title><rect x="411.9" y="499.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.9" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (20 samples, 0.24%)</title><rect x="412.2" y="483.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (5 samples, 0.06%)</title><rect x="413.7" y="467.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (4 samples, 0.05%)</title><rect x="414.4" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="417.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (4 samples, 0.05%)</title><rect x="414.4" y="451.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.4" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (4 samples, 0.05%)</title><rect x="414.4" y="435.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.4" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (51 samples, 0.62%)</title><rect x="415.0" y="483.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (51 samples, 0.62%)</title><rect x="415.0" y="467.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (51 samples, 0.62%)</title><rect x="415.0" y="451.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (51 samples, 0.62%)</title><rect x="415.0" y="435.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.0" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (44 samples, 0.53%)</title><rect x="416.0" y="419.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (44 samples, 0.53%)</title><rect x="416.0" y="403.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (42 samples, 0.51%)</title><rect x="416.3" y="387.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (41 samples, 0.50%)</title><rect x="416.4" y="371.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="416.4" y="355.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="419.4" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="417.0" y="339.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="417.0" y="323.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.0" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.07%)</title><rect x="417.0" y="307.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (31 samples, 0.37%)</title><rect x="417.9" y="355.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.10%)</title><rect x="420.3" y="339.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="423.3" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.07%)</title><rect x="421.4" y="339.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.05%)</title><rect x="421.7" y="323.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.7" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="421.7" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="424.7" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (28 samples, 0.34%)</title><rect x="422.3" y="483.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="425.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (28 samples, 0.34%)</title><rect x="422.3" y="467.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.3" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (28 samples, 0.34%)</title><rect x="422.3" y="451.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.3" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (28 samples, 0.34%)</title><rect x="422.3" y="435.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="425.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (28 samples, 0.34%)</title><rect x="422.3" y="419.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (28 samples, 0.34%)</title><rect x="422.3" y="403.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.3" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (28 samples, 0.34%)</title><rect x="422.3" y="387.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="425.3" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="422.3" y="371.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.3" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="422.3" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="422.4" y="339.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.07%)</title><rect x="422.4" y="323.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.4" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.25%)</title><rect x="423.3" y="371.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="426.3" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.25%)</title><rect x="423.3" y="355.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="424.1" y="339.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.11%)</title><rect x="425.0" y="339.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.10%)</title><rect x="425.1" y="323.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="428.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="426.3" y="483.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="429.3" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="426.3" y="467.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="429.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="426.3" y="451.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.3" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.07%)</title><rect x="426.3" y="435.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="429.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (481 samples, 5.81%)</title><rect x="427.1" y="499.0" width="68.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="430.1" y="510.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (303 samples, 3.66%)</title><rect x="440.0" y="483.0" width="43.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.0" y="494.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (301 samples, 3.64%)</title><rect x="440.2" y="467.0" width="42.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.2" y="478.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.05%)</title><rect x="443.8" y="451.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.8" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (272 samples, 3.29%)</title><rect x="444.4" y="451.0" width="38.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.4" y="462.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (272 samples, 3.29%)</title><rect x="444.4" y="435.0" width="38.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.4" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="469.9" y="419.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.9" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (82 samples, 0.99%)</title><rect x="470.3" y="419.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (62 samples, 0.75%)</title><rect x="471.9" y="403.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (60 samples, 0.72%)</title><rect x="472.2" y="387.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (58 samples, 0.70%)</title><rect x="472.5" y="371.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="477.2" y="355.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.10%)</title><rect x="477.4" y="339.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.10%)</title><rect x="477.4" y="323.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.10%)</title><rect x="477.4" y="307.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="480.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (15 samples, 0.18%)</title><rect x="478.6" y="355.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.06%)</title><rect x="479.1" y="339.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.07%)</title><rect x="479.9" y="339.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.07%)</title><rect x="479.9" y="323.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.07%)</title><rect x="479.9" y="307.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="482.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.11%)</title><rect x="480.7" y="403.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.7" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.10%)</title><rect x="482.0" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (48 samples, 0.58%)</title><rect x="483.1" y="483.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (44 samples, 0.53%)</title><rect x="483.7" y="467.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="486.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (42 samples, 0.51%)</title><rect x="484.0" y="451.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="487.0" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (34 samples, 0.41%)</title><rect x="485.1" y="435.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (33 samples, 0.40%)</title><rect x="485.3" y="419.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (33 samples, 0.40%)</title><rect x="485.3" y="403.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.3" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (33 samples, 0.40%)</title><rect x="485.3" y="387.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.3" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="486.0" y="371.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.0" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="486.0" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="489.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="486.0" y="339.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="489.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.05%)</title><rect x="486.0" y="323.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="489.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.29%)</title><rect x="486.6" y="371.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.6" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.29%)</title><rect x="486.6" y="355.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.04%)</title><rect x="488.0" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.13%)</title><rect x="488.4" y="339.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="491.4" y="350.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.02%)</title><rect x="489.6" y="323.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="492.6" y="334.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="489.6" y="307.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="492.6" y="318.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.02%)</title><rect x="489.6" y="291.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="492.6" y="302.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="489.6" y="275.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="492.6" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (40 samples, 0.48%)</title><rect x="490.0" y="483.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.reachabilityFence (12 samples, 0.14%)</title><rect x="491.4" y="467.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="494.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (7 samples, 0.08%)</title><rect x="492.1" y="451.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (3 samples, 0.04%)</title><rect x="493.1" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.1" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (10 samples, 0.12%)</title><rect x="493.5" y="467.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (5 samples, 0.06%)</title><rect x="495.0" y="467.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (154 samples, 1.86%)</title><rect x="495.7" y="563.0" width="21.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.7" y="574.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (2 samples, 0.02%)</title><rect x="495.7" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.&lt;init&gt; (2 samples, 0.02%)</title><rect x="495.7" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="495.7" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.7" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (115 samples, 1.39%)</title><rect x="496.0" y="547.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.0" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (115 samples, 1.39%)</title><rect x="496.0" y="531.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.0" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (5 samples, 0.06%)</title><rect x="496.8" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.8" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.04%)</title><rect x="497.1" y="499.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.04%)</title><rect x="497.1" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.04%)</title><rect x="497.1" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.02%)</title><rect x="497.1" y="451.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.1" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="497.1" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.1" y="446.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="497.1" y="419.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="500.1" y="430.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.04%)</title><rect x="497.5" y="515.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="500.5" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.02%)</title><rect x="498.0" y="515.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="501.0" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (93 samples, 1.12%)</title><rect x="498.4" y="515.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.4" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (93 samples, 1.12%)</title><rect x="498.4" y="499.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="501.4" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.02%)</title><rect x="498.4" y="483.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.4" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (91 samples, 1.10%)</title><rect x="498.7" y="483.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.7" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (91 samples, 1.10%)</title><rect x="498.7" y="467.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (89 samples, 1.07%)</title><rect x="499.0" y="451.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (87 samples, 1.05%)</title><rect x="499.2" y="435.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="502.2" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (52 samples, 0.63%)</title><rect x="499.4" y="419.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.4" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (3 samples, 0.04%)</title><rect x="499.7" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="502.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (47 samples, 0.57%)</title><rect x="500.1" y="403.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="503.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (47 samples, 0.57%)</title><rect x="500.1" y="387.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (47 samples, 0.57%)</title><rect x="500.1" y="371.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (25 samples, 0.30%)</title><rect x="500.1" y="355.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 0.18%)</title><rect x="500.1" y="339.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 0.18%)</title><rect x="500.1" y="323.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (12 samples, 0.14%)</title><rect x="500.5" y="307.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.13%)</title><rect x="500.7" y="291.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="503.7" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="501.4" y="275.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="504.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="501.4" y="259.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="501.4" y="243.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.4" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="501.5" y="227.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.5" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="501.5" y="211.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.04%)</title><rect x="501.8" y="211.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.05%)</title><rect x="502.2" y="339.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="502.2" y="323.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="505.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="502.2" y="307.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="502.4" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="502.4" y="275.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="502.4" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="502.4" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="505.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="502.5" y="227.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.5" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="502.5" y="211.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="505.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="502.5" y="195.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.5" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.02%)</title><rect x="502.5" y="179.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.5" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="502.8" y="339.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="502.8" y="323.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="502.8" y="307.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.8" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.07%)</title><rect x="502.8" y="291.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (9 samples, 0.11%)</title><rect x="503.7" y="355.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="506.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="503.9" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="503.9" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="503.9" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="506.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="503.9" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.9" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="503.9" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="506.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="503.9" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="506.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="503.9" y="243.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="504.2" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="507.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="504.2" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="504.2" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="504.2" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="504.2" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="507.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="504.2" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (2 samples, 0.02%)</title><rect x="504.5" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (8 samples, 0.10%)</title><rect x="504.9" y="355.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.10%)</title><rect x="504.9" y="339.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.08%)</title><rect x="505.1" y="323.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="508.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.06%)</title><rect x="505.4" y="307.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="508.4" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="505.4" y="291.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="505.4" y="275.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="505.4" y="259.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="505.4" y="243.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.4" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="505.7" y="227.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="508.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (5 samples, 0.06%)</title><rect x="506.1" y="355.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="509.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="506.2" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="509.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="506.2" y="323.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.2" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.2" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="509.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.2" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.2" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.2" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="509.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.2" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="509.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="506.5" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="509.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.5" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.5" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.5" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.5" y="291.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="509.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.5" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="509.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.5" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="509.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="506.5" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="509.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (34 samples, 0.41%)</title><rect x="506.8" y="419.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (33 samples, 0.40%)</title><rect x="506.9" y="403.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="509.9" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (33 samples, 0.40%)</title><rect x="506.9" y="387.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="509.9" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.40%)</title><rect x="506.9" y="371.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="509.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (33 samples, 0.40%)</title><rect x="506.9" y="355.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.40%)</title><rect x="506.9" y="339.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="507.2" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (29 samples, 0.35%)</title><rect x="507.5" y="323.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (29 samples, 0.35%)</title><rect x="507.5" y="307.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.14%)</title><rect x="508.1" y="291.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.14%)</title><rect x="508.1" y="275.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.1" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.12%)</title><rect x="508.4" y="259.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.05%)</title><rect x="508.8" y="243.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.02%)</title><rect x="509.4" y="243.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (13 samples, 0.16%)</title><rect x="509.8" y="291.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (12 samples, 0.14%)</title><rect x="509.9" y="275.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.11%)</title><rect x="510.2" y="259.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="513.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.11%)</title><rect x="510.2" y="243.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.07%)</title><rect x="510.6" y="227.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="510.6" y="211.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="513.6" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="510.9" y="195.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="510.9" y="179.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="513.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="510.9" y="163.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="513.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (5 samples, 0.06%)</title><rect x="511.6" y="515.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="514.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (37 samples, 0.45%)</title><rect x="512.4" y="547.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (37 samples, 0.45%)</title><rect x="512.4" y="531.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="515.4" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (36 samples, 0.43%)</title><rect x="512.5" y="515.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.5" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (16 samples, 0.19%)</title><rect x="512.6" y="499.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="515.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (16 samples, 0.19%)</title><rect x="512.6" y="483.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="515.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (15 samples, 0.18%)</title><rect x="512.8" y="467.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.14%)</title><rect x="513.2" y="451.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="516.2" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.14%)</title><rect x="513.2" y="435.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="516.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (11 samples, 0.13%)</title><rect x="513.4" y="419.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="516.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (11 samples, 0.13%)</title><rect x="513.4" y="403.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.4" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (11 samples, 0.13%)</title><rect x="513.4" y="387.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="516.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.13%)</title><rect x="513.4" y="371.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="516.4" y="382.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="513.4" y="355.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="516.4" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (8 samples, 0.10%)</title><rect x="513.8" y="355.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.8" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.10%)</title><rect x="513.8" y="339.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="516.8" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (8 samples, 0.10%)</title><rect x="513.8" y="323.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.8" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.10%)</title><rect x="513.8" y="307.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="516.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="513.8" y="291.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="516.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="513.8" y="275.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.8" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="513.8" y="259.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="516.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (5 samples, 0.06%)</title><rect x="514.2" y="291.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="517.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (5 samples, 0.06%)</title><rect x="514.2" y="275.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="517.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.06%)</title><rect x="514.2" y="259.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="517.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.06%)</title><rect x="514.2" y="243.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.06%)</title><rect x="514.2" y="227.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="517.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="514.2" y="211.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="514.4" y="195.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="514.4" y="179.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="517.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="514.4" y="163.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="517.4" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="514.6" y="147.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="517.6" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (19 samples, 0.23%)</title><rect x="514.9" y="499.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="517.9" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (19 samples, 0.23%)</title><rect x="514.9" y="483.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.9" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (19 samples, 0.23%)</title><rect x="514.9" y="467.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.9" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (19 samples, 0.23%)</title><rect x="514.9" y="451.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.9" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.23%)</title><rect x="514.9" y="435.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.9" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.23%)</title><rect x="514.9" y="419.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.9" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (11 samples, 0.13%)</title><rect x="514.9" y="403.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (9 samples, 0.11%)</title><rect x="515.2" y="387.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="518.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (9 samples, 0.11%)</title><rect x="515.2" y="371.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (9 samples, 0.11%)</title><rect x="515.2" y="355.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (4 samples, 0.05%)</title><rect x="515.2" y="339.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="515.2" y="323.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="518.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="515.2" y="307.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="515.2" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="518.2" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="515.3" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (4 samples, 0.05%)</title><rect x="515.8" y="339.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="518.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="515.9" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="515.9" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="515.9" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="515.9" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="518.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="515.9" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="515.9" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="515.9" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (8 samples, 0.10%)</title><rect x="516.5" y="403.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (8 samples, 0.10%)</title><rect x="516.5" y="387.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (8 samples, 0.10%)</title><rect x="516.5" y="371.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.10%)</title><rect x="516.5" y="355.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (8 samples, 0.10%)</title><rect x="516.5" y="339.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.10%)</title><rect x="516.5" y="323.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (8 samples, 0.10%)</title><rect x="516.5" y="307.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.5" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.10%)</title><rect x="516.5" y="291.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.06%)</title><rect x="516.6" y="275.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.06%)</title><rect x="516.6" y="259.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.6" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="516.9" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (2 samples, 0.02%)</title><rect x="517.3" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="520.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="517.3" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="520.3" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="517.3" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="517.3" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="517.3" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="517.3" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="520.3" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="517.3" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="520.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="517.3" y="163.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="517.3" y="147.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="520.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (7 samples, 0.08%)</title><rect x="517.6" y="611.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="520.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.upsert (7 samples, 0.08%)</title><rect x="517.6" y="595.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="520.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.setToFlush (5 samples, 0.06%)</title><rect x="517.9" y="579.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getSizeOfFlushedRow (2 samples, 0.02%)</title><rect x="518.3" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (8 samples, 0.10%)</title><rect x="518.6" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.08%)</title><rect x="518.8" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.05%)</title><rect x="518.9" y="611.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="521.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.04%)</title><rect x="519.1" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="522.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="519.5" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.5" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="519.5" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.02%)</title><rect x="519.5" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="522.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.02%)</title><rect x="519.8" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="519.8" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="522.8" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="519.8" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="522.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20 samples, 0.24%)</title><rect x="520.1" y="675.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="523.1" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.16%)</title><rect x="520.8" y="659.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.8" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.16%)</title><rect x="520.8" y="643.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="523.8" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.02%)</title><rect x="522.3" y="627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="525.3" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.02%)</title><rect x="522.6" y="659.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.08%)</title><rect x="522.9" y="675.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="525.9" y="686.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="523.5" y="659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.5" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="523.5" y="643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.5" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.07%)</title><rect x="523.9" y="675.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.9" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.07%)</title><rect x="523.9" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="524.5" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="524.5" y="627.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.02%)</title><rect x="524.5" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.5" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (125 samples, 1.51%)</title><rect x="524.8" y="691.0" width="17.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (125 samples, 1.51%)</title><rect x="524.8" y="675.0" width="17.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="527.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 0.45%)</title><rect x="524.9" y="659.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="527.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 0.45%)</title><rect x="524.9" y="643.0" width="5.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="527.9" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (28 samples, 0.34%)</title><rect x="524.9" y="627.0" width="4.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="527.9" y="638.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.05%)</title><rect x="525.2" y="611.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="528.2" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.05%)</title><rect x="525.8" y="611.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="528.8" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (18 samples, 0.22%)</title><rect x="526.3" y="611.0" width="2.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="529.3" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (7 samples, 0.08%)</title><rect x="526.6" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="529.6" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.04%)</title><rect x="527.6" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="530.6" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (6 samples, 0.07%)</title><rect x="528.0" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="531.0" y="606.0"></text>
</g>
<g>
<title>__libc_recv (2 samples, 0.02%)</title><rect x="528.9" y="627.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="531.9" y="638.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.04%)</title><rect x="529.2" y="627.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="532.2" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.05%)</title><rect x="529.6" y="627.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="532.6" y="638.0"></text>
</g>
<g>
<title>__libc_recv (86 samples, 1.04%)</title><rect x="530.2" y="659.0" width="12.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="533.2" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (67 samples, 0.81%)</title><rect x="532.9" y="643.0" width="9.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="535.9" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (67 samples, 0.81%)</title><rect x="532.9" y="627.0" width="9.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="535.9" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (55 samples, 0.66%)</title><rect x="534.6" y="611.0" width="7.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="537.6" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (53 samples, 0.64%)</title><rect x="534.9" y="595.0" width="7.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="537.9" y="606.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.02%)</title><rect x="535.2" y="579.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="538.2" y="590.0"></text>
</g>
<g>
<title>inet_recvmsg (34 samples, 0.41%)</title><rect x="535.4" y="579.0" width="4.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="538.4" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (34 samples, 0.41%)</title><rect x="535.4" y="563.0" width="4.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="538.4" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.06%)</title><rect x="536.3" y="547.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="539.3" y="558.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.04%)</title><rect x="536.3" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="539.3" y="542.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.02%)</title><rect x="536.4" y="515.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="539.4" y="526.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.02%)</title><rect x="536.4" y="499.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="539.4" y="510.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.02%)</title><rect x="536.7" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="539.7" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (12 samples, 0.14%)</title><rect x="537.3" y="547.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="540.3" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (12 samples, 0.14%)</title><rect x="537.3" y="531.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="540.3" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (6 samples, 0.07%)</title><rect x="537.4" y="515.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="540.4" y="526.0"></text>
</g>
<g>
<title>copyout (6 samples, 0.07%)</title><rect x="537.4" y="499.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="540.4" y="510.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.07%)</title><rect x="537.4" y="483.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="540.4" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (5 samples, 0.06%)</title><rect x="538.3" y="515.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="541.3" y="526.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.02%)</title><rect x="538.7" y="499.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="541.7" y="510.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.02%)</title><rect x="539.0" y="547.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="542.0" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (6 samples, 0.07%)</title><rect x="539.3" y="547.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="542.3" y="558.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.05%)</title><rect x="539.6" y="531.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="542.6" y="542.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.02%)</title><rect x="539.9" y="515.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="542.9" y="526.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.02%)</title><rect x="539.9" y="499.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="542.9" y="510.0"></text>
</g>
<g>
<title>sock_recvmsg (7 samples, 0.08%)</title><rect x="540.3" y="579.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="543.3" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (6 samples, 0.07%)</title><rect x="540.4" y="563.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="543.4" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (5 samples, 0.06%)</title><rect x="540.6" y="547.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="543.6" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.05%)</title><rect x="540.7" y="531.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="543.7" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.10%)</title><rect x="541.3" y="579.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="544.3" y="590.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.08%)</title><rect x="541.4" y="563.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="544.4" y="574.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.04%)</title><rect x="542.0" y="547.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="545.0" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="542.6" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="545.6" y="718.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="542.6" y="691.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="545.6" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.02%)</title><rect x="542.6" y="675.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="545.6" y="686.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=13277] (1,873 samples, 22.62%)</title><rect x="542.9" y="755.0" width="266.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="545.9" y="766.0">[NIO Selector #2 tid=13277]</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (2 samples, 0.02%)</title><rect x="543.0" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="546.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (23 samples, 0.28%)</title><rect x="543.3" y="739.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="546.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.02%)</title><rect x="543.3" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="546.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (21 samples, 0.25%)</title><rect x="543.6" y="723.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="546.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (20 samples, 0.24%)</title><rect x="543.7" y="707.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="546.7" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (19 samples, 0.23%)</title><rect x="543.7" y="691.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="546.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (13 samples, 0.16%)</title><rect x="544.4" y="675.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="547.4" y="686.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.02%)</title><rect x="544.6" y="659.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="547.6" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (6 samples, 0.07%)</title><rect x="544.8" y="659.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="547.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (5 samples, 0.06%)</title><rect x="545.0" y="643.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="548.0" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (3 samples, 0.04%)</title><rect x="545.0" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="548.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (3 samples, 0.04%)</title><rect x="545.0" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.0" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (2 samples, 0.02%)</title><rect x="545.0" y="595.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="548.0" y="606.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.02%)</title><rect x="545.4" y="627.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="548.4" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.02%)</title><rect x="545.4" y="611.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="548.4" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.02%)</title><rect x="545.4" y="595.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="548.4" y="606.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.02%)</title><rect x="545.4" y="579.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.4" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.02%)</title><rect x="545.7" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="548.7" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.02%)</title><rect x="546.0" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="549.0" y="670.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.02%)</title><rect x="546.6" y="739.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="549.6" y="750.0"></text>
</g>
<g>
<title>[unknown_Java] (19 samples, 0.23%)</title><rect x="546.8" y="739.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="549.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="549.3" y="723.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="552.3" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="549.3" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="552.3" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,826 samples, 22.05%)</title><rect x="549.6" y="739.0" width="260.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.6" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (6 samples, 0.07%)</title><rect x="549.7" y="723.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="552.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (6 samples, 0.07%)</title><rect x="549.7" y="707.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (138 samples, 1.67%)</title><rect x="550.5" y="723.0" width="19.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.5" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (137 samples, 1.65%)</title><rect x="550.7" y="707.0" width="19.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.7" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (108 samples, 1.30%)</title><rect x="552.4" y="691.0" width="15.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="555.4" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (89 samples, 1.07%)</title><rect x="555.1" y="675.0" width="12.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="558.1" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (89 samples, 1.07%)</title><rect x="555.1" y="659.0" width="12.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="558.1" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (81 samples, 0.98%)</title><rect x="556.2" y="643.0" width="11.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="559.2" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (81 samples, 0.98%)</title><rect x="556.2" y="627.0" width="11.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="559.2" y="638.0"></text>
</g>
<g>
<title>ep_poll (73 samples, 0.88%)</title><rect x="557.0" y="611.0" width="10.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="560.0" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (33 samples, 0.40%)</title><rect x="558.1" y="595.0" width="4.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="561.1" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (24 samples, 0.29%)</title><rect x="559.1" y="579.0" width="3.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="562.1" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (18 samples, 0.22%)</title><rect x="560.0" y="563.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="563.0" y="574.0"></text>
</g>
<g>
<title>sock_poll (12 samples, 0.14%)</title><rect x="560.8" y="547.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="563.8" y="558.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.05%)</title><rect x="561.9" y="531.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="564.9" y="542.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.02%)</title><rect x="562.5" y="579.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="565.5" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (32 samples, 0.39%)</title><rect x="562.8" y="595.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="565.8" y="606.0"></text>
</g>
<g>
<title>schedule (29 samples, 0.35%)</title><rect x="563.2" y="579.0" width="4.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="566.2" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (25 samples, 0.30%)</title><rect x="563.8" y="563.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="566.8" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (21 samples, 0.25%)</title><rect x="564.4" y="547.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="567.4" y="558.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.04%)</title><rect x="567.4" y="611.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="570.4" y="622.0"></text>
</g>
<g>
<title>__GI___clock_gettime (9 samples, 0.11%)</title><rect x="567.9" y="691.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="570.9" y="702.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.05%)</title><rect x="568.6" y="675.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="571.6" y="686.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.05%)</title><rect x="569.4" y="691.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="572.4" y="702.0"></text>
</g>
<g>
<title>_init (2 samples, 0.02%)</title><rect x="569.9" y="691.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="572.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,681 samples, 20.30%)</title><rect x="570.2" y="723.0" width="239.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.2" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,676 samples, 20.24%)</title><rect x="570.8" y="707.0" width="238.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="573.8" y="718.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,560 samples, 18.84%)</title><rect x="570.8" y="691.0" width="222.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="573.8" y="702.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,509 samples, 18.22%)</title><rect x="573.2" y="675.0" width="215.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.2" y="686.0">one/nio/http/HttpSession.han..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,508 samples, 18.21%)</title><rect x="573.4" y="659.0" width="214.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="576.4" y="670.0">one/nio/http/HttpServer.hand..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,498 samples, 18.09%)</title><rect x="573.4" y="643.0" width="213.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="576.4" y="654.0">RequestHandler1_entity.handl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (537 samples, 6.49%)</title><rect x="573.4" y="627.0" width="76.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.4" y="638.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (529 samples, 6.39%)</title><rect x="573.8" y="611.0" width="75.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="576.8" y="622.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.17%)</title><rect x="573.8" y="595.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.11%)</title><rect x="574.5" y="579.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="577.5" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.02%)</title><rect x="574.6" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="577.6" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.02%)</title><rect x="574.6" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="577.6" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="575.1" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.1" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="575.1" y="547.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.05%)</title><rect x="575.2" y="531.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.04%)</title><rect x="575.2" y="515.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (515 samples, 6.22%)</title><rect x="575.8" y="595.0" width="73.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="578.8" y="606.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (515 samples, 6.22%)</title><rect x="575.8" y="579.0" width="73.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.8" y="590.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (511 samples, 6.17%)</title><rect x="576.1" y="563.0" width="72.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="579.1" y="574.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (511 samples, 6.17%)</title><rect x="576.1" y="547.0" width="72.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="579.1" y="558.0">one/nio/..</text>
</g>
<g>
<title>.annobin_send.c (499 samples, 6.03%)</title><rect x="576.2" y="531.0" width="71.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="579.2" y="542.0">.annobin..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (478 samples, 5.77%)</title><rect x="579.2" y="515.0" width="68.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="582.2" y="526.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (478 samples, 5.77%)</title><rect x="579.2" y="499.0" width="68.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="582.2" y="510.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_sendto (466 samples, 5.63%)</title><rect x="580.8" y="483.0" width="66.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="583.8" y="494.0">__x64_s..</text>
</g>
<g>
<title>__sys_sendto (465 samples, 5.62%)</title><rect x="580.9" y="467.0" width="66.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="583.9" y="478.0">__sys_s..</text>
</g>
<g>
<title>sock_sendmsg (455 samples, 5.50%)</title><rect x="581.2" y="451.0" width="64.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="584.2" y="462.0">sock_se..</text>
</g>
<g>
<title>security_socket_sendmsg (10 samples, 0.12%)</title><rect x="581.2" y="435.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="584.2" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (9 samples, 0.11%)</title><rect x="581.3" y="419.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="584.3" y="430.0"></text>
</g>
<g>
<title>avc_has_perm (7 samples, 0.08%)</title><rect x="581.6" y="403.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="584.6" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (445 samples, 5.37%)</title><rect x="582.6" y="435.0" width="63.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="585.6" y="446.0">tcp_sen..</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.02%)</title><rect x="582.6" y="419.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="585.6" y="430.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.02%)</title><rect x="582.6" y="403.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="585.6" y="414.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.05%)</title><rect x="582.9" y="419.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="585.9" y="430.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.02%)</title><rect x="583.2" y="403.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="586.2" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (439 samples, 5.30%)</title><rect x="583.5" y="419.0" width="62.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="586.5" y="430.0">tcp_se..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.02%)</title><rect x="584.2" y="403.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="587.2" y="414.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (401 samples, 4.84%)</title><rect x="584.5" y="403.0" width="57.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="587.5" y="414.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (401 samples, 4.84%)</title><rect x="584.5" y="387.0" width="57.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="587.5" y="398.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_transmit_skb (391 samples, 4.72%)</title><rect x="584.9" y="371.0" width="55.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="587.9" y="382.0">__tcp..</text>
</g>
<g>
<title>__ip_queue_xmit (376 samples, 4.54%)</title><rect x="585.9" y="355.0" width="53.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="588.9" y="366.0">__ip_..</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.04%)</title><rect x="586.3" y="339.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="589.3" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.02%)</title><rect x="586.5" y="323.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="589.5" y="334.0"></text>
</g>
<g>
<title>ip_local_out (82 samples, 0.99%)</title><rect x="586.7" y="339.0" width="11.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="589.7" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (81 samples, 0.98%)</title><rect x="586.9" y="323.0" width="11.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="589.9" y="334.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.02%)</title><rect x="587.0" y="307.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="590.0" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (78 samples, 0.94%)</title><rect x="587.3" y="307.0" width="11.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="590.3" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (27 samples, 0.33%)</title><rect x="587.6" y="291.0" width="3.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="590.6" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (8 samples, 0.10%)</title><rect x="591.6" y="291.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="594.6" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (7 samples, 0.08%)</title><rect x="591.7" y="275.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="594.7" y="286.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.02%)</title><rect x="592.9" y="291.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="595.9" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.05%)</title><rect x="593.2" y="291.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="596.2" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (2 samples, 0.02%)</title><rect x="593.7" y="291.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="596.7" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (23 samples, 0.28%)</title><rect x="594.0" y="291.0" width="3.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="597.0" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (5 samples, 0.06%)</title><rect x="594.4" y="275.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="597.4" y="286.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (2 samples, 0.02%)</title><rect x="595.3" y="275.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="598.3" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (9 samples, 0.11%)</title><rect x="595.6" y="275.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="598.6" y="286.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (2 samples, 0.02%)</title><rect x="596.6" y="259.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="599.6" y="270.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (3 samples, 0.04%)</title><rect x="596.9" y="275.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="599.9" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (7 samples, 0.08%)</title><rect x="597.3" y="291.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="600.3" y="302.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.02%)</title><rect x="597.4" y="275.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="600.4" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (3 samples, 0.04%)</title><rect x="597.7" y="275.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="600.7" y="286.0"></text>
</g>
<g>
<title>ip_output (288 samples, 3.48%)</title><rect x="598.4" y="339.0" width="41.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="601.4" y="350.0">ip_..</text>
</g>
<g>
<title>ip_finish_output2 (270 samples, 3.26%)</title><rect x="598.6" y="323.0" width="38.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="601.6" y="334.0">ip_..</text>
</g>
<g>
<title>__dev_queue_xmit (13 samples, 0.16%)</title><rect x="599.3" y="307.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="602.3" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (9 samples, 0.11%)</title><rect x="599.9" y="291.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="602.9" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.10%)</title><rect x="600.0" y="275.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="603.0" y="286.0"></text>
</g>
<g>
<title>netif_rx (5 samples, 0.06%)</title><rect x="600.3" y="259.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="603.3" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (5 samples, 0.06%)</title><rect x="600.3" y="243.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="603.3" y="254.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.04%)</title><rect x="600.4" y="227.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="603.4" y="238.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (252 samples, 3.04%)</title><rect x="601.1" y="307.0" width="36.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="604.1" y="318.0">__l..</text>
</g>
<g>
<title>do_softirq.part.0 (252 samples, 3.04%)</title><rect x="601.1" y="291.0" width="36.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="604.1" y="302.0">do_..</text>
</g>
<g>
<title>do_softirq_own_stack (250 samples, 3.02%)</title><rect x="601.4" y="275.0" width="35.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="604.4" y="286.0">do_..</text>
</g>
<g>
<title>__softirqentry_text_start (250 samples, 3.02%)</title><rect x="601.4" y="259.0" width="35.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="604.4" y="270.0">__s..</text>
</g>
<g>
<title>net_rx_action (247 samples, 2.98%)</title><rect x="601.9" y="243.0" width="35.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="604.9" y="254.0">net..</text>
</g>
<g>
<title>process_backlog (243 samples, 2.93%)</title><rect x="602.4" y="227.0" width="34.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="605.4" y="238.0">pr..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (241 samples, 2.91%)</title><rect x="602.7" y="211.0" width="34.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="605.7" y="222.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.07%)</title><rect x="602.7" y="195.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="605.7" y="206.0"></text>
</g>
<g>
<title>ip_rcv (235 samples, 2.84%)</title><rect x="603.6" y="195.0" width="33.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="606.6" y="206.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (196 samples, 2.37%)</title><rect x="603.8" y="179.0" width="28.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="606.8" y="190.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (165 samples, 1.99%)</title><rect x="604.0" y="163.0" width="23.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="607.0" y="174.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (165 samples, 1.99%)</title><rect x="604.0" y="147.0" width="23.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="607.0" y="158.0">i..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.02%)</title><rect x="604.4" y="131.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="607.4" y="142.0"></text>
</g>
<g>
<title>tcp_v4_rcv (160 samples, 1.93%)</title><rect x="604.7" y="131.0" width="22.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="607.7" y="142.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (9 samples, 0.11%)</title><rect x="605.3" y="115.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="608.3" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.04%)</title><rect x="606.7" y="115.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="609.7" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.04%)</title><rect x="606.7" y="99.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="609.7" y="110.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (2 samples, 0.02%)</title><rect x="606.8" y="83.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="609.8" y="94.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (142 samples, 1.71%)</title><rect x="607.3" y="115.0" width="20.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="610.3" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (141 samples, 1.70%)</title><rect x="607.4" y="99.0" width="20.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="610.4" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="607.8" y="83.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="610.8" y="94.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.04%)</title><rect x="607.8" y="67.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="610.8" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="607.8" y="51.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="610.8" y="62.0"></text>
</g>
<g>
<title>tcp_ack (38 samples, 0.46%)</title><rect x="608.3" y="83.0" width="5.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="611.3" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (7 samples, 0.08%)</title><rect x="609.8" y="67.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="612.8" y="78.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.04%)</title><rect x="609.8" y="51.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="612.8" y="62.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.04%)</title><rect x="610.4" y="51.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="613.4" y="62.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.04%)</title><rect x="610.8" y="67.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="613.8" y="78.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.02%)</title><rect x="611.7" y="67.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="614.7" y="78.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.02%)</title><rect x="612.1" y="67.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="615.1" y="78.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.06%)</title><rect x="612.4" y="67.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="615.4" y="78.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.02%)</title><rect x="613.1" y="67.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="616.1" y="78.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.02%)</title><rect x="613.4" y="67.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="616.4" y="78.0"></text>
</g>
<g>
<title>tcp_data_queue (92 samples, 1.11%)</title><rect x="613.8" y="83.0" width="13.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="616.8" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (86 samples, 1.04%)</title><rect x="614.3" y="67.0" width="12.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="617.3" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (85 samples, 1.03%)</title><rect x="614.4" y="51.0" width="12.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="617.4" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (84 samples, 1.01%)</title><rect x="614.5" y="35.0" width="12.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="617.5" y="46.0"></text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.04%)</title><rect x="626.5" y="67.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="629.5" y="78.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.04%)</title><rect x="626.9" y="83.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="629.9" y="94.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.02%)</title><rect x="627.1" y="67.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="630.1" y="78.0"></text>
</g>
<g>
<title>nf_hook_slow (30 samples, 0.36%)</title><rect x="627.5" y="163.0" width="4.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="630.5" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (23 samples, 0.28%)</title><rect x="627.8" y="147.0" width="3.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="630.8" y="158.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (5 samples, 0.06%)</title><rect x="630.4" y="131.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="633.4" y="142.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (3 samples, 0.04%)</title><rect x="631.1" y="147.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="634.1" y="158.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.02%)</title><rect x="631.9" y="179.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="634.9" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.02%)</title><rect x="631.9" y="163.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="634.9" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (34 samples, 0.41%)</title><rect x="632.2" y="179.0" width="4.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="635.2" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (25 samples, 0.30%)</title><rect x="632.6" y="163.0" width="3.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="635.6" y="174.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (2 samples, 0.02%)</title><rect x="636.6" y="163.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="639.6" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (16 samples, 0.19%)</title><rect x="637.2" y="323.0" width="2.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="640.2" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (6 samples, 0.07%)</title><rect x="637.5" y="307.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="640.5" y="318.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (2 samples, 0.02%)</title><rect x="638.3" y="307.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="641.3" y="318.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (2 samples, 0.02%)</title><rect x="638.6" y="307.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="641.6" y="318.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (2 samples, 0.02%)</title><rect x="639.2" y="307.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="642.2" y="318.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.02%)</title><rect x="639.6" y="355.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="642.6" y="366.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.02%)</title><rect x="639.9" y="355.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="642.9" y="366.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.02%)</title><rect x="640.3" y="355.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="643.3" y="366.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.02%)</title><rect x="640.6" y="371.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="643.6" y="382.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.02%)</title><rect x="640.6" y="355.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="643.6" y="366.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.04%)</title><rect x="640.9" y="371.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="643.9" y="382.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.02%)</title><rect x="641.0" y="355.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="644.0" y="366.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.02%)</title><rect x="641.3" y="371.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="644.3" y="382.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.02%)</title><rect x="641.6" y="403.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="644.6" y="414.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.02%)</title><rect x="641.6" y="387.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="644.6" y="398.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.02%)</title><rect x="641.6" y="371.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="644.6" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (15 samples, 0.18%)</title><rect x="641.9" y="403.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="644.9" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (15 samples, 0.18%)</title><rect x="641.9" y="387.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="644.9" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (5 samples, 0.06%)</title><rect x="642.2" y="371.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="645.2" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.06%)</title><rect x="642.2" y="355.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="645.2" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (7 samples, 0.08%)</title><rect x="642.9" y="371.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="645.9" y="382.0"></text>
</g>
<g>
<title>tcp_send_mss (11 samples, 0.13%)</title><rect x="644.3" y="403.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="647.3" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (11 samples, 0.13%)</title><rect x="644.3" y="387.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="647.3" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.05%)</title><rect x="645.3" y="371.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="648.3" y="382.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.10%)</title><rect x="646.0" y="451.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="649.0" y="462.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.08%)</title><rect x="646.2" y="435.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="649.2" y="446.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.05%)</title><rect x="646.6" y="419.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="649.6" y="430.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.11%)</title><rect x="647.3" y="531.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="650.3" y="542.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.11%)</title><rect x="647.3" y="515.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="650.3" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.05%)</title><rect x="647.3" y="499.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="650.3" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="647.5" y="483.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="650.5" y="494.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.02%)</title><rect x="647.9" y="499.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="650.9" y="510.0"></text>
</g>
<g>
<title>_init (2 samples, 0.02%)</title><rect x="648.2" y="499.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="651.2" y="510.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.02%)</title><rect x="648.6" y="531.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="651.6" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="648.9" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="651.9" y="574.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="648.9" y="547.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="651.9" y="558.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.02%)</title><rect x="648.9" y="531.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="651.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.02%)</title><rect x="649.2" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="649.2" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="652.2" y="606.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (3 samples, 0.04%)</title><rect x="649.5" y="611.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="652.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.08%)</title><rect x="649.9" y="627.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.05%)</title><rect x="649.9" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="652.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.05%)</title><rect x="649.9" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="652.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.04%)</title><rect x="650.4" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="650.6" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (954 samples, 11.52%)</title><rect x="650.9" y="627.0" width="135.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.9" y="638.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.05%)</title><rect x="650.9" y="611.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.05%)</title><rect x="650.9" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="653.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.05%)</title><rect x="650.9" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="653.9" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.02%)</title><rect x="651.2" y="563.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="654.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.05%)</title><rect x="651.4" y="611.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.4" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.05%)</title><rect x="651.4" y="595.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="651.6" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="654.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.04%)</title><rect x="651.6" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.04%)</title><rect x="651.6" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.04%)</title><rect x="651.6" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="654.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.04%)</title><rect x="651.6" y="515.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="652.2" y="611.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.2" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="652.2" y="595.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="652.2" y="579.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.2" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="652.2" y="563.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="655.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="652.2" y="547.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="652.2" y="531.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.2" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="652.2" y="515.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (929 samples, 11.22%)</title><rect x="652.7" y="611.0" width="132.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.7" y="622.0">ru/mail/polis/da..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (19 samples, 0.23%)</title><rect x="652.7" y="595.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.7" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (19 samples, 0.23%)</title><rect x="652.7" y="579.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.7" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (19 samples, 0.23%)</title><rect x="652.7" y="563.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (19 samples, 0.23%)</title><rect x="652.7" y="547.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (19 samples, 0.23%)</title><rect x="652.7" y="531.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="655.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (16 samples, 0.19%)</title><rect x="652.7" y="515.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.7" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (6 samples, 0.07%)</title><rect x="652.7" y="499.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="655.7" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (6 samples, 0.07%)</title><rect x="652.7" y="483.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.7" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (6 samples, 0.07%)</title><rect x="652.7" y="467.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.06%)</title><rect x="652.9" y="451.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="655.9" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.06%)</title><rect x="652.9" y="435.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="655.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (5 samples, 0.06%)</title><rect x="652.9" y="419.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (5 samples, 0.06%)</title><rect x="652.9" y="403.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.9" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (5 samples, 0.06%)</title><rect x="652.9" y="387.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="655.9" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.06%)</title><rect x="652.9" y="371.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="655.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (5 samples, 0.06%)</title><rect x="652.9" y="355.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.06%)</title><rect x="652.9" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="655.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (5 samples, 0.06%)</title><rect x="652.9" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.06%)</title><rect x="652.9" y="307.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (4 samples, 0.05%)</title><rect x="653.0" y="291.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.05%)</title><rect x="653.0" y="275.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="653.0" y="259.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.05%)</title><rect x="653.0" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="653.0" y="227.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="653.0" y="211.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="656.0" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="653.0" y="195.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="653.0" y="179.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="653.0" y="163.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.0" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="653.2" y="147.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.2" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (10 samples, 0.12%)</title><rect x="653.6" y="499.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (10 samples, 0.12%)</title><rect x="653.6" y="483.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (10 samples, 0.12%)</title><rect x="653.6" y="467.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (10 samples, 0.12%)</title><rect x="653.6" y="451.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="656.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.11%)</title><rect x="653.7" y="435.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="656.7" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.11%)</title><rect x="653.7" y="419.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="656.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.08%)</title><rect x="653.7" y="403.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.07%)</title><rect x="653.9" y="387.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.07%)</title><rect x="653.9" y="371.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (6 samples, 0.07%)</title><rect x="653.9" y="355.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (3 samples, 0.04%)</title><rect x="653.9" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (2 samples, 0.02%)</title><rect x="654.3" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="657.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="654.3" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="654.3" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="654.3" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="654.3" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="654.3" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="654.3" y="243.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="654.3" y="227.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="657.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (2 samples, 0.02%)</title><rect x="654.7" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (2 samples, 0.02%)</title><rect x="654.7" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="657.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (2 samples, 0.02%)</title><rect x="654.7" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.02%)</title><rect x="654.7" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="657.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (2 samples, 0.02%)</title><rect x="654.7" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.02%)</title><rect x="654.7" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (2 samples, 0.02%)</title><rect x="654.7" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.02%)</title><rect x="654.7" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="657.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$64/1828395560.apply (2 samples, 0.02%)</title><rect x="655.2" y="515.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="658.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="655.2" y="499.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="658.2" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="655.2" y="483.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="658.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="655.2" y="467.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.2" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (11 samples, 0.13%)</title><rect x="655.4" y="595.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="658.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (3 samples, 0.04%)</title><rect x="655.4" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.4" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (8 samples, 0.10%)</title><rect x="655.9" y="579.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$68/1913378084.apply (8 samples, 0.10%)</title><rect x="655.9" y="563.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="658.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (6 samples, 0.07%)</title><rect x="656.1" y="547.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (3 samples, 0.04%)</title><rect x="656.1" y="531.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="656.6" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="656.6" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="656.6" y="499.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.07%)</title><rect x="657.0" y="595.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.0" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.07%)</title><rect x="657.0" y="579.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.0" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="657.3" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (892 samples, 10.77%)</title><rect x="658.0" y="595.0" width="127.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="661.0" y="606.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (892 samples, 10.77%)</title><rect x="658.0" y="579.0" width="127.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.0" y="590.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (756 samples, 9.13%)</title><rect x="658.0" y="563.0" width="107.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.0" y="574.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.06%)</title><rect x="658.0" y="547.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="661.0" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="658.1" y="531.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.1" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.02%)</title><rect x="658.7" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="661.7" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.02%)</title><rect x="658.7" y="531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="661.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (27 samples, 0.33%)</title><rect x="659.0" y="547.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (27 samples, 0.33%)</title><rect x="659.0" y="531.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (22 samples, 0.27%)</title><rect x="659.4" y="515.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (22 samples, 0.27%)</title><rect x="659.4" y="499.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="662.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.02%)</title><rect x="660.0" y="483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="663.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (16 samples, 0.19%)</title><rect x="660.3" y="483.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.08%)</title><rect x="661.6" y="467.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="664.6" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.06%)</title><rect x="661.6" y="451.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="664.6" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (4 samples, 0.05%)</title><rect x="661.7" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="664.7" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.compare (3 samples, 0.04%)</title><rect x="661.9" y="419.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="664.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="662.3" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="665.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="662.3" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (2 samples, 0.02%)</title><rect x="662.6" y="515.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="665.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (2 samples, 0.02%)</title><rect x="662.8" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (5 samples, 0.06%)</title><rect x="663.1" y="547.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (4 samples, 0.05%)</title><rect x="663.3" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (4 samples, 0.05%)</title><rect x="663.3" y="515.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (4 samples, 0.05%)</title><rect x="663.3" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (4 samples, 0.05%)</title><rect x="663.3" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (74 samples, 0.89%)</title><rect x="664.0" y="547.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.04%)</title><rect x="664.0" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (3 samples, 0.04%)</title><rect x="664.0" y="515.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.04%)</title><rect x="664.0" y="499.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="667.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (2 samples, 0.02%)</title><rect x="664.1" y="483.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (2 samples, 0.02%)</title><rect x="664.1" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (4 samples, 0.05%)</title><rect x="664.4" y="531.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (4 samples, 0.05%)</title><rect x="664.4" y="515.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="667.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (4 samples, 0.05%)</title><rect x="664.4" y="499.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (2 samples, 0.02%)</title><rect x="665.0" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (51 samples, 0.62%)</title><rect x="665.3" y="531.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="668.3" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.02%)</title><rect x="665.3" y="515.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.02%)</title><rect x="665.3" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.3" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (2 samples, 0.02%)</title><rect x="665.3" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.3" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.04%)</title><rect x="665.6" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (39 samples, 0.47%)</title><rect x="666.1" y="515.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (38 samples, 0.46%)</title><rect x="666.3" y="499.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="669.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (37 samples, 0.45%)</title><rect x="666.4" y="483.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="669.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (35 samples, 0.42%)</title><rect x="666.4" y="467.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="669.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (34 samples, 0.41%)</title><rect x="666.6" y="451.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="669.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (34 samples, 0.41%)</title><rect x="666.6" y="435.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (33 samples, 0.40%)</title><rect x="666.7" y="419.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (22 samples, 0.27%)</title><rect x="668.3" y="403.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (6 samples, 0.07%)</title><rect x="668.4" y="387.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.18%)</title><rect x="669.3" y="387.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="672.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.18%)</title><rect x="669.3" y="371.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="672.3" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.12%)</title><rect x="670.0" y="355.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="673.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.06%)</title><rect x="670.1" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="673.1" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.02%)</title><rect x="670.3" y="323.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.02%)</title><rect x="670.5" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="673.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.05%)</title><rect x="670.8" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (4 samples, 0.05%)</title><rect x="670.8" y="323.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (2 samples, 0.02%)</title><rect x="671.4" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (6 samples, 0.07%)</title><rect x="671.7" y="515.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="674.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (4 samples, 0.05%)</title><rect x="672.0" y="499.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="675.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (4 samples, 0.05%)</title><rect x="672.0" y="483.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="672.1" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (14 samples, 0.17%)</title><rect x="672.5" y="531.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7 samples, 0.08%)</title><rect x="672.5" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="675.5" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7 samples, 0.08%)</title><rect x="672.5" y="499.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="675.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.hasNext (4 samples, 0.05%)</title><rect x="673.0" y="483.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (6 samples, 0.07%)</title><rect x="673.5" y="515.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="676.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (6 samples, 0.07%)</title><rect x="673.5" y="499.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="676.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (2 samples, 0.02%)</title><rect x="673.7" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (2 samples, 0.02%)</title><rect x="673.7" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="676.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.02%)</title><rect x="674.0" y="483.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.0" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.02%)</title><rect x="674.0" y="467.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="677.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.02%)</title><rect x="674.0" y="451.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.02%)</title><rect x="674.0" y="435.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="677.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (640 samples, 7.73%)</title><rect x="674.5" y="547.0" width="91.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="677.5" y="558.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (640 samples, 7.73%)</title><rect x="674.5" y="531.0" width="91.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="677.5" y="542.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (640 samples, 7.73%)</title><rect x="674.5" y="515.0" width="91.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.5" y="526.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.18%)</title><rect x="674.5" y="499.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.5" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.17%)</title><rect x="674.7" y="483.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="677.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.02%)</title><rect x="675.4" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="678.4" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.06%)</title><rect x="675.8" y="467.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.02%)</title><rect x="676.2" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (103 samples, 1.24%)</title><rect x="676.7" y="499.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="679.7" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (20 samples, 0.24%)</title><rect x="677.2" y="483.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="680.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (5 samples, 0.06%)</title><rect x="679.4" y="467.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (3 samples, 0.04%)</title><rect x="679.7" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (3 samples, 0.04%)</title><rect x="679.7" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="682.7" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (37 samples, 0.45%)</title><rect x="680.1" y="483.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="683.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (36 samples, 0.43%)</title><rect x="680.2" y="467.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (36 samples, 0.43%)</title><rect x="680.2" y="451.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="683.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (36 samples, 0.43%)</title><rect x="680.2" y="435.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="683.2" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (32 samples, 0.39%)</title><rect x="680.8" y="419.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="683.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (32 samples, 0.39%)</title><rect x="680.8" y="403.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="683.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (32 samples, 0.39%)</title><rect x="680.8" y="387.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="683.8" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (31 samples, 0.37%)</title><rect x="680.9" y="371.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="683.9" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="680.9" y="355.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="683.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="681.4" y="339.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="684.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="681.5" y="323.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="684.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.07%)</title><rect x="681.5" y="307.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.5" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.25%)</title><rect x="682.4" y="355.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.4" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.10%)</title><rect x="683.4" y="339.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="686.4" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.07%)</title><rect x="684.5" y="339.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="687.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="684.9" y="323.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.04%)</title><rect x="684.9" y="307.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="687.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (35 samples, 0.42%)</title><rect x="685.4" y="483.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (35 samples, 0.42%)</title><rect x="685.4" y="467.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (35 samples, 0.42%)</title><rect x="685.4" y="451.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.4" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (35 samples, 0.42%)</title><rect x="685.4" y="435.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.42%)</title><rect x="685.4" y="419.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.42%)</title><rect x="685.4" y="403.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="688.4" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (35 samples, 0.42%)</title><rect x="685.4" y="387.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.4" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.16%)</title><rect x="685.4" y="371.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.16%)</title><rect x="685.4" y="355.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="688.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.14%)</title><rect x="685.5" y="339.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.5" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.14%)</title><rect x="685.5" y="323.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.5" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (22 samples, 0.27%)</title><rect x="687.2" y="371.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.2" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (22 samples, 0.27%)</title><rect x="687.2" y="355.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.06%)</title><rect x="688.2" y="339.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.12%)</title><rect x="688.9" y="339.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.9" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.11%)</title><rect x="689.1" y="323.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="692.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="690.4" y="483.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="693.4" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="690.4" y="467.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="693.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.08%)</title><rect x="690.4" y="451.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.4" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.06%)</title><rect x="690.6" y="435.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (522 samples, 6.30%)</title><rect x="691.4" y="499.0" width="74.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.4" y="510.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (347 samples, 4.19%)</title><rect x="703.0" y="483.0" width="49.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="706.0" y="494.0">java/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (345 samples, 4.17%)</title><rect x="703.3" y="467.0" width="49.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="706.3" y="478.0">java/..</text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.04%)</title><rect x="707.0" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (316 samples, 3.82%)</title><rect x="707.5" y="451.0" width="45.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.5" y="462.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (314 samples, 3.79%)</title><rect x="707.7" y="435.0" width="44.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="710.7" y="446.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.06%)</title><rect x="737.4" y="419.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.4" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (91 samples, 1.10%)</title><rect x="738.1" y="419.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (69 samples, 0.83%)</title><rect x="739.4" y="403.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (63 samples, 0.76%)</title><rect x="740.2" y="387.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="743.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (62 samples, 0.75%)</title><rect x="740.4" y="371.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="743.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.17%)</title><rect x="745.6" y="355.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="746.2" y="339.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.12%)</title><rect x="746.2" y="323.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="749.2" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.12%)</title><rect x="746.2" y="307.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="749.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (11 samples, 0.13%)</title><rect x="747.6" y="355.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="750.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="748.1" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="751.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.07%)</title><rect x="748.4" y="339.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.07%)</title><rect x="748.4" y="323.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="751.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.07%)</title><rect x="748.4" y="307.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (13 samples, 0.16%)</title><rect x="749.2" y="403.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="752.2" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (10 samples, 0.12%)</title><rect x="751.1" y="419.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="754.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (53 samples, 0.64%)</title><rect x="752.5" y="483.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="755.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (51 samples, 0.62%)</title><rect x="752.8" y="467.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="755.8" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (51 samples, 0.62%)</title><rect x="752.8" y="451.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.8" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (38 samples, 0.46%)</title><rect x="754.6" y="435.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="757.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (36 samples, 0.43%)</title><rect x="754.9" y="419.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="757.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.42%)</title><rect x="755.1" y="403.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.1" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (29 samples, 0.35%)</title><rect x="755.9" y="387.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.9" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.11%)</title><rect x="756.6" y="371.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="759.6" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.11%)</title><rect x="756.6" y="355.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="759.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.11%)</title><rect x="756.6" y="339.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="759.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.11%)</title><rect x="756.6" y="323.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="759.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (15 samples, 0.18%)</title><rect x="757.9" y="371.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.9" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (15 samples, 0.18%)</title><rect x="757.9" y="355.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="759.2" y="339.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.05%)</title><rect x="759.5" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="762.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (40 samples, 0.48%)</title><rect x="760.0" y="483.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.reachabilityFence (9 samples, 0.11%)</title><rect x="761.8" y="467.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="764.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (6 samples, 0.07%)</title><rect x="762.2" y="451.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="765.2" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (12 samples, 0.14%)</title><rect x="763.2" y="467.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="766.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (6 samples, 0.07%)</title><rect x="764.9" y="467.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (136 samples, 1.64%)</title><rect x="765.7" y="563.0" width="19.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (107 samples, 1.29%)</title><rect x="765.9" y="547.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.9" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (107 samples, 1.29%)</title><rect x="765.9" y="531.0" width="15.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="768.9" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (8 samples, 0.10%)</title><rect x="766.9" y="515.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.9" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.08%)</title><rect x="767.0" y="499.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="770.0" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (5 samples, 0.06%)</title><rect x="767.3" y="483.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="770.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.05%)</title><rect x="767.5" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="770.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.02%)</title><rect x="767.6" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="770.6" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="767.6" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="770.6" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (5 samples, 0.06%)</title><rect x="768.2" y="515.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.2" y="526.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="768.6" y="499.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="771.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (84 samples, 1.01%)</title><rect x="768.9" y="515.0" width="11.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.9" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (84 samples, 1.01%)</title><rect x="768.9" y="499.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.9" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (82 samples, 0.99%)</title><rect x="768.9" y="483.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="771.9" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (82 samples, 0.99%)</title><rect x="768.9" y="467.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="771.9" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (80 samples, 0.97%)</title><rect x="769.2" y="451.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.2" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (79 samples, 0.95%)</title><rect x="769.3" y="435.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="772.3" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (46 samples, 0.56%)</title><rect x="769.3" y="419.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="772.3" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (3 samples, 0.04%)</title><rect x="769.6" y="403.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="772.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (2 samples, 0.02%)</title><rect x="769.7" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="772.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (41 samples, 0.50%)</title><rect x="770.0" y="403.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (41 samples, 0.50%)</title><rect x="770.0" y="387.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="773.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (41 samples, 0.50%)</title><rect x="770.0" y="371.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (19 samples, 0.23%)</title><rect x="770.0" y="355.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.14%)</title><rect x="770.2" y="339.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="773.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.14%)</title><rect x="770.2" y="323.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (12 samples, 0.14%)</title><rect x="770.2" y="307.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.13%)</title><rect x="770.3" y="291.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="773.3" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="770.9" y="275.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="773.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="771.0" y="259.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="774.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="771.0" y="243.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.0" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="771.2" y="227.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="771.4" y="211.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="774.4" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="771.9" y="339.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="774.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="771.9" y="323.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="771.9" y="307.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.9" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.07%)</title><rect x="771.9" y="291.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (13 samples, 0.16%)</title><rect x="772.7" y="355.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="775.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6 samples, 0.07%)</title><rect x="773.0" y="339.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="773.3" y="323.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="773.3" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.3" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="773.3" y="291.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="773.3" y="275.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="776.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="773.3" y="259.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.3" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="773.3" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.3" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="773.3" y="227.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="773.3" y="211.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="776.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="773.3" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.3" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.02%)</title><rect x="773.6" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.6" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (5 samples, 0.06%)</title><rect x="773.9" y="339.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.9" y="350.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (4 samples, 0.05%)</title><rect x="773.9" y="323.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="776.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (7 samples, 0.08%)</title><rect x="774.6" y="355.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="777.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.08%)</title><rect x="774.6" y="339.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="777.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.07%)</title><rect x="774.7" y="323.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="777.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.06%)</title><rect x="774.9" y="307.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="777.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="775.0" y="291.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.0" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="775.0" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="775.0" y="259.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="775.0" y="243.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="778.0" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="775.1" y="227.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.1" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="775.1" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.1" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="775.3" y="195.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="775.3" y="179.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="778.3" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.02%)</title><rect x="775.3" y="163.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (2 samples, 0.02%)</title><rect x="775.6" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="775.6" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="778.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="775.6" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="778.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="775.6" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="778.6" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="775.6" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="778.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="775.6" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="775.6" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="775.6" y="243.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="778.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="775.6" y="227.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="778.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (33 samples, 0.40%)</title><rect x="775.9" y="419.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (31 samples, 0.37%)</title><rect x="776.1" y="403.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="779.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (31 samples, 0.37%)</title><rect x="776.1" y="387.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.1" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (31 samples, 0.37%)</title><rect x="776.1" y="371.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="779.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (31 samples, 0.37%)</title><rect x="776.1" y="355.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (31 samples, 0.37%)</title><rect x="776.1" y="339.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (29 samples, 0.35%)</title><rect x="776.4" y="323.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (29 samples, 0.35%)</title><rect x="776.4" y="307.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="779.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.13%)</title><rect x="776.7" y="291.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.12%)</title><rect x="776.9" y="275.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="779.9" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.10%)</title><rect x="777.0" y="259.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.05%)</title><rect x="777.3" y="243.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (2 samples, 0.02%)</title><rect x="777.9" y="243.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (16 samples, 0.19%)</title><rect x="778.3" y="291.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="781.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (15 samples, 0.18%)</title><rect x="778.4" y="275.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="781.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 0.18%)</title><rect x="778.4" y="259.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 0.18%)</title><rect x="778.4" y="243.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="781.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (14 samples, 0.17%)</title><rect x="778.6" y="227.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="781.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.17%)</title><rect x="778.6" y="211.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="781.6" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (14 samples, 0.17%)</title><rect x="778.6" y="195.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.17%)</title><rect x="778.6" y="179.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.17%)</title><rect x="778.6" y="163.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="781.6" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="779.1" y="147.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.1" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="779.3" y="131.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="782.3" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="779.4" y="115.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="782.4" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.05%)</title><rect x="779.7" y="131.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.7" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="780.0" y="115.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.0" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="780.3" y="147.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.3" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 0.02%)</title><rect x="780.6" y="483.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="783.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (2 samples, 0.02%)</title><rect x="780.8" y="515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (28 samples, 0.34%)</title><rect x="781.1" y="547.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="784.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (28 samples, 0.34%)</title><rect x="781.1" y="531.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (2 samples, 0.02%)</title><rect x="781.1" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.1" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (26 samples, 0.31%)</title><rect x="781.4" y="515.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="784.4" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5 samples, 0.06%)</title><rect x="781.6" y="499.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (5 samples, 0.06%)</title><rect x="781.6" y="483.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="784.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (5 samples, 0.06%)</title><rect x="781.6" y="467.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.06%)</title><rect x="781.6" y="451.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.06%)</title><rect x="781.6" y="435.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (5 samples, 0.06%)</title><rect x="781.6" y="419.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.05%)</title><rect x="781.7" y="403.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.7" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (4 samples, 0.05%)</title><rect x="781.7" y="387.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="784.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.05%)</title><rect x="781.7" y="371.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="784.7" y="382.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="781.7" y="355.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="784.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (2 samples, 0.02%)</title><rect x="782.0" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.02%)</title><rect x="782.0" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (2 samples, 0.02%)</title><rect x="782.0" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="785.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.02%)</title><rect x="782.0" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="785.0" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (20 samples, 0.24%)</title><rect x="782.3" y="499.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.3" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (20 samples, 0.24%)</title><rect x="782.3" y="483.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.3" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (20 samples, 0.24%)</title><rect x="782.3" y="467.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.3" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (20 samples, 0.24%)</title><rect x="782.3" y="451.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="785.3" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.24%)</title><rect x="782.3" y="435.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.3" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.24%)</title><rect x="782.3" y="419.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="785.3" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9 samples, 0.11%)</title><rect x="782.4" y="403.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.08%)</title><rect x="782.7" y="387.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.08%)</title><rect x="782.7" y="371.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (7 samples, 0.08%)</title><rect x="782.7" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (3 samples, 0.04%)</title><rect x="782.7" y="339.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="785.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="782.8" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="785.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="782.8" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="785.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="782.8" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="782.8" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="785.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="782.8" y="259.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.02%)</title><rect x="783.1" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="786.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (10 samples, 0.12%)</title><rect x="783.7" y="403.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (9 samples, 0.11%)</title><rect x="783.8" y="387.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="786.8" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (9 samples, 0.11%)</title><rect x="783.8" y="371.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="786.8" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.11%)</title><rect x="783.8" y="355.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.8" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (9 samples, 0.11%)</title><rect x="783.8" y="339.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.8" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.11%)</title><rect x="783.8" y="323.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="786.8" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (8 samples, 0.10%)</title><rect x="784.0" y="307.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="787.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.10%)</title><rect x="784.0" y="291.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="787.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.06%)</title><rect x="784.0" y="275.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="787.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.06%)</title><rect x="784.0" y="259.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.0" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.06%)</title><rect x="784.0" y="243.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="787.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="784.0" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.04%)</title><rect x="784.3" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.3" y="238.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="784.4" y="211.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="787.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (3 samples, 0.04%)</title><rect x="784.7" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.04%)</title><rect x="784.7" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.7" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="784.8" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.8" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="784.8" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="787.8" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="784.8" y="211.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="787.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="784.8" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (12 samples, 0.14%)</title><rect x="785.1" y="611.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.upsert (12 samples, 0.14%)</title><rect x="785.1" y="595.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.setToFlush (7 samples, 0.08%)</title><rect x="785.8" y="579.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getSizeOfFlushedRow (6 samples, 0.07%)</title><rect x="786.0" y="563.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.0" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.04%)</title><rect x="786.4" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.04%)</title><rect x="786.8" y="643.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="787.0" y="627.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="790.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7 samples, 0.08%)</title><rect x="787.3" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.07%)</title><rect x="787.4" y="627.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="790.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="787.4" y="611.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="790.4" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title><rect x="787.7" y="611.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="790.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="787.7" y="595.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (19 samples, 0.23%)</title><rect x="788.3" y="675.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="789.0" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="792.0" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="789.0" y="643.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="792.0" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.06%)</title><rect x="790.1" y="659.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.06%)</title><rect x="791.1" y="675.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.1" y="686.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="791.1" y="659.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="794.1" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.06%)</title><rect x="791.1" y="643.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="794.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.06%)</title><rect x="791.1" y="627.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.06%)</title><rect x="791.1" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.1" y="622.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.06%)</title><rect x="791.1" y="595.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="794.1" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.11%)</title><rect x="791.8" y="675.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="794.8" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.11%)</title><rect x="791.8" y="659.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.8" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (116 samples, 1.40%)</title><rect x="793.1" y="691.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.1" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (116 samples, 1.40%)</title><rect x="793.1" y="675.0" width="16.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.25%)</title><rect x="794.4" y="659.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="797.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.25%)</title><rect x="794.4" y="643.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="797.4" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (17 samples, 0.21%)</title><rect x="794.4" y="627.0" width="2.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="797.4" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (5 samples, 0.06%)</title><rect x="795.2" y="611.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="798.2" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.07%)</title><rect x="796.0" y="611.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="799.0" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="796.5" y="595.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.5" y="606.0"></text>
</g>
<g>
<title>__libc_recv (2 samples, 0.02%)</title><rect x="796.8" y="627.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="799.8" y="638.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.02%)</title><rect x="797.1" y="627.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="800.1" y="638.0"></text>
</g>
<g>
<title>__libc_recv (86 samples, 1.04%)</title><rect x="797.4" y="659.0" width="12.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="800.4" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (64 samples, 0.77%)</title><rect x="800.5" y="643.0" width="9.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="803.5" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (64 samples, 0.77%)</title><rect x="800.5" y="627.0" width="9.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="803.5" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (53 samples, 0.64%)</title><rect x="802.1" y="611.0" width="7.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="805.1" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (53 samples, 0.64%)</title><rect x="802.1" y="595.0" width="7.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="805.1" y="606.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.02%)</title><rect x="802.2" y="579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="805.2" y="590.0"></text>
</g>
<g>
<title>inet_recvmsg (30 samples, 0.36%)</title><rect x="802.5" y="579.0" width="4.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="805.5" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (29 samples, 0.35%)</title><rect x="802.7" y="563.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="805.7" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.06%)</title><rect x="803.9" y="547.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="806.9" y="558.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.05%)</title><rect x="803.9" y="531.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="806.9" y="542.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.02%)</title><rect x="804.2" y="515.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="807.2" y="526.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.02%)</title><rect x="804.2" y="499.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="807.2" y="510.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.02%)</title><rect x="804.6" y="547.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="807.6" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.02%)</title><rect x="804.6" y="531.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="807.6" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (8 samples, 0.10%)</title><rect x="805.1" y="547.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="808.1" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (8 samples, 0.10%)</title><rect x="805.1" y="531.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="808.1" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.02%)</title><rect x="805.4" y="515.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="808.4" y="526.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.02%)</title><rect x="805.4" y="499.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="808.4" y="510.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.02%)</title><rect x="805.4" y="483.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="808.4" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (4 samples, 0.05%)</title><rect x="805.6" y="515.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="808.6" y="526.0"></text>
</g>
<g>
<title>__check_object_size (4 samples, 0.05%)</title><rect x="805.6" y="499.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="808.6" y="510.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.02%)</title><rect x="806.4" y="547.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="809.4" y="558.0"></text>
</g>
<g>
<title>sock_recvmsg (8 samples, 0.10%)</title><rect x="806.8" y="579.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="809.8" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (8 samples, 0.10%)</title><rect x="806.8" y="563.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="809.8" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (8 samples, 0.10%)</title><rect x="806.8" y="547.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="809.8" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (6 samples, 0.07%)</title><rect x="807.1" y="531.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="810.1" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (12 samples, 0.14%)</title><rect x="807.9" y="579.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="810.9" y="590.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.14%)</title><rect x="807.9" y="563.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="810.9" y="574.0"></text>
</g>
<g>
<title>__fget (11 samples, 0.13%)</title><rect x="808.1" y="547.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="811.1" y="558.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=13278] (1,868 samples, 22.56%)</title><rect x="809.8" y="755.0" width="266.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="812.8" y="766.0">[NIO Selector #3 tid=13278]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (29 samples, 0.35%)</title><rect x="809.9" y="739.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="812.9" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (29 samples, 0.35%)</title><rect x="809.9" y="723.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="812.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (28 samples, 0.34%)</title><rect x="810.1" y="707.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="813.1" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (24 samples, 0.29%)</title><rect x="810.1" y="691.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="813.1" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (13 samples, 0.16%)</title><rect x="811.1" y="675.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="814.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (5 samples, 0.06%)</title><rect x="811.3" y="659.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="814.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (4 samples, 0.05%)</title><rect x="811.3" y="643.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.3" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.02%)</title><rect x="811.3" y="627.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="814.3" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.02%)</title><rect x="811.3" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="814.3" y="622.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (2 samples, 0.02%)</title><rect x="811.3" y="595.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="814.3" y="606.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (2 samples, 0.02%)</title><rect x="811.3" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="814.3" y="590.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.02%)</title><rect x="811.6" y="627.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="814.6" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (4 samples, 0.05%)</title><rect x="812.2" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="815.2" y="670.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.02%)</title><rect x="812.3" y="643.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="815.3" y="654.0"></text>
</g>
<g>
<title>update_get_addr (3 samples, 0.04%)</title><rect x="813.1" y="675.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="816.1" y="686.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="813.5" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="816.5" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="813.8" y="691.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="816.8" y="702.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.04%)</title><rect x="814.1" y="739.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="817.1" y="750.0"></text>
</g>
<g>
<title>[unknown_Java] (14 samples, 0.17%)</title><rect x="814.5" y="739.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="817.5" y="750.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,821 samples, 21.99%)</title><rect x="816.5" y="739.0" width="259.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="819.5" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (120 samples, 1.45%)</title><rect x="816.6" y="723.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="819.6" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (3 samples, 0.04%)</title><rect x="817.5" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="820.5" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (111 samples, 1.34%)</title><rect x="817.9" y="707.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.9" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (90 samples, 1.09%)</title><rect x="818.8" y="691.0" width="12.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="821.8" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (75 samples, 0.91%)</title><rect x="820.9" y="675.0" width="10.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="823.9" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (75 samples, 0.91%)</title><rect x="820.9" y="659.0" width="10.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="823.9" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (69 samples, 0.83%)</title><rect x="821.7" y="643.0" width="9.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="824.7" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (68 samples, 0.82%)</title><rect x="821.9" y="627.0" width="9.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="824.9" y="638.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.06%)</title><rect x="821.9" y="611.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="824.9" y="622.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.06%)</title><rect x="821.9" y="595.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="824.9" y="606.0"></text>
</g>
<g>
<title>ep_poll (61 samples, 0.74%)</title><rect x="822.6" y="611.0" width="8.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="825.6" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (24 samples, 0.29%)</title><rect x="823.6" y="595.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="826.6" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (18 samples, 0.22%)</title><rect x="824.0" y="579.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="827.0" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (14 samples, 0.17%)</title><rect x="824.6" y="563.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="827.6" y="574.0"></text>
</g>
<g>
<title>sock_poll (13 samples, 0.16%)</title><rect x="824.7" y="547.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="827.7" y="558.0"></text>
</g>
<g>
<title>tcp_poll (11 samples, 0.13%)</title><rect x="825.0" y="531.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="828.0" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (5 samples, 0.06%)</title><rect x="825.9" y="515.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="828.9" y="526.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.02%)</title><rect x="826.7" y="579.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="829.7" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (30 samples, 0.36%)</title><rect x="827.0" y="595.0" width="4.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="830.0" y="606.0"></text>
</g>
<g>
<title>schedule (23 samples, 0.28%)</title><rect x="828.0" y="579.0" width="3.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="831.0" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (22 samples, 0.27%)</title><rect x="828.2" y="563.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="831.2" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (19 samples, 0.23%)</title><rect x="828.6" y="547.0" width="2.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="831.6" y="558.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.02%)</title><rect x="831.3" y="611.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="834.3" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.04%)</title><rect x="831.6" y="691.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="834.6" y="702.0"></text>
</g>
<g>
<title>__GI___clock_gettime (7 samples, 0.08%)</title><rect x="832.2" y="691.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="835.2" y="702.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="832.7" y="675.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="835.7" y="686.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.04%)</title><rect x="833.3" y="691.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="836.3" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,700 samples, 20.53%)</title><rect x="833.7" y="723.0" width="242.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="836.7" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,698 samples, 20.51%)</title><rect x="834.0" y="707.0" width="242.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="837.0" y="718.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,595 samples, 19.26%)</title><rect x="834.0" y="691.0" width="227.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.0" y="702.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,554 samples, 18.77%)</title><rect x="836.3" y="675.0" width="221.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.3" y="686.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,551 samples, 18.73%)</title><rect x="836.7" y="659.0" width="221.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="839.7" y="670.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,540 samples, 18.60%)</title><rect x="836.7" y="643.0" width="219.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="839.7" y="654.0">RequestHandler1_entity.handle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (549 samples, 6.63%)</title><rect x="836.7" y="627.0" width="78.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.7" y="638.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (540 samples, 6.52%)</title><rect x="837.7" y="611.0" width="77.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="840.7" y="622.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.14%)</title><rect x="837.7" y="595.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="840.7" y="606.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.02%)</title><rect x="838.0" y="579.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="841.0" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="838.3" y="579.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="841.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.07%)</title><rect x="838.6" y="579.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="841.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="839.0" y="563.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="842.0" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="839.0" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="842.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (528 samples, 6.38%)</title><rect x="839.4" y="595.0" width="75.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="842.4" y="606.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session.write (528 samples, 6.38%)</title><rect x="839.4" y="579.0" width="75.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.4" y="590.0">one/nio/..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="839.4" y="563.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="842.4" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (524 samples, 6.33%)</title><rect x="839.8" y="563.0" width="74.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="842.8" y="574.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (524 samples, 6.33%)</title><rect x="839.8" y="547.0" width="74.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="842.8" y="558.0">one/nio/..</text>
</g>
<g>
<title>.annobin_send.c (501 samples, 6.05%)</title><rect x="840.4" y="531.0" width="71.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="843.4" y="542.0">.annobin..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (481 samples, 5.81%)</title><rect x="843.3" y="515.0" width="68.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="846.3" y="526.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (481 samples, 5.81%)</title><rect x="843.3" y="499.0" width="68.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="846.3" y="510.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_sendto (474 samples, 5.72%)</title><rect x="844.3" y="483.0" width="67.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="847.3" y="494.0">__x64_s..</text>
</g>
<g>
<title>__sys_sendto (473 samples, 5.71%)</title><rect x="844.4" y="467.0" width="67.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="847.4" y="478.0">__sys_s..</text>
</g>
<g>
<title>sock_sendmsg (468 samples, 5.65%)</title><rect x="844.7" y="451.0" width="66.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="847.7" y="462.0">sock_se..</text>
</g>
<g>
<title>inet_sendmsg (2 samples, 0.02%)</title><rect x="845.0" y="435.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="848.0" y="446.0"></text>
</g>
<g>
<title>security_socket_sendmsg (8 samples, 0.10%)</title><rect x="845.3" y="435.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="848.3" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (7 samples, 0.08%)</title><rect x="845.4" y="419.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="848.4" y="430.0"></text>
</g>
<g>
<title>avc_has_perm (5 samples, 0.06%)</title><rect x="845.7" y="403.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="848.7" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (456 samples, 5.51%)</title><rect x="846.4" y="435.0" width="65.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="849.4" y="446.0">tcp_sen..</text>
</g>
<g>
<title>tcp_sendmsg_locked (453 samples, 5.47%)</title><rect x="846.8" y="419.0" width="64.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="849.8" y="430.0">tcp_sen..</text>
</g>
<g>
<title>__check_object_size (4 samples, 0.05%)</title><rect x="847.3" y="403.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="850.3" y="414.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.04%)</title><rect x="847.4" y="387.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="850.4" y="398.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (412 samples, 4.98%)</title><rect x="847.8" y="403.0" width="58.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="850.8" y="414.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (412 samples, 4.98%)</title><rect x="847.8" y="387.0" width="58.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="850.8" y="398.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_transmit_skb (401 samples, 4.84%)</title><rect x="848.4" y="371.0" width="57.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="851.4" y="382.0">__tcp_..</text>
</g>
<g>
<title>__ip_queue_xmit (383 samples, 4.63%)</title><rect x="849.3" y="355.0" width="54.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="852.3" y="366.0">__ip_..</text>
</g>
<g>
<title>__sk_dst_check (5 samples, 0.06%)</title><rect x="849.4" y="339.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="852.4" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="849.7" y="323.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="852.7" y="334.0"></text>
</g>
<g>
<title>ip_local_out (71 samples, 0.86%)</title><rect x="850.1" y="339.0" width="10.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="853.1" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (70 samples, 0.85%)</title><rect x="850.3" y="323.0" width="9.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="853.3" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (69 samples, 0.83%)</title><rect x="850.4" y="307.0" width="9.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="853.4" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (24 samples, 0.29%)</title><rect x="850.7" y="291.0" width="3.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="853.7" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (9 samples, 0.11%)</title><rect x="854.2" y="291.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="857.2" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (8 samples, 0.10%)</title><rect x="854.4" y="275.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="857.4" y="286.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (2 samples, 0.02%)</title><rect x="855.5" y="291.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="858.5" y="302.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.02%)</title><rect x="855.8" y="291.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="858.8" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (2 samples, 0.02%)</title><rect x="856.1" y="291.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="859.1" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (2 samples, 0.02%)</title><rect x="856.4" y="291.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="859.4" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (14 samples, 0.17%)</title><rect x="856.7" y="291.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="859.7" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (2 samples, 0.02%)</title><rect x="856.7" y="275.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="859.7" y="286.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (2 samples, 0.02%)</title><rect x="856.9" y="275.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="859.9" y="286.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (4 samples, 0.05%)</title><rect x="857.2" y="275.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="860.2" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (4 samples, 0.05%)</title><rect x="857.8" y="275.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="860.8" y="286.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (2 samples, 0.02%)</title><rect x="858.4" y="275.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="861.4" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (9 samples, 0.11%)</title><rect x="858.7" y="291.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="861.7" y="302.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (3 samples, 0.04%)</title><rect x="858.9" y="275.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="861.9" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (2 samples, 0.02%)</title><rect x="859.4" y="275.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="862.4" y="286.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (2 samples, 0.02%)</title><rect x="859.7" y="275.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="862.7" y="286.0"></text>
</g>
<g>
<title>selinux_ipv4_output (2 samples, 0.02%)</title><rect x="859.9" y="291.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="862.9" y="302.0"></text>
</g>
<g>
<title>netlbl_enabled (2 samples, 0.02%)</title><rect x="859.9" y="275.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="862.9" y="286.0"></text>
</g>
<g>
<title>ip_output (306 samples, 3.70%)</title><rect x="860.2" y="339.0" width="43.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="863.2" y="350.0">ip_o..</text>
</g>
<g>
<title>ip_finish_output2 (276 samples, 3.33%)</title><rect x="860.7" y="323.0" width="39.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="863.7" y="334.0">ip_..</text>
</g>
<g>
<title>__dev_queue_xmit (16 samples, 0.19%)</title><rect x="861.2" y="307.0" width="2.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="864.2" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (12 samples, 0.14%)</title><rect x="861.8" y="291.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="864.8" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (11 samples, 0.13%)</title><rect x="861.9" y="275.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="864.9" y="286.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.04%)</title><rect x="862.1" y="259.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="865.1" y="270.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.08%)</title><rect x="862.5" y="259.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="865.5" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (7 samples, 0.08%)</title><rect x="862.5" y="243.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="865.5" y="254.0"></text>
</g>
<g>
<title>enqueue_to_backlog (4 samples, 0.05%)</title><rect x="862.6" y="227.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="865.6" y="238.0"></text>
</g>
<g>
<title>ktime_get_with_offset (2 samples, 0.02%)</title><rect x="863.2" y="227.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="866.2" y="238.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (256 samples, 3.09%)</title><rect x="863.5" y="307.0" width="36.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="866.5" y="318.0">__l..</text>
</g>
<g>
<title>do_softirq.part.0 (256 samples, 3.09%)</title><rect x="863.5" y="291.0" width="36.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="866.5" y="302.0">do_..</text>
</g>
<g>
<title>do_softirq_own_stack (254 samples, 3.07%)</title><rect x="863.8" y="275.0" width="36.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="866.8" y="286.0">do_..</text>
</g>
<g>
<title>__softirqentry_text_start (254 samples, 3.07%)</title><rect x="863.8" y="259.0" width="36.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="866.8" y="270.0">__s..</text>
</g>
<g>
<title>net_rx_action (247 samples, 2.98%)</title><rect x="864.8" y="243.0" width="35.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="867.8" y="254.0">net..</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.04%)</title><rect x="865.5" y="227.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="868.5" y="238.0"></text>
</g>
<g>
<title>process_backlog (238 samples, 2.87%)</title><rect x="866.1" y="227.0" width="33.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="869.1" y="238.0">pr..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (227 samples, 2.74%)</title><rect x="867.6" y="211.0" width="32.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="870.6" y="222.0">__..</text>
</g>
<g>
<title>__netif_receive_skb_core (2 samples, 0.02%)</title><rect x="867.8" y="195.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="870.8" y="206.0"></text>
</g>
<g>
<title>ip_rcv (224 samples, 2.71%)</title><rect x="868.1" y="195.0" width="31.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="871.1" y="206.0">ip..</text>
</g>
<g>
<title>ip_local_deliver (169 samples, 2.04%)</title><rect x="868.4" y="179.0" width="24.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="871.4" y="190.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (147 samples, 1.78%)</title><rect x="868.4" y="163.0" width="20.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="871.4" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (147 samples, 1.78%)</title><rect x="868.4" y="147.0" width="20.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="871.4" y="158.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.02%)</title><rect x="868.5" y="131.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="871.5" y="142.0"></text>
</g>
<g>
<title>tcp_v4_rcv (144 samples, 1.74%)</title><rect x="868.8" y="131.0" width="20.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="871.8" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (13 samples, 0.16%)</title><rect x="869.8" y="115.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="872.8" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.02%)</title><rect x="871.6" y="115.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="874.6" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (122 samples, 1.47%)</title><rect x="871.9" y="115.0" width="17.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="874.9" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (122 samples, 1.47%)</title><rect x="871.9" y="99.0" width="17.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="874.9" y="110.0"></text>
</g>
<g>
<title>tcp_ack (30 samples, 0.36%)</title><rect x="872.5" y="83.0" width="4.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="875.5" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.05%)</title><rect x="874.2" y="67.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="877.2" y="78.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.04%)</title><rect x="874.2" y="51.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="877.2" y="62.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.02%)</title><rect x="875.0" y="67.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="878.0" y="78.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.02%)</title><rect x="875.6" y="67.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="878.6" y="78.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.02%)</title><rect x="875.9" y="67.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="878.9" y="78.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.04%)</title><rect x="876.2" y="67.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="879.2" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.02%)</title><rect x="876.8" y="83.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="879.8" y="94.0"></text>
</g>
<g>
<title>tcp_data_queue (85 samples, 1.03%)</title><rect x="877.0" y="83.0" width="12.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="880.0" y="94.0"></text>
</g>
<g>
<title>dst_release (4 samples, 0.05%)</title><rect x="877.2" y="67.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="880.2" y="78.0"></text>
</g>
<g>
<title>sock_def_readable (77 samples, 0.93%)</title><rect x="877.9" y="67.0" width="11.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="880.9" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (74 samples, 0.89%)</title><rect x="878.3" y="51.0" width="10.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="881.3" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (73 samples, 0.88%)</title><rect x="878.5" y="35.0" width="10.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="881.5" y="46.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.02%)</title><rect x="888.9" y="67.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="891.9" y="78.0"></text>
</g>
<g>
<title>nf_hook_slow (22 samples, 0.27%)</title><rect x="889.3" y="163.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="892.3" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (21 samples, 0.25%)</title><rect x="889.3" y="147.0" width="3.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="892.3" y="158.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (2 samples, 0.02%)</title><rect x="891.7" y="131.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="894.7" y="142.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (2 samples, 0.02%)</title><rect x="892.0" y="131.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="895.0" y="142.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.04%)</title><rect x="892.4" y="179.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="895.4" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish (3 samples, 0.04%)</title><rect x="892.9" y="179.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="895.9" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.02%)</title><rect x="893.0" y="163.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="896.0" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (47 samples, 0.57%)</title><rect x="893.3" y="179.0" width="6.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="896.3" y="190.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (2 samples, 0.02%)</title><rect x="893.7" y="163.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="896.7" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (35 samples, 0.42%)</title><rect x="894.0" y="163.0" width="5.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="897.0" y="174.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (2 samples, 0.02%)</title><rect x="899.0" y="163.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="902.0" y="174.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (3 samples, 0.04%)</title><rect x="899.3" y="163.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="902.3" y="174.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (2 samples, 0.02%)</title><rect x="899.7" y="163.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="902.7" y="174.0"></text>
</g>
<g>
<title>ip_finish_output (6 samples, 0.07%)</title><rect x="900.0" y="323.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="903.0" y="334.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.02%)</title><rect x="900.6" y="307.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="903.6" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (21 samples, 0.25%)</title><rect x="900.8" y="323.0" width="3.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="903.8" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (6 samples, 0.07%)</title><rect x="900.8" y="307.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="903.8" y="318.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (2 samples, 0.02%)</title><rect x="901.7" y="307.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="904.7" y="318.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (2 samples, 0.02%)</title><rect x="902.0" y="307.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="905.0" y="318.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (4 samples, 0.05%)</title><rect x="902.3" y="307.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="905.3" y="318.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (4 samples, 0.05%)</title><rect x="902.3" y="291.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="905.3" y="302.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (2 samples, 0.02%)</title><rect x="902.8" y="307.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="905.8" y="318.0"></text>
</g>
<g>
<title>selinux_ip_postroute (4 samples, 0.05%)</title><rect x="903.1" y="307.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="906.1" y="318.0"></text>
</g>
<g>
<title>selinux_peerlbl_enabled (2 samples, 0.02%)</title><rect x="903.4" y="291.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="906.4" y="302.0"></text>
</g>
<g>
<title>__skb_clone (5 samples, 0.06%)</title><rect x="903.8" y="355.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="906.8" y="366.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.04%)</title><rect x="904.8" y="355.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="907.8" y="366.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (4 samples, 0.05%)</title><rect x="905.5" y="371.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="908.5" y="382.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.02%)</title><rect x="905.8" y="355.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="908.8" y="366.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.02%)</title><rect x="906.1" y="371.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="909.1" y="382.0"></text>
</g>
<g>
<title>_copy_from_iter_full (6 samples, 0.07%)</title><rect x="906.5" y="403.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="909.5" y="414.0"></text>
</g>
<g>
<title>copyin (3 samples, 0.04%)</title><rect x="906.7" y="387.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="909.7" y="398.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.02%)</title><rect x="907.1" y="387.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="910.1" y="398.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (14 samples, 0.17%)</title><rect x="907.4" y="403.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="910.4" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (13 samples, 0.16%)</title><rect x="907.4" y="387.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="910.4" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (7 samples, 0.08%)</title><rect x="907.5" y="371.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="910.5" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (7 samples, 0.08%)</title><rect x="907.5" y="355.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="910.5" y="366.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.02%)</title><rect x="908.0" y="339.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="911.0" y="350.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.02%)</title><rect x="908.3" y="339.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="911.3" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.05%)</title><rect x="908.5" y="371.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="911.5" y="382.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.04%)</title><rect x="909.4" y="403.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="912.4" y="414.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.10%)</title><rect x="910.1" y="403.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="913.1" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (8 samples, 0.10%)</title><rect x="910.1" y="387.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="913.1" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.05%)</title><rect x="910.7" y="371.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="913.7" y="382.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.04%)</title><rect x="911.4" y="451.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="914.4" y="462.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="911.4" y="435.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="914.4" y="446.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.04%)</title><rect x="911.4" y="419.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="914.4" y="430.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.21%)</title><rect x="912.0" y="531.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="915.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.21%)</title><rect x="912.0" y="515.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="915.0" y="526.0"></text>
</g>
<g>
<title>.annobin_send.c (2 samples, 0.02%)</title><rect x="912.0" y="499.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="915.0" y="510.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 0.16%)</title><rect x="912.2" y="499.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="915.2" y="510.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="912.8" y="483.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="915.8" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.07%)</title><rect x="913.2" y="483.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="916.2" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="913.5" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="916.5" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.02%)</title><rect x="913.8" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.8" y="478.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.02%)</title><rect x="914.7" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="917.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (11 samples, 0.13%)</title><rect x="915.0" y="627.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="918.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="915.1" y="611.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.1" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="915.1" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="918.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.04%)</title><rect x="915.4" y="611.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="918.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="915.5" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="918.5" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="915.8" y="611.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="918.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.04%)</title><rect x="916.1" y="611.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="919.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (980 samples, 11.84%)</title><rect x="916.5" y="627.0" width="139.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="919.5" y="638.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.02%)</title><rect x="916.5" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.02%)</title><rect x="916.5" y="595.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="919.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.02%)</title><rect x="916.5" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="919.5" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.02%)</title><rect x="916.5" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.05%)</title><rect x="916.8" y="611.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.8" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.05%)</title><rect x="916.8" y="595.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="919.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.05%)</title><rect x="916.8" y="579.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.05%)</title><rect x="916.8" y="563.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="919.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.05%)</title><rect x="916.8" y="547.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="919.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (4 samples, 0.05%)</title><rect x="916.8" y="531.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="919.8" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (2 samples, 0.02%)</title><rect x="917.5" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (968 samples, 11.69%)</title><rect x="917.9" y="611.0" width="138.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.9" y="622.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (33 samples, 0.40%)</title><rect x="917.9" y="595.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.9" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (33 samples, 0.40%)</title><rect x="917.9" y="579.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (33 samples, 0.40%)</title><rect x="917.9" y="563.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (33 samples, 0.40%)</title><rect x="917.9" y="547.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (33 samples, 0.40%)</title><rect x="917.9" y="531.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.9" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (27 samples, 0.33%)</title><rect x="918.1" y="515.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.1" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (13 samples, 0.16%)</title><rect x="918.1" y="499.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.1" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (13 samples, 0.16%)</title><rect x="918.1" y="483.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="921.1" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (13 samples, 0.16%)</title><rect x="918.1" y="467.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.1" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.12%)</title><rect x="918.5" y="451.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="921.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.12%)</title><rect x="918.5" y="435.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="921.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (10 samples, 0.12%)</title><rect x="918.5" y="419.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="921.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (10 samples, 0.12%)</title><rect x="918.5" y="403.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (10 samples, 0.12%)</title><rect x="918.5" y="387.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.12%)</title><rect x="918.5" y="371.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (10 samples, 0.12%)</title><rect x="918.5" y="355.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.12%)</title><rect x="918.5" y="339.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (10 samples, 0.12%)</title><rect x="918.5" y="323.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="921.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (10 samples, 0.12%)</title><rect x="918.5" y="307.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.05%)</title><rect x="918.5" y="291.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="921.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="918.7" y="275.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.7" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="918.7" y="259.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="921.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (6 samples, 0.07%)</title><rect x="919.1" y="291.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.07%)</title><rect x="919.1" y="275.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.1" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.06%)</title><rect x="919.2" y="259.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.06%)</title><rect x="919.2" y="243.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="919.4" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="919.4" y="211.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.4" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="919.4" y="195.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="919.4" y="179.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="919.4" y="163.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.4" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.5" y="147.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="922.5" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="919.5" y="131.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.5" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (14 samples, 0.17%)</title><rect x="919.9" y="499.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.9" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (14 samples, 0.17%)</title><rect x="919.9" y="483.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.9" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (14 samples, 0.17%)</title><rect x="919.9" y="467.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.9" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13 samples, 0.16%)</title><rect x="920.1" y="451.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.1" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.16%)</title><rect x="920.1" y="435.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="923.1" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.16%)</title><rect x="920.1" y="419.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="923.1" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8 samples, 0.10%)</title><rect x="920.1" y="403.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.08%)</title><rect x="920.2" y="387.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.08%)</title><rect x="920.2" y="371.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="923.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (7 samples, 0.08%)</title><rect x="920.2" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (4 samples, 0.05%)</title><rect x="920.2" y="339.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="923.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="920.2" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="923.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="920.2" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.2" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.2" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.2" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.2" y="259.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.2" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.2" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (2 samples, 0.02%)</title><rect x="920.8" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="920.8" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="920.8" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.8" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.8" y="275.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.8" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.8" y="243.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="920.8" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (5 samples, 0.06%)</title><rect x="921.2" y="403.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="924.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.05%)</title><rect x="921.4" y="387.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (4 samples, 0.05%)</title><rect x="921.4" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="924.4" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.05%)</title><rect x="921.4" y="355.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="924.4" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (4 samples, 0.05%)</title><rect x="921.4" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="924.4" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.05%)</title><rect x="921.4" y="323.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="924.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (4 samples, 0.05%)</title><rect x="921.4" y="307.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="924.4" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.05%)</title><rect x="921.4" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="924.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.05%)</title><rect x="921.4" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="924.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.05%)</title><rect x="921.4" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.4" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="921.5" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="924.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$64/1828395560.apply (4 samples, 0.05%)</title><rect x="922.1" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="925.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.05%)</title><rect x="922.1" y="499.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="925.1" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="922.2" y="483.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="922.2" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="925.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="922.4" y="451.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="925.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="922.4" y="435.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="925.4" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (8 samples, 0.10%)</title><rect x="922.6" y="595.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="925.6" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 0.02%)</title><rect x="922.6" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="925.6" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 0.07%)</title><rect x="922.9" y="579.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="925.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$68/1913378084.apply (6 samples, 0.07%)</title><rect x="922.9" y="563.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="925.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (4 samples, 0.05%)</title><rect x="923.2" y="547.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="923.4" y="531.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.4" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="923.4" y="515.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.4" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="923.4" y="499.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.4" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="923.4" y="483.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="926.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="923.4" y="467.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="926.4" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="923.4" y="451.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="923.4" y="435.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="923.4" y="419.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (8 samples, 0.10%)</title><rect x="923.8" y="595.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.8" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.10%)</title><rect x="923.8" y="579.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="924.2" y="563.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (918 samples, 11.09%)</title><rect x="925.1" y="595.0" width="130.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="928.1" y="606.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (918 samples, 11.09%)</title><rect x="925.1" y="579.0" width="130.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.1" y="590.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (762 samples, 9.20%)</title><rect x="925.2" y="563.0" width="108.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="928.2" y="574.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.11%)</title><rect x="925.8" y="547.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.8" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="926.2" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="929.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.02%)</title><rect x="926.6" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="929.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (36 samples, 0.43%)</title><rect x="927.2" y="547.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="930.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (36 samples, 0.43%)</title><rect x="927.2" y="531.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="930.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.descend (32 samples, 0.39%)</title><rect x="927.5" y="515.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="930.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (29 samples, 0.35%)</title><rect x="927.9" y="499.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="930.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.07%)</title><rect x="928.8" y="483.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="931.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="929.2" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="929.2" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="932.2" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.02%)</title><rect x="929.2" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="932.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (17 samples, 0.21%)</title><rect x="929.6" y="483.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="932.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (10 samples, 0.12%)</title><rect x="930.6" y="467.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="933.6" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (6 samples, 0.07%)</title><rect x="930.9" y="451.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="933.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="931.8" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="934.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="931.8" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (4 samples, 0.05%)</title><rect x="932.3" y="547.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="935.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (4 samples, 0.05%)</title><rect x="932.3" y="531.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="935.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (4 samples, 0.05%)</title><rect x="932.3" y="515.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="935.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (3 samples, 0.04%)</title><rect x="932.3" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="935.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (3 samples, 0.04%)</title><rect x="932.3" y="483.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.descendingMap (3 samples, 0.04%)</title><rect x="932.9" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="935.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.descendingMap (2 samples, 0.02%)</title><rect x="933.1" y="531.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="936.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (90 samples, 1.09%)</title><rect x="933.5" y="547.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="936.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (4 samples, 0.05%)</title><rect x="934.2" y="531.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="937.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (4 samples, 0.05%)</title><rect x="934.2" y="515.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (4 samples, 0.05%)</title><rect x="934.2" y="499.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="937.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (3 samples, 0.04%)</title><rect x="934.3" y="483.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="937.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (3 samples, 0.04%)</title><rect x="934.3" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="937.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (3 samples, 0.04%)</title><rect x="934.9" y="531.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="937.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.combineTables (57 samples, 0.69%)</title><rect x="935.3" y="531.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="938.3" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.02%)</title><rect x="935.8" y="515.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="938.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (44 samples, 0.53%)</title><rect x="936.3" y="515.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (40 samples, 0.48%)</title><rect x="936.5" y="499.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (39 samples, 0.47%)</title><rect x="936.6" y="483.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="939.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (39 samples, 0.47%)</title><rect x="936.6" y="467.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="939.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (5 samples, 0.06%)</title><rect x="936.6" y="451.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="939.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (4 samples, 0.05%)</title><rect x="936.8" y="435.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="939.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.02%)</title><rect x="937.0" y="419.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="937.0" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="940.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (34 samples, 0.41%)</title><rect x="937.3" y="451.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="940.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (34 samples, 0.41%)</title><rect x="937.3" y="435.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="940.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.04%)</title><rect x="937.5" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="940.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="937.5" y="403.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="940.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="937.5" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="940.5" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="937.5" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="940.5" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="937.5" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="940.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (30 samples, 0.36%)</title><rect x="937.9" y="419.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="940.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (20 samples, 0.24%)</title><rect x="939.3" y="403.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="942.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (5 samples, 0.06%)</title><rect x="939.6" y="387.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.16%)</title><rect x="940.3" y="387.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.16%)</title><rect x="940.3" y="371.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="943.3" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.12%)</title><rect x="940.6" y="355.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.02%)</title><rect x="941.3" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="944.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="941.6" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="944.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.04%)</title><rect x="942.2" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="945.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.02%)</title><rect x="942.3" y="483.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="945.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.02%)</title><rect x="942.3" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="945.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (2 samples, 0.02%)</title><rect x="942.3" y="451.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="945.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.iterator (6 samples, 0.07%)</title><rect x="942.6" y="515.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="945.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (4 samples, 0.05%)</title><rect x="942.9" y="499.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="945.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 0.02%)</title><rect x="943.2" y="483.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="946.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (20 samples, 0.24%)</title><rect x="943.5" y="531.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="946.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (10 samples, 0.12%)</title><rect x="943.6" y="515.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="946.6" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (10 samples, 0.12%)</title><rect x="943.6" y="499.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.6" y="510.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.06%)</title><rect x="944.0" y="483.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="947.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (9 samples, 0.11%)</title><rect x="945.0" y="515.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="948.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (9 samples, 0.11%)</title><rect x="945.0" y="499.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.0" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.05%)</title><rect x="945.3" y="483.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="948.3" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.05%)</title><rect x="945.3" y="467.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="948.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (4 samples, 0.05%)</title><rect x="945.3" y="451.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="948.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.05%)</title><rect x="945.3" y="435.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="948.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.04%)</title><rect x="945.9" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="948.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (614 samples, 7.42%)</title><rect x="946.3" y="547.0" width="87.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="949.3" y="558.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (613 samples, 7.40%)</title><rect x="946.4" y="531.0" width="87.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.4" y="542.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (613 samples, 7.40%)</title><rect x="946.4" y="515.0" width="87.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="949.4" y="526.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.14%)</title><rect x="946.9" y="499.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="949.9" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.13%)</title><rect x="946.9" y="483.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="949.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.06%)</title><rect x="947.7" y="467.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="950.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.04%)</title><rect x="948.0" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="951.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (104 samples, 1.26%)</title><rect x="948.6" y="499.0" width="14.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (20 samples, 0.24%)</title><rect x="948.7" y="483.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="951.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (6 samples, 0.07%)</title><rect x="949.7" y="467.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="952.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (7 samples, 0.08%)</title><rect x="950.6" y="467.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="953.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (3 samples, 0.04%)</title><rect x="951.1" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="954.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (3 samples, 0.04%)</title><rect x="951.1" y="435.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="954.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (45 samples, 0.54%)</title><rect x="951.6" y="483.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="954.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (44 samples, 0.53%)</title><rect x="951.7" y="467.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="954.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (44 samples, 0.53%)</title><rect x="951.7" y="451.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="954.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (44 samples, 0.53%)</title><rect x="951.7" y="435.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="954.7" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (43 samples, 0.52%)</title><rect x="951.9" y="419.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="954.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (43 samples, 0.52%)</title><rect x="951.9" y="403.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="954.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (43 samples, 0.52%)</title><rect x="951.9" y="387.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="954.9" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (41 samples, 0.50%)</title><rect x="952.1" y="371.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="955.1" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.13%)</title><rect x="952.1" y="355.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="952.3" y="339.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.12%)</title><rect x="952.3" y="323.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="955.3" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.12%)</title><rect x="952.3" y="307.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="955.3" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.36%)</title><rect x="953.7" y="355.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.7" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.11%)</title><rect x="955.7" y="339.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="958.7" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.08%)</title><rect x="957.0" y="339.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="960.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.07%)</title><rect x="957.1" y="323.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="960.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.07%)</title><rect x="957.1" y="307.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="960.1" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (29 samples, 0.35%)</title><rect x="958.0" y="483.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="961.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (29 samples, 0.35%)</title><rect x="958.0" y="467.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="961.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (29 samples, 0.35%)</title><rect x="958.0" y="451.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.0" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (29 samples, 0.35%)</title><rect x="958.0" y="435.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="961.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (29 samples, 0.35%)</title><rect x="958.0" y="419.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="961.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (29 samples, 0.35%)</title><rect x="958.0" y="403.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="961.0" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (29 samples, 0.35%)</title><rect x="958.0" y="387.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="961.0" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.14%)</title><rect x="958.0" y="371.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="961.0" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.14%)</title><rect x="958.0" y="355.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="961.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.12%)</title><rect x="958.3" y="339.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="961.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.12%)</title><rect x="958.3" y="323.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="961.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.21%)</title><rect x="959.7" y="371.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="962.7" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.21%)</title><rect x="959.7" y="355.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="962.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="960.6" y="339.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="963.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.06%)</title><rect x="961.4" y="339.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="964.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.05%)</title><rect x="961.6" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="964.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.11%)</title><rect x="962.1" y="483.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="965.1" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.11%)</title><rect x="962.1" y="467.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.11%)</title><rect x="962.1" y="451.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="965.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.08%)</title><rect x="962.4" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="965.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (494 samples, 5.97%)</title><rect x="963.4" y="499.0" width="70.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="966.4" y="510.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (312 samples, 3.77%)</title><rect x="974.5" y="483.0" width="44.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="977.5" y="494.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (311 samples, 3.76%)</title><rect x="974.7" y="467.0" width="44.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.7" y="478.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.04%)</title><rect x="977.5" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="980.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (288 samples, 3.48%)</title><rect x="977.9" y="451.0" width="41.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="980.9" y="462.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (288 samples, 3.48%)</title><rect x="977.9" y="435.0" width="41.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="980.9" y="446.0">jav..</text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.02%)</title><rect x="1003.6" y="419.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1006.6" y="430.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="1003.6" y="403.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1006.6" y="414.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.02%)</title><rect x="1003.6" y="387.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1006.6" y="398.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="1003.6" y="371.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1006.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.08%)</title><rect x="1003.9" y="419.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1006.9" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (91 samples, 1.10%)</title><rect x="1004.9" y="419.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1007.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (68 samples, 0.82%)</title><rect x="1006.4" y="403.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1009.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (62 samples, 0.75%)</title><rect x="1007.3" y="387.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1010.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (58 samples, 0.70%)</title><rect x="1007.9" y="371.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1010.9" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="1012.4" y="355.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1015.4" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.10%)</title><rect x="1012.7" y="339.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1015.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.10%)</title><rect x="1012.7" y="323.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1015.7" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.10%)</title><rect x="1012.7" y="307.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1015.7" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (16 samples, 0.19%)</title><rect x="1013.9" y="355.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1016.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="1014.6" y="339.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1017.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.08%)</title><rect x="1015.1" y="339.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1018.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.08%)</title><rect x="1015.1" y="323.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.07%)</title><rect x="1015.3" y="307.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1018.3" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.14%)</title><rect x="1016.1" y="403.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1019.1" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.10%)</title><rect x="1017.8" y="419.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1020.8" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (58 samples, 0.70%)</title><rect x="1019.0" y="483.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (53 samples, 0.64%)</title><rect x="1019.7" y="467.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1022.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (52 samples, 0.63%)</title><rect x="1019.8" y="451.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1022.8" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (43 samples, 0.52%)</title><rect x="1021.1" y="435.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1024.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (42 samples, 0.51%)</title><rect x="1021.3" y="419.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (41 samples, 0.50%)</title><rect x="1021.4" y="403.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1024.4" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (39 samples, 0.47%)</title><rect x="1021.7" y="387.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1024.7" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.12%)</title><rect x="1022.1" y="371.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1025.1" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.11%)</title><rect x="1022.3" y="355.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1025.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.11%)</title><rect x="1022.3" y="339.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1025.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.11%)</title><rect x="1022.3" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.3" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.31%)</title><rect x="1023.5" y="371.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.31%)</title><rect x="1023.5" y="355.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (15 samples, 0.18%)</title><rect x="1025.1" y="339.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1028.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (46 samples, 0.56%)</title><rect x="1027.3" y="483.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1030.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.reachabilityFence (15 samples, 0.18%)</title><rect x="1029.0" y="467.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1032.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (13 samples, 0.16%)</title><rect x="1029.2" y="451.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.2" y="462.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (3 samples, 0.04%)</title><rect x="1031.1" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1034.1" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (12 samples, 0.14%)</title><rect x="1031.5" y="467.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (4 samples, 0.05%)</title><rect x="1033.2" y="467.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1036.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table.transformRows (155 samples, 1.87%)</title><rect x="1033.8" y="563.0" width="22.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.8" y="574.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (126 samples, 1.52%)</title><rect x="1033.8" y="547.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.8" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (126 samples, 1.52%)</title><rect x="1033.8" y="531.0" width="18.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1036.8" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (14 samples, 0.17%)</title><rect x="1035.2" y="515.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1038.2" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (11 samples, 0.13%)</title><rect x="1035.7" y="499.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1038.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (8 samples, 0.10%)</title><rect x="1036.1" y="483.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (8 samples, 0.10%)</title><rect x="1036.1" y="467.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$64/1828395560.apply (4 samples, 0.05%)</title><rect x="1036.7" y="451.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1039.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.05%)</title><rect x="1036.7" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1039.7" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="1036.9" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1039.9" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="1036.9" y="403.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1039.9" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1036.9" y="387.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1036.9" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1039.9" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1036.9" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.9" y="366.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="1037.2" y="515.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1040.2" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1037.5" y="515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.5" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (94 samples, 1.14%)</title><rect x="1037.8" y="515.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1040.8" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (94 samples, 1.14%)</title><rect x="1037.8" y="499.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1040.8" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.02%)</title><rect x="1037.8" y="483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1040.8" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (92 samples, 1.11%)</title><rect x="1038.1" y="483.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1041.1" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (90 samples, 1.09%)</title><rect x="1038.4" y="467.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1041.4" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (89 samples, 1.07%)</title><rect x="1038.5" y="451.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1041.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (88 samples, 1.06%)</title><rect x="1038.7" y="435.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1041.7" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (48 samples, 0.58%)</title><rect x="1038.7" y="419.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1041.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (4 samples, 0.05%)</title><rect x="1038.9" y="403.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1041.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (2 samples, 0.02%)</title><rect x="1039.2" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1042.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (42 samples, 0.51%)</title><rect x="1039.5" y="403.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1042.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (42 samples, 0.51%)</title><rect x="1039.5" y="387.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1042.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (2 samples, 0.02%)</title><rect x="1039.5" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1042.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (40 samples, 0.48%)</title><rect x="1039.8" y="371.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (24 samples, 0.29%)</title><rect x="1039.8" y="355.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1042.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (17 samples, 0.21%)</title><rect x="1039.8" y="339.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (17 samples, 0.21%)</title><rect x="1039.8" y="323.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1042.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (16 samples, 0.19%)</title><rect x="1039.9" y="307.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (16 samples, 0.19%)</title><rect x="1039.9" y="291.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.9" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (12 samples, 0.14%)</title><rect x="1040.5" y="275.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.13%)</title><rect x="1040.6" y="259.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1043.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.13%)</title><rect x="1040.6" y="243.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1043.6" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="1041.1" y="227.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1044.1" y="238.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.06%)</title><rect x="1041.4" y="211.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1044.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.04%)</title><rect x="1042.2" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1045.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1042.2" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1045.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1042.2" y="307.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1045.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1042.2" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1045.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1042.2" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1045.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1042.2" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1045.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1042.2" y="243.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1045.2" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="1042.4" y="227.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1045.4" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="1042.6" y="339.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1045.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.05%)</title><rect x="1042.6" y="323.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="1042.6" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1045.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.05%)</title><rect x="1042.6" y="291.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1045.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (7 samples, 0.08%)</title><rect x="1043.2" y="355.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1046.2" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="1043.2" y="339.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1046.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.05%)</title><rect x="1043.2" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1046.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1043.2" y="307.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1046.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1043.2" y="291.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1046.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1043.4" y="275.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1046.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1043.4" y="259.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1046.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1043.4" y="243.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.4" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1043.4" y="227.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1046.4" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="1043.5" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1046.5" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="1043.5" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1046.5" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="1043.8" y="339.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1046.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1043.8" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1046.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1043.8" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1046.8" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1043.8" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1046.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1043.8" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1046.8" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1043.8" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1046.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1043.8" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1046.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.05%)</title><rect x="1044.2" y="355.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1047.2" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="1044.2" y="339.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="1044.4" y="323.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1047.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1044.5" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1047.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1044.5" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.5" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1044.5" y="275.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1047.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1044.5" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1047.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1044.5" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (5 samples, 0.06%)</title><rect x="1044.8" y="355.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1047.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="1044.9" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1047.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="1044.9" y="323.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1047.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1044.9" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1047.9" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1044.9" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.9" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1044.9" y="275.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1047.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1044.9" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1044.9" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.9" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1044.9" y="227.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.9" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="1044.9" y="211.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (40 samples, 0.48%)</title><rect x="1045.5" y="419.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1048.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (40 samples, 0.48%)</title><rect x="1045.5" y="403.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1048.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (40 samples, 0.48%)</title><rect x="1045.5" y="387.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1048.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (40 samples, 0.48%)</title><rect x="1045.5" y="371.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1048.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (40 samples, 0.48%)</title><rect x="1045.5" y="355.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1048.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (40 samples, 0.48%)</title><rect x="1045.5" y="339.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1048.5" y="350.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.05%)</title><rect x="1045.5" y="323.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1048.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (35 samples, 0.42%)</title><rect x="1046.2" y="323.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1049.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (35 samples, 0.42%)</title><rect x="1046.2" y="307.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1049.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.21%)</title><rect x="1046.3" y="291.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (16 samples, 0.19%)</title><rect x="1046.5" y="275.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1049.5" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.12%)</title><rect x="1047.1" y="259.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1050.1" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="1047.2" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1050.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="1047.6" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1050.6" y="254.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.05%)</title><rect x="1047.9" y="243.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1050.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="1048.5" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1051.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.02%)</title><rect x="1048.5" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1051.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (17 samples, 0.21%)</title><rect x="1048.8" y="291.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1051.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (14 samples, 0.17%)</title><rect x="1049.2" y="275.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1052.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (13 samples, 0.16%)</title><rect x="1049.2" y="259.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (13 samples, 0.16%)</title><rect x="1049.2" y="243.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1052.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (13 samples, 0.16%)</title><rect x="1049.2" y="227.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1052.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (13 samples, 0.16%)</title><rect x="1049.2" y="211.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1052.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (13 samples, 0.16%)</title><rect x="1049.2" y="195.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1052.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.16%)</title><rect x="1049.2" y="179.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.16%)</title><rect x="1049.2" y="163.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.2" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1050.1" y="147.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1053.1" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.04%)</title><rect x="1050.1" y="131.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1053.1" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="1050.2" y="115.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1053.2" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="1050.2" y="99.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1053.2" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.02%)</title><rect x="1050.2" y="83.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.2" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.04%)</title><rect x="1050.5" y="131.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (4 samples, 0.05%)</title><rect x="1051.2" y="515.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1054.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (29 samples, 0.35%)</title><rect x="1051.8" y="547.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1054.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (29 samples, 0.35%)</title><rect x="1051.8" y="531.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1054.8" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (29 samples, 0.35%)</title><rect x="1051.8" y="515.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1054.8" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (10 samples, 0.12%)</title><rect x="1052.0" y="499.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1055.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (10 samples, 0.12%)</title><rect x="1052.0" y="483.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1055.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (7 samples, 0.08%)</title><rect x="1052.5" y="467.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1055.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.07%)</title><rect x="1052.6" y="451.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.07%)</title><rect x="1052.6" y="435.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (6 samples, 0.07%)</title><rect x="1052.6" y="419.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (6 samples, 0.07%)</title><rect x="1052.6" y="403.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.6" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (6 samples, 0.07%)</title><rect x="1052.6" y="387.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.6" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="1052.6" y="371.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.6" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (6 samples, 0.07%)</title><rect x="1052.6" y="355.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1055.6" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="1052.6" y="339.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.6" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (6 samples, 0.07%)</title><rect x="1052.6" y="323.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.6" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (6 samples, 0.07%)</title><rect x="1052.6" y="307.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1055.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="1052.6" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1055.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="1052.6" y="275.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1055.6" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="1052.6" y="259.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (3 samples, 0.04%)</title><rect x="1053.0" y="291.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1056.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.04%)</title><rect x="1053.0" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1056.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="1053.0" y="259.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1056.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="1053.0" y="243.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1053.2" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1056.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1053.2" y="211.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1056.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1053.2" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1056.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1053.2" y="179.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1056.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1053.2" y="163.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1056.2" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1053.2" y="147.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1056.2" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="1053.2" y="131.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1056.2" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (17 samples, 0.21%)</title><rect x="1053.5" y="499.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1056.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (17 samples, 0.21%)</title><rect x="1053.5" y="483.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1056.5" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (17 samples, 0.21%)</title><rect x="1053.5" y="467.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1056.5" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (17 samples, 0.21%)</title><rect x="1053.5" y="451.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1056.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.21%)</title><rect x="1053.5" y="435.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1056.5" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.21%)</title><rect x="1053.5" y="419.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1056.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (11 samples, 0.13%)</title><rect x="1053.5" y="403.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1056.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (9 samples, 0.11%)</title><rect x="1053.8" y="387.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1056.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (9 samples, 0.11%)</title><rect x="1053.8" y="371.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1056.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (9 samples, 0.11%)</title><rect x="1053.8" y="355.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1056.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.02%)</title><rect x="1053.8" y="339.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1056.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.04%)</title><rect x="1054.0" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1057.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.05%)</title><rect x="1054.5" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="1054.5" y="323.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.05%)</title><rect x="1054.5" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1057.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1054.6" y="291.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1057.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1054.6" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1057.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1054.6" y="259.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1057.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1054.6" y="243.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1057.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1054.8" y="227.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1057.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1054.8" y="211.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Table$$Lambda$59/861166783.compare (6 samples, 0.07%)</title><rect x="1055.0" y="403.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1058.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (6 samples, 0.07%)</title><rect x="1055.0" y="387.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1058.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (6 samples, 0.07%)</title><rect x="1055.0" y="371.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1058.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="1055.0" y="355.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$57/2084387382.compare (6 samples, 0.07%)</title><rect x="1055.0" y="339.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="1055.0" y="323.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1058.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$55/1876822348.compare (5 samples, 0.06%)</title><rect x="1055.2" y="307.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1058.2" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.06%)</title><rect x="1055.2" y="291.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1058.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="1055.2" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1058.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="1055.2" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1058.2" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="1055.2" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1058.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$54/1809940712.apply (3 samples, 0.04%)</title><rect x="1055.5" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1058.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.04%)</title><rect x="1055.5" y="259.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1058.5" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.04%)</title><rect x="1055.5" y="243.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.5" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="1055.5" y="227.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1055.5" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1055.5" y="195.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1058.5" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1055.6" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1055.6" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1055.6" y="147.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1058.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (2 samples, 0.02%)</title><rect x="1055.9" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1058.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTablePool.upsert (2 samples, 0.02%)</title><rect x="1055.9" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.05%)</title><rect x="1056.2" y="643.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.05%)</title><rect x="1056.2" y="627.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.04%)</title><rect x="1056.3" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.04%)</title><rect x="1056.3" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1059.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.04%)</title><rect x="1056.3" y="579.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.3" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="1056.5" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1059.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.07%)</title><rect x="1056.9" y="643.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1059.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.06%)</title><rect x="1056.9" y="627.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.9" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title><rect x="1057.0" y="611.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1060.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1057.2" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1060.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.12%)</title><rect x="1057.7" y="675.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1060.7" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.07%)</title><rect x="1057.9" y="659.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1060.9" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.07%)</title><rect x="1057.9" y="643.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1060.9" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.04%)</title><rect x="1058.7" y="659.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.13%)</title><rect x="1059.3" y="675.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1062.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="1060.5" y="659.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1063.5" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="1060.5" y="643.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1063.5" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="1061.0" y="675.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.0" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="1061.0" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (103 samples, 1.24%)</title><rect x="1061.3" y="691.0" width="14.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1064.3" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (103 samples, 1.24%)</title><rect x="1061.3" y="675.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1064.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.17%)</title><rect x="1061.9" y="659.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1064.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.17%)</title><rect x="1061.9" y="643.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1064.9" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (10 samples, 0.12%)</title><rect x="1061.9" y="627.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1064.9" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.07%)</title><rect x="1062.5" y="611.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1065.5" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.02%)</title><rect x="1063.0" y="595.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.0" y="606.0"></text>
</g>
<g>
<title>__libc_recv (2 samples, 0.02%)</title><rect x="1063.3" y="627.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1066.3" y="638.0"></text>
</g>
<g>
<title>__libc_recv (82 samples, 0.99%)</title><rect x="1063.9" y="659.0" width="11.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1066.9" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (61 samples, 0.74%)</title><rect x="1066.9" y="643.0" width="8.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1069.9" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (61 samples, 0.74%)</title><rect x="1066.9" y="627.0" width="8.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1069.9" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (57 samples, 0.69%)</title><rect x="1067.4" y="611.0" width="8.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1070.4" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (56 samples, 0.68%)</title><rect x="1067.6" y="595.0" width="8.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1070.6" y="606.0"></text>
</g>
<g>
<title>inet_recvmsg (40 samples, 0.48%)</title><rect x="1068.2" y="579.0" width="5.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1071.2" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (39 samples, 0.47%)</title><rect x="1068.3" y="563.0" width="5.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1071.3" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.04%)</title><rect x="1069.6" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1072.6" y="558.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.02%)</title><rect x="1069.6" y="531.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1072.6" y="542.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.02%)</title><rect x="1069.6" y="515.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1072.6" y="526.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.02%)</title><rect x="1069.6" y="499.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1072.6" y="510.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.02%)</title><rect x="1070.1" y="547.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1073.1" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.04%)</title><rect x="1070.4" y="547.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1073.4" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.02%)</title><rect x="1070.6" y="531.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1073.6" y="542.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.05%)</title><rect x="1071.0" y="547.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1074.0" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.05%)</title><rect x="1071.0" y="531.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1074.0" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (12 samples, 0.14%)</title><rect x="1071.6" y="547.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1074.6" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (12 samples, 0.14%)</title><rect x="1071.6" y="531.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1074.6" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.04%)</title><rect x="1071.6" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1074.6" y="526.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.04%)</title><rect x="1071.6" y="499.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1074.6" y="510.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (3 samples, 0.04%)</title><rect x="1071.6" y="483.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1074.6" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (9 samples, 0.11%)</title><rect x="1072.0" y="515.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1075.0" y="526.0"></text>
</g>
<g>
<title>__check_object_size (8 samples, 0.10%)</title><rect x="1072.1" y="499.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1075.1" y="510.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.02%)</title><rect x="1072.3" y="483.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1075.3" y="494.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.05%)</title><rect x="1072.6" y="483.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1075.6" y="494.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.02%)</title><rect x="1073.3" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1076.3" y="558.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (2 samples, 0.02%)</title><rect x="1073.6" y="547.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1076.6" y="558.0"></text>
</g>
<g>
<title>sock_recvmsg (6 samples, 0.07%)</title><rect x="1073.9" y="579.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1076.9" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.06%)</title><rect x="1074.0" y="563.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1077.0" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (5 samples, 0.06%)</title><rect x="1074.0" y="547.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1077.0" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (6 samples, 0.07%)</title><rect x="1074.7" y="579.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1077.7" y="590.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.07%)</title><rect x="1074.7" y="563.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1077.7" y="574.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.05%)</title><rect x="1075.0" y="547.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1078.0" y="558.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.04%)</title><rect x="1075.6" y="659.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1078.6" y="670.0"></text>
</g>
<g>
<title>[tid=13253] (149 samples, 1.80%)</title><rect x="1076.0" y="755.0" width="21.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1079.0" y="766.0">[..</text>
</g>
<g>
<title>start_thread (148 samples, 1.79%)</title><rect x="1076.1" y="739.0" width="21.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1079.1" y="750.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (148 samples, 1.79%)</title><rect x="1076.1" y="723.0" width="21.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1079.1" y="734.0">t..</text>
</g>
<g>
<title>GangWorker::loop() (148 samples, 1.79%)</title><rect x="1076.1" y="707.0" width="21.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.1" y="718.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (145 samples, 1.75%)</title><rect x="1076.3" y="691.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.3" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (133 samples, 1.61%)</title><rect x="1076.3" y="675.0" width="18.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.3" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.02%)</title><rect x="1076.3" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.3" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (6 samples, 0.07%)</title><rect x="1076.6" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.6" y="670.0"></text>
</g>
<g>
<title>SpinPause (125 samples, 1.51%)</title><rect x="1077.4" y="659.0" width="17.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1080.4" y="670.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.04%)</title><rect x="1095.4" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.4" y="686.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.04%)</title><rect x="1095.4" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.4" y="670.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.04%)</title><rect x="1095.4" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.4" y="654.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (3 samples, 0.04%)</title><rect x="1095.4" y="627.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.4" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (7 samples, 0.08%)</title><rect x="1095.8" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.8" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.06%)</title><rect x="1095.8" y="659.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.8" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (5 samples, 0.06%)</title><rect x="1095.8" y="643.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.8" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (5 samples, 0.06%)</title><rect x="1095.8" y="627.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.8" y="638.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.02%)</title><rect x="1095.8" y="611.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.8" y="622.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.02%)</title><rect x="1095.8" y="595.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.8" y="606.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.02%)</title><rect x="1096.5" y="659.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.5" y="670.0"></text>
</g>
<g>
<title>[tid=13258] (64 samples, 0.77%)</title><rect x="1097.4" y="755.0" width="9.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1100.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.16%)</title><rect x="1097.4" y="739.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1100.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="1097.4" y="723.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1100.4" y="734.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (3 samples, 0.04%)</title><rect x="1097.5" y="707.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1100.5" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1097.7" y="691.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1100.7" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1097.7" y="675.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1100.7" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.02%)</title><rect x="1098.1" y="723.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1101.1" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1098.1" y="707.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1101.1" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1098.1" y="691.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1101.1" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1098.1" y="675.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1101.1" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1098.1" y="659.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1101.1" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.02%)</title><rect x="1098.1" y="643.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1101.1" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.02%)</title><rect x="1098.1" y="627.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1101.1" y="638.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.02%)</title><rect x="1098.1" y="611.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1101.1" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="1098.1" y="595.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1101.1" y="606.0"></text>
</g>
<g>
<title>__vsnprintf_internal (4 samples, 0.05%)</title><rect x="1098.4" y="723.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1101.4" y="734.0"></text>
</g>
<g>
<title>__strchrnul_avx2 (2 samples, 0.02%)</title><rect x="1098.4" y="707.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1101.4" y="718.0"></text>
</g>
<g>
<title>__vfprintf_internal (2 samples, 0.02%)</title><rect x="1098.6" y="707.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1101.6" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.04%)</title><rect x="1099.4" y="739.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1102.4" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="1099.4" y="723.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1102.4" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="1099.4" y="707.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1102.4" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.04%)</title><rect x="1099.4" y="691.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1102.4" y="702.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.04%)</title><rect x="1099.4" y="675.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1102.4" y="686.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.04%)</title><rect x="1099.4" y="659.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1102.4" y="670.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.04%)</title><rect x="1099.4" y="643.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1102.4" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.04%)</title><rect x="1099.4" y="627.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1102.4" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.04%)</title><rect x="1099.4" y="611.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1102.4" y="622.0"></text>
</g>
<g>
<title>start_thread (47 samples, 0.57%)</title><rect x="1099.8" y="739.0" width="6.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1102.8" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (47 samples, 0.57%)</title><rect x="1099.8" y="723.0" width="6.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1102.8" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (47 samples, 0.57%)</title><rect x="1099.8" y="707.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.8" y="718.0"></text>
</g>
<g>
<title>VMThread::loop() (47 samples, 0.57%)</title><rect x="1099.8" y="691.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.8" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (9 samples, 0.11%)</title><rect x="1100.2" y="675.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.2" y="686.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.02%)</title><rect x="1101.1" y="659.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.1" y="670.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.02%)</title><rect x="1101.1" y="643.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.1" y="654.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.02%)</title><rect x="1101.1" y="627.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.1" y="638.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="1101.1" y="611.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1104.1" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1101.1" y="595.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1104.1" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1101.1" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1104.1" y="590.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.04%)</title><rect x="1101.5" y="675.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1104.5" y="686.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (22 samples, 0.27%)</title><rect x="1101.9" y="675.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.9" y="686.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (22 samples, 0.27%)</title><rect x="1101.9" y="659.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.9" y="670.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (22 samples, 0.27%)</title><rect x="1101.9" y="643.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.9" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (22 samples, 0.27%)</title><rect x="1101.9" y="627.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (2 samples, 0.02%)</title><rect x="1102.4" y="611.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.4" y="622.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.02%)</title><rect x="1102.4" y="595.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.4" y="606.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.02%)</title><rect x="1102.4" y="579.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.4" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (2 samples, 0.02%)</title><rect x="1102.6" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.6" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (6 samples, 0.07%)</title><rect x="1103.1" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.1" y="622.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (3 samples, 0.04%)</title><rect x="1103.5" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.5" y="606.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (2 samples, 0.02%)</title><rect x="1103.6" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.6" y="590.0"></text>
</g>
<g>
<title>G1CollectionSet::finalize_old_part(double) (2 samples, 0.02%)</title><rect x="1104.2" y="611.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.2" y="622.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.02%)</title><rect x="1104.8" y="611.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1107.8" y="622.0"></text>
</g>
<g>
<title>__GI_sched_yield (9 samples, 0.11%)</title><rect x="1105.2" y="675.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1108.2" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="1105.6" y="659.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1108.6" y="670.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.07%)</title><rect x="1105.6" y="643.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1108.6" y="654.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (5 samples, 0.06%)</title><rect x="1105.8" y="627.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1108.8" y="638.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.06%)</title><rect x="1105.8" y="611.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1108.8" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.06%)</title><rect x="1105.8" y="595.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1108.8" y="606.0"></text>
</g>
<g>
<title>[tid=13262] (125 samples, 1.51%)</title><rect x="1106.5" y="755.0" width="17.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1109.5" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.02%)</title><rect x="1106.6" y="739.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1109.6" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1106.6" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1109.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1106.6" y="707.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1109.6" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1106.6" y="691.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1109.6" y="702.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1106.6" y="675.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1109.6" y="686.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.02%)</title><rect x="1106.6" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1109.6" y="670.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.02%)</title><rect x="1106.6" y="643.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1109.6" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.02%)</title><rect x="1106.6" y="627.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1109.6" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="1106.6" y="611.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1109.6" y="622.0"></text>
</g>
<g>
<title>start_thread (122 samples, 1.47%)</title><rect x="1106.9" y="739.0" width="17.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1109.9" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (122 samples, 1.47%)</title><rect x="1106.9" y="723.0" width="17.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1109.9" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (122 samples, 1.47%)</title><rect x="1106.9" y="707.0" width="17.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.9" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (122 samples, 1.47%)</title><rect x="1106.9" y="691.0" width="17.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.9" y="702.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (122 samples, 1.47%)</title><rect x="1106.9" y="675.0" width="17.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.9" y="686.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (122 samples, 1.47%)</title><rect x="1106.9" y="659.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.9" y="670.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (122 samples, 1.47%)</title><rect x="1106.9" y="643.0" width="17.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.9" y="654.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (122 samples, 1.47%)</title><rect x="1106.9" y="627.0" width="17.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.9" y="638.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (74 samples, 0.89%)</title><rect x="1106.9" y="611.0" width="10.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.9" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.07%)</title><rect x="1107.3" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.3" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.07%)</title><rect x="1107.3" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.3" y="590.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.02%)</title><rect x="1107.5" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.5" y="574.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.02%)</title><rect x="1107.8" y="563.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.10%)</title><rect x="1108.3" y="595.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.3" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.10%)</title><rect x="1108.3" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.3" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (5 samples, 0.06%)</title><rect x="1108.6" y="563.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.6" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (2 samples, 0.02%)</title><rect x="1108.8" y="547.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (56 samples, 0.68%)</title><rect x="1109.5" y="595.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.02%)</title><rect x="1109.6" y="579.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.07%)</title><rect x="1110.1" y="579.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.02%)</title><rect x="1110.6" y="563.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (2 samples, 0.02%)</title><rect x="1110.6" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (15 samples, 0.18%)</title><rect x="1110.9" y="579.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.08%)</title><rect x="1111.8" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.02%)</title><rect x="1112.8" y="563.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.04%)</title><rect x="1113.2" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (5 samples, 0.06%)</title><rect x="1113.6" y="579.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.05%)</title><rect x="1114.3" y="579.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.3" y="590.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.06%)</title><rect x="1114.9" y="579.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.9" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.06%)</title><rect x="1114.9" y="563.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.9" y="574.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.02%)</title><rect x="1115.2" y="547.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.2" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.10%)</title><rect x="1116.0" y="579.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.0" y="590.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.05%)</title><rect x="1116.5" y="563.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.5" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 0.41%)</title><rect x="1117.5" y="611.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (27 samples, 0.33%)</title><rect x="1117.7" y="595.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.04%)</title><rect x="1117.9" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.07%)</title><rect x="1118.3" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.10%)</title><rect x="1119.2" y="579.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.07%)</title><rect x="1119.5" y="563.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (3 samples, 0.04%)</title><rect x="1119.9" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.02%)</title><rect x="1120.3" y="579.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.02%)</title><rect x="1120.6" y="579.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.02%)</title><rect x="1120.6" y="563.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.6" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.05%)</title><rect x="1120.9" y="579.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.9" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.05%)</title><rect x="1120.9" y="563.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.9" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.05%)</title><rect x="1121.7" y="595.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.7" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.02%)</title><rect x="1122.0" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.17%)</title><rect x="1122.3" y="611.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.17%)</title><rect x="1122.3" y="595.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.17%)</title><rect x="1122.3" y="579.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.17%)</title><rect x="1122.3" y="563.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.17%)</title><rect x="1122.3" y="547.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.16%)</title><rect x="1122.3" y="531.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.10%)</title><rect x="1122.3" y="515.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.10%)</title><rect x="1122.3" y="499.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.10%)</title><rect x="1122.3" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.10%)</title><rect x="1122.3" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.10%)</title><rect x="1122.3" y="451.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.10%)</title><rect x="1122.3" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.3" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.02%)</title><rect x="1122.3" y="419.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.3" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.02%)</title><rect x="1122.3" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.3" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.02%)</title><rect x="1122.3" y="387.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.3" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.02%)</title><rect x="1122.3" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.3" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.02%)</title><rect x="1122.3" y="355.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.3" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.02%)</title><rect x="1122.3" y="339.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.3" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.02%)</title><rect x="1122.3" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.3" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.02%)</title><rect x="1122.3" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.3" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (2 samples, 0.02%)</title><rect x="1122.3" y="291.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.3" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.02%)</title><rect x="1122.3" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.3" y="286.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (2 samples, 0.02%)</title><rect x="1122.3" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.3" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (2 samples, 0.02%)</title><rect x="1122.3" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.3" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (2 samples, 0.02%)</title><rect x="1122.3" y="227.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.3" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (2 samples, 0.02%)</title><rect x="1122.3" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.3" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1122.6" y="419.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1122.6" y="403.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1122.6" y="387.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1122.6" y="371.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1122.6" y="355.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1122.6" y="339.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1122.6" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1122.6" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1122.6" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1122.6" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1122.6" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.6" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1122.9" y="323.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1122.9" y="307.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1122.9" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1122.9" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1122.9" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1122.9" y="243.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1122.9" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.9" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1123.2" y="419.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.2" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1123.4" y="515.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1123.4" y="499.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1123.4" y="483.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1123.4" y="467.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1123.4" y="451.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.06%)</title><rect x="1123.4" y="435.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.06%)</title><rect x="1123.4" y="419.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1123.6" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1123.6" y="387.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1123.6" y="371.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1123.6" y="355.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1123.6" y="339.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1123.6" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1123.6" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1123.6" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.6" y="302.0"></text>
</g>
<g>
<title>[tid=13263] (11 samples, 0.13%)</title><rect x="1124.3" y="755.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1127.3" y="766.0"></text>
</g>
<g>
<title>start_thread (11 samples, 0.13%)</title><rect x="1124.3" y="739.0" width="1.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1127.3" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (11 samples, 0.13%)</title><rect x="1124.3" y="723.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1127.3" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (11 samples, 0.13%)</title><rect x="1124.3" y="707.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.3" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (11 samples, 0.13%)</title><rect x="1124.3" y="691.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.3" y="702.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (11 samples, 0.13%)</title><rect x="1124.3" y="675.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.3" y="686.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (9 samples, 0.11%)</title><rect x="1124.3" y="659.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.3" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (9 samples, 0.11%)</title><rect x="1124.3" y="643.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.3" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (9 samples, 0.11%)</title><rect x="1124.3" y="627.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.3" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (9 samples, 0.11%)</title><rect x="1124.3" y="611.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.3" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (9 samples, 0.11%)</title><rect x="1124.3" y="595.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.3" y="606.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (4 samples, 0.05%)</title><rect x="1124.3" y="579.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.3" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.05%)</title><rect x="1124.3" y="563.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.3" y="574.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.05%)</title><rect x="1124.3" y="547.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.3" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.05%)</title><rect x="1124.3" y="531.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.3" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.04%)</title><rect x="1124.4" y="515.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.4" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.04%)</title><rect x="1124.4" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.4" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.02%)</title><rect x="1124.6" y="483.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.6" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.02%)</title><rect x="1124.6" y="467.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.6" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.02%)</title><rect x="1124.6" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.6" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.02%)</title><rect x="1124.6" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.6" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.02%)</title><rect x="1124.6" y="419.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.6" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.02%)</title><rect x="1124.6" y="403.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.6" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.02%)</title><rect x="1124.6" y="387.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.6" y="398.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.05%)</title><rect x="1125.0" y="579.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.0" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.05%)</title><rect x="1125.0" y="563.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.0" y="574.0"></text>
</g>
<g>
<title>[tid=13264] (2 samples, 0.02%)</title><rect x="1125.9" y="755.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1128.9" y="766.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.02%)</title><rect x="1125.9" y="739.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1128.9" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.02%)</title><rect x="1125.9" y="723.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1128.9" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.02%)</title><rect x="1125.9" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.9" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.02%)</title><rect x="1125.9" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.9" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (2 samples, 0.02%)</title><rect x="1125.9" y="675.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.9" y="686.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.02%)</title><rect x="1125.9" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.9" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.02%)</title><rect x="1125.9" y="643.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.9" y="654.0"></text>
</g>
<g>
<title>[tid=13265] (2 samples, 0.02%)</title><rect x="1126.2" y="755.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1129.2" y="766.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.02%)</title><rect x="1126.2" y="739.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1129.2" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.02%)</title><rect x="1126.2" y="723.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1129.2" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.02%)</title><rect x="1126.2" y="707.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.02%)</title><rect x="1126.2" y="691.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.2" y="702.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.02%)</title><rect x="1126.2" y="675.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.2" y="686.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.02%)</title><rect x="1126.2" y="659.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.2" y="670.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.02%)</title><rect x="1126.2" y="643.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.2" y="654.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.02%)</title><rect x="1126.2" y="627.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1129.2" y="638.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.02%)</title><rect x="1126.2" y="611.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.2" y="622.0"></text>
</g>
<g>
<title>[tid=13266] (4 samples, 0.05%)</title><rect x="1126.4" y="755.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1129.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="1126.4" y="739.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1129.4" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 0.04%)</title><rect x="1126.4" y="723.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1129.4" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="1126.4" y="707.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1129.4" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="1126.4" y="691.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1129.4" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.04%)</title><rect x="1126.4" y="675.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1129.4" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1126.4" y="659.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1129.4" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.02%)</title><rect x="1126.4" y="643.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1129.4" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.02%)</title><rect x="1126.4" y="627.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1129.4" y="638.0"></text>
</g>
<g>
<title>[tid=13407] (148 samples, 1.79%)</title><rect x="1127.0" y="755.0" width="21.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1130.0" y="766.0">[..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1127.0" y="739.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1130.0" y="750.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (2 samples, 0.02%)</title><rect x="1127.0" y="723.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1130.0" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1127.0" y="707.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1130.0" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1127.0" y="691.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1130.0" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1127.0" y="675.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1130.0" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1127.0" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1130.0" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.02%)</title><rect x="1127.0" y="643.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1130.0" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.02%)</title><rect x="1127.0" y="627.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1130.0" y="638.0"></text>
</g>
<g>
<title>start_thread (145 samples, 1.75%)</title><rect x="1127.4" y="739.0" width="20.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1130.4" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (145 samples, 1.75%)</title><rect x="1127.4" y="723.0" width="20.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1130.4" y="734.0"></text>
</g>
<g>
<title>GangWorker::loop() (145 samples, 1.75%)</title><rect x="1127.4" y="707.0" width="20.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.4" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (140 samples, 1.69%)</title><rect x="1127.6" y="691.0" width="19.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.6" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (127 samples, 1.53%)</title><rect x="1127.6" y="675.0" width="18.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.6" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.04%)</title><rect x="1127.7" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.7" y="670.0"></text>
</g>
<g>
<title>SpinPause (123 samples, 1.49%)</title><rect x="1128.1" y="659.0" width="17.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1131.1" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (11 samples, 0.13%)</title><rect x="1145.8" y="675.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (7 samples, 0.08%)</title><rect x="1146.0" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.0" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (6 samples, 0.07%)</title><rect x="1146.1" y="643.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.1" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (5 samples, 0.06%)</title><rect x="1146.2" y="627.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.2" y="638.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (2 samples, 0.02%)</title><rect x="1146.4" y="611.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.4" y="622.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.02%)</title><rect x="1146.4" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.4" y="606.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.02%)</title><rect x="1146.4" y="579.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.4" y="590.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (3 samples, 0.04%)</title><rect x="1147.0" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.0" y="670.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="1147.8" y="691.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1150.8" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1147.8" y="675.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1150.8" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1147.8" y="659.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1150.8" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1147.8" y="643.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1150.8" y="654.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1147.8" y="627.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1150.8" y="638.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.02%)</title><rect x="1147.8" y="611.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1150.8" y="622.0"></text>
</g>
<g>
<title>[tid=13408] (149 samples, 1.80%)</title><rect x="1148.1" y="755.0" width="21.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1151.1" y="766.0">[..</text>
</g>
<g>
<title>start_thread (145 samples, 1.75%)</title><rect x="1148.7" y="739.0" width="20.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1151.7" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (145 samples, 1.75%)</title><rect x="1148.7" y="723.0" width="20.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1151.7" y="734.0"></text>
</g>
<g>
<title>GangWorker::loop() (145 samples, 1.75%)</title><rect x="1148.7" y="707.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.7" y="718.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.02%)</title><rect x="1148.7" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.7" y="702.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (143 samples, 1.73%)</title><rect x="1149.0" y="691.0" width="20.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.0" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (129 samples, 1.56%)</title><rect x="1149.0" y="675.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.0" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (7 samples, 0.08%)</title><rect x="1149.1" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.1" y="670.0"></text>
</g>
<g>
<title>SpinPause (121 samples, 1.46%)</title><rect x="1150.1" y="659.0" width="17.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1153.1" y="670.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.02%)</title><rect x="1167.3" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.3" y="686.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.02%)</title><rect x="1167.3" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.3" y="670.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.02%)</title><rect x="1167.6" y="675.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.6" y="686.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.02%)</title><rect x="1167.6" y="659.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="670.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.02%)</title><rect x="1167.6" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.6" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (10 samples, 0.12%)</title><rect x="1167.9" y="675.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.06%)</title><rect x="1168.3" y="659.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (5 samples, 0.06%)</title><rect x="1168.3" y="643.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (5 samples, 0.06%)</title><rect x="1168.3" y="627.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.3" y="638.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.02%)</title><rect x="1168.6" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.6" y="622.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.02%)</title><rect x="1169.1" y="659.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.1" y="670.0"></text>
</g>
<g>
<title>[tid=13409] (145 samples, 1.75%)</title><rect x="1169.3" y="755.0" width="20.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1172.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.05%)</title><rect x="1169.3" y="739.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1172.3" y="750.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (4 samples, 0.05%)</title><rect x="1169.3" y="723.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1172.3" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1169.6" y="707.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1172.6" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1169.6" y="691.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1172.6" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1169.6" y="675.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1169.6" y="659.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1172.6" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.02%)</title><rect x="1169.6" y="643.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1172.6" y="654.0"></text>
</g>
<g>
<title>start_thread (139 samples, 1.68%)</title><rect x="1170.2" y="739.0" width="19.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1173.2" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (139 samples, 1.68%)</title><rect x="1170.2" y="723.0" width="19.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1173.2" y="734.0"></text>
</g>
<g>
<title>GangWorker::loop() (139 samples, 1.68%)</title><rect x="1170.2" y="707.0" width="19.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (137 samples, 1.65%)</title><rect x="1170.2" y="691.0" width="19.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.2" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (125 samples, 1.51%)</title><rect x="1170.3" y="675.0" width="17.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.06%)</title><rect x="1170.3" y="659.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.3" y="670.0"></text>
</g>
<g>
<title>SpinPause (120 samples, 1.45%)</title><rect x="1171.0" y="659.0" width="17.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1174.0" y="670.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.02%)</title><rect x="1188.3" y="675.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="686.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.02%)</title><rect x="1188.3" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.02%)</title><rect x="1188.3" y="643.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.3" y="654.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.02%)</title><rect x="1188.3" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (7 samples, 0.08%)</title><rect x="1188.7" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.7" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.06%)</title><rect x="1188.7" y="659.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.7" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (5 samples, 0.06%)</title><rect x="1188.7" y="643.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.7" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (5 samples, 0.06%)</title><rect x="1188.7" y="627.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.7" y="638.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 0.02%)</title><rect x="1189.1" y="611.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="622.0"></text>
</g>
</g>
</svg>
