<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (3,466 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=1207] (3,068 samples, 88.52%)</title><rect x="10.0" y="1299.0" width="1044.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1310.0">[NIO Selector #0 tid=1207]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (14 samples, 0.40%)</title><rect x="10.0" y="1283.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (13 samples, 0.38%)</title><rect x="10.3" y="1267.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.3" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (13 samples, 0.38%)</title><rect x="10.3" y="1251.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.3" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 0.35%)</title><rect x="10.3" y="1235.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.3" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="10.3" y="1219.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="10.7" y="1219.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (8 samples, 0.23%)</title><rect x="11.0" y="1219.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.0" y="1230.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="11.0" y="1203.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.0" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (6 samples, 0.17%)</title><rect x="11.4" y="1203.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.4" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (5 samples, 0.14%)</title><rect x="11.7" y="1187.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.7" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.03%)</title><rect x="11.7" y="1171.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.7" y="1182.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (4 samples, 0.12%)</title><rect x="12.0" y="1171.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.0" y="1182.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*) (1 samples, 0.03%)</title><rect x="12.0" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.0" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.09%)</title><rect x="12.4" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.4" y="1166.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (3 samples, 0.09%)</title><rect x="12.4" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.4" y="1150.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="12.7" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.7" y="1134.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.03%)</title><rect x="12.7" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.7" y="1118.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="13.1" y="1123.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.1" y="1134.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="13.4" y="1203.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="16.4" y="1214.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="13.7" y="1219.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.7" y="1230.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.03%)</title><rect x="14.1" y="1219.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="17.1" y="1230.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="14.4" y="1235.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="17.4" y="1246.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.09%)</title><rect x="14.8" y="1283.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="17.8" y="1294.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="15.1" y="1267.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.1" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="15.4" y="1267.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.4" y="1278.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.03%)</title><rect x="15.4" y="1251.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.4" y="1262.0"></text>
</g>
<g>
<title>[unknown_Java] (23 samples, 0.66%)</title><rect x="15.8" y="1283.0" width="7.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="18.8" y="1294.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.09%)</title><rect x="22.6" y="1267.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="25.6" y="1278.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,028 samples, 87.36%)</title><rect x="23.6" y="1283.0" width="1030.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="1294.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (215 samples, 6.20%)</title><rect x="24.0" y="1267.0" width="73.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.0" y="1278.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (215 samples, 6.20%)</title><rect x="24.0" y="1251.0" width="73.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.0" y="1262.0">one/nio/..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (192 samples, 5.54%)</title><rect x="26.7" y="1235.0" width="65.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.7" y="1246.0">.annobi..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (129 samples, 3.72%)</title><rect x="48.1" y="1219.0" width="43.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="51.1" y="1230.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (129 samples, 3.72%)</title><rect x="48.1" y="1203.0" width="43.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="51.1" y="1214.0">do_s..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (119 samples, 3.43%)</title><rect x="51.5" y="1187.0" width="40.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="54.5" y="1198.0">__x..</text>
</g>
<g>
<title>do_epoll_wait (116 samples, 3.35%)</title><rect x="52.6" y="1171.0" width="39.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="55.6" y="1182.0">do_..</text>
</g>
<g>
<title>__fget_light (7 samples, 0.20%)</title><rect x="54.6" y="1155.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="57.6" y="1166.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.17%)</title><rect x="54.9" y="1139.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="57.9" y="1150.0"></text>
</g>
<g>
<title>ep_poll (103 samples, 2.97%)</title><rect x="57.0" y="1155.0" width="35.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="60.0" y="1166.0">ep_..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (56 samples, 1.62%)</title><rect x="63.1" y="1139.0" width="19.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="66.1" y="1150.0"></text>
</g>
<g>
<title>ep_send_events_proc (31 samples, 0.89%)</title><rect x="68.9" y="1123.0" width="10.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="71.9" y="1134.0"></text>
</g>
<g>
<title>__list_del_entry_valid (1 samples, 0.03%)</title><rect x="70.6" y="1107.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="73.6" y="1118.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (25 samples, 0.72%)</title><rect x="70.9" y="1107.0" width="8.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="73.9" y="1118.0"></text>
</g>
<g>
<title>sock_poll (22 samples, 0.63%)</title><rect x="72.0" y="1091.0" width="7.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="75.0" y="1102.0"></text>
</g>
<g>
<title>tcp_poll (14 samples, 0.40%)</title><rect x="74.7" y="1075.0" width="4.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="77.7" y="1086.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.12%)</title><rect x="78.1" y="1059.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="81.1" y="1070.0"></text>
</g>
<g>
<title>mutex_lock (7 samples, 0.20%)</title><rect x="79.5" y="1123.0" width="2.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="82.5" y="1134.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.03%)</title><rect x="81.8" y="1123.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="84.8" y="1134.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (29 samples, 0.84%)</title><rect x="82.2" y="1139.0" width="9.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="85.2" y="1150.0"></text>
</g>
<g>
<title>schedule (27 samples, 0.78%)</title><rect x="82.9" y="1123.0" width="9.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="85.9" y="1134.0"></text>
</g>
<g>
<title>__sched_text_start (22 samples, 0.63%)</title><rect x="84.6" y="1107.0" width="7.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="87.6" y="1118.0"></text>
</g>
<g>
<title>finish_task_switch (20 samples, 0.58%)</title><rect x="85.2" y="1091.0" width="6.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="88.2" y="1102.0"></text>
</g>
<g>
<title>ret_from_intr (1 samples, 0.03%)</title><rect x="91.7" y="1075.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="94.7" y="1086.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="91.7" y="1059.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="94.7" y="1070.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="91.7" y="1043.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="94.7" y="1054.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="91.7" y="1027.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="94.7" y="1038.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.03%)</title><rect x="92.0" y="1235.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="95.0" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="92.4" y="1235.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="95.4" y="1246.0"></text>
</g>
<g>
<title>__GI___clock_gettime (4 samples, 0.12%)</title><rect x="92.7" y="1235.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="95.7" y="1246.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="93.4" y="1219.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="96.4" y="1230.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.06%)</title><rect x="94.1" y="1235.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="97.1" y="1246.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (6 samples, 0.17%)</title><rect x="94.8" y="1235.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="97.8" y="1246.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="96.8" y="1235.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="99.8" y="1246.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,811 samples, 81.10%)</title><rect x="97.2" y="1267.0" width="957.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.2" y="1278.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,810 samples, 81.07%)</title><rect x="97.5" y="1251.0" width="956.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.5" y="1262.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,621 samples, 75.62%)</title><rect x="97.5" y="1235.0" width="892.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.5" y="1246.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (5 samples, 0.14%)</title><rect x="99.5" y="1219.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.5" y="1230.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.06%)</title><rect x="101.2" y="1219.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.2" y="1230.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.09%)</title><rect x="101.9" y="1219.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.9" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,552 samples, 73.63%)</title><rect x="102.9" y="1219.0" width="868.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.9" y="1230.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,551 samples, 73.60%)</title><rect x="103.3" y="1203.0" width="868.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.3" y="1214.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,538 samples, 73.23%)</title><rect x="103.3" y="1187.0" width="864.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.3" y="1198.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="104.3" y="1171.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="107.3" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,030 samples, 29.72%)</title><rect x="104.6" y="1171.0" width="350.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.6" y="1182.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (13 samples, 0.38%)</title><rect x="106.0" y="1155.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.0" y="1166.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.09%)</title><rect x="108.4" y="1139.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="111.4" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.09%)</title><rect x="109.4" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="112.4" y="1150.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.09%)</title><rect x="109.4" y="1123.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="112.4" y="1134.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.09%)</title><rect x="109.4" y="1107.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="112.4" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,013 samples, 29.23%)</title><rect x="110.4" y="1155.0" width="344.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.4" y="1166.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (25 samples, 0.72%)</title><rect x="110.8" y="1139.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.8" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (19 samples, 0.55%)</title><rect x="112.8" y="1123.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.8" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (14 samples, 0.40%)</title><rect x="112.8" y="1107.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.8" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.12%)</title><rect x="116.2" y="1091.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="119.2" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.14%)</title><rect x="117.6" y="1107.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.6" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.14%)</title><rect x="117.6" y="1091.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (987 samples, 28.48%)</title><rect x="119.3" y="1139.0" width="336.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.3" y="1150.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (987 samples, 28.48%)</title><rect x="119.3" y="1123.0" width="336.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.3" y="1134.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (987 samples, 28.48%)</title><rect x="119.3" y="1107.0" width="336.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.3" y="1118.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (983 samples, 28.36%)</title><rect x="120.6" y="1091.0" width="334.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.6" y="1102.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>.annobin_send.c (961 samples, 27.73%)</title><rect x="121.3" y="1075.0" width="327.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="124.3" y="1086.0">.annobin_send.c</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.12%)</title><rect x="136.0" y="1059.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="139.0" y="1070.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (914 samples, 26.37%)</title><rect x="137.3" y="1059.0" width="311.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="140.3" y="1070.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (914 samples, 26.37%)</title><rect x="137.3" y="1043.0" width="311.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="140.3" y="1054.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (902 samples, 26.02%)</title><rect x="141.4" y="1027.0" width="307.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="144.4" y="1038.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (901 samples, 26.00%)</title><rect x="141.8" y="1011.0" width="306.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="144.8" y="1022.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.09%)</title><rect x="142.4" y="995.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="145.4" y="1006.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.06%)</title><rect x="143.5" y="995.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="146.5" y="1006.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.03%)</title><rect x="143.8" y="979.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="146.8" y="990.0"></text>
</g>
<g>
<title>sock_sendmsg (889 samples, 25.65%)</title><rect x="144.1" y="995.0" width="302.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="147.1" y="1006.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (7 samples, 0.20%)</title><rect x="144.1" y="979.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="147.1" y="990.0"></text>
</g>
<g>
<title>sock_has_perm (6 samples, 0.17%)</title><rect x="144.5" y="963.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="147.5" y="974.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.12%)</title><rect x="145.2" y="947.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="148.2" y="958.0"></text>
</g>
<g>
<title>tcp_sendmsg (882 samples, 25.45%)</title><rect x="146.5" y="979.0" width="300.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="149.5" y="990.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="147.5" y="963.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="150.5" y="974.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.12%)</title><rect x="147.9" y="963.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="150.9" y="974.0"></text>
</g>
<g>
<title>_cond_resched (3 samples, 0.09%)</title><rect x="147.9" y="947.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="150.9" y="958.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="148.9" y="947.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="151.9" y="958.0"></text>
</g>
<g>
<title>release_sock (10 samples, 0.29%)</title><rect x="149.2" y="963.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="152.2" y="974.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.12%)</title><rect x="150.3" y="947.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="153.3" y="958.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.09%)</title><rect x="151.6" y="947.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="154.6" y="958.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (864 samples, 24.93%)</title><rect x="152.6" y="963.0" width="294.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="155.6" y="974.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (4 samples, 0.12%)</title><rect x="154.7" y="947.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="157.7" y="958.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="155.7" y="931.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="158.7" y="942.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (787 samples, 22.71%)</title><rect x="156.1" y="947.0" width="267.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="159.1" y="958.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (786 samples, 22.68%)</title><rect x="156.4" y="931.0" width="267.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="159.4" y="942.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (753 samples, 21.73%)</title><rect x="158.4" y="915.0" width="256.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="161.4" y="926.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (723 samples, 20.86%)</title><rect x="161.8" y="899.0" width="246.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="164.8" y="910.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (7 samples, 0.20%)</title><rect x="162.9" y="883.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="165.9" y="894.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.06%)</title><rect x="164.6" y="867.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="167.6" y="878.0"></text>
</g>
<g>
<title>ip_local_out (145 samples, 4.18%)</title><rect x="165.2" y="883.0" width="49.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="168.2" y="894.0">ip_lo..</text>
</g>
<g>
<title>__ip_local_out (144 samples, 4.15%)</title><rect x="165.6" y="867.0" width="49.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="168.6" y="878.0">__ip_..</text>
</g>
<g>
<title>ip_send_check (2 samples, 0.06%)</title><rect x="165.6" y="851.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="168.6" y="862.0"></text>
</g>
<g>
<title>nf_hook_slow (142 samples, 4.10%)</title><rect x="166.3" y="851.0" width="48.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="169.3" y="862.0">nf_h..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (29 samples, 0.84%)</title><rect x="167.3" y="835.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="170.3" y="846.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="176.8" y="819.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="179.8" y="830.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (4 samples, 0.12%)</title><rect x="177.2" y="835.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="180.2" y="846.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (16 samples, 0.46%)</title><rect x="178.5" y="835.0" width="5.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="181.5" y="846.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (12 samples, 0.35%)</title><rect x="179.9" y="819.0" width="4.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="182.9" y="830.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (2 samples, 0.06%)</title><rect x="184.0" y="835.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="187.0" y="846.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (4 samples, 0.12%)</title><rect x="184.7" y="835.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="187.7" y="846.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (5 samples, 0.14%)</title><rect x="186.0" y="835.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="189.0" y="846.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (6 samples, 0.17%)</title><rect x="187.7" y="835.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="190.7" y="846.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (63 samples, 1.82%)</title><rect x="189.8" y="835.0" width="21.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="192.8" y="846.0">n..</text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (15 samples, 0.43%)</title><rect x="192.8" y="819.0" width="5.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="195.8" y="830.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (1 samples, 0.03%)</title><rect x="197.9" y="819.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="200.9" y="830.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (3 samples, 0.09%)</title><rect x="198.3" y="819.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="201.3" y="830.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (22 samples, 0.63%)</title><rect x="199.3" y="819.0" width="7.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="202.3" y="830.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct	[nf_conntrack] (2 samples, 0.06%)</title><rect x="203.7" y="803.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="206.7" y="814.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (7 samples, 0.20%)</title><rect x="204.4" y="803.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="207.4" y="814.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (13 samples, 0.38%)</title><rect x="206.8" y="819.0" width="4.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="209.8" y="830.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (10 samples, 0.29%)</title><rect x="211.2" y="835.0" width="3.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="214.2" y="846.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (1 samples, 0.03%)</title><rect x="212.6" y="819.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="215.6" y="830.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (5 samples, 0.14%)</title><rect x="212.9" y="819.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="215.9" y="830.0"></text>
</g>
<g>
<title>ip_output (568 samples, 16.39%)</title><rect x="214.6" y="883.0" width="193.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="217.6" y="894.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (518 samples, 14.95%)</title><rect x="217.7" y="867.0" width="176.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="220.7" y="878.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (34 samples, 0.98%)</title><rect x="219.7" y="851.0" width="11.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="222.7" y="862.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (25 samples, 0.72%)</title><rect x="222.4" y="835.0" width="8.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="225.4" y="846.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="223.5" y="819.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="226.5" y="830.0"></text>
</g>
<g>
<title>loopback_xmit (21 samples, 0.61%)</title><rect x="223.8" y="819.0" width="7.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="226.8" y="830.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.09%)</title><rect x="223.8" y="803.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="226.8" y="814.0"></text>
</g>
<g>
<title>netif_rx (9 samples, 0.26%)</title><rect x="224.8" y="803.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="227.8" y="814.0"></text>
</g>
<g>
<title>netif_rx_internal (9 samples, 0.26%)</title><rect x="224.8" y="787.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="227.8" y="798.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.09%)</title><rect x="225.5" y="771.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="228.5" y="782.0"></text>
</g>
<g>
<title>ktime_get_with_offset (4 samples, 0.12%)</title><rect x="226.5" y="771.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="229.5" y="782.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="227.2" y="755.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="230.2" y="766.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (4 samples, 0.12%)</title><rect x="227.9" y="803.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="230.9" y="814.0"></text>
</g>
<g>
<title>tcp_wfree (5 samples, 0.14%)</title><rect x="229.2" y="803.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="232.2" y="814.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.03%)</title><rect x="231.0" y="835.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="234.0" y="846.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (478 samples, 13.79%)</title><rect x="231.3" y="851.0" width="162.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="234.3" y="862.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (478 samples, 13.79%)</title><rect x="231.3" y="835.0" width="162.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="234.3" y="846.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (473 samples, 13.65%)</title><rect x="233.0" y="819.0" width="161.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="236.0" y="830.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (473 samples, 13.65%)</title><rect x="233.0" y="803.0" width="161.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="236.0" y="814.0">__softirqentry_text_s..</text>
</g>
<g>
<title>net_rx_action (459 samples, 13.24%)</title><rect x="237.1" y="787.0" width="156.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="240.1" y="798.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (4 samples, 0.12%)</title><rect x="238.1" y="771.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="241.1" y="782.0"></text>
</g>
<g>
<title>process_backlog (452 samples, 13.04%)</title><rect x="239.5" y="771.0" width="153.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="242.5" y="782.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb_one_core (441 samples, 12.72%)</title><rect x="243.2" y="755.0" width="150.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="246.2" y="766.0">__netif_receive_skb..</text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.26%)</title><rect x="243.9" y="739.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="246.9" y="750.0"></text>
</g>
<g>
<title>ip_rcv (430 samples, 12.41%)</title><rect x="247.0" y="739.0" width="146.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="250.0" y="750.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (356 samples, 10.27%)</title><rect x="247.6" y="723.0" width="121.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="250.6" y="734.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (299 samples, 8.63%)</title><rect x="247.6" y="707.0" width="101.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="250.6" y="718.0">ip_local_del..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (298 samples, 8.60%)</title><rect x="248.0" y="691.0" width="101.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="251.0" y="702.0">ip_protocol_..</text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.09%)</title><rect x="249.3" y="675.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="252.3" y="686.0"></text>
</g>
<g>
<title>tcp_v4_rcv (291 samples, 8.40%)</title><rect x="250.4" y="675.0" width="99.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="253.4" y="686.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (15 samples, 0.43%)</title><rect x="255.5" y="659.0" width="5.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="258.5" y="670.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.06%)</title><rect x="259.9" y="643.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="262.9" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.06%)</title><rect x="260.6" y="659.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="263.6" y="670.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.06%)</title><rect x="261.3" y="659.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="264.3" y="670.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.03%)</title><rect x="261.6" y="643.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="264.6" y="654.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (1 samples, 0.03%)</title><rect x="261.6" y="627.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="264.6" y="638.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (257 samples, 7.41%)</title><rect x="261.9" y="659.0" width="87.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="264.9" y="670.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_rcv_established (256 samples, 7.39%)</title><rect x="262.3" y="643.0" width="87.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="265.3" y="654.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.03%)</title><rect x="264.3" y="627.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="267.3" y="638.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.09%)</title><rect x="264.7" y="627.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="267.7" y="638.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.09%)</title><rect x="264.7" y="611.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="267.7" y="622.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.09%)</title><rect x="264.7" y="595.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="267.7" y="606.0"></text>
</g>
<g>
<title>tcp_ack (55 samples, 1.59%)</title><rect x="265.7" y="627.0" width="18.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="268.7" y="638.0"></text>
</g>
<g>
<title>__kfree_skb (10 samples, 0.29%)</title><rect x="271.8" y="611.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="274.8" y="622.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.09%)</title><rect x="272.1" y="595.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="275.1" y="606.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="273.2" y="595.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="276.2" y="606.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.03%)</title><rect x="273.5" y="595.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="276.5" y="606.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="273.5" y="579.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="276.5" y="590.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.12%)</title><rect x="273.8" y="595.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="276.8" y="606.0"></text>
</g>
<g>
<title>bictcp_acked (7 samples, 0.20%)</title><rect x="275.2" y="611.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="278.2" y="622.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.09%)</title><rect x="277.6" y="611.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="280.6" y="622.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="278.6" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="281.6" y="622.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.03%)</title><rect x="278.6" y="595.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="281.6" y="606.0"></text>
</g>
<g>
<title>ktime_get_seconds (1 samples, 0.03%)</title><rect x="279.0" y="611.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="282.0" y="622.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.03%)</title><rect x="279.3" y="611.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="282.3" y="622.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (7 samples, 0.20%)</title><rect x="279.6" y="611.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="282.6" y="622.0"></text>
</g>
<g>
<title>jiffies_to_usecs (2 samples, 0.06%)</title><rect x="281.3" y="595.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="284.3" y="606.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.03%)</title><rect x="282.0" y="611.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="285.0" y="622.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.09%)</title><rect x="282.4" y="611.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="285.4" y="622.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.09%)</title><rect x="283.4" y="611.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="286.4" y="622.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.06%)</title><rect x="284.4" y="627.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="287.4" y="638.0"></text>
</g>
<g>
<title>tcp_data_queue (181 samples, 5.22%)</title><rect x="285.1" y="627.0" width="61.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="288.1" y="638.0">tcp_da..</text>
</g>
<g>
<title>dst_release (3 samples, 0.09%)</title><rect x="287.5" y="611.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="290.5" y="622.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.03%)</title><rect x="288.5" y="611.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="291.5" y="622.0"></text>
</g>
<g>
<title>sock_def_readable (161 samples, 4.65%)</title><rect x="288.8" y="611.0" width="54.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="291.8" y="622.0">sock_..</text>
</g>
<g>
<title>__wake_up_common_lock (157 samples, 4.53%)</title><rect x="290.2" y="595.0" width="53.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="293.2" y="606.0">__wak..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.09%)</title><rect x="290.5" y="579.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="293.5" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (153 samples, 4.41%)</title><rect x="291.6" y="579.0" width="52.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="294.6" y="590.0">_raw_..</text>
</g>
<g>
<title>tcp_event_data_recv (6 samples, 0.17%)</title><rect x="343.6" y="611.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="346.6" y="622.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.09%)</title><rect x="345.7" y="611.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="348.7" y="622.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.14%)</title><rect x="346.7" y="627.0" width="1.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="349.7" y="638.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.12%)</title><rect x="347.0" y="611.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="350.0" y="622.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="348.1" y="595.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="351.1" y="606.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.03%)</title><rect x="348.4" y="627.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="351.4" y="638.0"></text>
</g>
<g>
<title>tcp_urg (2 samples, 0.06%)</title><rect x="348.7" y="627.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="351.7" y="638.0"></text>
</g>
<g>
<title>nf_hook_slow (57 samples, 1.64%)</title><rect x="349.4" y="707.0" width="19.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="352.4" y="718.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (40 samples, 1.15%)</title><rect x="349.8" y="691.0" width="13.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="352.8" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 0.12%)</title><rect x="360.0" y="675.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="363.0" y="686.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (3 samples, 0.09%)</title><rect x="361.3" y="675.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="364.3" y="686.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (3 samples, 0.09%)</title><rect x="362.4" y="675.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="365.4" y="686.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (1 samples, 0.03%)</title><rect x="363.4" y="691.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="366.4" y="702.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (1 samples, 0.03%)</title><rect x="363.7" y="691.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="366.7" y="702.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (3 samples, 0.09%)</title><rect x="364.1" y="691.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="367.1" y="702.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (3 samples, 0.09%)</title><rect x="365.1" y="691.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="368.1" y="702.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (3 samples, 0.09%)</title><rect x="366.1" y="691.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="369.1" y="702.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (2 samples, 0.06%)</title><rect x="366.5" y="675.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="369.5" y="686.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (3 samples, 0.09%)</title><rect x="367.1" y="691.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="370.1" y="702.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (2 samples, 0.06%)</title><rect x="368.2" y="691.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="371.2" y="702.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.12%)</title><rect x="368.8" y="723.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="371.8" y="734.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="370.2" y="723.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="373.2" y="734.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (1 samples, 0.03%)</title><rect x="370.2" y="707.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="373.2" y="718.0"></text>
</g>
<g>
<title>nf_hook_slow (67 samples, 1.93%)</title><rect x="370.5" y="723.0" width="22.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="373.5" y="734.0">n..</text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (1 samples, 0.03%)</title><rect x="370.5" y="707.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="373.5" y="718.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (58 samples, 1.67%)</title><rect x="370.9" y="707.0" width="19.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="373.9" y="718.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (3 samples, 0.09%)</title><rect x="390.6" y="707.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="393.6" y="718.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (1 samples, 0.03%)</title><rect x="391.6" y="707.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="394.6" y="718.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (1 samples, 0.03%)</title><rect x="392.0" y="707.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="395.0" y="718.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (3 samples, 0.09%)</title><rect x="392.3" y="707.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="395.3" y="718.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (1 samples, 0.03%)</title><rect x="393.0" y="691.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="396.0" y="702.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="393.3" y="787.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="396.3" y="798.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="393.7" y="787.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="396.7" y="798.0"></text>
</g>
<g>
<title>ip_finish_output (7 samples, 0.20%)</title><rect x="394.0" y="867.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="397.0" y="878.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.14%)</title><rect x="394.7" y="851.0" width="1.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="397.7" y="862.0"></text>
</g>
<g>
<title>nf_hook_slow (34 samples, 0.98%)</title><rect x="396.4" y="867.0" width="11.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="399.4" y="878.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (14 samples, 0.40%)</title><rect x="396.4" y="851.0" width="4.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="399.4" y="862.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (2 samples, 0.06%)</title><rect x="401.2" y="851.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="404.2" y="862.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (3 samples, 0.09%)</title><rect x="401.9" y="851.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="404.9" y="862.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (5 samples, 0.14%)</title><rect x="402.9" y="851.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="405.9" y="862.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (4 samples, 0.12%)</title><rect x="403.2" y="835.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="406.2" y="846.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (6 samples, 0.17%)</title><rect x="404.6" y="851.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="407.6" y="862.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.06%)</title><rect x="405.9" y="835.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="408.9" y="846.0"></text>
</g>
<g>
<title>selinux_ip_postroute (3 samples, 0.09%)</title><rect x="406.6" y="851.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="409.6" y="862.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (1 samples, 0.03%)</title><rect x="407.6" y="851.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="410.6" y="862.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.06%)</title><rect x="408.0" y="899.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="411.0" y="910.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="408.3" y="883.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="411.3" y="894.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="408.7" y="899.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="411.7" y="910.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (5 samples, 0.14%)</title><rect x="409.0" y="899.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="412.0" y="910.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.03%)</title><rect x="410.7" y="899.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="413.7" y="910.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.12%)</title><rect x="411.1" y="899.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="414.1" y="910.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.06%)</title><rect x="412.4" y="899.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="415.4" y="910.0"></text>
</g>
<g>
<title>tcp_v4_send_check (5 samples, 0.14%)</title><rect x="413.1" y="899.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="416.1" y="910.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.12%)</title><rect x="414.8" y="915.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="417.8" y="926.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="415.5" y="899.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="418.5" y="910.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (13 samples, 0.38%)</title><rect x="416.2" y="915.0" width="4.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="419.2" y="926.0"></text>
</g>
<g>
<title>rb_insert_color (2 samples, 0.06%)</title><rect x="418.2" y="899.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="421.2" y="910.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.09%)</title><rect x="418.9" y="899.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="421.9" y="910.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.09%)</title><rect x="418.9" y="883.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="421.9" y="894.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="419.6" y="867.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="422.6" y="878.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.06%)</title><rect x="419.9" y="899.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="422.9" y="910.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (10 samples, 0.29%)</title><rect x="420.6" y="915.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="423.6" y="926.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (3 samples, 0.09%)</title><rect x="423.0" y="899.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="426.0" y="910.0"></text>
</g>
<g>
<title>_copy_from_iter_full (7 samples, 0.20%)</title><rect x="424.0" y="947.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="427.0" y="958.0"></text>
</g>
<g>
<title>copyin (6 samples, 0.17%)</title><rect x="424.0" y="931.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="427.0" y="942.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (3 samples, 0.09%)</title><rect x="425.0" y="915.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="428.0" y="926.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="426.0" y="931.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="429.0" y="942.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (34 samples, 0.98%)</title><rect x="426.4" y="947.0" width="11.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="429.4" y="958.0"></text>
</g>
<g>
<title>__alloc_skb (33 samples, 0.95%)</title><rect x="426.7" y="931.0" width="11.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="429.7" y="942.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (14 samples, 0.40%)</title><rect x="428.1" y="915.0" width="4.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="431.1" y="926.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (14 samples, 0.40%)</title><rect x="428.1" y="899.0" width="4.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="431.1" y="910.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.12%)</title><rect x="430.8" y="883.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="433.8" y="894.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="432.2" y="883.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="435.2" y="894.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.03%)</title><rect x="432.5" y="883.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="435.5" y="894.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (8 samples, 0.23%)</title><rect x="432.8" y="915.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="435.8" y="926.0"></text>
</g>
<g>
<title>should_failslab (2 samples, 0.06%)</title><rect x="434.9" y="899.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="437.9" y="910.0"></text>
</g>
<g>
<title>ksize (7 samples, 0.20%)</title><rect x="435.6" y="915.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="438.6" y="926.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.12%)</title><rect x="437.9" y="947.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="440.9" y="958.0"></text>
</g>
<g>
<title>skb_put (1 samples, 0.03%)</title><rect x="439.3" y="947.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="442.3" y="958.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (6 samples, 0.17%)</title><rect x="439.6" y="947.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="442.6" y="958.0"></text>
</g>
<g>
<title>tcp_send_mss (13 samples, 0.38%)</title><rect x="441.7" y="947.0" width="4.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="444.7" y="958.0"></text>
</g>
<g>
<title>tcp_current_mss (11 samples, 0.32%)</title><rect x="442.4" y="931.0" width="3.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="445.4" y="942.0"></text>
</g>
<g>
<title>ipv4_mtu (10 samples, 0.29%)</title><rect x="442.7" y="915.0" width="3.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="445.7" y="926.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.06%)</title><rect x="446.1" y="947.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="449.1" y="958.0"></text>
</g>
<g>
<title>sockfd_lookup_light (5 samples, 0.14%)</title><rect x="446.8" y="995.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="449.8" y="1006.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.14%)</title><rect x="446.8" y="979.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="449.8" y="990.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.12%)</title><rect x="447.1" y="963.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="450.1" y="974.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.03%)</title><rect x="448.5" y="1075.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="451.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.49%)</title><rect x="448.8" y="1075.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="451.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.49%)</title><rect x="448.8" y="1059.0" width="5.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="451.8" y="1070.0"></text>
</g>
<g>
<title>.annobin_send.c (1 samples, 0.03%)</title><rect x="448.8" y="1043.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="451.8" y="1054.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (14 samples, 0.40%)</title><rect x="449.2" y="1043.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="452.2" y="1054.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="450.5" y="1027.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="453.5" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.03%)</title><rect x="450.9" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="453.9" y="1038.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.06%)</title><rect x="451.2" y="1027.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="454.2" y="1038.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.17%)</title><rect x="451.9" y="1027.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="454.9" y="1038.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.09%)</title><rect x="452.2" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="455.2" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.06%)</title><rect x="453.3" y="1011.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="456.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.06%)</title><rect x="453.9" y="1043.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="456.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.06%)</title><rect x="454.6" y="1075.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="457.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (18 samples, 0.52%)</title><rect x="455.3" y="1171.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="457.7" y="1155.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="457.7" y="1139.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="460.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.17%)</title><rect x="458.0" y="1155.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.17%)</title><rect x="458.0" y="1139.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.14%)</title><rect x="458.4" y="1123.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.4" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="460.1" y="1155.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="463.1" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.09%)</title><rect x="460.4" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="460.8" y="1139.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="460.8" y="1123.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.06%)</title><rect x="460.8" y="1107.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="463.8" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (1,486 samples, 42.87%)</title><rect x="461.4" y="1171.0" width="505.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="464.4" y="1182.0">ru/mail/polis/service/shakhmin/SimpleHttpServer.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.06%)</title><rect x="462.1" y="1155.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.06%)</title><rect x="462.1" y="1139.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.06%)</title><rect x="462.1" y="1123.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.06%)</title><rect x="462.1" y="1107.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.09%)</title><rect x="462.8" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.09%)</title><rect x="462.8" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.09%)</title><rect x="462.8" y="1123.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.8" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.09%)</title><rect x="462.8" y="1107.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.8" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.09%)</title><rect x="462.8" y="1091.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.8" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.09%)</title><rect x="462.8" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.09%)</title><rect x="462.8" y="1059.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (1 samples, 0.03%)</title><rect x="463.5" y="1043.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.5" y="1054.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.03%)</title><rect x="463.5" y="1027.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="466.5" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.209] (1 samples, 0.03%)</title><rect x="463.5" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="466.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="463.8" y="1155.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="463.8" y="1139.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="463.8" y="1123.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.8" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="463.8" y="1107.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="463.8" y="1091.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="466.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="463.8" y="1075.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.8" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="464.2" y="1091.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="467.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.20%)</title><rect x="464.5" y="1155.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="467.5" y="1166.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.20%)</title><rect x="464.5" y="1139.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="467.5" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="464.5" y="1123.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="464.5" y="1107.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="464.5" y="1091.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="467.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="464.8" y="1075.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="464.8" y="1059.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="467.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.09%)</title><rect x="465.5" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="466.5" y="1043.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="466.9" y="1155.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="469.9" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="466.9" y="1139.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="466.9" y="1123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="466.9" y="1107.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="466.9" y="1091.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="469.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="466.9" y="1075.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="466.9" y="1059.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.9" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,469 samples, 42.38%)</title><rect x="467.2" y="1155.0" width="500.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.2" y="1166.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (71 samples, 2.05%)</title><rect x="467.6" y="1139.0" width="24.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="470.6" y="1150.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (71 samples, 2.05%)</title><rect x="467.6" y="1123.0" width="24.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.6" y="1134.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (71 samples, 2.05%)</title><rect x="467.6" y="1107.0" width="24.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.6" y="1118.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (67 samples, 1.93%)</title><rect x="468.9" y="1091.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.9" y="1102.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (67 samples, 1.93%)</title><rect x="468.9" y="1075.0" width="22.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.9" y="1086.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (48 samples, 1.38%)</title><rect x="469.3" y="1059.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.3" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.03%)</title><rect x="469.3" y="1043.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.3" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (1 samples, 0.03%)</title><rect x="469.3" y="1027.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.3" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (1 samples, 0.03%)</title><rect x="469.3" y="1011.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.3" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (1 samples, 0.03%)</title><rect x="469.3" y="995.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="472.3" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (1 samples, 0.03%)</title><rect x="469.3" y="979.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.3" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="469.3" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.3" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="469.3" y="947.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.3" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="469.3" y="931.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.3" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="469.3" y="915.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.3" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="469.3" y="899.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.3" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="469.3" y="883.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="472.3" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="469.3" y="867.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="472.3" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="469.3" y="851.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="472.3" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="469.3" y="835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.3" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (20 samples, 0.58%)</title><rect x="469.6" y="1043.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="472.6" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (20 samples, 0.58%)</title><rect x="469.6" y="1027.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="472.6" y="1038.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (18 samples, 0.52%)</title><rect x="470.3" y="1011.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.3" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.49%)</title><rect x="470.6" y="995.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.6" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (15 samples, 0.43%)</title><rect x="471.3" y="979.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.3" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2087341211.compare (15 samples, 0.43%)</title><rect x="471.3" y="963.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="474.3" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (15 samples, 0.43%)</title><rect x="471.3" y="947.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.3" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (15 samples, 0.43%)</title><rect x="471.3" y="931.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.3" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (15 samples, 0.43%)</title><rect x="471.3" y="915.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.3" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (14 samples, 0.40%)</title><rect x="471.7" y="899.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.7" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (14 samples, 0.40%)</title><rect x="471.7" y="883.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.7" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/41709134.compare (14 samples, 0.40%)</title><rect x="471.7" y="867.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.7" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (14 samples, 0.40%)</title><rect x="471.7" y="851.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.7" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.17%)</title><rect x="471.7" y="835.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.7" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.17%)</title><rect x="471.7" y="819.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.7" y="830.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.09%)</title><rect x="472.0" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.0" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="472.3" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.03%)</title><rect x="472.7" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.03%)</title><rect x="472.7" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.7" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="473.0" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.0" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="473.0" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.0" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="473.4" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.4" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="473.4" y="787.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/284820576.apply (8 samples, 0.23%)</title><rect x="473.7" y="835.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.7" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (8 samples, 0.23%)</title><rect x="473.7" y="819.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.7" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.14%)</title><rect x="474.0" y="803.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.0" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.14%)</title><rect x="474.0" y="787.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.0" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.0" y="771.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="477.0" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.0" y="755.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.0" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.0" y="739.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.0" y="723.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.0" y="707.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.0" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="474.7" y="691.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.7" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="474.7" y="675.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.7" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="474.7" y="659.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.7" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="475.1" y="643.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.1" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="475.4" y="691.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="475.7" y="803.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="476.1" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.1" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (27 samples, 0.78%)</title><rect x="476.4" y="1043.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.4" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (27 samples, 0.78%)</title><rect x="476.4" y="1027.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.4" y="1038.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (27 samples, 0.78%)</title><rect x="476.4" y="1011.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.4" y="1022.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (27 samples, 0.78%)</title><rect x="476.4" y="995.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.4" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.78%)</title><rect x="476.4" y="979.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.4" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.78%)</title><rect x="476.4" y="963.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.4" y="974.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (19 samples, 0.55%)</title><rect x="476.4" y="947.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.4" y="958.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (4 samples, 0.12%)</title><rect x="476.8" y="931.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.8" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.12%)</title><rect x="476.8" y="915.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="479.8" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.12%)</title><rect x="476.8" y="899.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.8" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (4 samples, 0.12%)</title><rect x="476.8" y="883.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="479.8" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.09%)</title><rect x="477.1" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (14 samples, 0.40%)</title><rect x="478.1" y="931.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.1" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (14 samples, 0.40%)</title><rect x="478.1" y="915.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="481.1" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (14 samples, 0.40%)</title><rect x="478.1" y="899.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.1" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (7 samples, 0.20%)</title><rect x="478.5" y="883.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.5" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="478.5" y="867.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.5" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="478.5" y="851.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.5" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="478.5" y="835.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.5" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="478.5" y="819.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.5" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="478.5" y="803.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="478.5" y="787.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.5" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="478.5" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="481.5" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="478.5" y="755.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.5" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="478.8" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="481.8" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="478.8" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="481.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="478.8" y="707.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="478.8" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="481.8" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.12%)</title><rect x="479.1" y="867.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.1" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.12%)</title><rect x="479.1" y="851.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.1" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="479.1" y="835.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.1" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="479.1" y="819.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.1" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="479.1" y="803.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="482.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="479.1" y="787.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="479.8" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="480.2" y="771.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="483.2" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="480.5" y="867.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="483.5" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (5 samples, 0.14%)</title><rect x="480.8" y="883.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="480.8" y="867.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.8" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="480.8" y="851.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.8" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="480.8" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="483.8" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="480.8" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.8" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="480.8" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="483.8" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="480.8" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="480.8" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="480.8" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.8" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="480.8" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.8" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="480.8" y="723.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.8" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.09%)</title><rect x="481.2" y="867.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="484.2" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.09%)</title><rect x="481.2" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="484.2" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="481.2" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="484.2" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="481.2" y="819.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.2" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="481.2" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.2" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="481.2" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.2" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (1 samples, 0.03%)</title><rect x="482.2" y="867.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.2" y="878.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (1 samples, 0.03%)</title><rect x="482.2" y="851.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.2" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (1 samples, 0.03%)</title><rect x="482.5" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="485.5" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="482.5" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.5" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="482.5" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.5" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="482.5" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.5" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="482.5" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="482.5" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="482.5" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.5" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="482.5" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.5" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="482.5" y="755.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2087341211.compare (8 samples, 0.23%)</title><rect x="482.9" y="947.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.9" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (8 samples, 0.23%)</title><rect x="482.9" y="931.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="485.9" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (8 samples, 0.23%)</title><rect x="482.9" y="915.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.9" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.23%)</title><rect x="482.9" y="899.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.9" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (8 samples, 0.23%)</title><rect x="482.9" y="883.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="485.9" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.23%)</title><rect x="482.9" y="867.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.9" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/41709134.compare (8 samples, 0.23%)</title><rect x="482.9" y="851.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.9" y="862.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.23%)</title><rect x="482.9" y="835.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.12%)</title><rect x="483.6" y="819.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="486.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.12%)</title><rect x="483.6" y="803.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="486.6" y="814.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.06%)</title><rect x="483.6" y="787.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="486.6" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.06%)</title><rect x="483.6" y="771.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.6" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="483.6" y="755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.6" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.03%)</title><rect x="483.9" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.9" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="484.2" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="484.6" y="787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="487.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/284820576.apply (2 samples, 0.06%)</title><rect x="484.9" y="819.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="487.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.06%)</title><rect x="484.9" y="803.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="487.9" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="484.9" y="787.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.9" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="484.9" y="771.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="487.9" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="484.9" y="755.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.9" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="484.9" y="739.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.9" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="485.3" y="723.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="488.3" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="485.3" y="707.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.3" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="485.3" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.3" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="485.3" y="675.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="488.3" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="485.3" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$54/1283008629.apply (18 samples, 0.52%)</title><rect x="485.6" y="1059.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.6" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (16 samples, 0.46%)</title><rect x="486.3" y="1043.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="489.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.12%)</title><rect x="487.3" y="1027.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.12%)</title><rect x="487.3" y="1011.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="488.0" y="995.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="488.0" y="979.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.0" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="488.3" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="488.3" y="947.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.3" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="488.3" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.3" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="488.3" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.3" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.26%)</title><rect x="488.7" y="1027.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (8 samples, 0.23%)</title><rect x="489.0" y="1011.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.23%)</title><rect x="489.0" y="995.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="489.4" y="979.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="492.4" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="490.0" y="963.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.0" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.12%)</title><rect x="490.4" y="947.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.4" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="491.4" y="931.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.4" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="491.4" y="915.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.4" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.03%)</title><rect x="491.4" y="899.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.4" y="910.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (19 samples, 0.55%)</title><rect x="491.7" y="1139.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.7" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (4 samples, 0.12%)</title><rect x="491.7" y="1123.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.7" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.09%)</title><rect x="492.1" y="1107.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.1" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.09%)</title><rect x="492.1" y="1091.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="492.8" y="1075.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="495.8" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (15 samples, 0.43%)</title><rect x="493.1" y="1123.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.1" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$56/302072169.apply (14 samples, 0.40%)</title><rect x="493.4" y="1107.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.4" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (14 samples, 0.40%)</title><rect x="493.4" y="1091.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.4" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (10 samples, 0.29%)</title><rect x="493.4" y="1075.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.29%)</title><rect x="493.4" y="1059.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.29%)</title><rect x="493.4" y="1043.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="493.4" y="1027.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="496.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.26%)</title><rect x="493.8" y="1027.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.26%)</title><rect x="493.8" y="1011.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.26%)</title><rect x="493.8" y="995.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.26%)</title><rect x="493.8" y="979.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.8" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.23%)</title><rect x="494.1" y="963.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="497.1" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.23%)</title><rect x="494.1" y="947.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.1" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.09%)</title><rect x="495.1" y="931.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.1" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="496.2" y="931.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.2" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (4 samples, 0.12%)</title><rect x="496.8" y="1075.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="499.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.09%)</title><rect x="496.8" y="1059.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.09%)</title><rect x="496.8" y="1043.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="497.2" y="1027.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="497.2" y="1011.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="497.2" y="995.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="497.2" y="979.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.2" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="497.5" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.5" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="497.5" y="947.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.5" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="497.5" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.5" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="497.9" y="1059.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="497.9" y="1043.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="497.9" y="1027.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="497.9" y="1011.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="497.9" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="497.9" y="979.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.9" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.17%)</title><rect x="498.2" y="1139.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.12%)</title><rect x="498.9" y="1123.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.09%)</title><rect x="498.9" y="1107.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="499.2" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="499.6" y="1091.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.6" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.03%)</title><rect x="499.9" y="1107.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.9" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (3 samples, 0.09%)</title><rect x="500.2" y="1139.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="503.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="500.9" y="1123.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="503.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="500.9" y="1107.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="500.9" y="1091.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="500.9" y="1075.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="500.9" y="1059.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="500.9" y="1043.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="503.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="500.9" y="1027.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="503.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="500.9" y="1011.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.9" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,369 samples, 39.50%)</title><rect x="501.3" y="1139.0" width="466.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.3" y="1150.0">ru/mail/polis/dao/shakhmin/LSMDao.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (2 samples, 0.06%)</title><rect x="501.3" y="1123.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="504.3" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (1 samples, 0.03%)</title><rect x="501.6" y="1107.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.6" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="501.6" y="1091.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="502.0" y="1123.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="502.0" y="1107.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.03%)</title><rect x="502.0" y="1091.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="502.0" y="1075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="502.0" y="1059.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.0" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,366 samples, 39.41%)</title><rect x="502.3" y="1123.0" width="465.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.3" y="1134.0">ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator</text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="502.6" y="1107.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="505.6" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="502.6" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="505.6" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="502.6" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="505.6" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="502.6" y="1059.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="505.6" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="502.6" y="1043.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="505.6" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="502.6" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="505.6" y="1038.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="502.6" y="1011.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="505.6" y="1022.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="502.6" y="995.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="505.6" y="1006.0"></text>
</g>
<g>
<title>StackMapFrame::StackMapFrame(unsigned short, unsigned short, ClassVerifier*) (1 samples, 0.03%)</title><rect x="502.6" y="979.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="505.6" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (121 samples, 3.49%)</title><rect x="503.0" y="1107.0" width="41.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.0" y="1118.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (121 samples, 3.49%)</title><rect x="503.0" y="1091.0" width="41.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.0" y="1102.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.06%)</title><rect x="505.7" y="1075.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.7" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="506.0" y="1059.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="509.0" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.06%)</title><rect x="506.4" y="1075.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="509.4" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (2 samples, 0.06%)</title><rect x="507.1" y="1075.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="510.1" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.03%)</title><rect x="507.4" y="1059.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.4" y="1070.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (107 samples, 3.09%)</title><rect x="507.7" y="1075.0" width="36.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.7" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (106 samples, 3.06%)</title><rect x="508.1" y="1059.0" width="36.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.1" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (9 samples, 0.26%)</title><rect x="508.1" y="1043.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.14%)</title><rect x="509.1" y="1027.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.1" y="1038.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="510.8" y="1027.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="513.8" y="1038.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (96 samples, 2.77%)</title><rect x="511.1" y="1043.0" width="32.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="514.1" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (95 samples, 2.74%)</title><rect x="511.5" y="1027.0" width="32.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="514.5" y="1038.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (92 samples, 2.65%)</title><rect x="512.5" y="1011.0" width="31.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="515.5" y="1022.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (92 samples, 2.65%)</title><rect x="512.5" y="995.0" width="31.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.5" y="1006.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (58 samples, 1.67%)</title><rect x="512.8" y="979.0" width="19.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="515.8" y="990.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (3 samples, 0.09%)</title><rect x="513.9" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.9" y="974.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.09%)</title><rect x="513.9" y="947.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.9" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.09%)</title><rect x="513.9" y="931.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.9" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (3 samples, 0.09%)</title><rect x="513.9" y="915.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.9" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.09%)</title><rect x="513.9" y="899.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.9" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (1 samples, 0.03%)</title><rect x="514.5" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.5" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (52 samples, 1.50%)</title><rect x="514.9" y="963.0" width="17.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.9" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (52 samples, 1.50%)</title><rect x="514.9" y="947.0" width="17.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.9" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (52 samples, 1.50%)</title><rect x="514.9" y="931.0" width="17.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="517.9" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (32 samples, 0.92%)</title><rect x="515.2" y="915.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="518.2" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.20%)</title><rect x="515.2" y="899.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="518.2" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.20%)</title><rect x="515.2" y="883.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.2" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.17%)</title><rect x="515.6" y="867.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="518.6" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="515.6" y="851.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.6" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="515.6" y="835.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="518.6" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="515.6" y="819.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="516.2" y="803.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.2" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="516.2" y="787.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.06%)</title><rect x="516.2" y="771.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="519.2" y="782.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.06%)</title><rect x="516.2" y="755.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="519.2" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="516.9" y="771.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.9" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (18 samples, 0.52%)</title><rect x="517.6" y="899.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="520.6" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (14 samples, 0.40%)</title><rect x="519.0" y="883.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.0" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.40%)</title><rect x="519.0" y="867.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="522.0" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="521.4" y="851.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="524.4" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="521.4" y="835.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.4" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="521.4" y="819.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="522.4" y="803.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="525.4" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="522.7" y="803.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="525.7" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="523.1" y="787.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="526.1" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="523.1" y="771.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="526.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="523.1" y="755.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="526.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="523.1" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.1" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="523.4" y="787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (7 samples, 0.20%)</title><rect x="523.7" y="899.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.7" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.09%)</title><rect x="525.1" y="883.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.1" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (13 samples, 0.38%)</title><rect x="526.1" y="915.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.1" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.12%)</title><rect x="526.5" y="899.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="529.5" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.12%)</title><rect x="526.5" y="883.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.5" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.09%)</title><rect x="526.8" y="867.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="529.8" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="526.8" y="851.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.8" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="526.8" y="835.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="529.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="526.8" y="819.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="529.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="526.8" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.8" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="526.8" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="529.8" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="527.1" y="771.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.1" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="527.1" y="755.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="530.1" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.09%)</title><rect x="527.8" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="530.8" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="527.8" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="528.2" y="883.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.2" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="528.2" y="867.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.2" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="528.2" y="851.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="531.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="528.2" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.2" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="528.2" y="819.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.2" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="528.5" y="803.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.5" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="528.5" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="531.5" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="528.5" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="531.5" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="528.5" y="755.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="531.5" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="528.5" y="739.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="531.5" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.12%)</title><rect x="528.8" y="899.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="531.8" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.12%)</title><rect x="528.8" y="883.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="531.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="528.8" y="867.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.8" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="528.8" y="851.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="531.8" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="528.8" y="835.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="528.8" y="819.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="531.8" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="529.5" y="803.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.5" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="529.5" y="787.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="532.5" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="529.5" y="771.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="532.5" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="529.5" y="755.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="532.5" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="529.9" y="739.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="532.9" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (1 samples, 0.03%)</title><rect x="530.2" y="899.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.2" y="910.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (1 samples, 0.03%)</title><rect x="530.2" y="883.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="533.2" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (3 samples, 0.09%)</title><rect x="530.5" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.5" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.09%)</title><rect x="530.5" y="899.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.5" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.09%)</title><rect x="530.5" y="883.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.5" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="530.5" y="867.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.5" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="530.5" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.5" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="530.5" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.5" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="530.5" y="819.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.5" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="530.5" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.5" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.09%)</title><rect x="530.5" y="787.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.5" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="530.9" y="771.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="533.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (3 samples, 0.09%)</title><rect x="531.6" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="534.6" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="531.6" y="899.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.6" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="531.6" y="883.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="534.6" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="531.6" y="867.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.6" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="531.6" y="851.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.6" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="531.6" y="835.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.6" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="531.6" y="819.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="534.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="531.6" y="803.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.6" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="531.6" y="787.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="534.6" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="531.9" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.9" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="532.3" y="899.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.3" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="532.3" y="883.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="535.3" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="532.3" y="867.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="535.3" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="532.3" y="851.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="532.3" y="835.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.3" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="532.3" y="819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.3" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="532.3" y="803.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="535.3" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="532.3" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.3" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2087341211.compare (33 samples, 0.95%)</title><rect x="532.6" y="979.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="535.6" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (33 samples, 0.95%)</title><rect x="532.6" y="963.0" width="11.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.6" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (33 samples, 0.95%)</title><rect x="532.6" y="947.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.6" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.95%)</title><rect x="532.6" y="931.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.6" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (33 samples, 0.95%)</title><rect x="532.6" y="915.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.6" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.95%)</title><rect x="532.6" y="899.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.6" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.09%)</title><rect x="532.6" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.6" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/41709134.compare (30 samples, 0.87%)</title><rect x="533.6" y="883.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="536.6" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (30 samples, 0.87%)</title><rect x="533.6" y="867.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.6" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (16 samples, 0.46%)</title><rect x="534.3" y="851.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="537.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (16 samples, 0.46%)</title><rect x="534.3" y="835.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="537.3" y="846.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 0.29%)</title><rect x="535.3" y="819.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.3" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="536.7" y="803.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="539.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="537.0" y="803.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.09%)</title><rect x="537.7" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="540.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.06%)</title><rect x="537.7" y="787.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.7" y="798.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="538.4" y="787.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="541.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="538.7" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="541.7" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="539.1" y="819.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.1" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="539.4" y="803.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/284820576.apply (12 samples, 0.35%)</title><rect x="539.7" y="851.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.7" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (12 samples, 0.35%)</title><rect x="539.7" y="835.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.7" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.26%)</title><rect x="539.7" y="819.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="542.7" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.26%)</title><rect x="539.7" y="803.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="542.7" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.14%)</title><rect x="541.1" y="787.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.1" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="541.1" y="771.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.1" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="541.1" y="755.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="541.1" y="739.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="544.1" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="541.1" y="723.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.1" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="541.1" y="707.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="544.1" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="541.1" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.1" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="541.1" y="675.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="541.1" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.1" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="541.1" y="643.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.1" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.12%)</title><rect x="541.4" y="691.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.4" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="542.1" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.1" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="542.5" y="675.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="545.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="542.5" y="659.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.5" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="542.5" y="643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.5" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.09%)</title><rect x="542.8" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.8" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.09%)</title><rect x="542.8" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.8" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="542.8" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="545.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="542.8" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.8" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1 samples, 0.03%)</title><rect x="543.8" y="1043.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="544.2" y="1107.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.2" y="1118.0"></text>
</g>
<g>
<title>_invokeBasic (1 samples, 0.03%)</title><rect x="544.2" y="1091.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="547.2" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.03%)</title><rect x="544.5" y="1107.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.5" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.5" y="1091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="547.5" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (55 samples, 1.59%)</title><rect x="544.8" y="1107.0" width="18.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="547.8" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (55 samples, 1.59%)</title><rect x="544.8" y="1091.0" width="18.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="547.8" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (55 samples, 1.59%)</title><rect x="544.8" y="1075.0" width="18.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="547.8" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (5 samples, 0.14%)</title><rect x="544.8" y="1059.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="547.8" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (5 samples, 0.14%)</title><rect x="544.8" y="1043.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.8" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (5 samples, 0.14%)</title><rect x="544.8" y="1027.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="547.8" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (5 samples, 0.14%)</title><rect x="544.8" y="1011.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="547.8" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (4 samples, 0.12%)</title><rect x="544.8" y="995.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="544.8" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.8" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="544.8" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.8" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.8" y="947.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.8" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.8" y="931.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="547.8" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.8" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.8" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.8" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="547.8" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.8" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="547.8" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.8" y="867.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.8" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.09%)</title><rect x="545.2" y="979.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="548.2" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.09%)</title><rect x="545.2" y="963.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.2" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="545.2" y="947.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.2" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="545.5" y="931.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.5" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="545.9" y="915.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="548.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="545.9" y="899.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.9" y="910.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="545.9" y="883.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.9" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (1 samples, 0.03%)</title><rect x="546.2" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="546.2" y="979.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="549.2" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="546.2" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.2" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="546.2" y="947.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.2" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="546.2" y="931.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.2" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="546.2" y="915.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="549.2" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="546.2" y="899.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="549.2" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="546.2" y="883.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="549.2" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="546.2" y="867.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="549.2" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="546.2" y="851.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="546.2" y="835.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.2" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (18 samples, 0.52%)</title><rect x="546.5" y="1059.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="549.5" y="1070.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (18 samples, 0.52%)</title><rect x="546.5" y="1043.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="549.5" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (16 samples, 0.46%)</title><rect x="547.2" y="1027.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.2" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16 samples, 0.46%)</title><rect x="547.2" y="1011.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.2" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.40%)</title><rect x="547.9" y="995.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="550.9" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.03%)</title><rect x="547.9" y="979.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.9" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2087341211.compare (13 samples, 0.38%)</title><rect x="548.3" y="979.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="551.3" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (13 samples, 0.38%)</title><rect x="548.3" y="963.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="551.3" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (13 samples, 0.38%)</title><rect x="548.3" y="947.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="551.3" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (13 samples, 0.38%)</title><rect x="548.3" y="931.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.3" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (13 samples, 0.38%)</title><rect x="548.3" y="915.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.3" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (13 samples, 0.38%)</title><rect x="548.3" y="899.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.3" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/41709134.compare (13 samples, 0.38%)</title><rect x="548.3" y="883.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="551.3" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (13 samples, 0.38%)</title><rect x="548.3" y="867.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.3" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.09%)</title><rect x="548.3" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="548.6" y="835.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.6" y="846.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.06%)</title><rect x="548.6" y="819.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.6" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="548.9" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/284820576.apply (10 samples, 0.29%)</title><rect x="549.3" y="851.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.3" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (10 samples, 0.29%)</title><rect x="549.3" y="835.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="552.3" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.17%)</title><rect x="549.3" y="819.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.3" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.17%)</title><rect x="549.3" y="803.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.3" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.14%)</title><rect x="549.6" y="787.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.6" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="549.6" y="771.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="552.6" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="549.6" y="755.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="549.6" y="739.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="549.6" y="723.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.6" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="550.3" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.3" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="550.3" y="691.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.3" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="550.3" y="675.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.3" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="550.3" y="659.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="553.3" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.06%)</title><rect x="550.3" y="643.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.3" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="551.0" y="691.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="554.0" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="551.0" y="675.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="554.0" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.12%)</title><rect x="551.3" y="819.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="554.3" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.09%)</title><rect x="551.7" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="551.7" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="554.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="552.3" y="771.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="555.3" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="552.3" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="552.3" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.3" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="552.3" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.3" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="552.3" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="555.3" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (32 samples, 0.92%)</title><rect x="552.7" y="1059.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.7" y="1070.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (32 samples, 0.92%)</title><rect x="552.7" y="1043.0" width="10.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="555.7" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (32 samples, 0.92%)</title><rect x="552.7" y="1027.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.7" y="1038.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (32 samples, 0.92%)</title><rect x="552.7" y="1011.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="555.7" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (31 samples, 0.89%)</title><rect x="553.0" y="995.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.0" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (31 samples, 0.89%)</title><rect x="553.0" y="979.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="556.0" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (19 samples, 0.55%)</title><rect x="553.0" y="963.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="556.0" y="974.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.03%)</title><rect x="553.4" y="947.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="556.4" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="553.4" y="931.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="556.4" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="553.4" y="915.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.4" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.03%)</title><rect x="553.4" y="899.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.4" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="553.4" y="883.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="556.4" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (17 samples, 0.49%)</title><rect x="553.7" y="947.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="556.7" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (17 samples, 0.49%)</title><rect x="553.7" y="931.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="556.7" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (17 samples, 0.49%)</title><rect x="553.7" y="915.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="556.7" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (10 samples, 0.29%)</title><rect x="553.7" y="899.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.7" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="553.7" y="883.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="556.7" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="553.7" y="867.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="556.7" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="553.7" y="851.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="556.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="554.0" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.12%)</title><rect x="554.4" y="883.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="557.4" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.12%)</title><rect x="554.4" y="867.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="554.4" y="851.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="557.4" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="554.7" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.7" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="554.7" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="554.7" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.7" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.12%)</title><rect x="555.7" y="883.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.7" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="556.4" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="556.4" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.4" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="556.4" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.4" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="556.8" y="867.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.8" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (5 samples, 0.14%)</title><rect x="557.1" y="899.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="560.1" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="557.4" y="883.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="560.4" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="557.4" y="867.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="560.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.4" y="851.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.4" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.4" y="835.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="560.4" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.4" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="560.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.4" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="560.4" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.4" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.4" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.4" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.4" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="557.4" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.4" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="557.4" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="557.4" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="560.4" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="557.4" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.4" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="557.8" y="883.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="560.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.8" y="867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="560.8" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.8" y="851.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="560.8" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.8" y="835.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="560.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.8" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="560.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="557.8" y="803.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="560.8" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="557.8" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="560.8" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.06%)</title><rect x="558.1" y="883.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="561.1" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.5" y="867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.5" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.5" y="851.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="561.5" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.5" y="835.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="561.5" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.5" y="819.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="561.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.5" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.5" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.5" y="787.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="561.5" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="558.5" y="771.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.5" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="558.5" y="755.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="561.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="558.5" y="739.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (2 samples, 0.06%)</title><rect x="558.8" y="899.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="561.8" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="558.8" y="883.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="558.8" y="867.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.8" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.8" y="851.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="561.8" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.8" y="835.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="561.8" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.8" y="819.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.8" y="803.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.8" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.8" y="787.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="561.8" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="558.8" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.8" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="558.8" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.8" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="558.8" y="739.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="561.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="558.8" y="723.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.8" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="558.8" y="707.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="561.8" y="718.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="559.1" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="562.1" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="559.1" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="562.1" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="559.1" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.1" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="559.1" y="835.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.1" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="559.1" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.1" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="559.1" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.1" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="559.1" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="562.1" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="559.1" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="562.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2087341211.compare (12 samples, 0.35%)</title><rect x="559.5" y="963.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.5" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (12 samples, 0.35%)</title><rect x="559.5" y="947.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.5" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (12 samples, 0.35%)</title><rect x="559.5" y="931.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.5" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (12 samples, 0.35%)</title><rect x="559.5" y="915.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.5" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/256171401.compare (12 samples, 0.35%)</title><rect x="559.5" y="899.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.5" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (12 samples, 0.35%)</title><rect x="559.5" y="883.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.5" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/41709134.compare (12 samples, 0.35%)</title><rect x="559.5" y="867.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.5" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (12 samples, 0.35%)</title><rect x="559.5" y="851.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="562.5" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.23%)</title><rect x="559.5" y="835.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.5" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.23%)</title><rect x="559.5" y="819.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.5" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="559.8" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="562.8" y="814.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.14%)</title><rect x="560.2" y="803.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.2" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="561.9" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="564.9" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="561.9" y="787.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="564.9" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/284820576.apply (4 samples, 0.12%)</title><rect x="562.2" y="835.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="565.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.09%)</title><rect x="562.6" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="565.6" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="562.6" y="803.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="565.6" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="562.6" y="787.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="565.6" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="562.9" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="565.9" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="562.9" y="755.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="565.9" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="562.9" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="565.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="562.9" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="565.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="562.9" y="707.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="565.9" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="562.9" y="691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.9" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="562.9" y="675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="565.9" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="562.9" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="565.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="562.9" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="565.9" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="562.9" y="627.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="565.9" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="563.2" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.2" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="563.2" y="787.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="563.2" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="566.2" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="563.2" y="755.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="566.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (106 samples, 3.06%)</title><rect x="563.6" y="1107.0" width="36.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="566.6" y="1118.0">ru/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.03%)</title><rect x="567.7" y="1091.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="570.7" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (62 samples, 1.79%)</title><rect x="568.0" y="1091.0" width="21.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.0" y="1102.0">j..</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (62 samples, 1.79%)</title><rect x="568.0" y="1075.0" width="21.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.0" y="1086.0">j..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (57 samples, 1.64%)</title><rect x="568.0" y="1059.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="571.0" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (57 samples, 1.64%)</title><rect x="568.0" y="1043.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.0" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.tooHigh (3 samples, 0.09%)</title><rect x="568.0" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.0" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.09%)</title><rect x="568.0" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.06%)</title><rect x="568.0" y="995.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.06%)</title><rect x="568.0" y="979.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="571.0" y="990.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.03%)</title><rect x="568.7" y="995.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="571.7" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (54 samples, 1.56%)</title><rect x="569.0" y="1027.0" width="18.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="572.0" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (53 samples, 1.53%)</title><rect x="569.4" y="1011.0" width="18.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (8 samples, 0.23%)</title><rect x="570.0" y="995.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (8 samples, 0.23%)</title><rect x="570.0" y="979.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (8 samples, 0.23%)</title><rect x="570.0" y="963.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="572.4" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="575.4" y="958.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="572.4" y="931.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.4" y="942.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (7 samples, 0.20%)</title><rect x="572.8" y="995.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="575.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (36 samples, 1.04%)</title><rect x="575.1" y="995.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (34 samples, 0.98%)</title><rect x="575.8" y="979.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="578.8" y="990.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (20 samples, 0.58%)</title><rect x="577.5" y="963.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="580.5" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.12%)</title><rect x="582.3" y="947.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="585.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.09%)</title><rect x="582.6" y="931.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="585.6" y="942.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.06%)</title><rect x="583.7" y="947.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.7" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (5 samples, 0.14%)</title><rect x="584.3" y="963.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="587.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Byte.compare (3 samples, 0.09%)</title><rect x="585.0" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.0" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.12%)</title><rect x="586.0" y="963.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="589.0" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.12%)</title><rect x="586.0" y="947.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="589.0" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (5 samples, 0.14%)</title><rect x="587.4" y="1059.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.4" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.&lt;init&gt; (1 samples, 0.03%)</title><rect x="588.8" y="1043.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.8" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.&lt;init&gt; (1 samples, 0.03%)</title><rect x="588.8" y="1027.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.8" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (1 samples, 0.03%)</title><rect x="589.1" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="592.1" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1 samples, 0.03%)</title><rect x="589.4" y="1091.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="592.4" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (29 samples, 0.84%)</title><rect x="589.8" y="1091.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="592.8" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (29 samples, 0.84%)</title><rect x="589.8" y="1075.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.8" y="1086.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (28 samples, 0.81%)</title><rect x="590.1" y="1059.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.1" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (27 samples, 0.78%)</title><rect x="590.5" y="1043.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.5" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (26 samples, 0.75%)</title><rect x="590.8" y="1027.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="593.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (22 samples, 0.63%)</title><rect x="592.2" y="1011.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="595.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (22 samples, 0.63%)</title><rect x="592.2" y="995.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="595.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.12%)</title><rect x="594.9" y="979.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.9" y="990.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.09%)</title><rect x="596.3" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.3" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="596.6" y="963.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="599.6" y="974.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="596.9" y="963.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="599.9" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.20%)</title><rect x="597.3" y="979.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.3" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.03%)</title><rect x="598.0" y="963.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="601.0" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (4 samples, 0.12%)</title><rect x="598.3" y="963.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.3" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (1,080 samples, 31.16%)</title><rect x="599.7" y="1107.0" width="367.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="602.7" y="1118.0">ru/mail/polis/dao/shakhmin/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (1,076 samples, 31.04%)</title><rect x="601.0" y="1091.0" width="366.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.0" y="1102.0">ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (1,075 samples, 31.02%)</title><rect x="601.4" y="1075.0" width="365.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="604.4" y="1086.0">ru/mail/polis/dao/shakhmin/SSTable.position</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (172 samples, 4.96%)</title><rect x="613.6" y="1059.0" width="58.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.6" y="1070.0">java/n..</text>
</g>
<g>
<title>java/nio/Buffer.position (14 samples, 0.40%)</title><rect x="619.1" y="1043.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.14%)</title><rect x="622.1" y="1027.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="625.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="623.8" y="1043.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (129 samples, 3.72%)</title><rect x="624.2" y="1043.0" width="43.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.2" y="1054.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.32%)</title><rect x="652.1" y="1027.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="655.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="654.1" y="1011.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.03%)</title><rect x="654.5" y="1011.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.5" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (3 samples, 0.09%)</title><rect x="654.8" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="657.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (9 samples, 0.26%)</title><rect x="655.8" y="1027.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.17%)</title><rect x="658.9" y="1027.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="661.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.06%)</title><rect x="659.2" y="1011.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="662.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (3 samples, 0.09%)</title><rect x="659.9" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.9" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (13 samples, 0.38%)</title><rect x="660.9" y="1027.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.9" y="1038.0"></text>
</g>
<g>
<title>vtable stub (8 samples, 0.23%)</title><rect x="665.4" y="1027.0" width="2.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="668.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.26%)</title><rect x="668.1" y="1043.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.26%)</title><rect x="668.1" y="1027.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.09%)</title><rect x="671.2" y="1043.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.09%)</title><rect x="671.2" y="1027.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.2" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (442 samples, 12.75%)</title><rect x="672.2" y="1059.0" width="150.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.2" y="1070.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (102 samples, 2.94%)</title><rect x="672.5" y="1043.0" width="34.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="675.5" y="1054.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (6 samples, 0.17%)</title><rect x="672.5" y="1027.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (96 samples, 2.77%)</title><rect x="674.6" y="1027.0" width="32.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="677.6" y="1038.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (96 samples, 2.77%)</title><rect x="674.6" y="1011.0" width="32.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.6" y="1022.0">jd..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (91 samples, 2.63%)</title><rect x="676.3" y="995.0" width="30.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.3" y="1006.0">jd..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (72 samples, 2.08%)</title><rect x="707.2" y="1043.0" width="24.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.2" y="1054.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (72 samples, 2.08%)</title><rect x="707.2" y="1027.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.2" y="1038.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="711.7" y="1011.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.06%)</title><rect x="712.0" y="1011.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="715.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (56 samples, 1.62%)</title><rect x="712.7" y="1011.0" width="19.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (56 samples, 1.62%)</title><rect x="712.7" y="995.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="715.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (52 samples, 1.50%)</title><rect x="714.1" y="979.0" width="17.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="717.1" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (52 samples, 1.50%)</title><rect x="714.1" y="963.0" width="17.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.1" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (52 samples, 1.50%)</title><rect x="714.1" y="947.0" width="17.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.1" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (45 samples, 1.30%)</title><rect x="716.4" y="931.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.4" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.23%)</title><rect x="717.5" y="915.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="720.5" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.14%)</title><rect x="718.5" y="899.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.5" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.12%)</title><rect x="718.8" y="883.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="721.8" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.12%)</title><rect x="718.8" y="867.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="721.8" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (34 samples, 0.98%)</title><rect x="720.2" y="915.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="723.2" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.29%)</title><rect x="724.9" y="899.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="727.9" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (10 samples, 0.29%)</title><rect x="728.3" y="899.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.3" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.29%)</title><rect x="728.3" y="883.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.3" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.29%)</title><rect x="728.3" y="867.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="731.3" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (160 samples, 4.62%)</title><rect x="731.8" y="1043.0" width="54.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="734.8" y="1054.0">java/..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="736.2" y="1027.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (146 samples, 4.21%)</title><rect x="736.5" y="1027.0" width="49.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.5" y="1038.0">java/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (144 samples, 4.15%)</title><rect x="737.2" y="1011.0" width="49.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.2" y="1022.0">java/..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (138 samples, 3.98%)</title><rect x="739.2" y="995.0" width="47.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="742.2" y="1006.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (138 samples, 3.98%)</title><rect x="739.2" y="979.0" width="47.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="742.2" y="990.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (138 samples, 3.98%)</title><rect x="739.2" y="963.0" width="47.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="742.2" y="974.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (51 samples, 1.47%)</title><rect x="760.0" y="947.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="763.0" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.63%)</title><rect x="761.7" y="931.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.7" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.63%)</title><rect x="761.7" y="915.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="764.7" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (16 samples, 0.46%)</title><rect x="763.8" y="899.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.8" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (16 samples, 0.46%)</title><rect x="763.8" y="883.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="766.8" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.69%)</title><rect x="769.2" y="931.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.2" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (24 samples, 0.69%)</title><rect x="769.2" y="915.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.2" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="774.0" y="899.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.0" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.26%)</title><rect x="774.3" y="899.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.3" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.26%)</title><rect x="774.3" y="883.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.3" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.29%)</title><rect x="777.4" y="947.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="780.4" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.26%)</title><rect x="780.8" y="947.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="783.8" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (7 samples, 0.20%)</title><rect x="783.8" y="947.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="786.8" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (89 samples, 2.57%)</title><rect x="786.2" y="1043.0" width="30.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.2" y="1054.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (76 samples, 2.19%)</title><rect x="790.7" y="1027.0" width="25.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="793.7" y="1038.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (75 samples, 2.16%)</title><rect x="791.0" y="1011.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.0" y="1022.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (67 samples, 1.93%)</title><rect x="793.7" y="995.0" width="22.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.7" y="1006.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (67 samples, 1.93%)</title><rect x="793.7" y="979.0" width="22.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.7" y="990.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (67 samples, 1.93%)</title><rect x="793.7" y="963.0" width="22.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="796.7" y="974.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (51 samples, 1.47%)</title><rect x="796.4" y="947.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="799.4" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.46%)</title><rect x="799.5" y="931.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="802.5" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.46%)</title><rect x="799.5" y="915.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.5" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.40%)</title><rect x="800.2" y="899.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="803.2" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (14 samples, 0.40%)</title><rect x="800.2" y="883.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.2" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.75%)</title><rect x="805.0" y="931.0" width="8.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.0" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.75%)</title><rect x="805.0" y="915.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="808.0" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.23%)</title><rect x="809.7" y="899.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="812.7" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.12%)</title><rect x="812.4" y="899.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="815.4" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.12%)</title><rect x="812.4" y="883.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.4" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.23%)</title><rect x="813.8" y="947.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.8" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (18 samples, 0.52%)</title><rect x="816.5" y="1043.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="819.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (18 samples, 0.52%)</title><rect x="816.5" y="1027.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="819.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (18 samples, 0.52%)</title><rect x="816.5" y="1011.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="819.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (18 samples, 0.52%)</title><rect x="816.5" y="995.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.5" y="1006.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="822.3" y="979.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="825.3" y="990.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="822.3" y="963.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="825.3" y="974.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="822.3" y="947.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="825.3" y="958.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="822.3" y="931.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="825.3" y="942.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="822.3" y="915.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="825.3" y="926.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="822.3" y="899.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="825.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (425 samples, 12.26%)</title><rect x="822.7" y="1059.0" width="144.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="825.7" y="1070.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (70 samples, 2.02%)</title><rect x="830.1" y="1043.0" width="23.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.1" y="1054.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (70 samples, 2.02%)</title><rect x="830.1" y="1027.0" width="23.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="833.1" y="1038.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.12%)</title><rect x="833.5" y="1011.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (56 samples, 1.62%)</title><rect x="834.9" y="1011.0" width="19.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (56 samples, 1.62%)</title><rect x="834.9" y="995.0" width="19.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="837.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (52 samples, 1.50%)</title><rect x="836.3" y="979.0" width="17.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (52 samples, 1.50%)</title><rect x="836.3" y="963.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (52 samples, 1.50%)</title><rect x="836.3" y="947.0" width="17.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (47 samples, 1.36%)</title><rect x="838.0" y="931.0" width="16.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.0" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (18 samples, 0.52%)</title><rect x="839.3" y="915.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="842.3" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (18 samples, 0.52%)</title><rect x="839.3" y="899.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="842.3" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (15 samples, 0.43%)</title><rect x="840.4" y="883.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="843.4" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (15 samples, 0.43%)</title><rect x="840.4" y="867.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="843.4" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.72%)</title><rect x="845.5" y="915.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="848.5" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.72%)</title><rect x="845.5" y="899.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.5" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.09%)</title><rect x="850.6" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="853.6" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.20%)</title><rect x="851.6" y="883.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.6" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.20%)</title><rect x="851.6" y="867.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.6" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (138 samples, 3.98%)</title><rect x="854.0" y="1043.0" width="47.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="857.0" y="1054.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="858.7" y="1027.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.03%)</title><rect x="859.1" y="1027.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="862.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (122 samples, 3.52%)</title><rect x="859.4" y="1027.0" width="41.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="862.4" y="1038.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (120 samples, 3.46%)</title><rect x="860.1" y="1011.0" width="40.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="863.1" y="1022.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (119 samples, 3.43%)</title><rect x="860.4" y="995.0" width="40.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.4" y="1006.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (119 samples, 3.43%)</title><rect x="860.4" y="979.0" width="40.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.4" y="990.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (119 samples, 3.43%)</title><rect x="860.4" y="963.0" width="40.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.4" y="974.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (28 samples, 0.81%)</title><rect x="887.7" y="947.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="890.7" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.29%)</title><rect x="889.7" y="931.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="892.7" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.29%)</title><rect x="889.7" y="915.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="892.7" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.29%)</title><rect x="889.7" y="899.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="892.7" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.23%)</title><rect x="890.4" y="883.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.4" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.35%)</title><rect x="893.1" y="931.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="896.1" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.35%)</title><rect x="893.1" y="915.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.1" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.35%)</title><rect x="893.1" y="899.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="896.1" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.09%)</title><rect x="895.2" y="883.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="898.2" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.09%)</title><rect x="896.2" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="899.2" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.23%)</title><rect x="897.2" y="947.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="900.2" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.09%)</title><rect x="899.9" y="947.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="902.9" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (101 samples, 2.91%)</title><rect x="901.0" y="1043.0" width="34.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="904.0" y="1054.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (98 samples, 2.83%)</title><rect x="902.0" y="1027.0" width="33.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="905.0" y="1038.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (94 samples, 2.71%)</title><rect x="903.3" y="1011.0" width="32.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.3" y="1022.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (86 samples, 2.48%)</title><rect x="906.1" y="995.0" width="29.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.1" y="1006.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (86 samples, 2.48%)</title><rect x="906.1" y="979.0" width="29.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.1" y="990.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (86 samples, 2.48%)</title><rect x="906.1" y="963.0" width="29.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.1" y="974.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (63 samples, 1.82%)</title><rect x="911.9" y="947.0" width="21.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="914.9" y="958.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.32%)</title><rect x="913.6" y="931.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.6" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (11 samples, 0.32%)</title><rect x="913.6" y="915.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="916.6" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.32%)</title><rect x="913.6" y="899.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="916.6" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.17%)</title><rect x="915.3" y="883.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.3" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (47 samples, 1.36%)</title><rect x="917.3" y="931.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.3" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (47 samples, 1.36%)</title><rect x="917.3" y="915.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.3" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (47 samples, 1.36%)</title><rect x="917.3" y="899.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.3" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.14%)</title><rect x="928.9" y="883.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.9" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.23%)</title><rect x="930.6" y="883.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="933.6" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.17%)</title><rect x="933.3" y="947.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="936.3" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (85 samples, 2.45%)</title><rect x="935.3" y="1043.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.3" y="1054.0">ja..</text>
</g>
<g>
<title>java/nio/Bits.swap (75 samples, 2.16%)</title><rect x="935.3" y="1027.0" width="25.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="938.3" y="1038.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.26%)</title><rect x="960.9" y="1027.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="963.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (1 samples, 0.03%)</title><rect x="963.9" y="1027.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="966.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.12%)</title><rect x="964.3" y="1043.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="967.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.12%)</title><rect x="964.3" y="1027.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="967.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.12%)</title><rect x="964.3" y="1011.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="967.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.12%)</title><rect x="964.3" y="995.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="967.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.14%)</title><rect x="965.6" y="1043.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="968.6" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.14%)</title><rect x="965.6" y="1027.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="968.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.14%)</title><rect x="965.6" y="1011.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="968.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.14%)</title><rect x="965.6" y="995.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="968.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (3 samples, 0.09%)</title><rect x="967.3" y="1187.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="970.3" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.06%)</title><rect x="968.4" y="1187.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="971.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="968.4" y="1171.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="968.4" y="1155.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="971.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="968.7" y="1139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="971.7" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (8 samples, 0.23%)</title><rect x="969.0" y="1187.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="970.1" y="1171.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="970.1" y="1155.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="973.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="970.1" y="1139.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="973.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="970.4" y="1123.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="973.4" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (3 samples, 0.09%)</title><rect x="970.8" y="1171.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="973.8" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (28 samples, 0.81%)</title><rect x="971.8" y="1219.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="974.8" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10 samples, 0.29%)</title><rect x="974.5" y="1203.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="977.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="977.2" y="1187.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="980.2" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.29%)</title><rect x="977.9" y="1203.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="980.9" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.29%)</title><rect x="977.9" y="1187.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.23%)</title><rect x="978.6" y="1171.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="981.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (8 samples, 0.23%)</title><rect x="978.6" y="1155.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="981.6" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.23%)</title><rect x="981.3" y="1219.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.23%)</title><rect x="981.3" y="1203.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="984.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.23%)</title><rect x="981.3" y="1187.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="984.3" y="1198.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2 samples, 0.06%)</title><rect x="982.0" y="1171.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="985.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="982.7" y="1171.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="985.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="982.7" y="1155.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="985.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.03%)</title><rect x="983.3" y="1171.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="986.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="983.7" y="1171.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="986.7" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (7 samples, 0.20%)</title><rect x="984.0" y="1219.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="987.0" y="1230.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.09%)</title><rect x="985.0" y="1203.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="988.0" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="986.1" y="1203.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="989.1" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.20%)</title><rect x="986.4" y="1219.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.06%)</title><rect x="988.1" y="1203.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="991.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.06%)</title><rect x="988.1" y="1187.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.1" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="988.8" y="1219.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="991.8" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="988.8" y="1203.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.09%)</title><rect x="988.8" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="991.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (3 samples, 0.09%)</title><rect x="988.8" y="1171.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="991.8" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (189 samples, 5.45%)</title><rect x="989.8" y="1235.0" width="64.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="992.8" y="1246.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (175 samples, 5.05%)</title><rect x="994.6" y="1219.0" width="59.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="997.6" y="1230.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.06%)</title><rect x="996.6" y="1203.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="999.6" y="1214.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.69%)</title><rect x="997.3" y="1203.0" width="8.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1000.3" y="1214.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 0.69%)</title><rect x="997.3" y="1187.0" width="8.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1000.3" y="1198.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (16 samples, 0.46%)</title><rect x="997.3" y="1171.0" width="5.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1000.3" y="1182.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.06%)</title><rect x="997.6" y="1155.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.6" y="1166.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.06%)</title><rect x="998.3" y="1155.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.3" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.06%)</title><rect x="999.0" y="1155.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1002.0" y="1166.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.09%)</title><rect x="999.7" y="1155.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1002.7" y="1166.0"></text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="1000.7" y="1155.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1003.7" y="1166.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.09%)</title><rect x="1001.4" y="1155.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1004.4" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.06%)</title><rect x="1001.7" y="1139.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.7" y="1150.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="1002.4" y="1155.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.4" y="1166.0"></text>
</g>
<g>
<title>__libc_recv (5 samples, 0.14%)</title><rect x="1002.8" y="1171.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1005.8" y="1182.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.06%)</title><rect x="1004.5" y="1171.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1007.5" y="1182.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="1005.1" y="1171.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1008.1" y="1182.0"></text>
</g>
<g>
<title>__libc_recv (143 samples, 4.13%)</title><rect x="1005.5" y="1203.0" width="48.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1008.5" y="1214.0">__li..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (114 samples, 3.29%)</title><rect x="1015.3" y="1187.0" width="38.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1018.3" y="1198.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (114 samples, 3.29%)</title><rect x="1015.3" y="1171.0" width="38.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1018.3" y="1182.0">do_..</text>
</g>
<g>
<title>__x64_sys_recvfrom (100 samples, 2.89%)</title><rect x="1020.1" y="1155.0" width="34.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1023.1" y="1166.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (98 samples, 2.83%)</title><rect x="1020.8" y="1139.0" width="33.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1023.8" y="1150.0">__..</text>
</g>
<g>
<title>fput_many (3 samples, 0.09%)</title><rect x="1021.1" y="1123.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1024.1" y="1134.0"></text>
</g>
<g>
<title>import_single_range (3 samples, 0.09%)</title><rect x="1022.2" y="1123.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1025.2" y="1134.0"></text>
</g>
<g>
<title>iov_iter_init (2 samples, 0.06%)</title><rect x="1022.5" y="1107.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1025.5" y="1118.0"></text>
</g>
<g>
<title>inet_recvmsg (69 samples, 1.99%)</title><rect x="1023.2" y="1123.0" width="23.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1026.2" y="1134.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (69 samples, 1.99%)</title><rect x="1023.2" y="1107.0" width="23.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1026.2" y="1118.0">t..</text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.26%)</title><rect x="1027.6" y="1091.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1030.6" y="1102.0"></text>
</g>
<g>
<title>skb_release_all (9 samples, 0.26%)</title><rect x="1027.6" y="1075.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1030.6" y="1086.0"></text>
</g>
<g>
<title>skb_release_head_state (9 samples, 0.26%)</title><rect x="1027.6" y="1059.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1030.6" y="1070.0"></text>
</g>
<g>
<title>sock_rfree (8 samples, 0.23%)</title><rect x="1027.9" y="1043.0" width="2.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1030.9" y="1054.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="1030.7" y="1091.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1033.7" y="1102.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.06%)</title><rect x="1031.0" y="1091.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1034.0" y="1102.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="1031.0" y="1075.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1034.0" y="1086.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="1031.0" y="1059.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1034.0" y="1070.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1031.4" y="1075.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1034.4" y="1086.0"></text>
</g>
<g>
<title>ns_to_timespec64 (1 samples, 0.03%)</title><rect x="1031.7" y="1091.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1034.7" y="1102.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.14%)</title><rect x="1032.0" y="1091.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1035.0" y="1102.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.12%)</title><rect x="1032.4" y="1075.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1035.4" y="1086.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (29 samples, 0.84%)</title><rect x="1033.7" y="1091.0" width="9.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1036.7" y="1102.0"></text>
</g>
<g>
<title>__skb_datagram_iter (29 samples, 0.84%)</title><rect x="1033.7" y="1075.0" width="9.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1036.7" y="1086.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_r9 (1 samples, 0.03%)</title><rect x="1034.1" y="1059.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1037.1" y="1070.0"></text>
</g>
<g>
<title>_copy_to_iter (10 samples, 0.29%)</title><rect x="1034.4" y="1059.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1037.4" y="1070.0"></text>
</g>
<g>
<title>copyout (9 samples, 0.26%)</title><rect x="1034.8" y="1043.0" width="3.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1037.8" y="1054.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (9 samples, 0.26%)</title><rect x="1034.8" y="1027.0" width="3.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1037.8" y="1038.0"></text>
</g>
<g>
<title>simple_copy_to_iter (17 samples, 0.49%)</title><rect x="1037.8" y="1059.0" width="5.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1040.8" y="1070.0"></text>
</g>
<g>
<title>__check_object_size (15 samples, 0.43%)</title><rect x="1038.5" y="1043.0" width="5.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1041.5" y="1054.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.06%)</title><rect x="1040.5" y="1027.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1043.5" y="1038.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.20%)</title><rect x="1041.2" y="1027.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1044.2" y="1038.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.09%)</title><rect x="1043.6" y="1091.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1046.6" y="1102.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.06%)</title><rect x="1044.6" y="1091.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1047.6" y="1102.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.06%)</title><rect x="1044.6" y="1075.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1047.6" y="1086.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (4 samples, 0.12%)</title><rect x="1045.3" y="1091.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1048.3" y="1102.0"></text>
</g>
<g>
<title>sock_recvmsg (15 samples, 0.43%)</title><rect x="1046.7" y="1123.0" width="5.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1049.7" y="1134.0"></text>
</g>
<g>
<title>security_socket_recvmsg (14 samples, 0.40%)</title><rect x="1047.0" y="1107.0" width="4.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1050.0" y="1118.0"></text>
</g>
<g>
<title>sock_has_perm (12 samples, 0.35%)</title><rect x="1047.7" y="1091.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1050.7" y="1102.0"></text>
</g>
<g>
<title>avc_has_perm (6 samples, 0.17%)</title><rect x="1049.7" y="1075.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1052.7" y="1086.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7 samples, 0.20%)</title><rect x="1051.8" y="1123.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1054.8" y="1134.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.06%)</title><rect x="1051.8" y="1107.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1054.8" y="1118.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.14%)</title><rect x="1052.5" y="1107.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1055.5" y="1118.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.09%)</title><rect x="1053.1" y="1091.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1056.1" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="1054.2" y="1267.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.2" y="1278.0"></text>
</g>
<g>
<title>[tid=1191] (26 samples, 0.75%)</title><rect x="1054.5" y="1299.0" width="8.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1057.5" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1054.5" y="1283.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1057.5" y="1294.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (1 samples, 0.03%)</title><rect x="1054.5" y="1267.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1057.5" y="1278.0"></text>
</g>
<g>
<title>start_thread (25 samples, 0.72%)</title><rect x="1054.8" y="1283.0" width="8.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1057.8" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 0.72%)</title><rect x="1054.8" y="1267.0" width="8.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1057.8" y="1278.0"></text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 0.72%)</title><rect x="1054.8" y="1251.0" width="8.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1057.8" y="1262.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1054.8" y="1235.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.8" y="1246.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1054.8" y="1219.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.8" y="1230.0"></text>
</g>
<g>
<title>TruncatedSeq::add(double) (1 samples, 0.03%)</title><rect x="1054.8" y="1203.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.8" y="1214.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.03%)</title><rect x="1055.2" y="1219.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.2" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 0.58%)</title><rect x="1055.5" y="1235.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1058.5" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (17 samples, 0.49%)</title><rect x="1055.5" y="1219.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.5" y="1230.0"></text>
</g>
<g>
<title>SpinPause (17 samples, 0.49%)</title><rect x="1055.5" y="1203.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1058.5" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1061.3" y="1219.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.3" y="1230.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1061.3" y="1203.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.3" y="1214.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1061.3" y="1187.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.3" y="1198.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.03%)</title><rect x="1061.3" y="1171.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.3" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.06%)</title><rect x="1061.7" y="1219.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1064.7" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1061.7" y="1203.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.7" y="1214.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1061.7" y="1187.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.7" y="1198.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1061.7" y="1171.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.7" y="1182.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.03%)</title><rect x="1061.7" y="1155.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.7" y="1166.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1061.7" y="1139.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.7" y="1150.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.03%)</title><rect x="1062.0" y="1203.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.0" y="1214.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1062.3" y="1235.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.3" y="1246.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (1 samples, 0.03%)</title><rect x="1062.3" y="1219.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.3" y="1230.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.03%)</title><rect x="1062.3" y="1203.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.3" y="1214.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_unlink(OopStorage::ParState&lt;false, false&gt;*, BoolObjectClosure*, int*, int*) (1 samples, 0.03%)</title><rect x="1062.7" y="1219.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.7" y="1230.0"></text>
</g>
<g>
<title>G1CMIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.03%)</title><rect x="1062.7" y="1203.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.7" y="1214.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1063.0" y="1235.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.0" y="1246.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="1063.0" y="1219.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.0" y="1230.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.03%)</title><rect x="1063.0" y="1203.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.0" y="1214.0"></text>
</g>
<g>
<title>[tid=1193] (138 samples, 3.98%)</title><rect x="1063.4" y="1299.0" width="46.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1066.4" y="1310.0">[tid..</text>
</g>
<g>
<title>start_thread (138 samples, 3.98%)</title><rect x="1063.4" y="1283.0" width="46.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1066.4" y="1294.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (138 samples, 3.98%)</title><rect x="1063.4" y="1267.0" width="46.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1066.4" y="1278.0">thre..</text>
</g>
<g>
<title>GangWorker::loop() (138 samples, 3.98%)</title><rect x="1063.4" y="1251.0" width="46.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.4" y="1262.0">Gang..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (95 samples, 2.74%)</title><rect x="1063.4" y="1235.0" width="32.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.4" y="1246.0">G1..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (92 samples, 2.65%)</title><rect x="1063.4" y="1219.0" width="31.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.4" y="1230.0">G1..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.97] (4 samples, 0.12%)</title><rect x="1066.1" y="1203.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.1" y="1214.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.394] (4 samples, 0.12%)</title><rect x="1067.4" y="1203.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.4" y="1214.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (46 samples, 1.33%)</title><rect x="1068.8" y="1203.0" width="15.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.8" y="1214.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (37 samples, 1.07%)</title><rect x="1071.9" y="1187.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.9" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (33 samples, 0.95%)</title><rect x="1073.2" y="1171.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.2" y="1182.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (3 samples, 0.09%)</title><rect x="1084.5" y="1203.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.5" y="1214.0"></text>
</g>
<g>
<title>__GI_getrusage (2 samples, 0.06%)</title><rect x="1084.5" y="1187.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1087.5" y="1198.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1084.8" y="1171.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1087.8" y="1182.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1084.8" y="1155.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1087.8" y="1166.0"></text>
</g>
<g>
<title>os::elapsedVTime() (1 samples, 0.03%)</title><rect x="1085.1" y="1187.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.1" y="1198.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.09%)</title><rect x="1085.5" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.5" y="1214.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (24 samples, 0.69%)</title><rect x="1086.5" y="1203.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.5" y="1214.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (19 samples, 0.55%)</title><rect x="1087.2" y="1187.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.2" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1093.7" y="1187.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.7" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1094.3" y="1187.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.3" y="1198.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.394] (1 samples, 0.03%)</title><rect x="1094.7" y="1219.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.7" y="1230.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.06%)</title><rect x="1095.0" y="1219.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.0" y="1230.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (43 samples, 1.24%)</title><rect x="1095.7" y="1235.0" width="14.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.7" y="1246.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (43 samples, 1.24%)</title><rect x="1095.7" y="1219.0" width="14.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.7" y="1230.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (42 samples, 1.21%)</title><rect x="1095.7" y="1203.0" width="14.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.7" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.03%)</title><rect x="1103.9" y="1187.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.9" y="1198.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.03%)</title><rect x="1104.2" y="1187.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.2" y="1198.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (4 samples, 0.12%)</title><rect x="1104.5" y="1187.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.5" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (10 samples, 0.29%)</title><rect x="1105.9" y="1187.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.9" y="1198.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (3 samples, 0.09%)</title><rect x="1108.3" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.3" y="1182.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1109.3" y="1187.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.3" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1109.7" y="1187.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.7" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1110.0" y="1203.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.0" y="1214.0"></text>
</g>
<g>
<title>[tid=1195] (1 samples, 0.03%)</title><rect x="1110.3" y="1299.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1113.3" y="1310.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.03%)</title><rect x="1110.3" y="1283.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1113.3" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="1110.3" y="1267.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1113.3" y="1278.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.03%)</title><rect x="1110.3" y="1251.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.3" y="1262.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.03%)</title><rect x="1110.3" y="1235.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.3" y="1246.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.03%)</title><rect x="1110.3" y="1219.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1113.3" y="1230.0"></text>
</g>
<g>
<title>[tid=1196] (9 samples, 0.26%)</title><rect x="1110.7" y="1299.0" width="3.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1113.7" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1110.7" y="1283.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1113.7" y="1294.0"></text>
</g>
<g>
<title>__vsnprintf_internal (1 samples, 0.03%)</title><rect x="1110.7" y="1267.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1113.7" y="1278.0"></text>
</g>
<g>
<title>__vfprintf_internal (1 samples, 0.03%)</title><rect x="1110.7" y="1251.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1113.7" y="1262.0"></text>
</g>
<g>
<title>.annobin_divrem.c (1 samples, 0.03%)</title><rect x="1110.7" y="1235.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1113.7" y="1246.0"></text>
</g>
<g>
<title>__GI___clock_gettime (1 samples, 0.03%)</title><rect x="1111.0" y="1283.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1114.0" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1111.0" y="1267.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1114.0" y="1278.0"></text>
</g>
<g>
<title>start_thread (7 samples, 0.20%)</title><rect x="1111.4" y="1283.0" width="2.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1114.4" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.20%)</title><rect x="1111.4" y="1267.0" width="2.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1114.4" y="1278.0"></text>
</g>
<g>
<title>VMThread::run() (7 samples, 0.20%)</title><rect x="1111.4" y="1251.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.4" y="1262.0"></text>
</g>
<g>
<title>VMThread::loop() (7 samples, 0.20%)</title><rect x="1111.4" y="1235.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.4" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.06%)</title><rect x="1111.4" y="1219.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.4" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::get_safepoint_workers() (1 samples, 0.03%)</title><rect x="1111.4" y="1203.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.4" y="1214.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.03%)</title><rect x="1111.7" y="1203.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="1214.0"></text>
</g>
<g>
<title>os::free(void*) (1 samples, 0.03%)</title><rect x="1111.7" y="1187.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.7" y="1198.0"></text>
</g>
<g>
<title>MallocTracker::record_free(void*) (1 samples, 0.03%)</title><rect x="1111.7" y="1171.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.7" y="1182.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (5 samples, 0.14%)</title><rect x="1112.0" y="1219.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.0" y="1230.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.14%)</title><rect x="1112.0" y="1203.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.0" y="1214.0"></text>
</g>
<g>
<title>VM_CGC_Operation::doit() (1 samples, 0.03%)</title><rect x="1112.0" y="1187.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.0" y="1198.0"></text>
</g>
<g>
<title>G1ConcurrentMark::remark() (1 samples, 0.03%)</title><rect x="1112.0" y="1171.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.0" y="1182.0"></text>
</g>
<g>
<title>G1ConcurrentMark::weak_refs_work(bool) (1 samples, 0.03%)</title><rect x="1112.0" y="1155.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.0" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::next_used(HeapBlock*) const (1 samples, 0.03%)</title><rect x="1112.0" y="1139.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.0" y="1150.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (4 samples, 0.12%)</title><rect x="1112.4" y="1187.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.4" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (4 samples, 0.12%)</title><rect x="1112.4" y="1171.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.4" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (3 samples, 0.09%)</title><rect x="1112.4" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.4" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*) (1 samples, 0.03%)</title><rect x="1112.4" y="1139.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.4" y="1150.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_weak_final_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.03%)</title><rect x="1112.4" y="1123.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.4" y="1134.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.06%)</title><rect x="1112.7" y="1139.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.7" y="1150.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.06%)</title><rect x="1112.7" y="1123.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.7" y="1134.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.06%)</title><rect x="1112.7" y="1107.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1115.7" y="1118.0"></text>
</g>
<g>
<title>G1CollectionSet::finalize_old_part(double) (1 samples, 0.03%)</title><rect x="1113.4" y="1155.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.4" y="1166.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.03%)</title><rect x="1113.4" y="1139.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.4" y="1150.0"></text>
</g>
<g>
<title>[tid=1200] (136 samples, 3.92%)</title><rect x="1113.7" y="1299.0" width="46.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1116.7" y="1310.0">[tid..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.09%)</title><rect x="1113.7" y="1283.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1116.7" y="1294.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.09%)</title><rect x="1113.7" y="1267.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1116.7" y="1278.0"></text>
</g>
<g>
<title>start_thread (133 samples, 3.84%)</title><rect x="1114.8" y="1283.0" width="45.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1117.8" y="1294.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (133 samples, 3.84%)</title><rect x="1114.8" y="1267.0" width="45.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1117.8" y="1278.0">thre..</text>
</g>
<g>
<title>JavaThread::run() (133 samples, 3.84%)</title><rect x="1114.8" y="1251.0" width="45.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="1262.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (133 samples, 3.84%)</title><rect x="1114.8" y="1235.0" width="45.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.8" y="1246.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (133 samples, 3.84%)</title><rect x="1114.8" y="1219.0" width="45.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="1230.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (133 samples, 3.84%)</title><rect x="1114.8" y="1203.0" width="45.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.8" y="1214.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (133 samples, 3.84%)</title><rect x="1114.8" y="1187.0" width="45.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.8" y="1198.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (133 samples, 3.84%)</title><rect x="1114.8" y="1171.0" width="45.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.8" y="1182.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (85 samples, 2.45%)</title><rect x="1114.8" y="1155.0" width="28.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.8" y="1166.0">Co..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.09%)</title><rect x="1114.8" y="1139.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.8" y="1150.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.09%)</title><rect x="1114.8" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.8" y="1134.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.03%)</title><rect x="1115.4" y="1107.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.4" y="1118.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.03%)</title><rect x="1115.4" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.4" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.03%)</title><rect x="1115.8" y="1139.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.8" y="1150.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.03%)</title><rect x="1115.8" y="1123.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.8" y="1134.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="1115.8" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.14%)</title><rect x="1116.1" y="1139.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.1" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.14%)</title><rect x="1116.1" y="1123.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.1" y="1134.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.06%)</title><rect x="1116.1" y="1107.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.1" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.09%)</title><rect x="1116.8" y="1107.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.03%)</title><rect x="1116.8" y="1091.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.8" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1116.8" y="1075.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.8" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1116.8" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.8" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.06%)</title><rect x="1117.1" y="1091.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.1" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.06%)</title><rect x="1117.1" y="1075.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.1" y="1086.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="1117.1" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.1" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="1117.1" y="1043.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="1117.1" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.1" y="1038.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="1117.5" y="1059.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.5" y="1070.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.06%)</title><rect x="1117.8" y="1139.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.8" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (2 samples, 0.06%)</title><rect x="1117.8" y="1123.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.8" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.26%)</title><rect x="1118.5" y="1139.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.26%)</title><rect x="1118.5" y="1123.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.5" y="1134.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.03%)</title><rect x="1118.5" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="1118.8" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.8" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.03%)</title><rect x="1118.8" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.03%)</title><rect x="1119.2" y="1107.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.03%)</title><rect x="1119.5" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.03%)</title><rect x="1119.9" y="1107.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.9" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.09%)</title><rect x="1120.2" y="1107.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.2" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.03%)</title><rect x="1120.5" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.5" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1120.5" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.5" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.03%)</title><rect x="1120.9" y="1091.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.9" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.03%)</title><rect x="1121.2" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (65 samples, 1.88%)</title><rect x="1121.6" y="1139.0" width="22.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.6" y="1150.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="1121.6" y="1123.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.6" y="1134.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.09%)</title><rect x="1121.9" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.20%)</title><rect x="1122.9" y="1123.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.9" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1123.6" y="1107.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.09%)</title><rect x="1124.0" y="1107.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1124.6" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.6" y="1102.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.03%)</title><rect x="1125.0" y="1107.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.12%)</title><rect x="1125.3" y="1123.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1125.3" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.09%)</title><rect x="1125.7" y="1107.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.7" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.06%)</title><rect x="1126.0" y="1091.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.12%)</title><rect x="1126.7" y="1123.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.7" y="1134.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.03%)</title><rect x="1127.0" y="1107.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.03%)</title><rect x="1127.4" y="1107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1127.4" y="1091.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="1102.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="1127.4" y="1075.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1130.4" y="1086.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::rule() const (1 samples, 0.03%)</title><rect x="1127.7" y="1107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 0.46%)</title><rect x="1128.0" y="1123.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.0" y="1134.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.03%)</title><rect x="1128.4" y="1107.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.4" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1128.7" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::adjust_high_pressure_index(Block*, unsigned int&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1129.1" y="1107.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.26%)</title><rect x="1129.4" y="1107.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.4" y="1118.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.06%)</title><rect x="1131.1" y="1091.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.1" y="1102.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="1131.4" y="1075.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1134.4" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.06%)</title><rect x="1131.8" y="1091.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.09%)</title><rect x="1132.5" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.5" y="1118.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.09%)</title><rect x="1132.5" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.03%)</title><rect x="1133.5" y="1123.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.03%)</title><rect x="1133.5" y="1107.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.03%)</title><rect x="1133.8" y="1123.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.14%)</title><rect x="1134.2" y="1123.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.2" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.06%)</title><rect x="1134.8" y="1107.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.8" y="1118.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.03%)</title><rect x="1135.5" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (3 samples, 0.09%)</title><rect x="1135.9" y="1123.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.9" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1136.5" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.06%)</title><rect x="1136.9" y="1123.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 0.29%)</title><rect x="1137.6" y="1123.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.14%)</title><rect x="1138.6" y="1107.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1140.0" y="1091.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.0" y="1102.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="1140.0" y="1075.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.0" y="1086.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.06%)</title><rect x="1140.3" y="1107.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1143.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.03%)</title><rect x="1141.0" y="1123.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.0" y="1134.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.03%)</title><rect x="1141.0" y="1107.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.06%)</title><rect x="1141.3" y="1123.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.06%)</title><rect x="1141.3" y="1107.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="1118.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.06%)</title><rect x="1141.3" y="1091.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.03%)</title><rect x="1142.0" y="1123.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.0" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1142.0" y="1107.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.06%)</title><rect x="1142.3" y="1123.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.3" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.06%)</title><rect x="1142.3" y="1107.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.06%)</title><rect x="1143.0" y="1123.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.0" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 0.89%)</title><rect x="1143.7" y="1155.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.7" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.03%)</title><rect x="1143.7" y="1139.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.7" y="1150.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.03%)</title><rect x="1143.7" y="1123.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.7" y="1134.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1144.0" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (18 samples, 0.52%)</title><rect x="1144.4" y="1139.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1144.4" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1144.4" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.4" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1144.4" y="1091.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_range_check(IdealLoopTree*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1144.4" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::add_range_check_predicate(IdealLoopTree*, CountedLoopNode*, Node*, int, Node*, Node*, int) (1 samples, 0.03%)</title><rect x="1144.4" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.06%)</title><rect x="1144.7" y="1123.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1144.7" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.7" y="1118.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.03%)</title><rect x="1145.1" y="1107.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.14%)</title><rect x="1145.4" y="1123.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.06%)</title><rect x="1146.4" y="1107.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.03%)</title><rect x="1146.8" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.03%)</title><rect x="1146.8" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.06%)</title><rect x="1147.1" y="1123.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.1" y="1134.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.03%)</title><rect x="1147.4" y="1107.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.12%)</title><rect x="1147.8" y="1123.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.06%)</title><rect x="1148.1" y="1107.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.06%)</title><rect x="1148.1" y="1091.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1148.1" y="1075.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.1" y="1086.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1148.1" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.1" y="1070.0"></text>
</g>
<g>
<title>SubNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1148.5" y="1075.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="1086.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.03%)</title><rect x="1148.8" y="1107.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.09%)</title><rect x="1149.1" y="1123.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.09%)</title><rect x="1149.1" y="1107.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.1" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="1149.1" y="1091.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.1" y="1102.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.03%)</title><rect x="1149.1" y="1075.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.1" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1149.5" y="1091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="1102.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1149.8" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.138] (1 samples, 0.03%)</title><rect x="1149.8" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.8" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="1059.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="1043.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.8" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="1027.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="1011.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="995.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.8" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="963.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="947.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="931.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.8" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="846.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (1 samples, 0.03%)</title><rect x="1149.8" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="830.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1149.8" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="814.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1150.2" y="1123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.17%)</title><rect x="1150.5" y="1139.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.17%)</title><rect x="1150.5" y="1123.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.5" y="1134.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.03%)</title><rect x="1150.5" y="1107.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="1118.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1150.8" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.8" y="1118.0"></text>
</g>
<g>
<title>AllocateArrayNode::Opcode() const (1 samples, 0.03%)</title><rect x="1150.8" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.06%)</title><rect x="1151.2" y="1107.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="1118.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.03%)</title><rect x="1151.5" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="1102.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.06%)</title><rect x="1151.9" y="1107.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.138] (2 samples, 0.06%)</title><rect x="1151.9" y="1091.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="1075.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="1059.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="1043.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="1027.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.9" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="1011.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="995.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="979.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="963.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="947.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (2 samples, 0.06%)</title><rect x="1151.9" y="931.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.06%)</title><rect x="1151.9" y="915.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="1152.6" y="1139.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.06%)</title><rect x="1152.9" y="1139.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.9" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.03%)</title><rect x="1152.9" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.9" y="1134.0"></text>
</g>
<g>
<title>BoolNode::make_predicate(Node*, PhaseGVN*) (1 samples, 0.03%)</title><rect x="1152.9" y="1107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.9" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1152.9" y="1091.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.9" y="1102.0"></text>
</g>
<g>
<title>TypeInt::hash() const (1 samples, 0.03%)</title><rect x="1152.9" y="1075.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.9" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.03%)</title><rect x="1153.2" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.03%)</title><rect x="1153.2" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.2" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_block_arraycopy(Node**, MergeMemNode**, Node*, TypePtr const*, BasicType, AllocateNode*, Node*, Node*, Node*, Node*, Node*, bool) (1 samples, 0.03%)</title><rect x="1153.2" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.03%)</title><rect x="1153.2" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.2" y="1086.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1153.2" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.2" y="1070.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.03%)</title><rect x="1153.2" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.2" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.03%)</title><rect x="1153.6" y="1139.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="1150.0"></text>
</g>
<g>
<title>RootNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1153.9" y="1139.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.43%)</title><rect x="1154.3" y="1155.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.3" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.43%)</title><rect x="1154.3" y="1139.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.43%)</title><rect x="1154.3" y="1123.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.43%)</title><rect x="1154.3" y="1107.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.03%)</title><rect x="1154.3" y="1091.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.3" y="1102.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.03%)</title><rect x="1154.3" y="1075.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.3" y="1086.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.03%)</title><rect x="1154.3" y="1059.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.3" y="1070.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1154.3" y="1043.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.3" y="1054.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.03%)</title><rect x="1154.3" y="1027.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.40%)</title><rect x="1154.6" y="1091.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.40%)</title><rect x="1154.6" y="1075.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.6" y="1086.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.03%)</title><rect x="1154.6" y="1059.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.6" y="1070.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1154.6" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.6" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1154.6" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.6" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1154.6" y="1011.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.6" y="1022.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1154.6" y="995.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.26%)</title><rect x="1154.9" y="1059.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.9" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.26%)</title><rect x="1154.9" y="1043.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.26%)</title><rect x="1154.9" y="1027.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.26%)</title><rect x="1154.9" y="1011.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.26%)</title><rect x="1154.9" y="995.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.26%)</title><rect x="1154.9" y="979.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.9" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1154.9" y="963.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.9" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1154.9" y="947.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.9" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1154.9" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.9" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1154.9" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1154.9" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1154.9" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1154.9" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.9" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1154.9" y="851.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.9" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1154.9" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.9" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1154.9" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.9" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1154.9" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.9" y="814.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1154.9" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.9" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="1154.9" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.23%)</title><rect x="1155.3" y="963.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.23%)</title><rect x="1155.3" y="947.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.23%)</title><rect x="1155.3" y="931.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.20%)</title><rect x="1155.3" y="915.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.20%)</title><rect x="1155.3" y="899.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.20%)</title><rect x="1155.3" y="883.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1155.3" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.3" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1155.3" y="851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.3" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1155.3" y="835.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1155.3" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1155.3" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1155.3" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1155.3" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1155.3" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::store_local_long(int) (1 samples, 0.03%)</title><rect x="1155.3" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1155.6" y="867.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1155.6" y="851.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1155.6" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1155.6" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1155.6" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1155.6" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1155.6" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.6" y="782.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1155.6" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.6" y="766.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1155.6" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="750.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1155.6" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.6" y="734.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.03%)</title><rect x="1155.6" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="718.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.03%)</title><rect x="1155.6" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="702.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.03%)</title><rect x="1155.6" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.6" y="686.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1155.6" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.6" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.14%)</title><rect x="1156.0" y="867.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.14%)</title><rect x="1156.0" y="851.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.14%)</title><rect x="1156.0" y="835.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.14%)</title><rect x="1156.0" y="819.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.14%)</title><rect x="1156.0" y="803.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.14%)</title><rect x="1156.0" y="787.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.14%)</title><rect x="1156.0" y="771.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.14%)</title><rect x="1156.0" y="755.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.14%)</title><rect x="1156.0" y="739.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.14%)</title><rect x="1156.0" y="723.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.14%)</title><rect x="1156.0" y="707.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.14%)</title><rect x="1156.0" y="691.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.14%)</title><rect x="1156.0" y="675.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1156.0" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1156.0" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1156.0" y="627.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1156.0" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1156.0" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1156.0" y="579.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1156.0" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1156.0" y="547.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1156.0" y="531.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1156.0" y="515.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1156.0" y="499.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1156.0" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1156.0" y="467.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1156.0" y="451.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1156.0" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1156.0" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1156.0" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1156.0" y="387.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1156.0" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1156.0" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1156.0" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1156.0" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1156.0" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1156.0" y="291.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1156.0" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1156.0" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1156.0" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="254.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1156.0" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="238.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.03%)</title><rect x="1156.0" y="211.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="222.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.03%)</title><rect x="1156.0" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="206.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.03%)</title><rect x="1156.0" y="179.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1156.0" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="174.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1156.0" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="158.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1156.0" y="131.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="142.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1156.0" y="115.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="126.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1156.0" y="99.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.12%)</title><rect x="1156.3" y="659.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.12%)</title><rect x="1156.3" y="643.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.12%)</title><rect x="1156.3" y="627.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.12%)</title><rect x="1156.3" y="611.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.12%)</title><rect x="1156.3" y="595.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.03%)</title><rect x="1156.3" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="590.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.03%)</title><rect x="1156.3" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.3" y="574.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.03%)</title><rect x="1156.3" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1156.3" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.3" y="542.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.03%)</title><rect x="1156.3" y="515.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1156.6" y="579.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1156.6" y="563.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1156.6" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1156.6" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1156.6" y="515.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1156.6" y="499.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1156.6" y="483.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1156.6" y="467.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1156.6" y="451.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1156.6" y="435.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1156.6" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1156.6" y="403.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1156.6" y="387.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1156.6" y="371.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.6" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1156.6" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1156.6" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1156.6" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1156.6" y="307.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1156.6" y="291.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1156.6" y="275.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1156.6" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.6" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1156.6" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1156.6" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.6" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1156.6" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1156.6" y="195.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="206.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1156.6" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1156.6" y="163.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.6" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1156.6" y="147.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="158.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="1156.6" y="131.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1157.0" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1157.0" y="339.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1157.0" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1157.0" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1157.0" y="291.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1157.0" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1157.3" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1157.3" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.3" y="510.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1157.3" y="483.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.3" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1157.7" y="915.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.7" y="926.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.03%)</title><rect x="1157.7" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="910.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.03%)</title><rect x="1158.0" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.0" y="1070.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1158.3" y="1059.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.3" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1158.3" y="1043.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1158.3" y="1027.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1158.3" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1158.3" y="995.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1158.3" y="979.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1158.3" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1158.3" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1158.3" y="931.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1158.3" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1158.3" y="899.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1158.3" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1158.3" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1158.3" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1158.3" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1158.3" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1158.3" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1158.3" y="787.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1158.3" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1158.3" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1158.3" y="739.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1158.3" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1158.3" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1158.3" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1158.3" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1158.3" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1158.3" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1158.3" y="627.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1158.3" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1158.3" y="595.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1158.3" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1158.3" y="563.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1158.3" y="547.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1158.3" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1158.3" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1158.3" y="499.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1158.3" y="483.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1158.3" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="478.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1158.3" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.3" y="462.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1158.3" y="435.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.3" y="446.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1158.3" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.3" y="430.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.03%)</title><rect x="1158.3" y="403.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.3" y="414.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.03%)</title><rect x="1158.3" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.3" y="398.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.03%)</title><rect x="1158.3" y="371.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.3" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1158.3" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.3" y="366.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1158.3" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="350.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.03%)</title><rect x="1158.3" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.3" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1158.3" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.3" y="318.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1158.3" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.3" y="302.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.03%)</title><rect x="1158.3" y="275.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.3" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1158.7" y="1043.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1158.7" y="1027.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1158.7" y="1011.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1158.7" y="995.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1158.7" y="979.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1158.7" y="963.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1158.7" y="947.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1158.7" y="931.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1158.7" y="915.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1158.7" y="899.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1158.7" y="883.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1158.7" y="867.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1158.7" y="851.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.7" y="862.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.03%)</title><rect x="1158.7" y="835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.7" y="846.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="1158.7" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.7" y="830.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.03%)</title><rect x="1158.7" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="814.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.03%)</title><rect x="1158.7" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="835.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="595.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="563.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="499.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="403.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="355.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="339.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="307.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="275.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="259.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="243.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="211.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="195.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="179.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.0" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1159.0" y="147.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1159.0" y="131.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1159.0" y="115.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1159.0" y="99.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1159.0" y="83.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="94.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1159.0" y="67.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.0" y="78.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.03%)</title><rect x="1159.0" y="51.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.0" y="62.0"></text>
</g>
<g>
<title>AbstractInterpreter::bytecode_should_reexecute(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1159.0" y="35.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.0" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.06%)</title><rect x="1159.4" y="1155.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="1166.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.06%)</title><rect x="1159.4" y="1139.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.4" y="1150.0"></text>
</g>
<g>
<title>[tid=1201] (7 samples, 0.20%)</title><rect x="1160.0" y="1299.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1163.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1160.0" y="1283.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1163.0" y="1294.0"></text>
</g>
<g>
<title>__open (1 samples, 0.03%)</title><rect x="1160.0" y="1267.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1163.0" y="1278.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1160.0" y="1251.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1163.0" y="1262.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1160.0" y="1235.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1163.0" y="1246.0"></text>
</g>
<g>
<title>do_sys_open (1 samples, 0.03%)</title><rect x="1160.0" y="1219.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1163.0" y="1230.0"></text>
</g>
<g>
<title>do_filp_open (1 samples, 0.03%)</title><rect x="1160.0" y="1203.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1163.0" y="1214.0"></text>
</g>
<g>
<title>path_openat (1 samples, 0.03%)</title><rect x="1160.0" y="1187.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1163.0" y="1198.0"></text>
</g>
<g>
<title>link_path_walk.part.0 (1 samples, 0.03%)</title><rect x="1160.0" y="1171.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1163.0" y="1182.0"></text>
</g>
<g>
<title>inode_permission (1 samples, 0.03%)</title><rect x="1160.0" y="1155.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1163.0" y="1166.0"></text>
</g>
<g>
<title>kernfs_iop_permission (1 samples, 0.03%)</title><rect x="1160.0" y="1139.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1163.0" y="1150.0"></text>
</g>
<g>
<title>kernfs_refresh_inode (1 samples, 0.03%)</title><rect x="1160.0" y="1123.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1163.0" y="1134.0"></text>
</g>
<g>
<title>security_inode_notifysecctx (1 samples, 0.03%)</title><rect x="1160.0" y="1107.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1163.0" y="1118.0"></text>
</g>
<g>
<title>selinux_inode_notifysecctx (1 samples, 0.03%)</title><rect x="1160.0" y="1091.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1163.0" y="1102.0"></text>
</g>
<g>
<title>selinux_inode_setsecurity (1 samples, 0.03%)</title><rect x="1160.0" y="1075.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1163.0" y="1086.0"></text>
</g>
<g>
<title>security_context_to_sid (1 samples, 0.03%)</title><rect x="1160.0" y="1059.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1163.0" y="1070.0"></text>
</g>
<g>
<title>security_context_to_sid_core.isra.0 (1 samples, 0.03%)</title><rect x="1160.0" y="1043.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1163.0" y="1054.0"></text>
</g>
<g>
<title>string_to_context_struct (1 samples, 0.03%)</title><rect x="1160.0" y="1027.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1163.0" y="1038.0"></text>
</g>
<g>
<title>hashtab_search (1 samples, 0.03%)</title><rect x="1160.0" y="1011.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1163.0" y="1022.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.03%)</title><rect x="1160.4" y="1267.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1163.4" y="1278.0"></text>
</g>
<g>
<title>start_thread (5 samples, 0.14%)</title><rect x="1160.7" y="1283.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1163.7" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.14%)</title><rect x="1160.7" y="1267.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1163.7" y="1278.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.14%)</title><rect x="1160.7" y="1251.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="1262.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.14%)</title><rect x="1160.7" y="1235.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.7" y="1246.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.14%)</title><rect x="1160.7" y="1219.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="1230.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 0.14%)</title><rect x="1160.7" y="1203.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.7" y="1214.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.09%)</title><rect x="1160.7" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.09%)</title><rect x="1160.7" y="1171.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.09%)</title><rect x="1160.7" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.7" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.09%)</title><rect x="1160.7" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.7" y="1150.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.03%)</title><rect x="1160.7" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.7" y="1134.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.03%)</title><rect x="1160.7" y="1107.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.7" y="1118.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.03%)</title><rect x="1160.7" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.7" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.03%)</title><rect x="1160.7" y="1075.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.7" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="1160.7" y="1059.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.7" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="1160.7" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.7" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1160.7" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.7" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1160.7" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.7" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1160.7" y="995.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.7" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1160.7" y="979.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.7" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1160.7" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.7" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1160.7" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.7" y="958.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1160.7" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.7" y="942.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1160.7" y="915.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.7" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1160.7" y="899.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.7" y="910.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.03%)</title><rect x="1160.7" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.7" y="894.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.03%)</title><rect x="1160.7" y="867.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1163.7" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.03%)</title><rect x="1161.1" y="1123.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.1" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.03%)</title><rect x="1161.1" y="1107.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.1" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.03%)</title><rect x="1161.1" y="1091.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.03%)</title><rect x="1161.1" y="1075.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.1" y="1086.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.03%)</title><rect x="1161.1" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.1" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.03%)</title><rect x="1161.4" y="1123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="1134.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.03%)</title><rect x="1161.4" y="1107.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="1118.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.03%)</title><rect x="1161.4" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="1102.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.03%)</title><rect x="1161.4" y="1075.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="1086.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.03%)</title><rect x="1161.4" y="1059.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="1070.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.03%)</title><rect x="1161.7" y="1187.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.7" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.03%)</title><rect x="1161.7" y="1171.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.7" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.03%)</title><rect x="1162.1" y="1187.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1162.1" y="1171.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.1" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1162.1" y="1155.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="1166.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1162.1" y="1139.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.1" y="1150.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1162.1" y="1123.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1162.1" y="1107.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.1" y="1118.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.03%)</title><rect x="1162.1" y="1091.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="1102.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.03%)</title><rect x="1162.1" y="1075.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1165.1" y="1086.0"></text>
</g>
<g>
<title>[tid=1203] (2 samples, 0.06%)</title><rect x="1162.4" y="1299.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1165.4" y="1310.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.06%)</title><rect x="1162.4" y="1283.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1165.4" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.06%)</title><rect x="1162.4" y="1267.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1165.4" y="1278.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.06%)</title><rect x="1162.4" y="1251.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="1262.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.06%)</title><rect x="1162.4" y="1235.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.4" y="1246.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.06%)</title><rect x="1162.4" y="1219.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.4" y="1230.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.06%)</title><rect x="1162.4" y="1203.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.4" y="1214.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.03%)</title><rect x="1162.4" y="1187.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.4" y="1198.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.03%)</title><rect x="1162.4" y="1171.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1165.4" y="1182.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="1162.4" y="1155.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1165.4" y="1166.0"></text>
</g>
<g>
<title>Profiler::addJavaMethod(void const*, int, _jmethodID*) (1 samples, 0.03%)</title><rect x="1162.8" y="1187.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.8" y="1198.0"></text>
</g>
<g>
<title>[tid=1204] (3 samples, 0.09%)</title><rect x="1163.1" y="1299.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1166.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1163.1" y="1283.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1166.1" y="1294.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.03%)</title><rect x="1163.1" y="1267.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1166.1" y="1278.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1163.1" y="1251.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1166.1" y="1262.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1163.1" y="1235.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1166.1" y="1246.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1163.1" y="1219.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1166.1" y="1230.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1163.1" y="1203.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.1" y="1214.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="1163.1" y="1187.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1166.1" y="1198.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="1163.1" y="1171.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1166.1" y="1182.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1163.1" y="1155.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1166.1" y="1166.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1163.1" y="1139.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1166.1" y="1150.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1163.1" y="1123.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1166.1" y="1134.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.03%)</title><rect x="1163.4" y="1267.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1166.4" y="1278.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.03%)</title><rect x="1163.8" y="1283.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1166.8" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="1163.8" y="1267.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1166.8" y="1278.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.03%)</title><rect x="1163.8" y="1251.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="1262.0"></text>
</g>
<g>
<title>[tid=1221] (24 samples, 0.69%)</title><rect x="1164.1" y="1299.0" width="8.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1167.1" y="1310.0"></text>
</g>
<g>
<title>start_thread (24 samples, 0.69%)</title><rect x="1164.1" y="1283.0" width="8.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1167.1" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 0.69%)</title><rect x="1164.1" y="1267.0" width="8.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1167.1" y="1278.0"></text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 0.69%)</title><rect x="1164.1" y="1251.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="1262.0"></text>
</g>
<g>
<title>G1CMRefProcTaskProxy::work(unsigned int) (1 samples, 0.03%)</title><rect x="1164.1" y="1235.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="1246.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.03%)</title><rect x="1164.1" y="1219.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="1230.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.03%)</title><rect x="1164.1" y="1203.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.1" y="1214.0"></text>
</g>
<g>
<title>G1CMDrainMarkingStackClosure::do_void() (1 samples, 0.03%)</title><rect x="1164.1" y="1187.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="1198.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.03%)</title><rect x="1164.1" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.1" y="1182.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1164.1" y="1155.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1167.1" y="1166.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (3 samples, 0.09%)</title><rect x="1164.5" y="1235.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="1246.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (3 samples, 0.09%)</title><rect x="1164.5" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.5" y="1230.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.09%)</title><rect x="1164.5" y="1203.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1167.5" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 0.49%)</title><rect x="1165.5" y="1235.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.5" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 0.43%)</title><rect x="1165.5" y="1219.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.5" y="1230.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1165.5" y="1203.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.5" y="1214.0"></text>
</g>
<g>
<title>SpinPause (14 samples, 0.40%)</title><rect x="1165.8" y="1203.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1168.8" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.06%)</title><rect x="1170.6" y="1219.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1170.6" y="1203.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.6" y="1214.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() (1 samples, 0.03%)</title><rect x="1170.6" y="1187.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="1198.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::seconds(PairRep&lt;long, long&gt;) (1 samples, 0.03%)</title><rect x="1170.6" y="1171.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="1182.0"></text>
</g>
<g>
<title>SubTasksDone::all_tasks_completed(unsigned int) (1 samples, 0.03%)</title><rect x="1170.9" y="1203.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.9" y="1214.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1171.3" y="1235.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.3" y="1246.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel_postponed() (1 samples, 0.03%)</title><rect x="1171.3" y="1219.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="1230.0"></text>
</g>
<g>
<title>nmethod::call_wrapper_at(unsigned char*) const (1 samples, 0.03%)</title><rect x="1171.3" y="1203.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="1214.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (1 samples, 0.03%)</title><rect x="1171.6" y="1219.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.6" y="1230.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1172.0" y="1235.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.0" y="1246.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.03%)</title><rect x="1172.0" y="1219.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="1230.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.03%)</title><rect x="1172.0" y="1203.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="1214.0"></text>
</g>
<g>
<title>[tid=1222] (26 samples, 0.75%)</title><rect x="1172.3" y="1299.0" width="8.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1175.3" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1172.3" y="1283.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1175.3" y="1294.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.03%)</title><rect x="1172.3" y="1267.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1175.3" y="1278.0"></text>
</g>
<g>
<title>start_thread (25 samples, 0.72%)</title><rect x="1172.6" y="1283.0" width="8.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1175.6" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 0.72%)</title><rect x="1172.6" y="1267.0" width="8.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1175.6" y="1278.0"></text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 0.72%)</title><rect x="1172.6" y="1251.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="1262.0"></text>
</g>
<g>
<title>G1CMRefProcTaskProxy::work(unsigned int) (1 samples, 0.03%)</title><rect x="1172.6" y="1235.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="1246.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.03%)</title><rect x="1172.6" y="1219.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1230.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.03%)</title><rect x="1172.6" y="1203.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="1214.0"></text>
</g>
<g>
<title>G1CMDrainMarkingStackClosure::do_void() (1 samples, 0.03%)</title><rect x="1172.6" y="1187.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1198.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.03%)</title><rect x="1172.6" y="1171.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="1182.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1172.6" y="1155.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1175.6" y="1166.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 0.61%)</title><rect x="1173.0" y="1235.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 0.46%)</title><rect x="1173.0" y="1219.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="1230.0"></text>
</g>
<g>
<title>SpinPause (16 samples, 0.46%)</title><rect x="1173.0" y="1203.0" width="5.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1176.0" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (1 samples, 0.03%)</title><rect x="1178.4" y="1219.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long) (1 samples, 0.03%)</title><rect x="1178.4" y="1203.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="1214.0"></text>
</g>
<g>
<title>G1PLABAllocator::G1PLABAllocator(G1Allocator*) (1 samples, 0.03%)</title><rect x="1178.4" y="1187.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1178.8" y="1219.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1178.8" y="1203.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1214.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1178.8" y="1187.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1179.1" y="1219.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="1230.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1179.1" y="1203.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="1214.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1179.1" y="1187.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="1198.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.03%)</title><rect x="1179.1" y="1171.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.06%)</title><rect x="1179.4" y="1219.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.06%)</title><rect x="1179.4" y="1203.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="1214.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.06%)</title><rect x="1179.4" y="1187.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="1198.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.06%)</title><rect x="1179.4" y="1171.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="1182.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.03%)</title><rect x="1179.4" y="1155.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="1166.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1179.4" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="1150.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.03%)</title><rect x="1179.4" y="1123.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.03%)</title><rect x="1179.4" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="1118.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.03%)</title><rect x="1179.8" y="1155.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.8" y="1166.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.03%)</title><rect x="1179.8" y="1139.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="1150.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1180.1" y="1235.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="1246.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (1 samples, 0.03%)</title><rect x="1180.1" y="1219.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="1230.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.03%)</title><rect x="1180.1" y="1203.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="1214.0"></text>
</g>
<g>
<title>clean_if_nmethod_is_unloaded(CompiledStaticCall*, CompiledMethod*, bool, bool) (1 samples, 0.03%)</title><rect x="1180.1" y="1187.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1183.1" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="1180.1" y="1171.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="1182.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1180.5" y="1235.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="1246.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.03%)</title><rect x="1180.5" y="1219.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="1230.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="1180.5" y="1203.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1183.5" y="1214.0"></text>
</g>
<g>
<title>GCIdMark::GCIdMark(unsigned int) (1 samples, 0.03%)</title><rect x="1180.8" y="1235.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="1246.0"></text>
</g>
<g>
<title>[tid=1223] (26 samples, 0.75%)</title><rect x="1181.1" y="1299.0" width="8.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1184.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1181.1" y="1283.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1184.1" y="1294.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (1 samples, 0.03%)</title><rect x="1181.1" y="1267.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1184.1" y="1278.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1181.1" y="1251.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1184.1" y="1262.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1181.1" y="1235.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1184.1" y="1246.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1181.1" y="1219.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1184.1" y="1230.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1181.1" y="1203.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1184.1" y="1214.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="1181.1" y="1187.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1184.1" y="1198.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.03%)</title><rect x="1181.1" y="1171.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1184.1" y="1182.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.03%)</title><rect x="1181.1" y="1155.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1184.1" y="1166.0"></text>
</g>
<g>
<title>__new_sem_wait_slow.constprop.0 (1 samples, 0.03%)</title><rect x="1181.5" y="1283.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1184.5" y="1294.0"></text>
</g>
<g>
<title>start_thread (24 samples, 0.69%)</title><rect x="1181.8" y="1283.0" width="8.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1184.8" y="1294.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 0.69%)</title><rect x="1181.8" y="1267.0" width="8.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1184.8" y="1278.0"></text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 0.69%)</title><rect x="1181.8" y="1251.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="1262.0"></text>
</g>
<g>
<title>G1CMRefProcTaskProxy::work(unsigned int) (1 samples, 0.03%)</title><rect x="1181.8" y="1235.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="1246.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.03%)</title><rect x="1181.8" y="1219.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.03%)</title><rect x="1181.8" y="1203.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>G1CMDrainMarkingStackClosure::do_void() (1 samples, 0.03%)</title><rect x="1181.8" y="1187.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.03%)</title><rect x="1181.8" y="1171.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="1182.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1181.8" y="1155.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1182.2" y="1235.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1246.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.03%)</title><rect x="1182.2" y="1219.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="1230.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1182.2" y="1203.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1185.2" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 0.55%)</title><rect x="1182.5" y="1235.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 0.46%)</title><rect x="1182.5" y="1219.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="1230.0"></text>
</g>
<g>
<title>SpinPause (16 samples, 0.46%)</title><rect x="1182.5" y="1203.0" width="5.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1185.5" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.0" y="1219.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="1230.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1188.0" y="1203.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="1214.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1188.0" y="1187.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="1198.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.03%)</title><rect x="1188.0" y="1171.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.06%)</title><rect x="1188.3" y="1219.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.3" y="1203.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="1214.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1188.3" y="1187.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.3" y="1198.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1188.3" y="1171.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="1182.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="1188.3" y="1155.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="1166.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.03%)</title><rect x="1188.6" y="1203.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.6" y="1214.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)2&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1188.6" y="1187.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.6" y="1198.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1189.0" y="1235.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="1246.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (2 samples, 0.06%)</title><rect x="1189.0" y="1219.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="1230.0"></text>
</g>
<g>
<title>GCIdMark::GCIdMark(unsigned int) (1 samples, 0.03%)</title><rect x="1189.7" y="1235.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.7" y="1246.0"></text>
</g>
</g>
</svg>
