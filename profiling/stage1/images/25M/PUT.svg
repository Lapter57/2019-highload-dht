<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (2,406 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[NIO Selector #3 tid=2759] (2,254 samples, 93.68%)</title><rect x="10.0" y="915.0" width="1105.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="926.0">[NIO Selector #3 tid=2759]</text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.04%)</title><rect x="10.0" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="867.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="10.0" y="851.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="10.5" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="10.5" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="10.5" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.5" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="10.5" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.5" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="10.5" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.5" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="10.5" y="819.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.5" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="10.5" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.5" y="814.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.04%)</title><rect x="10.5" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="11.0" y="899.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>_IO_no_init (1 samples, 0.04%)</title><rect x="11.0" y="883.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.17%)</title><rect x="11.5" y="899.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="14.5" y="910.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.04%)</title><rect x="12.9" y="883.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="15.9" y="894.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.04%)</title><rect x="12.9" y="867.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="15.9" y="878.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="12.9" y="851.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="15.9" y="862.0"></text>
</g>
<g>
<title>down_read_trylock (1 samples, 0.04%)</title><rect x="12.9" y="835.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="15.9" y="846.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,247 samples, 93.39%)</title><rect x="13.4" y="899.0" width="1102.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.4" y="910.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.04%)</title><rect x="16.4" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (329 samples, 13.67%)</title><rect x="16.9" y="883.0" width="161.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="894.0">one/nio/net/NativeSel..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (8 samples, 0.33%)</title><rect x="17.8" y="867.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (6 samples, 0.25%)</title><rect x="18.8" y="851.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (319 samples, 13.26%)</title><rect x="21.8" y="867.0" width="156.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.8" y="878.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (282 samples, 11.72%)</title><rect x="25.7" y="851.0" width="138.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="28.7" y="862.0">.annobin_epoll_wa..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="63.5" y="835.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="66.5" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (204 samples, 8.48%)</title><rect x="63.9" y="835.0" width="100.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="66.9" y="846.0">entry_SYSCAL..</text>
</g>
<g>
<title>do_syscall_64 (204 samples, 8.48%)</title><rect x="63.9" y="819.0" width="100.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="66.9" y="830.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (192 samples, 7.98%)</title><rect x="69.8" y="803.0" width="94.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="72.8" y="814.0">__x64_sys_e..</text>
</g>
<g>
<title>do_epoll_wait (191 samples, 7.94%)</title><rect x="70.3" y="787.0" width="93.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="73.3" y="798.0">do_epoll_wait</text>
</g>
<g>
<title>__fget_light (10 samples, 0.42%)</title><rect x="72.8" y="771.0" width="4.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="75.8" y="782.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.37%)</title><rect x="73.3" y="755.0" width="4.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="76.3" y="766.0"></text>
</g>
<g>
<title>ep_poll (173 samples, 7.19%)</title><rect x="77.7" y="771.0" width="84.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="80.7" y="782.0">ep_poll</text>
</g>
<g>
<title>_raw_spin_lock_irq (1 samples, 0.04%)</title><rect x="94.4" y="755.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="97.4" y="766.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (101 samples, 4.20%)</title><rect x="94.8" y="755.0" width="49.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="97.8" y="766.0">ep_sc..</text>
</g>
<g>
<title>ep_send_events_proc (63 samples, 2.62%)</title><rect x="110.5" y="739.0" width="30.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="113.5" y="750.0">ep..</text>
</g>
<g>
<title>__list_add_valid (1 samples, 0.04%)</title><rect x="115.4" y="723.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="118.4" y="734.0"></text>
</g>
<g>
<title>__list_del_entry_valid (1 samples, 0.04%)</title><rect x="115.9" y="723.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="118.9" y="734.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (51 samples, 2.12%)</title><rect x="116.4" y="723.0" width="25.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="119.4" y="734.0">e..</text>
</g>
<g>
<title>sock_poll (46 samples, 1.91%)</title><rect x="118.9" y="707.0" width="22.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="121.9" y="718.0">s..</text>
</g>
<g>
<title>tcp_poll (27 samples, 1.12%)</title><rect x="128.2" y="691.0" width="13.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="131.2" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.12%)</title><rect x="140.0" y="675.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="143.0" y="686.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.17%)</title><rect x="141.4" y="739.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="144.4" y="750.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="142.9" y="723.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="145.9" y="734.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="142.9" y="707.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="145.9" y="718.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.08%)</title><rect x="143.4" y="739.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="146.4" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (37 samples, 1.54%)</title><rect x="144.4" y="755.0" width="18.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="147.4" y="766.0"></text>
</g>
<g>
<title>schedule (24 samples, 1.00%)</title><rect x="150.8" y="739.0" width="11.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="153.8" y="750.0"></text>
</g>
<g>
<title>__sched_text_start (24 samples, 1.00%)</title><rect x="150.8" y="723.0" width="11.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="153.8" y="734.0"></text>
</g>
<g>
<title>finish_task_switch (23 samples, 0.96%)</title><rect x="151.2" y="707.0" width="11.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="154.2" y="718.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.12%)</title><rect x="162.5" y="771.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="165.5" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.04%)</title><rect x="164.0" y="851.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="167.0" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="164.5" y="851.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="167.5" y="862.0"></text>
</g>
<g>
<title>__GI___clock_gettime (14 samples, 0.58%)</title><rect x="165.0" y="851.0" width="6.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="168.0" y="862.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.21%)</title><rect x="169.4" y="835.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="172.4" y="846.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.08%)</title><rect x="171.8" y="851.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="174.8" y="862.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (4 samples, 0.17%)</title><rect x="172.8" y="851.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="175.8" y="862.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (5 samples, 0.21%)</title><rect x="174.8" y="851.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="177.8" y="862.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="177.2" y="851.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="180.2" y="862.0"></text>
</g>
<g>
<title>native signature handlers (1 samples, 0.04%)</title><rect x="177.7" y="851.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="180.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,911 samples, 79.43%)</title><rect x="178.2" y="883.0" width="937.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.2" y="894.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,903 samples, 79.09%)</title><rect x="180.2" y="867.0" width="933.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.2" y="878.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,670 samples, 69.41%)</title><rect x="181.7" y="851.0" width="819.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.7" y="862.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,499 samples, 62.30%)</title><rect x="205.7" y="835.0" width="735.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.7" y="846.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,498 samples, 62.26%)</title><rect x="206.2" y="819.0" width="734.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.2" y="830.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,490 samples, 61.93%)</title><rect x="206.2" y="803.0" width="730.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.2" y="814.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,216 samples, 50.54%)</title><rect x="206.2" y="787.0" width="596.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.2" y="798.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="208.6" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,190 samples, 49.46%)</title><rect x="209.1" y="771.0" width="583.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.1" y="782.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (27 samples, 1.12%)</title><rect x="209.1" y="755.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.04%)</title><rect x="215.5" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.54%)</title><rect x="216.0" y="739.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.08%)</title><rect x="216.5" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.25%)</title><rect x="217.5" y="723.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.12%)</title><rect x="218.4" y="707.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.12%)</title><rect x="218.4" y="691.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="219.9" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.17%)</title><rect x="220.4" y="723.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.17%)</title><rect x="220.4" y="707.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="221.4" y="691.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.08%)</title><rect x="221.4" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.4" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,163 samples, 48.34%)</title><rect x="222.4" y="755.0" width="570.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.4" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,162 samples, 48.30%)</title><rect x="222.9" y="739.0" width="569.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.9" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,157 samples, 48.09%)</title><rect x="223.8" y="723.0" width="567.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.8" y="734.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,156 samples, 48.05%)</title><rect x="224.3" y="707.0" width="567.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.3" y="718.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>.annobin_send.c (1,133 samples, 47.09%)</title><rect x="228.7" y="691.0" width="555.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="231.7" y="702.0">.annobin_send.c</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.12%)</title><rect x="250.3" y="675.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="253.3" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,086 samples, 45.14%)</title><rect x="251.8" y="675.0" width="532.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="254.8" y="686.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (1,086 samples, 45.14%)</title><rect x="251.8" y="659.0" width="532.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="254.8" y="670.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,071 samples, 44.51%)</title><rect x="259.1" y="643.0" width="525.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="262.1" y="654.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,071 samples, 44.51%)</title><rect x="259.1" y="627.0" width="525.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="262.1" y="638.0">__sys_sendto</text>
</g>
<g>
<title>fput (1 samples, 0.04%)</title><rect x="259.1" y="611.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="262.1" y="622.0"></text>
</g>
<g>
<title>sock_sendmsg (1,067 samples, 44.35%)</title><rect x="259.6" y="611.0" width="523.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="262.6" y="622.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (7 samples, 0.29%)</title><rect x="260.6" y="595.0" width="3.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="263.6" y="606.0"></text>
</g>
<g>
<title>sock_has_perm (6 samples, 0.25%)</title><rect x="261.1" y="579.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="264.1" y="590.0"></text>
</g>
<g>
<title>avc_has_perm (3 samples, 0.12%)</title><rect x="262.6" y="563.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="265.6" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,058 samples, 43.97%)</title><rect x="264.0" y="595.0" width="518.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="267.0" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.12%)</title><rect x="265.0" y="579.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="268.0" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="265.5" y="563.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="268.5" y="574.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="265.5" y="547.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="268.5" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="266.0" y="563.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="269.0" y="574.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.17%)</title><rect x="266.5" y="579.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="269.5" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="267.0" y="563.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="270.0" y="574.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.08%)</title><rect x="267.5" y="563.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="270.5" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,049 samples, 43.60%)</title><rect x="268.5" y="579.0" width="514.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="271.5" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (11 samples, 0.46%)</title><rect x="272.9" y="563.0" width="5.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="275.9" y="574.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.08%)</title><rect x="275.3" y="547.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="278.3" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.12%)</title><rect x="276.3" y="547.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="279.3" y="558.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.04%)</title><rect x="277.8" y="547.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="280.8" y="558.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (949 samples, 39.44%)</title><rect x="278.3" y="563.0" width="465.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="281.3" y="574.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (949 samples, 39.44%)</title><rect x="278.3" y="547.0" width="465.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="281.3" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (922 samples, 38.32%)</title><rect x="283.2" y="531.0" width="452.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="286.2" y="542.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (893 samples, 37.12%)</title><rect x="289.1" y="515.0" width="437.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="292.1" y="526.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.17%)</title><rect x="292.5" y="499.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="295.5" y="510.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.12%)</title><rect x="293.0" y="483.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="296.0" y="494.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.04%)</title><rect x="294.5" y="499.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="297.5" y="510.0"></text>
</g>
<g>
<title>ip_local_out (181 samples, 7.52%)</title><rect x="294.9" y="499.0" width="88.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="297.9" y="510.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (181 samples, 7.52%)</title><rect x="294.9" y="483.0" width="88.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="297.9" y="494.0">__ip_local..</text>
</g>
<g>
<title>ip_send_check (6 samples, 0.25%)</title><rect x="295.4" y="467.0" width="3.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="298.4" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (174 samples, 7.23%)</title><rect x="298.4" y="467.0" width="85.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="301.4" y="478.0">nf_hook_slow</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.08%)</title><rect x="300.8" y="451.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="303.8" y="462.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (55 samples, 2.29%)</title><rect x="301.8" y="451.0" width="27.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="304.8" y="462.0">i..</text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (4 samples, 0.17%)</title><rect x="328.8" y="451.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="331.8" y="462.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (16 samples, 0.67%)</title><rect x="330.7" y="451.0" width="7.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="333.7" y="462.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (10 samples, 0.42%)</title><rect x="333.7" y="435.0" width="4.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="336.7" y="446.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (6 samples, 0.25%)</title><rect x="338.6" y="451.0" width="2.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="341.6" y="462.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (3 samples, 0.12%)</title><rect x="341.5" y="451.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="344.5" y="462.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.17%)</title><rect x="343.0" y="451.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="346.0" y="462.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (3 samples, 0.12%)</title><rect x="345.0" y="451.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="348.0" y="462.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (63 samples, 2.62%)</title><rect x="346.4" y="451.0" width="30.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="349.4" y="462.0">nf..</text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (12 samples, 0.50%)</title><rect x="349.9" y="435.0" width="5.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="352.9" y="446.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (2 samples, 0.08%)</title><rect x="355.8" y="435.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="358.8" y="446.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (7 samples, 0.29%)</title><rect x="356.7" y="435.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="359.7" y="446.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (27 samples, 1.12%)</title><rect x="360.2" y="435.0" width="13.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="363.2" y="446.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="368.5" y="419.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="371.5" y="430.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct	[nf_conntrack] (4 samples, 0.17%)</title><rect x="369.0" y="419.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="372.0" y="430.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (5 samples, 0.21%)</title><rect x="371.0" y="419.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="374.0" y="430.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (8 samples, 0.33%)</title><rect x="373.4" y="435.0" width="3.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="376.4" y="446.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (8 samples, 0.33%)</title><rect x="377.3" y="451.0" width="4.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="380.3" y="462.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (1 samples, 0.04%)</title><rect x="380.3" y="435.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="383.3" y="446.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (1 samples, 0.04%)</title><rect x="380.8" y="435.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="383.8" y="446.0"></text>
</g>
<g>
<title>selinux_ipv4_output (5 samples, 0.21%)</title><rect x="381.3" y="451.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="384.3" y="462.0"></text>
</g>
<g>
<title>netlbl_enabled (1 samples, 0.04%)</title><rect x="383.2" y="435.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="386.2" y="446.0"></text>
</g>
<g>
<title>ip_output (700 samples, 29.09%)</title><rect x="383.7" y="499.0" width="343.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="386.7" y="510.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (645 samples, 26.81%)</title><rect x="387.6" y="483.0" width="316.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="390.6" y="494.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (56 samples, 2.33%)</title><rect x="392.5" y="467.0" width="27.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="395.5" y="478.0">_..</text>
</g>
<g>
<title>dev_hard_start_xmit (38 samples, 1.58%)</title><rect x="398.4" y="451.0" width="18.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="401.4" y="462.0"></text>
</g>
<g>
<title>loopback_xmit (34 samples, 1.41%)</title><rect x="400.4" y="435.0" width="16.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="403.4" y="446.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.12%)</title><rect x="402.8" y="419.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="405.8" y="430.0"></text>
</g>
<g>
<title>netif_rx (19 samples, 0.79%)</title><rect x="404.3" y="419.0" width="9.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="407.3" y="430.0"></text>
</g>
<g>
<title>netif_rx_internal (19 samples, 0.79%)</title><rect x="404.3" y="403.0" width="9.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="407.3" y="414.0"></text>
</g>
<g>
<title>enqueue_to_backlog (8 samples, 0.33%)</title><rect x="406.8" y="387.0" width="3.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="409.8" y="398.0"></text>
</g>
<g>
<title>ktime_get_with_offset (6 samples, 0.25%)</title><rect x="410.7" y="387.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="413.7" y="398.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.17%)</title><rect x="411.7" y="371.0" width="1.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="414.7" y="382.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.08%)</title><rect x="413.6" y="419.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="416.6" y="430.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.08%)</title><rect x="414.6" y="419.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="417.6" y="430.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.12%)</title><rect x="415.6" y="419.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="418.6" y="430.0"></text>
</g>
<g>
<title>netdev_pick_tx (2 samples, 0.08%)</title><rect x="417.1" y="451.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="420.1" y="462.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.17%)</title><rect x="418.0" y="451.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="421.0" y="462.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.08%)</title><rect x="419.0" y="435.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="422.0" y="446.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (579 samples, 24.06%)</title><rect x="420.0" y="467.0" width="284.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="423.0" y="478.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (578 samples, 24.02%)</title><rect x="420.5" y="451.0" width="283.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="423.5" y="462.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (575 samples, 23.90%)</title><rect x="422.0" y="435.0" width="282.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="425.0" y="446.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (575 samples, 23.90%)</title><rect x="422.0" y="419.0" width="282.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="425.0" y="430.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (555 samples, 23.07%)</title><rect x="431.3" y="403.0" width="272.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="434.3" y="414.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (4 samples, 0.17%)</title><rect x="431.8" y="387.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="434.8" y="398.0"></text>
</g>
<g>
<title>process_backlog (550 samples, 22.86%)</title><rect x="433.7" y="387.0" width="269.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="436.7" y="398.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb_one_core (533 samples, 22.15%)</title><rect x="442.1" y="371.0" width="261.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="445.1" y="382.0">__netif_receive_skb_one_core</text>
</g>
<g>
<title>__netif_receive_skb_core (11 samples, 0.46%)</title><rect x="443.1" y="355.0" width="5.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="446.1" y="366.0"></text>
</g>
<g>
<title>ip_rcv (520 samples, 21.61%)</title><rect x="448.5" y="355.0" width="255.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="451.5" y="366.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (412 samples, 17.12%)</title><rect x="452.4" y="339.0" width="202.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="455.4" y="350.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (342 samples, 14.21%)</title><rect x="453.8" y="323.0" width="167.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="456.8" y="334.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (340 samples, 14.13%)</title><rect x="454.8" y="307.0" width="166.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="457.8" y="318.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>raw_local_deliver (6 samples, 0.25%)</title><rect x="456.8" y="291.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="459.8" y="302.0"></text>
</g>
<g>
<title>tcp_v4_rcv (330 samples, 13.72%)</title><rect x="459.7" y="291.0" width="161.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="462.7" y="302.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (15 samples, 0.62%)</title><rect x="470.5" y="275.0" width="7.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="473.5" y="286.0"></text>
</g>
<g>
<title>inet_ehashfn (6 samples, 0.25%)</title><rect x="474.9" y="259.0" width="3.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="477.9" y="270.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (7 samples, 0.29%)</title><rect x="477.9" y="275.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="480.9" y="286.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (7 samples, 0.29%)</title><rect x="477.9" y="259.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="480.9" y="270.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (7 samples, 0.29%)</title><rect x="477.9" y="243.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="480.9" y="254.0"></text>
</g>
<g>
<title>selinux_peerlbl_enabled (1 samples, 0.04%)</title><rect x="480.8" y="227.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="483.8" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (285 samples, 11.85%)</title><rect x="481.3" y="275.0" width="139.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="484.3" y="286.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.08%)</title><rect x="481.3" y="259.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="484.3" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (283 samples, 11.76%)</title><rect x="482.3" y="259.0" width="138.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="485.3" y="270.0">tcp_rcv_established</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.04%)</title><rect x="483.3" y="243.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="486.3" y="254.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.25%)</title><rect x="483.8" y="243.0" width="2.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="486.8" y="254.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.25%)</title><rect x="483.8" y="227.0" width="2.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="486.8" y="238.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.17%)</title><rect x="484.7" y="211.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="487.7" y="222.0"></text>
</g>
<g>
<title>tcp_ack (70 samples, 2.91%)</title><rect x="486.7" y="243.0" width="34.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="489.7" y="254.0">tc..</text>
</g>
<g>
<title>__kfree_skb (17 samples, 0.71%)</title><rect x="497.5" y="227.0" width="8.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="500.5" y="238.0"></text>
</g>
<g>
<title>__slab_free (7 samples, 0.29%)</title><rect x="497.5" y="211.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="500.5" y="222.0"></text>
</g>
<g>
<title>skb_release_data (10 samples, 0.42%)</title><rect x="500.9" y="211.0" width="4.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="503.9" y="222.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.12%)</title><rect x="505.8" y="227.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="508.8" y="238.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.08%)</title><rect x="507.3" y="227.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="510.3" y="238.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.04%)</title><rect x="508.3" y="227.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="511.3" y="238.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.17%)</title><rect x="508.8" y="227.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="511.8" y="238.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.12%)</title><rect x="509.3" y="211.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="512.3" y="222.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.04%)</title><rect x="510.7" y="227.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="513.7" y="238.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.08%)</title><rect x="511.2" y="227.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="514.2" y="238.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.04%)</title><rect x="512.2" y="227.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="515.2" y="238.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.17%)</title><rect x="512.7" y="227.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="515.7" y="238.0"></text>
</g>
<g>
<title>tcp_newly_delivered (3 samples, 0.12%)</title><rect x="514.7" y="227.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="517.7" y="238.0"></text>
</g>
<g>
<title>tcp_rate_gen (3 samples, 0.12%)</title><rect x="516.1" y="227.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="519.1" y="238.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.04%)</title><rect x="517.6" y="227.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="520.6" y="238.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.12%)</title><rect x="518.1" y="227.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="521.1" y="238.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.12%)</title><rect x="519.6" y="227.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="522.6" y="238.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.08%)</title><rect x="521.0" y="243.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="524.0" y="254.0"></text>
</g>
<g>
<title>tcp_data_queue (197 samples, 8.19%)</title><rect x="522.0" y="243.0" width="96.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="525.0" y="254.0">tcp_data_qu..</text>
</g>
<g>
<title>dst_release (2 samples, 0.08%)</title><rect x="523.0" y="227.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="526.0" y="238.0"></text>
</g>
<g>
<title>sock_def_readable (183 samples, 7.61%)</title><rect x="524.0" y="227.0" width="89.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="527.0" y="238.0">sock_def_r..</text>
</g>
<g>
<title>__wake_up_common_lock (179 samples, 7.44%)</title><rect x="525.9" y="211.0" width="87.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="528.9" y="222.0">__wake_up_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="526.4" y="195.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="529.4" y="206.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (177 samples, 7.36%)</title><rect x="526.9" y="195.0" width="86.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="529.9" y="206.0">_raw_spin_..</text>
</g>
<g>
<title>tcp_event_data_recv (7 samples, 0.29%)</title><rect x="613.7" y="227.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="616.7" y="238.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.12%)</title><rect x="617.2" y="227.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="620.2" y="238.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.08%)</title><rect x="618.6" y="243.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="621.6" y="254.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.08%)</title><rect x="618.6" y="227.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="621.6" y="238.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.04%)</title><rect x="619.1" y="211.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="622.1" y="222.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.04%)</title><rect x="619.6" y="243.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="622.6" y="254.0"></text>
</g>
<g>
<title>tcp_urg (2 samples, 0.08%)</title><rect x="620.1" y="243.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="623.1" y="254.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.04%)</title><rect x="621.1" y="275.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="624.1" y="286.0"></text>
</g>
<g>
<title>nf_hook_slow (67 samples, 2.78%)</title><rect x="621.6" y="323.0" width="32.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="624.6" y="334.0">nf..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (50 samples, 2.08%)</title><rect x="622.1" y="307.0" width="24.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="625.1" y="318.0">i..</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="640.7" y="291.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="643.7" y="302.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (4 samples, 0.17%)</title><rect x="641.2" y="291.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="644.2" y="302.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (7 samples, 0.29%)</title><rect x="643.2" y="291.0" width="3.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="646.2" y="302.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (1 samples, 0.04%)</title><rect x="646.6" y="307.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="649.6" y="318.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (4 samples, 0.17%)</title><rect x="647.1" y="307.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="650.1" y="318.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (5 samples, 0.21%)</title><rect x="649.0" y="307.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="652.0" y="318.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (2 samples, 0.08%)</title><rect x="651.5" y="307.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="654.5" y="318.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (2 samples, 0.08%)</title><rect x="651.5" y="291.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="654.5" y="302.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (3 samples, 0.12%)</title><rect x="652.5" y="307.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="655.5" y="318.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (1 samples, 0.04%)</title><rect x="653.9" y="307.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="656.9" y="318.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (7 samples, 0.29%)</title><rect x="654.4" y="339.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="657.4" y="350.0"></text>
</g>
<g>
<title>nf_hook_slow (93 samples, 3.87%)</title><rect x="657.9" y="339.0" width="45.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="660.9" y="350.0">nf_h..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="659.8" y="323.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="662.8" y="334.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (3 samples, 0.12%)</title><rect x="660.3" y="323.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="663.3" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (72 samples, 2.99%)</title><rect x="661.8" y="323.0" width="35.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="664.8" y="334.0">ipt..</text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (1 samples, 0.04%)</title><rect x="697.1" y="323.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="700.1" y="334.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.12%)</title><rect x="697.6" y="323.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="700.6" y="334.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.17%)</title><rect x="699.1" y="323.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="702.1" y="334.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (1 samples, 0.04%)</title><rect x="701.0" y="323.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="704.0" y="334.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (2 samples, 0.08%)</title><rect x="701.5" y="323.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="704.5" y="334.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (2 samples, 0.08%)</title><rect x="702.5" y="323.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="705.5" y="334.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.04%)</title><rect x="703.5" y="403.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="706.5" y="414.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.17%)</title><rect x="704.0" y="483.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="707.0" y="494.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.04%)</title><rect x="705.4" y="467.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="708.4" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (43 samples, 1.79%)</title><rect x="705.9" y="483.0" width="21.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="708.9" y="494.0">n..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (14 samples, 0.58%)</title><rect x="705.9" y="467.0" width="6.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="708.9" y="478.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (1 samples, 0.04%)</title><rect x="712.8" y="467.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="715.8" y="478.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (8 samples, 0.33%)</title><rect x="713.3" y="467.0" width="3.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="716.3" y="478.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (6 samples, 0.25%)</title><rect x="714.3" y="451.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="717.3" y="462.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (9 samples, 0.37%)</title><rect x="717.2" y="467.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="720.2" y="478.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.08%)</title><rect x="720.6" y="451.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="723.6" y="462.0"></text>
</g>
<g>
<title>selinux_ip_postroute (7 samples, 0.29%)</title><rect x="721.6" y="467.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="724.6" y="478.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (4 samples, 0.17%)</title><rect x="725.1" y="467.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="728.1" y="478.0"></text>
</g>
<g>
<title>__skb_clone (7 samples, 0.29%)</title><rect x="727.0" y="515.0" width="3.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="730.0" y="526.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.04%)</title><rect x="730.0" y="499.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="733.0" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.04%)</title><rect x="730.5" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="733.5" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.08%)</title><rect x="730.9" y="515.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="733.9" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.04%)</title><rect x="731.9" y="515.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="734.9" y="526.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.08%)</title><rect x="732.4" y="515.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="735.4" y="526.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.04%)</title><rect x="733.4" y="515.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="736.4" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.04%)</title><rect x="733.9" y="515.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="736.9" y="526.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (1 samples, 0.04%)</title><rect x="734.4" y="515.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="737.4" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.04%)</title><rect x="734.9" y="515.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="737.9" y="526.0"></text>
</g>
<g>
<title>ktime_get (6 samples, 0.25%)</title><rect x="735.4" y="531.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="738.4" y="542.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.12%)</title><rect x="736.8" y="515.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="739.8" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (7 samples, 0.29%)</title><rect x="738.3" y="531.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="741.3" y="542.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.04%)</title><rect x="741.2" y="515.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="744.2" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.17%)</title><rect x="741.7" y="531.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="744.7" y="542.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.04%)</title><rect x="741.7" y="515.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="744.7" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.12%)</title><rect x="742.2" y="515.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="745.2" y="526.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.12%)</title><rect x="742.2" y="499.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="745.2" y="510.0"></text>
</g>
<g>
<title>_copy_from_iter_full (12 samples, 0.50%)</title><rect x="743.7" y="563.0" width="5.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="746.7" y="574.0"></text>
</g>
<g>
<title>copyin (9 samples, 0.37%)</title><rect x="743.7" y="547.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="746.7" y="558.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (9 samples, 0.37%)</title><rect x="743.7" y="531.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="746.7" y="542.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.12%)</title><rect x="748.1" y="547.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="751.1" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (50 samples, 2.08%)</title><rect x="749.6" y="563.0" width="24.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="752.6" y="574.0">s..</text>
</g>
<g>
<title>__alloc_skb (48 samples, 2.00%)</title><rect x="750.6" y="547.0" width="23.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="753.6" y="558.0">_..</text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (15 samples, 0.62%)</title><rect x="753.5" y="531.0" width="7.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="756.5" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (15 samples, 0.62%)</title><rect x="753.5" y="515.0" width="7.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="756.5" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.12%)</title><rect x="757.4" y="499.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="760.4" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (4 samples, 0.17%)</title><rect x="758.9" y="499.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="761.9" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (21 samples, 0.87%)</title><rect x="760.9" y="531.0" width="10.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="763.9" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.08%)</title><rect x="767.7" y="515.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="770.7" y="526.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="768.7" y="515.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="771.7" y="526.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="768.7" y="499.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="771.7" y="510.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.04%)</title><rect x="769.2" y="515.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="772.2" y="526.0"></text>
</g>
<g>
<title>should_failslab (3 samples, 0.12%)</title><rect x="769.7" y="515.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="772.7" y="526.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.25%)</title><rect x="771.2" y="531.0" width="2.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="774.2" y="542.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.04%)</title><rect x="774.1" y="563.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="777.1" y="574.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.04%)</title><rect x="774.6" y="563.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="777.6" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (13 samples, 0.54%)</title><rect x="775.1" y="563.0" width="6.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="778.1" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (13 samples, 0.54%)</title><rect x="775.1" y="547.0" width="6.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="778.1" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (8 samples, 0.33%)</title><rect x="777.0" y="531.0" width="4.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="780.0" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.04%)</title><rect x="781.0" y="531.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="784.0" y="542.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (3 samples, 0.12%)</title><rect x="781.5" y="563.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="784.5" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.12%)</title><rect x="782.9" y="611.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="785.9" y="622.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.12%)</title><rect x="782.9" y="595.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="785.9" y="606.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.12%)</title><rect x="782.9" y="579.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="785.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.54%)</title><rect x="784.4" y="691.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="787.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.54%)</title><rect x="784.4" y="675.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="787.4" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (12 samples, 0.50%)</title><rect x="784.4" y="659.0" width="5.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="787.4" y="670.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.08%)</title><rect x="785.9" y="643.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="788.9" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.29%)</title><rect x="786.9" y="643.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="789.9" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.08%)</title><rect x="786.9" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (5 samples, 0.21%)</title><rect x="787.8" y="627.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="790.8" y="638.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="790.3" y="659.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="793.3" y="670.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="790.8" y="691.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="793.8" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.12%)</title><rect x="791.3" y="723.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="794.3" y="734.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.12%)</title><rect x="791.3" y="707.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="794.3" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.12%)</title><rect x="791.3" y="691.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="794.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 0.58%)</title><rect x="792.7" y="771.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.12%)</title><rect x="793.7" y="755.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.37%)</title><rect x="795.2" y="755.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="795.2" y="739.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.33%)</title><rect x="795.7" y="739.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="798.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.08%)</title><rect x="797.2" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="800.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.08%)</title><rect x="797.2" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="800.2" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.04%)</title><rect x="797.2" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.2" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.04%)</title><rect x="797.6" y="691.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.6" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.04%)</title><rect x="797.6" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="800.6" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.12%)</title><rect x="798.1" y="723.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.12%)</title><rect x="798.1" y="707.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.1" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.12%)</title><rect x="798.1" y="691.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="801.1" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.04%)</title><rect x="799.1" y="675.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="802.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (2 samples, 0.08%)</title><rect x="799.6" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="802.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (4 samples, 0.17%)</title><rect x="800.6" y="771.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="802.1" y="755.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="805.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (13 samples, 0.54%)</title><rect x="802.6" y="787.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="803.5" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="803.5" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="806.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.12%)</title><rect x="804.0" y="771.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.12%)</title><rect x="804.0" y="755.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.17%)</title><rect x="805.5" y="771.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="806.0" y="755.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.08%)</title><rect x="806.5" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="807.5" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="807.5" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.08%)</title><rect x="807.9" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="807.9" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="807.9" y="739.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.08%)</title><rect x="807.9" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (261 samples, 10.85%)</title><rect x="808.9" y="787.0" width="128.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="811.9" y="798.0">ru/mail/polis/se..</text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.08%)</title><rect x="810.4" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="813.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.12%)</title><rect x="811.4" y="771.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="811.4" y="755.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.08%)</title><rect x="811.9" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.08%)</title><rect x="811.9" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.9" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="812.4" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="815.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="812.9" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.9" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="812.9" y="755.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="815.9" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="812.9" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="815.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="812.9" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="815.9" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="812.9" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.9" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="812.9" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.9" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.04%)</title><rect x="812.9" y="675.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.9" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="813.3" y="771.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="816.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (1 samples, 0.04%)</title><rect x="813.8" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.12%)</title><rect x="814.3" y="771.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="817.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="814.3" y="755.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.3" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="814.3" y="739.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.08%)</title><rect x="814.8" y="755.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="817.8" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.04%)</title><rect x="814.8" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="815.3" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="818.3" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="815.3" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="818.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (247 samples, 10.27%)</title><rect x="815.8" y="771.0" width="121.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.8" y="782.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.flushAndLoad (75 samples, 3.12%)</title><rect x="816.8" y="755.0" width="36.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="819.8" y="766.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.flush (75 samples, 3.12%)</title><rect x="816.8" y="739.0" width="36.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.8" y="750.0">ru/..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="817.8" y="723.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="820.8" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.04%)</title><rect x="818.2" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="818.7" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="818.7" y="707.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="821.7" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.04%)</title><rect x="819.2" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.2" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="819.2" y="707.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="822.2" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (1 samples, 0.04%)</title><rect x="819.7" y="723.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="822.7" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.04%)</title><rect x="820.2" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="823.2" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="820.2" y="707.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="823.2" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="820.2" y="691.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="823.2" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.04%)</title><rect x="820.2" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.2" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.04%)</title><rect x="820.2" y="659.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="823.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.08%)</title><rect x="820.7" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="823.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="820.7" y="707.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="823.7" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="820.7" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="820.7" y="675.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="820.7" y="659.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.7" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="821.2" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="821.2" y="627.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.2" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="821.2" y="611.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.2" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="821.2" y="595.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.04%)</title><rect x="821.2" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getSizeOfFlushedRow (1 samples, 0.04%)</title><rect x="821.7" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.7" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (64 samples, 2.66%)</title><rect x="822.2" y="723.0" width="31.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.2" y="734.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (61 samples, 2.54%)</title><rect x="822.2" y="707.0" width="29.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="825.2" y="718.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="822.7" y="691.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.7" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="822.7" y="675.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.7" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.04%)</title><rect x="822.7" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="825.7" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (56 samples, 2.33%)</title><rect x="823.2" y="691.0" width="27.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.2" y="702.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (56 samples, 2.33%)</title><rect x="823.2" y="675.0" width="27.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.2" y="686.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (56 samples, 2.33%)</title><rect x="823.2" y="659.0" width="27.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="826.2" y="670.0">s..</text>
</g>
<g>
<title>__libc_write (55 samples, 2.29%)</title><rect x="823.2" y="643.0" width="26.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="826.2" y="654.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (40 samples, 1.66%)</title><rect x="830.5" y="627.0" width="19.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="833.5" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (40 samples, 1.66%)</title><rect x="830.5" y="611.0" width="19.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="833.5" y="622.0"></text>
</g>
<g>
<title>ksys_write (29 samples, 1.21%)</title><rect x="835.9" y="595.0" width="14.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="838.9" y="606.0"></text>
</g>
<g>
<title>__fdget_pos (4 samples, 0.17%)</title><rect x="835.9" y="579.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="838.9" y="590.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.12%)</title><rect x="835.9" y="563.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="838.9" y="574.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.12%)</title><rect x="835.9" y="547.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="838.9" y="558.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.04%)</title><rect x="837.4" y="563.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="840.4" y="574.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="837.4" y="547.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="840.4" y="558.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="837.4" y="531.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="840.4" y="542.0"></text>
</g>
<g>
<title>vfs_write (25 samples, 1.04%)</title><rect x="837.9" y="579.0" width="12.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="840.9" y="590.0"></text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.04%)</title><rect x="838.4" y="563.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="841.4" y="574.0"></text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.08%)</title><rect x="838.8" y="563.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="841.8" y="574.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.04%)</title><rect x="839.8" y="563.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="842.8" y="574.0"></text>
</g>
<g>
<title>new_sync_write (18 samples, 0.75%)</title><rect x="840.3" y="563.0" width="8.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="843.3" y="574.0"></text>
</g>
<g>
<title>generic_file_write_iter (18 samples, 0.75%)</title><rect x="840.3" y="547.0" width="8.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="843.3" y="558.0"></text>
</g>
<g>
<title>__generic_file_write_iter (15 samples, 0.62%)</title><rect x="840.8" y="531.0" width="7.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="843.8" y="542.0"></text>
</g>
<g>
<title>generic_perform_write (15 samples, 0.62%)</title><rect x="840.8" y="515.0" width="7.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="843.8" y="526.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (3 samples, 0.12%)</title><rect x="841.8" y="499.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="844.8" y="510.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.04%)</title><rect x="842.8" y="483.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="845.8" y="494.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.04%)</title><rect x="843.3" y="499.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="846.3" y="510.0"></text>
</g>
<g>
<title>shmem_write_begin (5 samples, 0.21%)</title><rect x="843.7" y="499.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="846.7" y="510.0"></text>
</g>
<g>
<title>shmem_getpage_gfp (5 samples, 0.21%)</title><rect x="843.7" y="483.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="846.7" y="494.0"></text>
</g>
<g>
<title>find_lock_entry (4 samples, 0.17%)</title><rect x="843.7" y="467.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="846.7" y="478.0"></text>
</g>
<g>
<title>find_get_entry (4 samples, 0.17%)</title><rect x="843.7" y="451.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="846.7" y="462.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.04%)</title><rect x="845.2" y="435.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="848.2" y="446.0"></text>
</g>
<g>
<title>shmem_alloc_and_acct_page (1 samples, 0.04%)</title><rect x="845.7" y="467.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="848.7" y="478.0"></text>
</g>
<g>
<title>shmem_alloc_page (1 samples, 0.04%)</title><rect x="845.7" y="451.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="848.7" y="462.0"></text>
</g>
<g>
<title>shmem_pseudo_vma_init (1 samples, 0.04%)</title><rect x="845.7" y="435.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="848.7" y="446.0"></text>
</g>
<g>
<title>shmem_write_end (4 samples, 0.17%)</title><rect x="846.2" y="499.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="849.2" y="510.0"></text>
</g>
<g>
<title>__set_page_dirty_no_writeback (1 samples, 0.04%)</title><rect x="846.7" y="483.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="849.7" y="494.0"></text>
</g>
<g>
<title>set_page_dirty (1 samples, 0.04%)</title><rect x="847.2" y="483.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="850.2" y="494.0"></text>
</g>
<g>
<title>page_mapping (1 samples, 0.04%)</title><rect x="847.2" y="467.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="850.2" y="478.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.04%)</title><rect x="847.7" y="483.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="850.7" y="494.0"></text>
</g>
<g>
<title>down_write (1 samples, 0.04%)</title><rect x="848.2" y="531.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="851.2" y="542.0"></text>
</g>
<g>
<title>generic_write_check_limits (1 samples, 0.04%)</title><rect x="848.7" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="851.7" y="542.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.04%)</title><rect x="849.1" y="563.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="852.1" y="574.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.04%)</title><rect x="849.6" y="563.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="852.6" y="574.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="850.1" y="643.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="853.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.12%)</title><rect x="850.6" y="691.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="850.6" y="675.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.04%)</title><rect x="850.6" y="659.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.6" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.08%)</title><rect x="851.1" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.1" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.04%)</title><rect x="851.1" y="659.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.04%)</title><rect x="851.6" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.6" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.12%)</title><rect x="852.1" y="707.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="855.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.08%)</title><rect x="852.6" y="691.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.6" y="702.0"></text>
</g>
<g>
<title>.annobin_compat_pthread_self.c (1 samples, 0.04%)</title><rect x="853.1" y="675.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="856.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.upsert (170 samples, 7.07%)</title><rect x="853.6" y="755.0" width="83.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="856.6" y="766.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/TreeMap.put (158 samples, 6.57%)</title><rect x="854.5" y="739.0" width="77.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="857.5" y="750.0">java/util..</text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.04%)</title><rect x="866.3" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="869.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.04%)</title><rect x="866.3" y="707.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="869.3" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.04%)</title><rect x="866.3" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="869.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (108 samples, 4.49%)</title><rect x="866.8" y="723.0" width="53.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="869.8" y="734.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (78 samples, 3.24%)</title><rect x="881.5" y="707.0" width="38.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="884.5" y="718.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.21%)</title><rect x="884.0" y="691.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="887.0" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="885.9" y="675.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="888.9" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (5 samples, 0.21%)</title><rect x="886.4" y="691.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="889.4" y="702.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (43 samples, 1.79%)</title><rect x="888.9" y="691.0" width="21.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="891.9" y="702.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.83%)</title><rect x="900.1" y="675.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="903.1" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.25%)</title><rect x="906.5" y="659.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="909.5" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.04%)</title><rect x="909.5" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="912.5" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.83%)</title><rect x="910.0" y="691.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="913.0" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (19 samples, 0.79%)</title><rect x="910.0" y="675.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.0" y="686.0"></text>
</g>
<g>
<title>vectorizedMismatch (18 samples, 0.75%)</title><rect x="910.4" y="659.0" width="8.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="913.4" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.04%)</title><rect x="919.3" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.3" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (2 samples, 0.08%)</title><rect x="919.8" y="723.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.8" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.04%)</title><rect x="920.7" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.7" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (22 samples, 0.91%)</title><rect x="921.2" y="723.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="924.2" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.parentOf (2 samples, 0.08%)</title><rect x="928.6" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="931.6" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (4 samples, 0.17%)</title><rect x="929.6" y="707.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="932.6" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (1 samples, 0.04%)</title><rect x="931.5" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="934.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.of (8 samples, 0.33%)</title><rect x="932.0" y="739.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="935.0" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="933.5" y="723.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="936.5" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="934.0" y="723.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="937.0" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.08%)</title><rect x="934.5" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.&lt;init&gt; (1 samples, 0.04%)</title><rect x="935.5" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="938.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="935.5" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="938.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.of (2 samples, 0.08%)</title><rect x="936.0" y="739.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="939.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.&lt;init&gt; (2 samples, 0.08%)</title><rect x="936.0" y="723.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.08%)</title><rect x="936.0" y="707.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.21%)</title><rect x="936.9" y="803.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.21%)</title><rect x="936.9" y="787.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="939.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="936.9" y="771.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="936.9" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.17%)</title><rect x="937.4" y="771.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="940.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.17%)</title><rect x="937.4" y="755.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="940.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.12%)</title><rect x="937.9" y="739.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="940.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.12%)</title><rect x="939.4" y="803.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="942.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.12%)</title><rect x="939.4" y="787.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="942.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.12%)</title><rect x="939.4" y="771.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="942.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.12%)</title><rect x="939.4" y="755.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="942.4" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="939.9" y="739.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="942.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (44 samples, 1.83%)</title><rect x="940.9" y="835.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="943.9" y="846.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (18 samples, 0.75%)</title><rect x="943.3" y="819.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="946.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="947.2" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="950.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.37%)</title><rect x="947.7" y="803.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="950.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.33%)</title><rect x="948.2" y="787.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="951.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.08%)</title><rect x="951.2" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="954.2" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21 samples, 0.87%)</title><rect x="952.1" y="819.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="955.1" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.62%)</title><rect x="955.1" y="803.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="958.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="961.5" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="964.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="961.5" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.5" y="782.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.04%)</title><rect x="961.9" y="787.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="964.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.04%)</title><rect x="962.4" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="965.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.04%)</title><rect x="962.4" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (7 samples, 0.29%)</title><rect x="962.9" y="835.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="965.9" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (49 samples, 2.04%)</title><rect x="966.4" y="835.0" width="24.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="969.4" y="846.0">o..</text>
</g>
<g>
<title>java/lang/String.regionMatches (30 samples, 1.25%)</title><rect x="971.3" y="819.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="974.3" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (30 samples, 1.25%)</title><rect x="971.3" y="803.0" width="14.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="974.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.21%)</title><rect x="980.6" y="787.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="983.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.21%)</title><rect x="980.6" y="771.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.6" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (3 samples, 0.12%)</title><rect x="980.6" y="755.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="983.6" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.08%)</title><rect x="982.1" y="755.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="985.1" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.04%)</title><rect x="982.5" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.25%)</title><rect x="983.0" y="787.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="986.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.25%)</title><rect x="983.0" y="771.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="986.0" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.08%)</title><rect x="983.0" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="986.0" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.17%)</title><rect x="984.0" y="755.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="987.0" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (4 samples, 0.17%)</title><rect x="984.0" y="739.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.0" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="984.5" y="723.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="987.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.29%)</title><rect x="986.0" y="819.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="989.0" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.29%)</title><rect x="986.0" y="803.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="989.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.29%)</title><rect x="986.0" y="787.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="989.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (7 samples, 0.29%)</title><rect x="986.0" y="771.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="989.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="989.4" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="992.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21 samples, 0.87%)</title><rect x="990.4" y="835.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="993.4" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.79%)</title><rect x="991.4" y="819.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="994.4" y="830.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.08%)</title><rect x="999.7" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1002.7" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (230 samples, 9.56%)</title><rect x="1000.7" y="851.0" width="112.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1003.7" y="862.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (228 samples, 9.48%)</title><rect x="1001.2" y="835.0" width="111.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.2" y="846.0">one/nio/net/N..</text>
</g>
<g>
<title>[unknown] (25 samples, 1.04%)</title><rect x="1006.1" y="819.0" width="12.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1009.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 1.04%)</title><rect x="1006.1" y="803.0" width="12.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1009.1" y="814.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (19 samples, 0.79%)</title><rect x="1006.1" y="787.0" width="9.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1009.1" y="798.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="1006.6" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.6" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.04%)</title><rect x="1007.1" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.1" y="782.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.12%)</title><rect x="1007.6" y="771.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1010.6" y="782.0"></text>
</g>
<g>
<title>_init (2 samples, 0.08%)</title><rect x="1009.0" y="771.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1012.0" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 0.46%)</title><rect x="1010.0" y="771.0" width="5.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1013.0" y="782.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="1012.5" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1015.5" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="1013.0" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1016.0" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (4 samples, 0.17%)</title><rect x="1013.4" y="755.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1016.4" y="766.0"></text>
</g>
<g>
<title>__libc_recv (2 samples, 0.08%)</title><rect x="1015.4" y="787.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1018.4" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.17%)</title><rect x="1016.4" y="787.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1019.4" y="798.0"></text>
</g>
<g>
<title>__libc_recv (192 samples, 7.98%)</title><rect x="1018.3" y="819.0" width="94.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1021.3" y="830.0">__libc_recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (155 samples, 6.44%)</title><rect x="1036.5" y="803.0" width="76.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1039.5" y="814.0">entry_SY..</text>
</g>
<g>
<title>do_syscall_64 (155 samples, 6.44%)</title><rect x="1036.5" y="787.0" width="76.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1039.5" y="798.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_recvfrom (143 samples, 5.94%)</title><rect x="1042.4" y="771.0" width="70.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1045.4" y="782.0">__x64_sy..</text>
</g>
<g>
<title>__sys_recvfrom (140 samples, 5.82%)</title><rect x="1043.8" y="755.0" width="68.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1046.8" y="766.0">__sys_r..</text>
</g>
<g>
<title>fput_many (4 samples, 0.17%)</title><rect x="1045.3" y="739.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1048.3" y="750.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.08%)</title><rect x="1047.3" y="739.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1050.3" y="750.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.04%)</title><rect x="1047.8" y="723.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1050.8" y="734.0"></text>
</g>
<g>
<title>inet_recvmsg (93 samples, 3.87%)</title><rect x="1048.3" y="739.0" width="45.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1051.3" y="750.0">inet..</text>
</g>
<g>
<title>tcp_recvmsg (91 samples, 3.78%)</title><rect x="1049.2" y="723.0" width="44.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1052.2" y="734.0">tcp_..</text>
</g>
<g>
<title>__kfree_skb (11 samples, 0.46%)</title><rect x="1059.1" y="707.0" width="5.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1062.1" y="718.0"></text>
</g>
<g>
<title>skb_release_all (9 samples, 0.37%)</title><rect x="1059.1" y="691.0" width="4.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1062.1" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (9 samples, 0.37%)</title><rect x="1059.1" y="675.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1062.1" y="686.0"></text>
</g>
<g>
<title>sock_rfree (9 samples, 0.37%)</title><rect x="1059.1" y="659.0" width="4.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1062.1" y="670.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.08%)</title><rect x="1063.5" y="691.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1066.5" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.08%)</title><rect x="1064.4" y="707.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1067.4" y="718.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.04%)</title><rect x="1065.4" y="707.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1068.4" y="718.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.04%)</title><rect x="1065.4" y="691.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1068.4" y="702.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.17%)</title><rect x="1065.9" y="707.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1068.9" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.17%)</title><rect x="1067.9" y="707.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1070.9" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.17%)</title><rect x="1067.9" y="691.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1070.9" y="702.0"></text>
</g>
<g>
<title>ns_to_timespec64 (1 samples, 0.04%)</title><rect x="1069.8" y="707.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1072.8" y="718.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.21%)</title><rect x="1070.3" y="707.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1073.3" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.12%)</title><rect x="1070.3" y="691.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1073.3" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.08%)</title><rect x="1071.8" y="691.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1074.8" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (35 samples, 1.45%)</title><rect x="1072.8" y="707.0" width="17.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1075.8" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (35 samples, 1.45%)</title><rect x="1072.8" y="691.0" width="17.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1075.8" y="702.0"></text>
</g>
<g>
<title>_copy_to_iter (10 samples, 0.42%)</title><rect x="1074.3" y="675.0" width="4.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1077.3" y="686.0"></text>
</g>
<g>
<title>copyout (10 samples, 0.42%)</title><rect x="1074.3" y="659.0" width="4.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1077.3" y="670.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (9 samples, 0.37%)</title><rect x="1074.7" y="643.0" width="4.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1077.7" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (22 samples, 0.91%)</title><rect x="1079.2" y="675.0" width="10.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1082.2" y="686.0"></text>
</g>
<g>
<title>__check_object_size (19 samples, 0.79%)</title><rect x="1080.6" y="659.0" width="9.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1083.6" y="670.0"></text>
</g>
<g>
<title>__check_heap_object (4 samples, 0.17%)</title><rect x="1082.1" y="643.0" width="2.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1085.1" y="654.0"></text>
</g>
<g>
<title>__virt_addr_valid (11 samples, 0.46%)</title><rect x="1084.1" y="643.0" width="5.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1087.1" y="654.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.04%)</title><rect x="1089.5" y="643.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1092.5" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.04%)</title><rect x="1090.0" y="707.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1093.0" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (6 samples, 0.25%)</title><rect x="1090.4" y="707.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1093.4" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.21%)</title><rect x="1090.9" y="691.0" width="2.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1093.9" y="702.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.21%)</title><rect x="1090.9" y="675.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1093.9" y="686.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.17%)</title><rect x="1091.4" y="659.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1094.4" y="670.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (1 samples, 0.04%)</title><rect x="1093.4" y="707.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1096.4" y="718.0"></text>
</g>
<g>
<title>sock_recvmsg (29 samples, 1.21%)</title><rect x="1093.9" y="739.0" width="14.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1096.9" y="750.0"></text>
</g>
<g>
<title>security_socket_recvmsg (28 samples, 1.16%)</title><rect x="1094.4" y="723.0" width="13.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1097.4" y="734.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (2 samples, 0.08%)</title><rect x="1095.8" y="707.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1098.8" y="718.0"></text>
</g>
<g>
<title>sock_has_perm (23 samples, 0.96%)</title><rect x="1096.8" y="707.0" width="11.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1099.8" y="718.0"></text>
</g>
<g>
<title>avc_has_perm (16 samples, 0.67%)</title><rect x="1100.2" y="691.0" width="7.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1103.2" y="702.0"></text>
</g>
<g>
<title>sockfd_lookup_light (9 samples, 0.37%)</title><rect x="1108.1" y="739.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1111.1" y="750.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.37%)</title><rect x="1108.1" y="723.0" width="4.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1111.1" y="734.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.33%)</title><rect x="1108.6" y="707.0" width="3.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1111.6" y="718.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="1112.5" y="819.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1115.5" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.04%)</title><rect x="1113.0" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.0" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.17%)</title><rect x="1113.5" y="867.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.5" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1113.5" y="851.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1116.5" y="862.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.12%)</title><rect x="1114.0" y="851.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1117.0" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1115.0" y="835.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1118.0" y="846.0"></text>
</g>
<g>
<title>[tid=2735] (26 samples, 1.08%)</title><rect x="1115.5" y="915.0" width="12.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1118.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1115.5" y="899.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1118.5" y="910.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (1 samples, 0.04%)</title><rect x="1115.5" y="883.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1118.5" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1115.5" y="867.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1118.5" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1115.5" y="851.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1118.5" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.04%)</title><rect x="1115.5" y="835.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1118.5" y="846.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.04%)</title><rect x="1115.5" y="819.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1118.5" y="830.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.04%)</title><rect x="1115.5" y="803.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1118.5" y="814.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.04%)</title><rect x="1115.5" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1118.5" y="798.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.04%)</title><rect x="1115.5" y="771.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1118.5" y="782.0"></text>
</g>
<g>
<title>start_thread (25 samples, 1.04%)</title><rect x="1115.9" y="899.0" width="12.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1118.9" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 1.04%)</title><rect x="1115.9" y="883.0" width="12.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1118.9" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 1.04%)</title><rect x="1115.9" y="867.0" width="12.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.9" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (25 samples, 1.04%)</title><rect x="1115.9" y="851.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.9" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (18 samples, 0.75%)</title><rect x="1115.9" y="835.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.9" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 0.58%)</title><rect x="1115.9" y="819.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.9" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 0.37%)</title><rect x="1118.4" y="803.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.4" y="814.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.17%)</title><rect x="1122.8" y="819.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1125.8" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.25%)</title><rect x="1124.8" y="835.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.8" y="846.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.25%)</title><rect x="1124.8" y="819.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.25%)</title><rect x="1124.8" y="803.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.8" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.25%)</title><rect x="1124.8" y="787.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.8" y="798.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.25%)</title><rect x="1124.8" y="771.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.8" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.17%)</title><rect x="1124.8" y="755.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.8" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.12%)</title><rect x="1125.3" y="739.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.3" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (2 samples, 0.08%)</title><rect x="1126.7" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.7" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.08%)</title><rect x="1126.7" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.7" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.08%)</title><rect x="1126.7" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.7" y="734.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="1127.7" y="835.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="846.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.04%)</title><rect x="1127.7" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="830.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1127.7" y="803.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.7" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.04%)</title><rect x="1127.7" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1127.7" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1127.7" y="755.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.7" y="766.0"></text>
</g>
<g>
<title>[tid=2741] (27 samples, 1.12%)</title><rect x="1128.2" y="915.0" width="13.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1131.2" y="926.0"></text>
</g>
<g>
<title>start_thread (27 samples, 1.12%)</title><rect x="1128.2" y="899.0" width="13.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1131.2" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (27 samples, 1.12%)</title><rect x="1128.2" y="883.0" width="13.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1131.2" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (27 samples, 1.12%)</title><rect x="1128.2" y="867.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.2" y="878.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (17 samples, 0.71%)</title><rect x="1128.2" y="851.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.2" y="862.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (16 samples, 0.67%)</title><rect x="1128.2" y="835.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.2" y="846.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (11 samples, 0.46%)</title><rect x="1128.2" y="819.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.2" y="830.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.04%)</title><rect x="1128.7" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.7" y="814.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.04%)</title><rect x="1128.7" y="787.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1131.7" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1128.7" y="771.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1131.7" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1128.7" y="755.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1131.7" y="766.0"></text>
</g>
<g>
<title>__do_sys_getrusage (1 samples, 0.04%)</title><rect x="1128.7" y="739.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1131.7" y="750.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.04%)</title><rect x="1128.7" y="723.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1131.7" y="734.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.04%)</title><rect x="1128.7" y="707.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1131.7" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.04%)</title><rect x="1129.2" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.2" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (7 samples, 0.29%)</title><rect x="1129.7" y="803.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.7" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (6 samples, 0.25%)</title><rect x="1130.2" y="787.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1133.1" y="803.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (5 samples, 0.21%)</title><rect x="1133.6" y="819.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.6" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.12%)</title><rect x="1134.1" y="803.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.1" y="814.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.04%)</title><rect x="1135.1" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.1" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1135.6" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="814.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.04%)</title><rect x="1136.1" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.1" y="846.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (10 samples, 0.42%)</title><rect x="1136.5" y="851.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.5" y="862.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (10 samples, 0.42%)</title><rect x="1136.5" y="835.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.5" y="846.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (10 samples, 0.42%)</title><rect x="1136.5" y="819.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.5" y="830.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.04%)</title><rect x="1139.0" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="814.0"></text>
</g>
<g>
<title>java_lang_Class::static_oop_field_count(oopDesc*) (1 samples, 0.04%)</title><rect x="1139.5" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.5" y="814.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.04%)</title><rect x="1140.0" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.0" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.08%)</title><rect x="1140.5" y="803.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.5" y="814.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.04%)</title><rect x="1141.0" y="787.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="798.0"></text>
</g>
<g>
<title>[tid=2743] (1 samples, 0.04%)</title><rect x="1141.4" y="915.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1144.4" y="926.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.04%)</title><rect x="1141.4" y="899.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1144.4" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1141.4" y="883.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1144.4" y="894.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.04%)</title><rect x="1141.4" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.4" y="878.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.04%)</title><rect x="1141.4" y="851.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.4" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1141.4" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.4" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1141.4" y="819.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.4" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.04%)</title><rect x="1141.4" y="803.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1144.4" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1141.4" y="787.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1144.4" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1141.4" y="771.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1144.4" y="782.0"></text>
</g>
<g>
<title>[tid=2744] (1 samples, 0.04%)</title><rect x="1141.9" y="915.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1144.9" y="926.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.04%)</title><rect x="1141.9" y="899.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1144.9" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1141.9" y="883.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1144.9" y="894.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.04%)</title><rect x="1141.9" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.9" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.04%)</title><rect x="1141.9" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.9" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1141.9" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.9" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="1141.9" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.9" y="830.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.04%)</title><rect x="1141.9" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.9" y="814.0"></text>
</g>
<g>
<title>[tid=2748] (80 samples, 3.33%)</title><rect x="1142.4" y="915.0" width="39.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1145.4" y="926.0">[ti..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.21%)</title><rect x="1142.4" y="899.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1145.4" y="910.0"></text>
</g>
<g>
<title>__open (1 samples, 0.04%)</title><rect x="1142.4" y="883.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1145.4" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1142.4" y="867.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1145.4" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1142.4" y="851.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1145.4" y="862.0"></text>
</g>
<g>
<title>do_sys_open (1 samples, 0.04%)</title><rect x="1142.4" y="835.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1145.4" y="846.0"></text>
</g>
<g>
<title>do_filp_open (1 samples, 0.04%)</title><rect x="1142.4" y="819.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1145.4" y="830.0"></text>
</g>
<g>
<title>path_openat (1 samples, 0.04%)</title><rect x="1142.4" y="803.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1145.4" y="814.0"></text>
</g>
<g>
<title>link_path_walk.part.0 (1 samples, 0.04%)</title><rect x="1142.4" y="787.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1145.4" y="798.0"></text>
</g>
<g>
<title>walk_component (1 samples, 0.04%)</title><rect x="1142.4" y="771.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1145.4" y="782.0"></text>
</g>
<g>
<title>lookup_fast (1 samples, 0.04%)</title><rect x="1142.4" y="755.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1145.4" y="766.0"></text>
</g>
<g>
<title>__d_lookup (1 samples, 0.04%)</title><rect x="1142.4" y="739.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1145.4" y="750.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.12%)</title><rect x="1142.9" y="883.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1145.9" y="894.0"></text>
</g>
<g>
<title>sscanf (1 samples, 0.04%)</title><rect x="1144.4" y="883.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1147.4" y="894.0"></text>
</g>
<g>
<title>__GI_____strtoull_l_internal (1 samples, 0.04%)</title><rect x="1144.4" y="867.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1147.4" y="878.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.04%)</title><rect x="1144.9" y="899.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1147.9" y="910.0"></text>
</g>
<g>
<title>start_thread (74 samples, 3.08%)</title><rect x="1145.4" y="899.0" width="36.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1148.4" y="910.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (74 samples, 3.08%)</title><rect x="1145.4" y="883.0" width="36.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1148.4" y="894.0">thr..</text>
</g>
<g>
<title>JavaThread::run() (74 samples, 3.08%)</title><rect x="1145.4" y="867.0" width="36.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.4" y="878.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 3.08%)</title><rect x="1145.4" y="851.0" width="36.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.4" y="862.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 3.08%)</title><rect x="1145.4" y="835.0" width="36.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.4" y="846.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (74 samples, 3.08%)</title><rect x="1145.4" y="819.0" width="36.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.4" y="830.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (73 samples, 3.03%)</title><rect x="1145.9" y="803.0" width="35.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.9" y="814.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (73 samples, 3.03%)</title><rect x="1145.9" y="787.0" width="35.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.9" y="798.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 1.79%)</title><rect x="1145.9" y="771.0" width="21.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.9" y="782.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.12%)</title><rect x="1145.9" y="755.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.9" y="766.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (3 samples, 0.12%)</title><rect x="1145.9" y="739.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.9" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_non_safepoint(int) (1 samples, 0.04%)</title><rect x="1145.9" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.9" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.08%)</title><rect x="1146.4" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.4" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1146.8" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.8" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.12%)</title><rect x="1147.3" y="755.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.3" y="766.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.04%)</title><rect x="1147.3" y="739.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.3" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.08%)</title><rect x="1147.8" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.8" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.08%)</title><rect x="1147.8" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.8" y="734.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1147.8" y="707.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.8" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1147.8" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.8" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1147.8" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.8" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="1147.8" y="659.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.8" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1148.3" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="1148.3" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.3" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1148.3" y="675.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="1148.3" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1148.3" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="1148.3" y="627.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.3" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1148.3" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.3" y="622.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="1148.3" y="595.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="606.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1148.3" y="579.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.3" y="590.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="1148.3" y="563.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.3" y="574.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.04%)</title><rect x="1148.3" y="547.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.3" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="1148.3" y="531.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1151.3" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (11 samples, 0.46%)</title><rect x="1148.8" y="755.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.04%)</title><rect x="1148.8" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.8" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.04%)</title><rect x="1148.8" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.8" y="734.0"></text>
</g>
<g>
<title>CFGLoop::push_pred(Block*, int, Block_List&amp;, PhaseCFG*) (1 samples, 0.04%)</title><rect x="1148.8" y="707.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (10 samples, 0.42%)</title><rect x="1149.3" y="739.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.04%)</title><rect x="1149.3" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="1149.8" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.8" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.12%)</title><rect x="1150.3" y="723.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.08%)</title><rect x="1150.3" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.3" y="718.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (2 samples, 0.08%)</title><rect x="1150.3" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="702.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1150.3" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.3" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1150.8" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="686.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="1150.8" y="659.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1153.8" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.04%)</title><rect x="1151.3" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.08%)</title><rect x="1151.7" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.04%)</title><rect x="1152.2" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.04%)</title><rect x="1152.7" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.7" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.04%)</title><rect x="1153.2" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="734.0"></text>
</g>
<g>
<title>jmpDirNode::oper_input_base() const (1 samples, 0.04%)</title><rect x="1153.7" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 1.08%)</title><rect x="1154.2" y="755.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.04%)</title><rect x="1154.2" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.04%)</title><rect x="1154.2" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.17%)</title><rect x="1154.7" y="739.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.04%)</title><rect x="1156.7" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="1156.7" y="723.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.17%)</title><rect x="1157.1" y="739.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.1" y="750.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.04%)</title><rect x="1158.1" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="1158.6" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (1 samples, 0.04%)</title><rect x="1159.1" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="750.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.04%)</title><rect x="1159.1" y="723.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.04%)</title><rect x="1159.6" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.21%)</title><rect x="1160.1" y="739.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.1" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.04%)</title><rect x="1162.5" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.04%)</title><rect x="1162.5" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.12%)</title><rect x="1163.0" y="739.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.0" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.12%)</title><rect x="1163.0" y="723.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.04%)</title><rect x="1164.5" y="739.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.17%)</title><rect x="1165.0" y="739.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="750.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.04%)</title><rect x="1165.0" y="723.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.0" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.12%)</title><rect x="1165.5" y="723.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.5" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1166.5" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 0.79%)</title><rect x="1166.9" y="771.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.08%)</title><rect x="1166.9" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.08%)</title><rect x="1166.9" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1167.4" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.269] (1 samples, 0.04%)</title><rect x="1167.4" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) [clone .isra.195] (1 samples, 0.04%)</title><rect x="1167.4" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (17 samples, 0.71%)</title><rect x="1167.9" y="755.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="766.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.04%)</title><rect x="1167.9" y="739.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.04%)</title><rect x="1168.4" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.21%)</title><rect x="1168.9" y="739.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.08%)</title><rect x="1170.4" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1170.9" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.08%)</title><rect x="1171.4" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.08%)</title><rect x="1171.4" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.04%)</title><rect x="1171.4" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.04%)</title><rect x="1171.9" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.04%)</title><rect x="1171.9" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.04%)</title><rect x="1172.3" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.08%)</title><rect x="1172.8" y="739.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.8" y="750.0"></text>
</g>
<g>
<title>AddINode::Opcode() const (1 samples, 0.04%)</title><rect x="1173.3" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.17%)</title><rect x="1173.8" y="739.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.17%)</title><rect x="1173.8" y="723.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="1173.8" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1174.3" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1174.3" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="702.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1174.3" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="686.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.04%)</title><rect x="1174.8" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.04%)</title><rect x="1174.8" y="691.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="702.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.04%)</title><rect x="1174.8" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.04%)</title><rect x="1174.8" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="670.0"></text>
</g>
<g>
<title>RangeCheckNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1175.3" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1175.3" y="691.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1175.3" y="675.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.04%)</title><rect x="1175.8" y="739.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.42%)</title><rect x="1176.3" y="771.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.42%)</title><rect x="1176.3" y="755.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.42%)</title><rect x="1176.3" y="739.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.42%)</title><rect x="1176.3" y="723.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.42%)</title><rect x="1176.3" y="707.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.33%)</title><rect x="1176.3" y="691.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.25%)</title><rect x="1176.3" y="675.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.25%)</title><rect x="1176.3" y="659.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.25%)</title><rect x="1176.3" y="643.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.25%)</title><rect x="1176.3" y="627.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.25%)</title><rect x="1176.3" y="611.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.21%)</title><rect x="1176.3" y="595.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1176.3" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1176.3" y="563.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1176.3" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1176.3" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1176.3" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1176.3" y="499.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1176.3" y="483.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1176.3" y="467.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.12%)</title><rect x="1176.8" y="579.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.12%)</title><rect x="1176.8" y="563.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.12%)</title><rect x="1176.8" y="547.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.12%)</title><rect x="1176.8" y="531.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.12%)</title><rect x="1176.8" y="515.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1176.8" y="499.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1176.8" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1176.8" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1176.8" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1176.8" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1176.8" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1176.8" y="403.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1176.8" y="387.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1176.8" y="371.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1176.8" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1176.8" y="339.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1176.8" y="323.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1176.8" y="307.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1176.8" y="291.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1176.8" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1176.8" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1176.8" y="243.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1176.8" y="227.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1176.8" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1176.8" y="195.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1176.8" y="179.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="190.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1176.8" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="174.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1176.8" y="147.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="158.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1176.8" y="131.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="142.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1176.8" y="115.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1176.8" y="99.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="110.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.04%)</title><rect x="1176.8" y="83.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1176.8" y="67.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="78.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1176.8" y="51.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="62.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.04%)</title><rect x="1176.8" y="35.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1177.2" y="499.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="510.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.04%)</title><rect x="1177.2" y="483.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.2" y="494.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.04%)</title><rect x="1177.2" y="467.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.185] (1 samples, 0.04%)</title><rect x="1177.2" y="451.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.2" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1177.2" y="435.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="446.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.04%)</title><rect x="1177.7" y="499.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.04%)</title><rect x="1177.7" y="483.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1178.2" y="579.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1178.2" y="563.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1178.2" y="547.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.04%)</title><rect x="1178.2" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1178.7" y="595.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1178.7" y="579.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1178.7" y="563.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="574.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1178.7" y="547.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1178.7" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="542.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.04%)</title><rect x="1178.7" y="515.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="526.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.04%)</title><rect x="1178.7" y="499.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="510.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.04%)</title><rect x="1178.7" y="483.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="494.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1178.7" y="467.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1179.2" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1179.2" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1179.2" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1179.2" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1179.2" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1179.2" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1179.2" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1179.2" y="563.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1179.2" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1179.2" y="531.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1179.2" y="515.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1179.2" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1179.7" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1179.7" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1179.7" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1179.7" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1179.7" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1179.7" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1179.7" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1179.7" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1179.7" y="531.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1179.7" y="515.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1179.7" y="499.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1179.7" y="483.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1179.7" y="467.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1179.7" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1179.7" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1179.7" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>RShiftINode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1179.7" y="403.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.04%)</title><rect x="1180.2" y="691.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="702.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.04%)</title><rect x="1180.2" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="686.0"></text>
</g>
<g>
<title>Phase::gen_subtype_check(Node*, Node*, Node**, MergeMemNode*, PhaseGVN*) (1 samples, 0.04%)</title><rect x="1180.2" y="659.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1180.2" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1180.7" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1180.7" y="675.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1180.7" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1180.7" y="643.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1180.7" y="627.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1180.7" y="611.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1181.2" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>[tid=2749] (11 samples, 0.46%)</title><rect x="1181.7" y="915.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1184.7" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1181.7" y="899.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1184.7" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.04%)</title><rect x="1181.7" y="883.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1181.7" y="867.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1181.7" y="851.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>start_thread (10 samples, 0.42%)</title><rect x="1182.2" y="899.0" width="4.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1185.2" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.42%)</title><rect x="1182.2" y="883.0" width="4.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1185.2" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (10 samples, 0.42%)</title><rect x="1182.2" y="867.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (10 samples, 0.42%)</title><rect x="1182.2" y="851.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (10 samples, 0.42%)</title><rect x="1182.2" y="835.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (10 samples, 0.42%)</title><rect x="1182.2" y="819.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Arena::~Arena() (2 samples, 0.08%)</title><rect x="1182.2" y="803.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1182.6" y="787.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1185.6" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.33%)</title><rect x="1183.1" y="803.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="814.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (8 samples, 0.33%)</title><rect x="1183.1" y="787.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_method() (8 samples, 0.33%)</title><rect x="1183.1" y="771.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (7 samples, 0.29%)</title><rect x="1183.1" y="755.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (3 samples, 0.12%)</title><rect x="1183.1" y="739.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="750.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.12%)</title><rect x="1183.1" y="723.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.12%)</title><rect x="1183.1" y="707.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.12%)</title><rect x="1183.1" y="691.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.12%)</title><rect x="1183.1" y="675.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.12%)</title><rect x="1183.1" y="659.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.12%)</title><rect x="1183.1" y="643.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.08%)</title><rect x="1183.1" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.08%)</title><rect x="1183.1" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.08%)</title><rect x="1183.1" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.08%)</title><rect x="1183.1" y="579.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1183.1" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1183.1" y="547.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="1183.1" y="531.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1183.6" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1183.6" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1183.6" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1183.6" y="515.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1183.6" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1183.6" y="483.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1183.6" y="467.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1183.6" y="451.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1183.6" y="435.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1183.6" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1184.1" y="627.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1184.1" y="611.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1184.1" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1184.1" y="579.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1184.1" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1184.1" y="547.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.04%)</title><rect x="1184.1" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.04%)</title><rect x="1184.1" y="515.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="1184.1" y="499.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 0.12%)</title><rect x="1184.6" y="739.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.08%)</title><rect x="1184.6" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op2(LIR_Op2*) (1 samples, 0.04%)</title><rect x="1184.6" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::arith_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, bool) (1 samples, 0.04%)</title><rect x="1184.6" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.6" y="702.0"></text>
</g>
<g>
<title>MacroAssembler::decrementq(RegisterImpl*, int) (1 samples, 0.04%)</title><rect x="1185.1" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.04%)</title><rect x="1185.6" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.6" y="734.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1185.6" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.6" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1185.6" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.6" y="702.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.04%)</title><rect x="1185.6" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.6" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_monitor_values(GrowableArray&lt;MonitorValue*&gt;*) (1 samples, 0.04%)</title><rect x="1185.6" y="659.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.6" y="670.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1185.6" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.6" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.04%)</title><rect x="1186.1" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.04%)</title><rect x="1186.1" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="734.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.04%)</title><rect x="1186.1" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (1 samples, 0.04%)</title><rect x="1186.1" y="691.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.1" y="702.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.04%)</title><rect x="1186.6" y="755.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.04%)</title><rect x="1186.6" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="750.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.04%)</title><rect x="1186.6" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.04%)</title><rect x="1186.6" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.04%)</title><rect x="1186.6" y="691.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1189.6" y="702.0"></text>
</g>
<g>
<title>[tid=2751] (1 samples, 0.04%)</title><rect x="1187.1" y="915.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1190.1" y="926.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.04%)</title><rect x="1187.1" y="899.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1190.1" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1187.1" y="883.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1190.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.04%)</title><rect x="1187.1" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="878.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.04%)</title><rect x="1187.1" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1187.1" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.04%)</title><rect x="1187.1" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.04%)</title><rect x="1187.1" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="814.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.04%)</title><rect x="1187.1" y="787.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1190.1" y="798.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.04%)</title><rect x="1187.1" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="782.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.04%)</title><rect x="1187.1" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="766.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1187.1" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="750.0"></text>
</g>
<g>
<title>[tid=2752] (5 samples, 0.21%)</title><rect x="1187.5" y="915.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.5" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1187.5" y="899.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1190.5" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.04%)</title><rect x="1187.5" y="883.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1190.5" y="894.0"></text>
</g>
<g>
<title>start_thread (4 samples, 0.17%)</title><rect x="1188.0" y="899.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1191.0" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.17%)</title><rect x="1188.0" y="883.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.17%)</title><rect x="1188.0" y="867.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.0" y="878.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.04%)</title><rect x="1188.0" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="1188.0" y="835.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1191.0" y="846.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.12%)</title><rect x="1188.5" y="851.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.12%)</title><rect x="1188.5" y="835.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.12%)</title><rect x="1188.5" y="819.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.5" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.04%)</title><rect x="1189.0" y="803.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1189.5" y="803.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1192.5" y="814.0"></text>
</g>
</g>
</svg>
