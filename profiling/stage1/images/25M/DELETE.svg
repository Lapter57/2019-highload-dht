<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (2,450 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>[NIO Selector #3 tid=20266] (2,195 samples, 89.59%)</title><rect x="10.0" y="899.0" width="1057.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="910.0">[NIO Selector #3 tid=20266]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="10.0" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="10.0" y="835.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.12%)</title><rect x="10.5" y="883.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.5" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,191 samples, 89.43%)</title><rect x="11.9" y="883.0" width="1055.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.9" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (2 samples, 0.08%)</title><rect x="12.9" y="867.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (307 samples, 12.53%)</title><rect x="13.9" y="867.0" width="147.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="878.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (4 samples, 0.16%)</title><rect x="13.9" y="851.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="16.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.08%)</title><rect x="14.8" y="835.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (303 samples, 12.37%)</title><rect x="15.8" y="851.0" width="145.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.8" y="862.0">one/nio/net/Native..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (257 samples, 10.49%)</title><rect x="22.5" y="835.0" width="123.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.5" y="846.0">.annobin_epoll_..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.08%)</title><rect x="55.3" y="819.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="58.3" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (187 samples, 7.63%)</title><rect x="56.2" y="819.0" width="90.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="59.2" y="830.0">entry_SYSC..</text>
</g>
<g>
<title>do_syscall_64 (187 samples, 7.63%)</title><rect x="56.2" y="803.0" width="90.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="59.2" y="814.0">do_syscall..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (170 samples, 6.94%)</title><rect x="64.4" y="787.0" width="81.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="67.4" y="798.0">__x64_sys..</text>
</g>
<g>
<title>do_epoll_wait (170 samples, 6.94%)</title><rect x="64.4" y="771.0" width="81.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="67.4" y="782.0">do_epoll_..</text>
</g>
<g>
<title>__fget_light (8 samples, 0.33%)</title><rect x="65.4" y="755.0" width="3.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="68.4" y="766.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.24%)</title><rect x="66.4" y="739.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="69.4" y="750.0"></text>
</g>
<g>
<title>ep_poll (158 samples, 6.45%)</title><rect x="69.2" y="755.0" width="76.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="72.2" y="766.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (93 samples, 3.80%)</title><rect x="85.1" y="739.0" width="44.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="88.1" y="750.0">ep_s..</text>
</g>
<g>
<title>ep_send_events_proc (64 samples, 2.61%)</title><rect x="92.4" y="723.0" width="30.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="95.4" y="734.0">ep..</text>
</g>
<g>
<title>__list_del_entry_valid (2 samples, 0.08%)</title><rect x="94.3" y="707.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="97.3" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (58 samples, 2.37%)</title><rect x="95.2" y="707.0" width="28.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="98.2" y="718.0">e..</text>
</g>
<g>
<title>sock_poll (53 samples, 2.16%)</title><rect x="97.7" y="691.0" width="25.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="100.7" y="702.0">s..</text>
</g>
<g>
<title>tcp_poll (33 samples, 1.35%)</title><rect x="107.3" y="675.0" width="15.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="110.3" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (6 samples, 0.24%)</title><rect x="120.3" y="659.0" width="2.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="123.3" y="670.0"></text>
</g>
<g>
<title>mutex_lock (14 samples, 0.57%)</title><rect x="123.2" y="723.0" width="6.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="126.2" y="734.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="129.4" y="707.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="132.4" y="718.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="129.4" y="691.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="132.4" y="702.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (32 samples, 1.31%)</title><rect x="129.9" y="739.0" width="15.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="132.9" y="750.0"></text>
</g>
<g>
<title>schedule (25 samples, 1.02%)</title><rect x="133.3" y="723.0" width="12.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="136.3" y="734.0"></text>
</g>
<g>
<title>__sched_text_start (21 samples, 0.86%)</title><rect x="135.2" y="707.0" width="10.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="138.2" y="718.0"></text>
</g>
<g>
<title>finish_task_switch (20 samples, 0.82%)</title><rect x="135.7" y="691.0" width="9.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="138.7" y="702.0"></text>
</g>
<g>
<title>fput (1 samples, 0.04%)</title><rect x="145.3" y="755.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="148.3" y="766.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="145.8" y="755.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="148.8" y="766.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.16%)</title><rect x="146.3" y="835.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="149.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="148.2" y="835.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="151.2" y="846.0"></text>
</g>
<g>
<title>__GI___clock_gettime (14 samples, 0.57%)</title><rect x="148.7" y="835.0" width="6.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="151.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.29%)</title><rect x="152.1" y="819.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="155.1" y="830.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (5 samples, 0.20%)</title><rect x="155.5" y="835.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="158.5" y="846.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (6 samples, 0.24%)</title><rect x="157.9" y="835.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="160.9" y="846.0"></text>
</g>
<g>
<title>_init (2 samples, 0.08%)</title><rect x="160.8" y="835.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="163.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,880 samples, 76.73%)</title><rect x="161.7" y="867.0" width="905.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.7" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,872 samples, 76.41%)</title><rect x="164.1" y="851.0" width="901.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.1" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,662 samples, 67.84%)</title><rect x="165.1" y="835.0" width="800.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="168.1" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,595 samples, 65.10%)</title><rect x="176.6" y="819.0" width="768.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.6" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,586 samples, 64.73%)</title><rect x="181.0" y="803.0" width="763.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.0" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,563 samples, 63.80%)</title><rect x="181.5" y="787.0" width="752.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="184.5" y="798.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,276 samples, 52.08%)</title><rect x="182.4" y="771.0" width="614.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.4" y="782.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,255 samples, 51.22%)</title><rect x="188.2" y="755.0" width="604.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="191.2" y="766.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (30 samples, 1.22%)</title><rect x="188.2" y="739.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.2" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="191.6" y="723.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="194.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (22 samples, 0.90%)</title><rect x="192.1" y="723.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.04%)</title><rect x="192.5" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.04%)</title><rect x="192.5" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.08%)</title><rect x="193.0" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.0" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (8 samples, 0.33%)</title><rect x="194.0" y="707.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="197.4" y="691.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.04%)</title><rect x="197.4" y="675.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.4" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.41%)</title><rect x="197.8" y="707.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.41%)</title><rect x="197.8" y="691.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.12%)</title><rect x="200.2" y="675.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.12%)</title><rect x="200.2" y="659.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.2" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.08%)</title><rect x="201.7" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,225 samples, 50.00%)</title><rect x="202.7" y="739.0" width="590.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.7" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,223 samples, 49.92%)</title><rect x="203.6" y="723.0" width="589.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.6" y="734.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,216 samples, 49.63%)</title><rect x="204.1" y="707.0" width="585.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.1" y="718.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,216 samples, 49.63%)</title><rect x="204.1" y="691.0" width="585.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.1" y="702.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>.annobin_send.c (1,192 samples, 48.65%)</title><rect x="208.0" y="675.0" width="574.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="211.0" y="686.0">.annobin_send.c</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.20%)</title><rect x="228.7" y="659.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="231.7" y="670.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.04%)</title><rect x="231.1" y="659.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="234.1" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,143 samples, 46.65%)</title><rect x="231.6" y="659.0" width="550.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="234.6" y="670.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (1,143 samples, 46.65%)</title><rect x="231.6" y="643.0" width="550.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="234.6" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,127 samples, 46.00%)</title><rect x="239.3" y="627.0" width="542.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="242.3" y="638.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,125 samples, 45.92%)</title><rect x="240.2" y="611.0" width="541.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="243.2" y="622.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.12%)</title><rect x="244.1" y="595.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="247.1" y="606.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.04%)</title><rect x="245.5" y="595.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="248.5" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (1,110 samples, 45.31%)</title><rect x="246.0" y="595.0" width="534.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="249.0" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (14 samples, 0.57%)</title><rect x="247.4" y="579.0" width="6.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="250.4" y="590.0"></text>
</g>
<g>
<title>sock_has_perm (10 samples, 0.41%)</title><rect x="249.4" y="563.0" width="4.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="252.4" y="574.0"></text>
</g>
<g>
<title>avc_has_perm (8 samples, 0.33%)</title><rect x="250.3" y="547.0" width="3.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="253.3" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,093 samples, 44.61%)</title><rect x="254.2" y="579.0" width="526.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="257.2" y="590.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="256.1" y="563.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="259.1" y="574.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.12%)</title><rect x="256.6" y="563.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="259.6" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="257.6" y="547.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="260.6" y="558.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.16%)</title><rect x="258.0" y="563.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="261.0" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.08%)</title><rect x="258.5" y="547.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="261.5" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.04%)</title><rect x="259.5" y="547.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="262.5" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,081 samples, 44.12%)</title><rect x="260.0" y="563.0" width="520.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="263.0" y="574.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (5 samples, 0.20%)</title><rect x="266.2" y="547.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="269.2" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.20%)</title><rect x="266.2" y="531.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="269.2" y="542.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (977 samples, 39.88%)</title><rect x="268.6" y="547.0" width="470.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="271.6" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (977 samples, 39.88%)</title><rect x="268.6" y="531.0" width="470.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="271.6" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (953 samples, 38.90%)</title><rect x="274.4" y="515.0" width="459.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="277.4" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (916 samples, 37.39%)</title><rect x="279.7" y="499.0" width="441.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="282.7" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (8 samples, 0.33%)</title><rect x="281.6" y="483.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="284.6" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (7 samples, 0.29%)</title><rect x="282.1" y="467.0" width="3.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="285.1" y="478.0"></text>
</g>
<g>
<title>ip_local_out (164 samples, 6.69%)</title><rect x="285.5" y="483.0" width="79.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="288.5" y="494.0">ip_local_..</text>
</g>
<g>
<title>__ip_local_out (163 samples, 6.65%)</title><rect x="286.0" y="467.0" width="78.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="289.0" y="478.0">__ip_loca..</text>
</g>
<g>
<title>ip_send_check (2 samples, 0.08%)</title><rect x="287.9" y="451.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="290.9" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (157 samples, 6.41%)</title><rect x="288.9" y="451.0" width="75.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="291.9" y="462.0">nf_hook_..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (49 samples, 2.00%)</title><rect x="289.3" y="435.0" width="23.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="292.3" y="446.0">i..</text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (4 samples, 0.16%)</title><rect x="312.9" y="435.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="315.9" y="446.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (19 samples, 0.78%)</title><rect x="314.9" y="435.0" width="9.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="317.9" y="446.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (10 samples, 0.41%)</title><rect x="319.2" y="419.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="322.2" y="430.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (2 samples, 0.08%)</title><rect x="324.0" y="435.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="327.0" y="446.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.08%)</title><rect x="325.0" y="435.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="328.0" y="446.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (5 samples, 0.20%)</title><rect x="326.0" y="435.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="329.0" y="446.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (3 samples, 0.12%)</title><rect x="328.4" y="435.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="331.4" y="446.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (59 samples, 2.41%)</title><rect x="329.8" y="435.0" width="28.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="332.8" y="446.0">nf..</text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (10 samples, 0.41%)</title><rect x="332.2" y="419.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="335.2" y="430.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (2 samples, 0.08%)</title><rect x="337.0" y="419.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="340.0" y="430.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (8 samples, 0.33%)</title><rect x="338.0" y="419.0" width="3.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="341.0" y="430.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (25 samples, 1.02%)</title><rect x="341.8" y="419.0" width="12.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="344.8" y="430.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct	[nf_conntrack] (5 samples, 0.20%)</title><rect x="349.6" y="403.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="352.6" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.08%)</title><rect x="352.0" y="403.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="355.0" y="414.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (2 samples, 0.08%)</title><rect x="352.9" y="403.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="355.9" y="414.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (9 samples, 0.37%)</title><rect x="353.9" y="419.0" width="4.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="356.9" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (9 samples, 0.37%)</title><rect x="358.2" y="435.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="361.2" y="446.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (1 samples, 0.04%)</title><rect x="360.6" y="419.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="363.6" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (1 samples, 0.04%)</title><rect x="361.1" y="419.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="364.1" y="430.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (2 samples, 0.08%)</title><rect x="361.6" y="419.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="364.6" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4 samples, 0.16%)</title><rect x="362.6" y="435.0" width="1.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="365.6" y="446.0"></text>
</g>
<g>
<title>netlbl_enabled (3 samples, 0.12%)</title><rect x="363.0" y="419.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="366.0" y="430.0"></text>
</g>
<g>
<title>ip_output (740 samples, 30.20%)</title><rect x="364.5" y="483.0" width="356.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="367.5" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (683 samples, 27.88%)</title><rect x="365.0" y="467.0" width="328.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="368.0" y="478.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (52 samples, 2.12%)</title><rect x="373.2" y="451.0" width="25.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="376.2" y="462.0">_..</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.08%)</title><rect x="377.5" y="435.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="380.5" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (36 samples, 1.47%)</title><rect x="378.4" y="435.0" width="17.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="381.4" y="446.0"></text>
</g>
<g>
<title>loopback_xmit (33 samples, 1.35%)</title><rect x="379.9" y="419.0" width="15.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="382.9" y="430.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.12%)</title><rect x="382.3" y="403.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="385.3" y="414.0"></text>
</g>
<g>
<title>netif_rx (18 samples, 0.73%)</title><rect x="383.7" y="403.0" width="8.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="386.7" y="414.0"></text>
</g>
<g>
<title>netif_rx_internal (17 samples, 0.69%)</title><rect x="384.2" y="387.0" width="8.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="387.2" y="398.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.29%)</title><rect x="385.7" y="371.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="388.7" y="382.0"></text>
</g>
<g>
<title>ktime_get_with_offset (7 samples, 0.29%)</title><rect x="389.0" y="371.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="392.0" y="382.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.16%)</title><rect x="390.5" y="355.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="393.5" y="366.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.08%)</title><rect x="392.4" y="403.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="395.4" y="414.0"></text>
</g>
<g>
<title>tcp_wfree (5 samples, 0.20%)</title><rect x="393.4" y="403.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="396.4" y="414.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.16%)</title><rect x="395.8" y="435.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="398.8" y="446.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.04%)</title><rect x="397.7" y="435.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="400.7" y="446.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (614 samples, 25.06%)</title><rect x="398.2" y="451.0" width="295.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="401.2" y="462.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (614 samples, 25.06%)</title><rect x="398.2" y="435.0" width="295.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="401.2" y="446.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (610 samples, 24.90%)</title><rect x="400.1" y="419.0" width="293.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="403.1" y="430.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (610 samples, 24.90%)</title><rect x="400.1" y="403.0" width="293.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="403.1" y="414.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (600 samples, 24.49%)</title><rect x="404.5" y="387.0" width="288.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="407.5" y="398.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.04%)</title><rect x="404.9" y="371.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="407.9" y="382.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.04%)</title><rect x="405.4" y="371.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="408.4" y="382.0"></text>
</g>
<g>
<title>process_backlog (597 samples, 24.37%)</title><rect x="405.9" y="371.0" width="287.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="408.9" y="382.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb_one_core (584 samples, 23.84%)</title><rect x="412.2" y="355.0" width="281.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="415.2" y="366.0">__netif_receive_skb_one_core</text>
</g>
<g>
<title>__netif_receive_skb_core (16 samples, 0.65%)</title><rect x="413.1" y="339.0" width="7.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="416.1" y="350.0"></text>
</g>
<g>
<title>ip_rcv (566 samples, 23.10%)</title><rect x="420.8" y="339.0" width="272.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="423.8" y="350.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (435 samples, 17.76%)</title><rect x="422.8" y="323.0" width="209.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="425.8" y="334.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (364 samples, 14.86%)</title><rect x="426.1" y="307.0" width="175.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="429.1" y="318.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (363 samples, 14.82%)</title><rect x="426.6" y="291.0" width="174.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="429.6" y="302.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.08%)</title><rect x="430.0" y="275.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="433.0" y="286.0"></text>
</g>
<g>
<title>tcp_v4_rcv (354 samples, 14.45%)</title><rect x="430.9" y="275.0" width="170.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="433.9" y="286.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (20 samples, 0.82%)</title><rect x="438.7" y="259.0" width="9.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="441.7" y="270.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.04%)</title><rect x="447.8" y="243.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="450.8" y="254.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (5 samples, 0.20%)</title><rect x="448.3" y="259.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="451.3" y="270.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (5 samples, 0.20%)</title><rect x="448.3" y="243.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="451.3" y="254.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (4 samples, 0.16%)</title><rect x="448.8" y="227.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="451.8" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (313 samples, 12.78%)</title><rect x="450.7" y="259.0" width="150.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="453.7" y="270.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_rcv_established (312 samples, 12.73%)</title><rect x="451.2" y="243.0" width="150.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="454.2" y="254.0">tcp_rcv_established</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.04%)</title><rect x="453.6" y="227.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="456.6" y="238.0"></text>
</g>
<g>
<title>sk_reset_timer (9 samples, 0.37%)</title><rect x="454.1" y="227.0" width="4.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="457.1" y="238.0"></text>
</g>
<g>
<title>mod_timer (8 samples, 0.33%)</title><rect x="454.5" y="211.0" width="3.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="457.5" y="222.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.08%)</title><rect x="457.0" y="195.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="460.0" y="206.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.04%)</title><rect x="457.9" y="195.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="460.9" y="206.0"></text>
</g>
<g>
<title>tcp_ack (62 samples, 2.53%)</title><rect x="458.4" y="227.0" width="29.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="461.4" y="238.0">tc..</text>
</g>
<g>
<title>__kfree_skb (17 samples, 0.69%)</title><rect x="463.2" y="211.0" width="8.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="466.2" y="222.0"></text>
</g>
<g>
<title>__slab_free (6 samples, 0.24%)</title><rect x="463.2" y="195.0" width="2.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="466.2" y="206.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.08%)</title><rect x="466.1" y="195.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="469.1" y="206.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.04%)</title><rect x="467.1" y="195.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="470.1" y="206.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.04%)</title><rect x="467.1" y="179.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="470.1" y="190.0"></text>
</g>
<g>
<title>skb_release_data (8 samples, 0.33%)</title><rect x="467.6" y="195.0" width="3.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="470.6" y="206.0"></text>
</g>
<g>
<title>__list_del_entry_valid (1 samples, 0.04%)</title><rect x="471.4" y="211.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="474.4" y="222.0"></text>
</g>
<g>
<title>bictcp_acked (7 samples, 0.29%)</title><rect x="471.9" y="211.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="474.9" y="222.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (4 samples, 0.16%)</title><rect x="475.3" y="211.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="478.3" y="222.0"></text>
</g>
<g>
<title>kmem_cache_free (12 samples, 0.49%)</title><rect x="477.2" y="211.0" width="5.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="480.2" y="222.0"></text>
</g>
<g>
<title>__slab_free (7 samples, 0.29%)</title><rect x="479.6" y="195.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="482.6" y="206.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.04%)</title><rect x="483.0" y="211.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="486.0" y="222.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (3 samples, 0.12%)</title><rect x="483.4" y="211.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="486.4" y="222.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.08%)</title><rect x="484.9" y="211.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="487.9" y="222.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.04%)</title><rect x="485.9" y="211.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="488.9" y="222.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.04%)</title><rect x="486.3" y="211.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="489.3" y="222.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.04%)</title><rect x="486.8" y="211.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="489.8" y="222.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.04%)</title><rect x="487.3" y="211.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="490.3" y="222.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.04%)</title><rect x="487.8" y="211.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="490.8" y="222.0"></text>
</g>
<g>
<title>tcp_data_queue (227 samples, 9.27%)</title><rect x="488.3" y="227.0" width="109.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="491.3" y="238.0">tcp_data_queue</text>
</g>
<g>
<title>sock_def_readable (209 samples, 8.53%)</title><rect x="493.6" y="211.0" width="100.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="496.6" y="222.0">sock_def_rea..</text>
</g>
<g>
<title>__wake_up_common_lock (203 samples, 8.29%)</title><rect x="496.0" y="195.0" width="97.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="499.0" y="206.0">__wake_up_c..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (197 samples, 8.04%)</title><rect x="498.9" y="179.0" width="94.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="501.9" y="190.0">_raw_spin_u..</text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.04%)</title><rect x="593.7" y="195.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="596.7" y="206.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.08%)</title><rect x="594.2" y="211.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="597.2" y="222.0"></text>
</g>
<g>
<title>tcp_queue_rcv (5 samples, 0.20%)</title><rect x="595.2" y="211.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="598.2" y="222.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (6 samples, 0.24%)</title><rect x="597.6" y="227.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="600.6" y="238.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.08%)</title><rect x="599.5" y="211.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="602.5" y="222.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="600.0" y="195.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="603.0" y="206.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.08%)</title><rect x="600.5" y="227.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="603.5" y="238.0"></text>
</g>
<g>
<title>nf_hook_slow (64 samples, 2.61%)</title><rect x="601.4" y="307.0" width="30.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="604.4" y="318.0">nf..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (47 samples, 1.92%)</title><rect x="604.8" y="291.0" width="22.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="607.8" y="302.0">i..</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="621.7" y="275.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="624.7" y="286.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (9 samples, 0.37%)</title><rect x="622.2" y="275.0" width="4.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="625.2" y="286.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (2 samples, 0.08%)</title><rect x="626.5" y="275.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="629.5" y="286.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.08%)</title><rect x="627.5" y="291.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="630.5" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (1 samples, 0.04%)</title><rect x="628.4" y="291.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="631.4" y="302.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.08%)</title><rect x="628.9" y="291.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="631.9" y="302.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (2 samples, 0.08%)</title><rect x="629.9" y="291.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="632.9" y="302.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (2 samples, 0.08%)</title><rect x="630.8" y="291.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="633.8" y="302.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (1 samples, 0.04%)</title><rect x="631.3" y="275.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="634.3" y="286.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (1 samples, 0.04%)</title><rect x="631.8" y="291.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="634.8" y="302.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (9 samples, 0.37%)</title><rect x="632.3" y="323.0" width="4.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="635.3" y="334.0"></text>
</g>
<g>
<title>ip_rcv_finish (4 samples, 0.16%)</title><rect x="636.6" y="323.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="639.6" y="334.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.08%)</title><rect x="637.6" y="307.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="640.6" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (114 samples, 4.65%)</title><rect x="638.5" y="323.0" width="54.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="641.5" y="334.0">nf_ho..</text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (7 samples, 0.29%)</title><rect x="640.5" y="307.0" width="3.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="643.5" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (88 samples, 3.59%)</title><rect x="643.8" y="307.0" width="42.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="646.8" y="318.0">ipt_..</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="685.7" y="291.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="688.7" y="302.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (1 samples, 0.04%)</title><rect x="686.2" y="307.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="689.2" y="318.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.16%)</title><rect x="686.7" y="307.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="689.7" y="318.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (2 samples, 0.08%)</title><rect x="688.6" y="307.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="691.6" y="318.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (5 samples, 0.20%)</title><rect x="689.6" y="307.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="692.6" y="318.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (3 samples, 0.12%)</title><rect x="692.0" y="307.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="695.0" y="318.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (1 samples, 0.04%)</title><rect x="693.0" y="291.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="696.0" y="302.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.04%)</title><rect x="693.4" y="387.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="696.4" y="398.0"></text>
</g>
<g>
<title>ip_finish_output (7 samples, 0.29%)</title><rect x="693.9" y="467.0" width="3.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="696.9" y="478.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.04%)</title><rect x="696.8" y="451.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="699.8" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (49 samples, 2.00%)</title><rect x="697.3" y="467.0" width="23.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="700.3" y="478.0">n..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (17 samples, 0.69%)</title><rect x="699.2" y="451.0" width="8.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="702.2" y="462.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (1 samples, 0.04%)</title><rect x="707.4" y="451.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="710.4" y="462.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (2 samples, 0.08%)</title><rect x="707.9" y="451.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="710.9" y="462.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (4 samples, 0.16%)</title><rect x="708.8" y="451.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="711.8" y="462.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (4 samples, 0.16%)</title><rect x="708.8" y="435.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="711.8" y="446.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (10 samples, 0.41%)</title><rect x="710.8" y="451.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="713.8" y="462.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (3 samples, 0.12%)</title><rect x="714.1" y="435.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="717.1" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (9 samples, 0.37%)</title><rect x="715.6" y="451.0" width="4.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="718.6" y="462.0"></text>
</g>
<g>
<title>selinux_peerlbl_enabled (1 samples, 0.04%)</title><rect x="719.4" y="435.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="722.4" y="446.0"></text>
</g>
<g>
<title>netlbl_enabled (1 samples, 0.04%)</title><rect x="719.4" y="419.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="722.4" y="430.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (2 samples, 0.08%)</title><rect x="719.9" y="451.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="722.9" y="462.0"></text>
</g>
<g>
<title>__skb_clone (10 samples, 0.41%)</title><rect x="720.9" y="499.0" width="4.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="723.9" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (5 samples, 0.20%)</title><rect x="723.3" y="483.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="726.3" y="494.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.08%)</title><rect x="725.7" y="499.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="728.7" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.04%)</title><rect x="726.7" y="499.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="729.7" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.12%)</title><rect x="727.2" y="499.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="730.2" y="510.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.04%)</title><rect x="728.6" y="499.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="731.6" y="510.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.08%)</title><rect x="729.1" y="499.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="732.1" y="510.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.04%)</title><rect x="730.0" y="499.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="733.0" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.08%)</title><rect x="730.5" y="499.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="733.5" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (4 samples, 0.16%)</title><rect x="731.5" y="499.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="734.5" y="510.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.20%)</title><rect x="733.4" y="515.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="736.4" y="526.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.16%)</title><rect x="733.9" y="499.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="736.9" y="510.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.04%)</title><rect x="735.8" y="515.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="738.8" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.20%)</title><rect x="736.3" y="515.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="739.3" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.16%)</title><rect x="736.8" y="499.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="739.8" y="510.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.12%)</title><rect x="737.3" y="483.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="740.3" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="738.2" y="467.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="741.2" y="478.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.04%)</title><rect x="738.7" y="515.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="741.7" y="526.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.04%)</title><rect x="738.7" y="499.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="741.7" y="510.0"></text>
</g>
<g>
<title>_copy_from_iter_full (10 samples, 0.41%)</title><rect x="739.2" y="547.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="742.2" y="558.0"></text>
</g>
<g>
<title>copyin (7 samples, 0.29%)</title><rect x="740.2" y="531.0" width="3.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="743.2" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.20%)</title><rect x="741.1" y="515.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="744.1" y="526.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.04%)</title><rect x="743.5" y="531.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="746.5" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (43 samples, 1.76%)</title><rect x="744.0" y="547.0" width="20.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="747.0" y="558.0"></text>
</g>
<g>
<title>__alloc_skb (41 samples, 1.67%)</title><rect x="745.0" y="531.0" width="19.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="748.0" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (15 samples, 0.61%)</title><rect x="747.9" y="515.0" width="7.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="750.9" y="526.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (10 samples, 0.41%)</title><rect x="750.3" y="499.0" width="4.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="753.3" y="510.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.08%)</title><rect x="753.6" y="483.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="756.6" y="494.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="754.6" y="483.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="757.6" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (14 samples, 0.57%)</title><rect x="755.1" y="515.0" width="6.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="758.1" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.04%)</title><rect x="760.9" y="499.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="763.9" y="510.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.04%)</title><rect x="761.3" y="499.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="764.3" y="510.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.24%)</title><rect x="761.8" y="515.0" width="2.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="764.8" y="526.0"></text>
</g>
<g>
<title>skb_entail (7 samples, 0.29%)</title><rect x="764.7" y="547.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="767.7" y="558.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.04%)</title><rect x="767.6" y="531.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="770.6" y="542.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.08%)</title><rect x="768.1" y="547.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="771.1" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.12%)</title><rect x="769.1" y="547.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="772.1" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (20 samples, 0.82%)</title><rect x="770.5" y="547.0" width="9.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="773.5" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (19 samples, 0.78%)</title><rect x="771.0" y="531.0" width="9.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="774.0" y="542.0"></text>
</g>
<g>
<title>ipv4_mtu (9 samples, 0.37%)</title><rect x="775.3" y="515.0" width="4.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="778.3" y="526.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.04%)</title><rect x="779.6" y="515.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="782.6" y="526.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.04%)</title><rect x="780.1" y="547.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="783.1" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.12%)</title><rect x="780.6" y="595.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="783.6" y="606.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.12%)</title><rect x="780.6" y="579.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="783.6" y="590.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.12%)</title><rect x="780.6" y="563.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="783.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.53%)</title><rect x="782.1" y="675.0" width="6.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="785.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.53%)</title><rect x="782.1" y="659.0" width="6.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="785.1" y="670.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (12 samples, 0.49%)</title><rect x="782.1" y="643.0" width="5.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="785.1" y="654.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="783.5" y="627.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="786.5" y="638.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.33%)</title><rect x="784.0" y="627.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="787.0" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.12%)</title><rect x="784.9" y="611.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="787.9" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.12%)</title><rect x="786.4" y="611.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.4" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="787.8" y="643.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="790.8" y="654.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.12%)</title><rect x="788.3" y="675.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="791.3" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.24%)</title><rect x="789.8" y="707.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="792.8" y="718.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.24%)</title><rect x="789.8" y="691.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="792.8" y="702.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.24%)</title><rect x="789.8" y="675.0" width="2.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="792.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.24%)</title><rect x="792.7" y="755.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="795.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.24%)</title><rect x="792.7" y="739.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="792.7" y="723.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="795.7" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.20%)</title><rect x="793.1" y="723.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.08%)</title><rect x="794.6" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.08%)</title><rect x="794.6" y="691.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.6" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.08%)</title><rect x="794.6" y="675.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.6" y="686.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.08%)</title><rect x="794.6" y="659.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.12%)</title><rect x="795.5" y="755.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="798.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (22 samples, 0.90%)</title><rect x="797.0" y="771.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.24%)</title><rect x="797.0" y="755.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.24%)</title><rect x="797.0" y="739.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.0" y="750.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="798.9" y="723.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="801.9" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="799.4" y="723.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="802.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (6 samples, 0.24%)</title><rect x="799.9" y="755.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="802.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (6 samples, 0.24%)</title><rect x="799.9" y="739.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (6 samples, 0.24%)</title><rect x="802.8" y="755.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.12%)</title><rect x="803.2" y="739.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.08%)</title><rect x="804.7" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.16%)</title><rect x="805.7" y="755.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="808.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.16%)</title><rect x="805.7" y="739.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.16%)</title><rect x="805.7" y="723.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="808.7" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.12%)</title><rect x="806.1" y="707.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (263 samples, 10.73%)</title><rect x="807.6" y="771.0" width="126.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="810.6" y="782.0">ru/mail/polis/se..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="808.1" y="755.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="811.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.49%)</title><rect x="808.5" y="755.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.49%)</title><rect x="808.5" y="739.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.45%)</title><rect x="809.0" y="723.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.45%)</title><rect x="809.0" y="707.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.0" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.29%)</title><rect x="811.0" y="691.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="811.9" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.9" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.12%)</title><rect x="812.4" y="675.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="812.9" y="659.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.9" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="813.8" y="675.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="816.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (3 samples, 0.12%)</title><rect x="814.3" y="755.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.16%)</title><rect x="815.8" y="755.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="818.8" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.08%)</title><rect x="817.7" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="820.7" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="817.7" y="739.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="820.7" y="750.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="818.2" y="739.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="821.2" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="818.2" y="723.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="821.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.remove (237 samples, 9.67%)</title><rect x="818.7" y="755.0" width="114.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.7" y="766.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.flushAndLoad (70 samples, 2.86%)</title><rect x="818.7" y="739.0" width="33.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.7" y="750.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.flush (70 samples, 2.86%)</title><rect x="818.7" y="723.0" width="33.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.7" y="734.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="818.7" y="707.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="821.7" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="818.7" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="821.7" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.08%)</title><rect x="819.1" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="822.1" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.08%)</title><rect x="820.1" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.1" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (3 samples, 0.12%)</title><rect x="821.1" y="707.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.1" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.12%)</title><rect x="821.1" y="691.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.1" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.12%)</title><rect x="821.1" y="675.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="824.1" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (3 samples, 0.12%)</title><rect x="821.1" y="659.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.1" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.04%)</title><rect x="822.0" y="643.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.0" y="654.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="822.0" y="627.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="825.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (1 samples, 0.04%)</title><rect x="822.5" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="825.5" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="822.5" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.5" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="822.5" y="675.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="825.5" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="822.5" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="822.5" y="643.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.5" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="822.5" y="627.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="822.5" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="822.5" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (61 samples, 2.49%)</title><rect x="823.0" y="707.0" width="29.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="826.0" y="718.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="823.0" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.0" y="702.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="823.0" y="675.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.0" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="823.0" y="659.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.0" y="670.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="823.0" y="643.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="826.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="823.0" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="823.5" y="691.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="826.5" y="702.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="823.5" y="675.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.5" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (58 samples, 2.37%)</title><rect x="824.0" y="691.0" width="27.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.0" y="702.0">s..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.08%)</title><rect x="824.0" y="675.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.0" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.08%)</title><rect x="824.0" y="659.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.0" y="670.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.04%)</title><rect x="824.0" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="827.0" y="654.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.04%)</title><rect x="824.0" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="827.0" y="638.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.04%)</title><rect x="824.0" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="827.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.04%)</title><rect x="824.4" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.04%)</title><rect x="824.4" y="627.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (1 samples, 0.04%)</title><rect x="824.4" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="827.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (50 samples, 2.04%)</title><rect x="824.9" y="675.0" width="24.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="827.9" y="686.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (50 samples, 2.04%)</title><rect x="824.9" y="659.0" width="24.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="827.9" y="670.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (50 samples, 2.04%)</title><rect x="824.9" y="643.0" width="24.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="827.9" y="654.0">s..</text>
</g>
<g>
<title>__libc_write (48 samples, 1.96%)</title><rect x="824.9" y="627.0" width="23.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="827.9" y="638.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (31 samples, 1.27%)</title><rect x="833.1" y="611.0" width="14.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="836.1" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (31 samples, 1.27%)</title><rect x="833.1" y="595.0" width="14.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="836.1" y="606.0"></text>
</g>
<g>
<title>ksys_write (26 samples, 1.06%)</title><rect x="835.5" y="579.0" width="12.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="838.5" y="590.0"></text>
</g>
<g>
<title>__fdget_pos (4 samples, 0.16%)</title><rect x="836.0" y="563.0" width="1.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="839.0" y="574.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.12%)</title><rect x="836.5" y="547.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="839.5" y="558.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.04%)</title><rect x="837.4" y="531.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="840.4" y="542.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="837.9" y="563.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="840.9" y="574.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.04%)</title><rect x="838.4" y="563.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="841.4" y="574.0"></text>
</g>
<g>
<title>vfs_write (19 samples, 0.78%)</title><rect x="838.9" y="563.0" width="9.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="841.9" y="574.0"></text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.08%)</title><rect x="838.9" y="547.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="841.9" y="558.0"></text>
</g>
<g>
<title>new_sync_write (16 samples, 0.65%)</title><rect x="839.9" y="547.0" width="7.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="842.9" y="558.0"></text>
</g>
<g>
<title>generic_file_write_iter (16 samples, 0.65%)</title><rect x="839.9" y="531.0" width="7.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="842.9" y="542.0"></text>
</g>
<g>
<title>__generic_file_write_iter (16 samples, 0.65%)</title><rect x="839.9" y="515.0" width="7.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="842.9" y="526.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.04%)</title><rect x="840.3" y="499.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="843.3" y="510.0"></text>
</g>
<g>
<title>current_time (1 samples, 0.04%)</title><rect x="840.3" y="483.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="843.3" y="494.0"></text>
</g>
<g>
<title>generic_perform_write (14 samples, 0.57%)</title><rect x="840.8" y="499.0" width="6.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="843.8" y="510.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="841.3" y="483.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="844.3" y="494.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="841.3" y="467.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="844.3" y="478.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (4 samples, 0.16%)</title><rect x="841.8" y="483.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="844.8" y="494.0"></text>
</g>
<g>
<title>copyin (3 samples, 0.12%)</title><rect x="842.3" y="467.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="845.3" y="478.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.04%)</title><rect x="842.3" y="451.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="845.3" y="462.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (2 samples, 0.08%)</title><rect x="842.7" y="451.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="845.7" y="462.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.04%)</title><rect x="843.7" y="483.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="846.7" y="494.0"></text>
</g>
<g>
<title>shmem_write_begin (6 samples, 0.24%)</title><rect x="844.2" y="483.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="847.2" y="494.0"></text>
</g>
<g>
<title>shmem_getpage_gfp (6 samples, 0.24%)</title><rect x="844.2" y="467.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="847.2" y="478.0"></text>
</g>
<g>
<title>find_lock_entry (4 samples, 0.16%)</title><rect x="845.2" y="451.0" width="1.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="848.2" y="462.0"></text>
</g>
<g>
<title>find_get_entry (2 samples, 0.08%)</title><rect x="846.1" y="435.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="849.1" y="446.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.04%)</title><rect x="846.6" y="419.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="849.6" y="430.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.04%)</title><rect x="846.6" y="403.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="849.6" y="414.0"></text>
</g>
<g>
<title>shmem_write_end (1 samples, 0.04%)</title><rect x="847.1" y="483.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="850.1" y="494.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.04%)</title><rect x="847.6" y="547.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="850.6" y="558.0"></text>
</g>
<g>
<title>selinux_file_permission (1 samples, 0.04%)</title><rect x="847.6" y="531.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="850.6" y="542.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="848.0" y="627.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="851.0" y="638.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="848.5" y="627.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="851.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.24%)</title><rect x="849.0" y="675.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.0" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="849.0" y="659.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="852.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.20%)</title><rect x="849.5" y="659.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.5" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (1 samples, 0.04%)</title><rect x="850.9" y="643.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.9" y="654.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.04%)</title><rect x="851.4" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="851.9" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.9" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="851.9" y="675.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.remove (167 samples, 6.82%)</title><rect x="852.4" y="739.0" width="80.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="855.4" y="750.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/TreeMap.put (162 samples, 6.61%)</title><rect x="852.4" y="723.0" width="78.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="855.4" y="734.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (139 samples, 5.67%)</title><rect x="855.7" y="707.0" width="67.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="858.7" y="718.0">java/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (100 samples, 4.08%)</title><rect x="874.5" y="691.0" width="48.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="877.5" y="702.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (11 samples, 0.45%)</title><rect x="881.3" y="675.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="884.3" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (66 samples, 2.69%)</title><rect x="886.6" y="675.0" width="31.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="889.6" y="686.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.82%)</title><rect x="895.2" y="659.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="898.2" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.24%)</title><rect x="899.6" y="643.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.6" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (5 samples, 0.20%)</title><rect x="902.5" y="643.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.5" y="654.0"></text>
</g>
<g>
<title>vectorizedMismatch (28 samples, 1.14%)</title><rect x="904.9" y="659.0" width="13.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="907.9" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.37%)</title><rect x="918.4" y="675.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.4" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.20%)</title><rect x="918.8" y="659.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.8" y="670.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.20%)</title><rect x="918.8" y="643.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.8" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (3 samples, 0.12%)</title><rect x="921.2" y="659.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="924.2" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (5 samples, 0.20%)</title><rect x="922.7" y="707.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="925.7" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (11 samples, 0.45%)</title><rect x="925.1" y="707.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.1" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.parentOf (2 samples, 0.08%)</title><rect x="926.1" y="691.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="929.1" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (5 samples, 0.20%)</title><rect x="927.0" y="691.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.0" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (2 samples, 0.08%)</title><rect x="929.4" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="932.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (5 samples, 0.20%)</title><rect x="930.4" y="723.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.4" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.20%)</title><rect x="930.4" y="707.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="933.4" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (5 samples, 0.20%)</title><rect x="930.4" y="691.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="933.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.20%)</title><rect x="930.4" y="675.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.20%)</title><rect x="930.4" y="659.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="933.4" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.20%)</title><rect x="930.4" y="643.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.12%)</title><rect x="930.4" y="627.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="933.4" y="638.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (3 samples, 0.12%)</title><rect x="930.4" y="611.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="933.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="931.8" y="627.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="934.8" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="932.3" y="611.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="935.3" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="932.3" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="935.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (3 samples, 0.12%)</title><rect x="932.8" y="755.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="935.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getSizeOfFlushedRow (3 samples, 0.12%)</title><rect x="932.8" y="739.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="935.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="932.8" y="723.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="935.8" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="932.8" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="935.8" y="718.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="933.3" y="723.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="936.3" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="933.8" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.8" y="734.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="933.8" y="707.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="936.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="933.8" y="691.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="936.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.24%)</title><rect x="934.3" y="787.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="937.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.24%)</title><rect x="934.3" y="771.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="937.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.12%)</title><rect x="934.7" y="755.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="937.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.08%)</title><rect x="934.7" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="937.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="935.2" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="938.2" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.04%)</title><rect x="935.2" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.2" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="935.7" y="739.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="938.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.08%)</title><rect x="936.2" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.08%)</title><rect x="936.2" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="939.2" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="936.2" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="939.2" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.04%)</title><rect x="936.7" y="723.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="939.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (16 samples, 0.65%)</title><rect x="937.1" y="787.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="940.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.65%)</title><rect x="937.1" y="771.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="940.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.65%)</title><rect x="937.1" y="755.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="940.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 0.53%)</title><rect x="938.1" y="739.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="941.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="943.9" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="946.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="944.4" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="947.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (33 samples, 1.35%)</title><rect x="944.8" y="819.0" width="15.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="947.8" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.08%)</title><rect x="950.1" y="803.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="950.1" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="953.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="950.1" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="953.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="950.6" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="953.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.33%)</title><rect x="951.1" y="803.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="954.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.33%)</title><rect x="951.1" y="787.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="954.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (12 samples, 0.49%)</title><rect x="955.0" y="803.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.24%)</title><rect x="960.7" y="819.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="963.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="961.7" y="803.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="964.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="962.2" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="965.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.08%)</title><rect x="962.7" y="803.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="965.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.08%)</title><rect x="962.7" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="965.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="963.2" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="966.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="963.2" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="966.2" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.04%)</title><rect x="963.2" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="966.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.16%)</title><rect x="963.6" y="819.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="966.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.16%)</title><rect x="963.6" y="803.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="966.6" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (208 samples, 8.49%)</title><rect x="965.6" y="835.0" width="100.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="968.6" y="846.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (207 samples, 8.45%)</title><rect x="965.6" y="819.0" width="99.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="968.6" y="830.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.04%)</title><rect x="967.5" y="803.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="970.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 1.31%)</title><rect x="968.0" y="803.0" width="15.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="971.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 1.31%)</title><rect x="968.0" y="787.0" width="15.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="971.0" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 0.86%)</title><rect x="968.0" y="771.0" width="10.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="971.0" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.08%)</title><rect x="968.0" y="755.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="971.0" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="968.9" y="755.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.9" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.08%)</title><rect x="969.4" y="755.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="972.4" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.04%)</title><rect x="970.4" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="973.4" y="766.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.08%)</title><rect x="970.9" y="755.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="973.9" y="766.0"></text>
</g>
<g>
<title>_init (3 samples, 0.12%)</title><rect x="971.8" y="755.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="974.8" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.41%)</title><rect x="973.3" y="755.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="976.3" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="974.7" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="977.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (6 samples, 0.24%)</title><rect x="975.2" y="739.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.2" y="750.0"></text>
</g>
<g>
<title>__libc_recv (6 samples, 0.24%)</title><rect x="978.1" y="771.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="981.1" y="782.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.12%)</title><rect x="981.0" y="771.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="984.0" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.08%)</title><rect x="982.4" y="771.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="985.4" y="782.0"></text>
</g>
<g>
<title>__libc_recv (170 samples, 6.94%)</title><rect x="983.4" y="803.0" width="81.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="986.4" y="814.0">__libc_recv</text>
</g>
<g>
<title>__x86_indirect_thunk_r9 (1 samples, 0.04%)</title><rect x="1005.5" y="787.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1008.5" y="798.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="1006.0" y="787.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1009.0" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (122 samples, 4.98%)</title><rect x="1006.5" y="787.0" width="58.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1009.5" y="798.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (122 samples, 4.98%)</title><rect x="1006.5" y="771.0" width="58.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1009.5" y="782.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_recvfrom (105 samples, 4.29%)</title><rect x="1014.7" y="755.0" width="50.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1017.7" y="766.0">__x64..</text>
</g>
<g>
<title>__sys_recvfrom (102 samples, 4.16%)</title><rect x="1016.1" y="739.0" width="49.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1019.1" y="750.0">__sys..</text>
</g>
<g>
<title>import_single_range (2 samples, 0.08%)</title><rect x="1017.6" y="723.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1020.6" y="734.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.04%)</title><rect x="1018.1" y="707.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1021.1" y="718.0"></text>
</g>
<g>
<title>inet_recvmsg (60 samples, 2.45%)</title><rect x="1018.5" y="723.0" width="28.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1021.5" y="734.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (60 samples, 2.45%)</title><rect x="1018.5" y="707.0" width="28.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1021.5" y="718.0">tc..</text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.20%)</title><rect x="1027.2" y="691.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1030.2" y="702.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.16%)</title><rect x="1027.2" y="675.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1030.2" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.12%)</title><rect x="1027.7" y="659.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1030.7" y="670.0"></text>
</g>
<g>
<title>sock_rfree (3 samples, 0.12%)</title><rect x="1027.7" y="643.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1030.7" y="654.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.04%)</title><rect x="1029.1" y="675.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1032.1" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (5 samples, 0.20%)</title><rect x="1029.6" y="691.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1032.6" y="702.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="1029.6" y="675.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1032.6" y="686.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="1029.6" y="659.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1032.6" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.16%)</title><rect x="1030.1" y="675.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1033.1" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (19 samples, 0.78%)</title><rect x="1032.0" y="691.0" width="9.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1035.0" y="702.0"></text>
</g>
<g>
<title>__skb_datagram_iter (19 samples, 0.78%)</title><rect x="1032.0" y="675.0" width="9.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1035.0" y="686.0"></text>
</g>
<g>
<title>_copy_to_iter (6 samples, 0.24%)</title><rect x="1033.5" y="659.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1036.5" y="670.0"></text>
</g>
<g>
<title>copyout (5 samples, 0.20%)</title><rect x="1034.0" y="643.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1037.0" y="654.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.20%)</title><rect x="1034.0" y="627.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1037.0" y="638.0"></text>
</g>
<g>
<title>simple_copy_to_iter (10 samples, 0.41%)</title><rect x="1036.4" y="659.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1039.4" y="670.0"></text>
</g>
<g>
<title>__check_object_size (10 samples, 0.41%)</title><rect x="1036.4" y="643.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1039.4" y="654.0"></text>
</g>
<g>
<title>__check_heap_object (3 samples, 0.12%)</title><rect x="1037.3" y="627.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1040.3" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.20%)</title><rect x="1038.8" y="627.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1041.8" y="638.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (4 samples, 0.16%)</title><rect x="1041.2" y="691.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1044.2" y="702.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.04%)</title><rect x="1042.6" y="675.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1045.6" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (8 samples, 0.33%)</title><rect x="1043.1" y="691.0" width="3.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1046.1" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (8 samples, 0.33%)</title><rect x="1043.1" y="675.0" width="3.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1046.1" y="686.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.12%)</title><rect x="1045.5" y="659.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1048.5" y="670.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.08%)</title><rect x="1046.0" y="643.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1049.0" y="654.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (1 samples, 0.04%)</title><rect x="1047.0" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1050.0" y="702.0"></text>
</g>
<g>
<title>sock_recvmsg (23 samples, 0.94%)</title><rect x="1047.4" y="723.0" width="11.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1050.4" y="734.0"></text>
</g>
<g>
<title>security_socket_recvmsg (22 samples, 0.90%)</title><rect x="1047.9" y="707.0" width="10.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1050.9" y="718.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (2 samples, 0.08%)</title><rect x="1048.4" y="691.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1051.4" y="702.0"></text>
</g>
<g>
<title>sock_has_perm (19 samples, 0.78%)</title><rect x="1049.4" y="691.0" width="9.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1052.4" y="702.0"></text>
</g>
<g>
<title>avc_has_perm (7 samples, 0.29%)</title><rect x="1055.1" y="675.0" width="3.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1058.1" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (14 samples, 0.57%)</title><rect x="1058.5" y="723.0" width="6.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1061.5" y="734.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.04%)</title><rect x="1059.5" y="707.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1062.5" y="718.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.45%)</title><rect x="1060.0" y="707.0" width="5.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1063.0" y="718.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.33%)</title><rect x="1061.4" y="691.0" width="3.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1064.4" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.04%)</title><rect x="1065.3" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1068.3" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.12%)</title><rect x="1065.7" y="851.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.7" y="862.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.12%)</title><rect x="1065.7" y="835.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1068.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.12%)</title><rect x="1065.7" y="819.0" width="1.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1068.7" y="830.0"></text>
</g>
<g>
<title>[tid=20242] (25 samples, 1.02%)</title><rect x="1067.2" y="899.0" width="12.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1070.2" y="910.0"></text>
</g>
<g>
<title>start_thread (25 samples, 1.02%)</title><rect x="1067.2" y="883.0" width="12.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1070.2" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 1.02%)</title><rect x="1067.2" y="867.0" width="12.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1070.2" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 1.02%)</title><rect x="1067.2" y="851.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.2" y="862.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (2 samples, 0.08%)</title><rect x="1067.2" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.2" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.08%)</title><rect x="1067.2" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.2" y="830.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.04%)</title><rect x="1067.2" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.2" y="814.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1067.7" y="803.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1070.7" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 0.86%)</title><rect x="1068.1" y="835.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.1" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 0.65%)</title><rect x="1068.1" y="819.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.1" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 0.61%)</title><rect x="1068.1" y="803.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.1" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (11 samples, 0.45%)</title><rect x="1070.1" y="787.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.1" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.16%)</title><rect x="1073.4" y="771.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.4" y="782.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.04%)</title><rect x="1074.9" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.9" y="766.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1075.4" y="803.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1078.4" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.08%)</title><rect x="1075.9" y="819.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.08%)</title><rect x="1075.9" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.08%)</title><rect x="1075.9" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.9" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.08%)</title><rect x="1075.9" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.9" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.08%)</title><rect x="1075.9" y="755.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.9" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1075.9" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.9" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.04%)</title><rect x="1076.3" y="739.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.3" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="1076.3" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.3" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1076.3" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.3" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.12%)</title><rect x="1076.8" y="819.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.8" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.12%)</title><rect x="1076.8" y="803.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.8" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.12%)</title><rect x="1076.8" y="787.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.8" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (3 samples, 0.12%)</title><rect x="1076.8" y="771.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.8" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.08%)</title><rect x="1076.8" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.8" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.08%)</title><rect x="1076.8" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.8" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.08%)</title><rect x="1076.8" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.8" y="734.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.04%)</title><rect x="1077.8" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1080.8" y="766.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.517] (1 samples, 0.04%)</title><rect x="1077.8" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.8" y="750.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1078.3" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.3" y="846.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (1 samples, 0.04%)</title><rect x="1078.3" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.3" y="830.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1078.7" y="835.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.7" y="846.0"></text>
</g>
<g>
<title>[tid=20245] (43 samples, 1.76%)</title><rect x="1079.2" y="899.0" width="20.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1082.2" y="910.0"></text>
</g>
<g>
<title>start_thread (43 samples, 1.76%)</title><rect x="1079.2" y="883.0" width="20.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1082.2" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (43 samples, 1.76%)</title><rect x="1079.2" y="867.0" width="20.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1082.2" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (43 samples, 1.76%)</title><rect x="1079.2" y="851.0" width="20.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.2" y="862.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (25 samples, 1.02%)</title><rect x="1079.2" y="835.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.2" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (25 samples, 1.02%)</title><rect x="1079.2" y="819.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.2" y="830.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (13 samples, 0.53%)</title><rect x="1080.2" y="803.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.2" y="814.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.04%)</title><rect x="1081.6" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.6" y="798.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.04%)</title><rect x="1081.6" y="771.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1084.6" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1081.6" y="755.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1084.6" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1081.6" y="739.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1084.6" y="750.0"></text>
</g>
<g>
<title>__do_sys_getrusage (1 samples, 0.04%)</title><rect x="1081.6" y="723.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1084.6" y="734.0"></text>
</g>
<g>
<title>getrusage (1 samples, 0.04%)</title><rect x="1081.6" y="707.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1084.6" y="718.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (9 samples, 0.37%)</title><rect x="1082.1" y="787.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.1" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (8 samples, 0.33%)</title><rect x="1082.1" y="771.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.1" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1086.0" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.0" y="782.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (10 samples, 0.41%)</title><rect x="1086.4" y="803.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.4" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (6 samples, 0.24%)</title><rect x="1087.4" y="787.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.4" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.08%)</title><rect x="1090.3" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.3" y="798.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (3 samples, 0.12%)</title><rect x="1091.3" y="835.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.3" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (3 samples, 0.12%)</title><rect x="1091.3" y="819.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.3" y="830.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (15 samples, 0.61%)</title><rect x="1092.7" y="835.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.7" y="846.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (15 samples, 0.61%)</title><rect x="1092.7" y="819.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.7" y="830.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (15 samples, 0.61%)</title><rect x="1092.7" y="803.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.7" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.04%)</title><rect x="1097.0" y="787.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.0" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (4 samples, 0.16%)</title><rect x="1097.5" y="787.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.5" y="798.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.04%)</title><rect x="1099.0" y="771.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.0" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1099.5" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.5" y="798.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.04%)</title><rect x="1099.5" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.5" y="782.0"></text>
</g>
<g>
<title>[tid=20246] (6 samples, 0.24%)</title><rect x="1099.9" y="899.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1102.9" y="910.0"></text>
</g>
<g>
<title>start_thread (6 samples, 0.24%)</title><rect x="1099.9" y="883.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1102.9" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.24%)</title><rect x="1099.9" y="867.0" width="2.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1102.9" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (6 samples, 0.24%)</title><rect x="1099.9" y="851.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.9" y="862.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (6 samples, 0.24%)</title><rect x="1099.9" y="835.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.9" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (6 samples, 0.24%)</title><rect x="1099.9" y="819.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (6 samples, 0.24%)</title><rect x="1099.9" y="803.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.9" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (5 samples, 0.20%)</title><rect x="1100.4" y="787.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.4" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.08%)</title><rect x="1100.9" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.9" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (2 samples, 0.08%)</title><rect x="1101.9" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.9" y="782.0"></text>
</g>
<g>
<title>[tid=20247] (1 samples, 0.04%)</title><rect x="1102.8" y="899.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1105.8" y="910.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.04%)</title><rect x="1102.8" y="883.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1105.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1102.8" y="867.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1105.8" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.04%)</title><rect x="1102.8" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.8" y="862.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.04%)</title><rect x="1102.8" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.8" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1102.8" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.8" y="830.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.04%)</title><rect x="1102.8" y="803.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.8" y="814.0"></text>
</g>
<g>
<title>[tid=20248] (1 samples, 0.04%)</title><rect x="1103.3" y="899.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1106.3" y="910.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.04%)</title><rect x="1103.3" y="883.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1106.3" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1103.3" y="867.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1106.3" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.04%)</title><rect x="1103.3" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.3" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.04%)</title><rect x="1103.3" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.3" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (1 samples, 0.04%)</title><rect x="1103.3" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.3" y="830.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.04%)</title><rect x="1103.3" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.3" y="814.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.04%)</title><rect x="1103.3" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.04%)</title><rect x="1103.3" y="771.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::trace_heap(GCWhen::Type, GCTracer const*) (1 samples, 0.04%)</title><rect x="1103.3" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.3" y="766.0"></text>
</g>
<g>
<title>G1HeapSummary::accept(GCHeapSummaryVisitor*) const (1 samples, 0.04%)</title><rect x="1103.3" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.3" y="750.0"></text>
</g>
<g>
<title>[tid=20252] (105 samples, 4.29%)</title><rect x="1103.8" y="899.0" width="50.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1106.8" y="910.0">[tid=..</text>
</g>
<g>
<title>start_thread (105 samples, 4.29%)</title><rect x="1103.8" y="883.0" width="50.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1106.8" y="894.0">start..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (105 samples, 4.29%)</title><rect x="1103.8" y="867.0" width="50.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1106.8" y="878.0">threa..</text>
</g>
<g>
<title>JavaThread::run() (105 samples, 4.29%)</title><rect x="1103.8" y="851.0" width="50.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.8" y="862.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 4.29%)</title><rect x="1103.8" y="835.0" width="50.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.8" y="846.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (105 samples, 4.29%)</title><rect x="1103.8" y="819.0" width="50.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.8" y="830.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (105 samples, 4.29%)</title><rect x="1103.8" y="803.0" width="50.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.8" y="814.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (105 samples, 4.29%)</title><rect x="1103.8" y="787.0" width="50.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.8" y="798.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (105 samples, 4.29%)</title><rect x="1103.8" y="771.0" width="50.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.8" y="782.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 2.00%)</title><rect x="1103.8" y="755.0" width="23.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.8" y="766.0">C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.08%)</title><rect x="1103.8" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.8" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.04%)</title><rect x="1103.8" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.8" y="734.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.04%)</title><rect x="1103.8" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.8" y="718.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.04%)</title><rect x="1103.8" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.8" y="702.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.04%)</title><rect x="1104.3" y="723.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1107.3" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.20%)</title><rect x="1104.8" y="739.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.8" y="750.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.04%)</title><rect x="1104.8" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.8" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.04%)</title><rect x="1105.2" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.2" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.04%)</title><rect x="1105.2" y="707.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.2" y="718.0"></text>
</g>
<g>
<title>Location::write_on(DebugInfoWriteStream*) (1 samples, 0.04%)</title><rect x="1105.2" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.2" y="702.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.04%)</title><rect x="1105.7" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.7" y="734.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.04%)</title><rect x="1106.2" y="723.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.2" y="734.0"></text>
</g>
<g>
<title>indOffset32Oper::base(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.04%)</title><rect x="1106.7" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.7" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.16%)</title><rect x="1107.2" y="739.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.2" y="750.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.04%)</title><rect x="1107.2" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.2" y="734.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.04%)</title><rect x="1107.6" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.6" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.08%)</title><rect x="1108.1" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.1" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.04%)</title><rect x="1108.6" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.6" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.20%)</title><rect x="1109.1" y="739.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.1" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.20%)</title><rect x="1109.1" y="723.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.16%)</title><rect x="1109.1" y="707.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.1" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.08%)</title><rect x="1109.1" y="691.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.1" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.04%)</title><rect x="1110.0" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.04%)</title><rect x="1110.0" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.04%)</title><rect x="1110.5" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.04%)</title><rect x="1111.0" y="707.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 1.35%)</title><rect x="1111.5" y="739.0" width="15.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.08%)</title><rect x="1111.5" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.04%)</title><rect x="1112.0" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.04%)</title><rect x="1112.5" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.5" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1112.5" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.29%)</title><rect x="1112.9" y="723.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.41%)</title><rect x="1116.3" y="723.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.3" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1116.8" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.8" y="718.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.04%)</title><rect x="1117.3" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.04%)</title><rect x="1117.8" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.20%)</title><rect x="1118.2" y="707.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1120.2" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.04%)</title><rect x="1120.6" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.6" y="718.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.04%)</title><rect x="1120.6" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.20%)</title><rect x="1121.1" y="723.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.1" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.08%)</title><rect x="1121.6" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.6" y="718.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.04%)</title><rect x="1122.6" y="707.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.6" y="718.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.04%)</title><rect x="1123.1" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.04%)</title><rect x="1123.5" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.08%)</title><rect x="1124.0" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.04%)</title><rect x="1125.0" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.0" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.08%)</title><rect x="1125.5" y="723.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.5" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.04%)</title><rect x="1126.4" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.4" y="734.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="1126.4" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.4" y="718.0"></text>
</g>
<g>
<title>jmpDirNode::oper_input_base() const (1 samples, 0.04%)</title><rect x="1126.9" y="723.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.9" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 1.96%)</title><rect x="1127.4" y="755.0" width="23.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.4" y="766.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.08%)</title><rect x="1127.4" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.08%)</title><rect x="1127.4" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (2 samples, 0.08%)</title><rect x="1127.4" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.08%)</title><rect x="1127.4" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.08%)</title><rect x="1127.4" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="1127.4" y="659.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1127.9" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1127.9" y="643.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="1127.9" y="627.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.9" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.04%)</title><rect x="1128.4" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (35 samples, 1.43%)</title><rect x="1128.8" y="739.0" width="16.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.8" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.08%)</title><rect x="1128.8" y="723.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.72] (2 samples, 0.08%)</title><rect x="1128.8" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1128.8" y="691.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.04%)</title><rect x="1128.8" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.04%)</title><rect x="1129.3" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason, int) (1 samples, 0.04%)</title><rect x="1129.3" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.08%)</title><rect x="1129.8" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.8" y="734.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.04%)</title><rect x="1130.3" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="1130.8" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (26 samples, 1.06%)</title><rect x="1131.2" y="723.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (23 samples, 0.94%)</title><rect x="1132.2" y="707.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (23 samples, 0.94%)</title><rect x="1132.2" y="691.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (23 samples, 0.94%)</title><rect x="1132.2" y="675.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.2" y="686.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.04%)</title><rect x="1143.3" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.12%)</title><rect x="1143.8" y="723.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1143.8" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.08%)</title><rect x="1144.2" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1144.2" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.04%)</title><rect x="1144.7" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1144.7" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.7" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="1145.2" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.2" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1145.2" y="707.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.04%)</title><rect x="1145.2" y="691.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.33%)</title><rect x="1145.7" y="739.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.33%)</title><rect x="1145.7" y="723.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.7" y="734.0"></text>
</g>
<g>
<title>IfNode::dominated_by(Node*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1145.7" y="707.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1145.7" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.7" y="702.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.04%)</title><rect x="1145.7" y="675.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.7" y="686.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1146.2" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.2" y="718.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1146.2" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.2" y="702.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1146.7" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.7" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.08%)</title><rect x="1147.1" y="707.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.1" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1148.1" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.1" y="718.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.04%)</title><rect x="1148.1" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.1" y="702.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1148.6" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.6" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1149.1" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.1" y="718.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.138] (1 samples, 0.04%)</title><rect x="1149.1" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.1" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1149.1" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.1" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1149.1" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.1" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1149.1" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.1" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1149.1" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.1" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (1 samples, 0.04%)</title><rect x="1149.1" y="611.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.1" y="622.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1149.1" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.1" y="606.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.08%)</title><rect x="1149.5" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="1149.5" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1149.5" y="707.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="1149.5" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.04%)</title><rect x="1150.0" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.0" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.04%)</title><rect x="1150.0" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.04%)</title><rect x="1150.0" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.29%)</title><rect x="1150.5" y="755.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.29%)</title><rect x="1150.5" y="739.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.29%)</title><rect x="1150.5" y="723.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.29%)</title><rect x="1150.5" y="707.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.29%)</title><rect x="1150.5" y="691.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.29%)</title><rect x="1150.5" y="675.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.24%)</title><rect x="1150.5" y="659.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.24%)</title><rect x="1150.5" y="643.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.24%)</title><rect x="1150.5" y="627.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.24%)</title><rect x="1150.5" y="611.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.24%)</title><rect x="1150.5" y="595.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.24%)</title><rect x="1150.5" y="579.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.16%)</title><rect x="1150.5" y="563.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.16%)</title><rect x="1150.5" y="547.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.16%)</title><rect x="1150.5" y="531.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.16%)</title><rect x="1150.5" y="515.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.16%)</title><rect x="1150.5" y="499.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.16%)</title><rect x="1150.5" y="483.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.12%)</title><rect x="1150.5" y="467.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.12%)</title><rect x="1150.5" y="451.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.12%)</title><rect x="1150.5" y="435.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.12%)</title><rect x="1150.5" y="419.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.12%)</title><rect x="1150.5" y="403.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1150.5" y="387.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1150.5" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1150.5" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.5" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.04%)</title><rect x="1150.5" y="339.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.5" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1150.5" y="323.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.5" y="334.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.04%)</title><rect x="1150.5" y="307.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1151.0" y="339.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1151.0" y="323.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1151.0" y="307.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1151.0" y="291.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1151.0" y="275.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1151.0" y="259.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1151.0" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1151.0" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.0" y="238.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1151.0" y="211.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1151.5" y="387.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.5" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.0" y="467.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.0" y="451.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.0" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.0" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.0" y="403.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.0" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.0" y="371.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.0" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.04%)</title><rect x="1152.0" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.0" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1152.0" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.0" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1152.4" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1152.4" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1152.4" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1152.4" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1152.4" y="499.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1152.4" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1152.4" y="467.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="478.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.04%)</title><rect x="1152.4" y="451.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.04%)</title><rect x="1152.4" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="446.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.04%)</title><rect x="1152.4" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.9" y="451.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.9" y="435.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.9" y="419.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.9" y="403.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.9" y="387.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.9" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.9" y="355.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.9" y="339.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.9" y="323.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.9" y="307.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.9" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.9" y="275.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.9" y="259.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.9" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1152.9" y="243.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.9" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1152.9" y="227.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.9" y="238.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1152.9" y="211.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.9" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1152.9" y="195.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.9" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1152.9" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.9" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1152.9" y="163.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.9" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1152.9" y="147.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.9" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1152.9" y="131.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.9" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.04%)</title><rect x="1152.9" y="115.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.9" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1152.9" y="99.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.9" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1152.9" y="83.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.9" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1152.9" y="67.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.9" y="78.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.04%)</title><rect x="1152.9" y="51.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.9" y="62.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, LinkInfo const&amp;, methodHandle const&amp;, Handle, Thread*) (1 samples, 0.04%)</title><rect x="1152.9" y="35.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1153.4" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1153.4" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1153.4" y="627.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1153.4" y="611.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1153.4" y="595.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1153.4" y="579.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1153.4" y="563.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.4" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1153.4" y="547.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1153.4" y="531.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1153.4" y="515.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1153.4" y="499.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1153.4" y="483.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1153.4" y="467.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1153.4" y="451.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1153.4" y="435.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1153.4" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1153.4" y="403.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1153.4" y="387.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.4" y="398.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.04%)</title><rect x="1153.4" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.04%)</title><rect x="1153.4" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.4" y="366.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1153.4" y="339.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.4" y="350.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1153.4" y="323.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.4" y="334.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.04%)</title><rect x="1153.4" y="307.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.4" y="318.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.04%)</title><rect x="1153.4" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.4" y="302.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.04%)</title><rect x="1153.4" y="275.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.4" y="286.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.04%)</title><rect x="1153.4" y="259.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1156.4" y="270.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1153.9" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.9" y="766.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1153.9" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.9" y="750.0"></text>
</g>
<g>
<title>[tid=20253] (2 samples, 0.08%)</title><rect x="1154.4" y="899.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1157.4" y="910.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.08%)</title><rect x="1154.4" y="883.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1157.4" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.08%)</title><rect x="1154.4" y="867.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1157.4" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.08%)</title><rect x="1154.4" y="851.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.4" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.08%)</title><rect x="1154.4" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.4" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.08%)</title><rect x="1154.4" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.4" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.08%)</title><rect x="1154.4" y="803.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.4" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.08%)</title><rect x="1154.4" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.4" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.08%)</title><rect x="1154.4" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.4" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.08%)</title><rect x="1154.4" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.4" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.08%)</title><rect x="1154.4" y="739.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.4" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (2 samples, 0.08%)</title><rect x="1154.4" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.4" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.08%)</title><rect x="1154.4" y="707.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.4" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.08%)</title><rect x="1154.4" y="691.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.4" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.08%)</title><rect x="1154.4" y="675.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.4" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.08%)</title><rect x="1154.4" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.4" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.08%)</title><rect x="1154.4" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.08%)</title><rect x="1154.4" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.4" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.08%)</title><rect x="1154.4" y="611.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.4" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.08%)</title><rect x="1154.4" y="595.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.4" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.08%)</title><rect x="1154.4" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.4" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.08%)</title><rect x="1154.4" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.4" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1154.4" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.4" y="558.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1154.4" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="542.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.04%)</title><rect x="1154.4" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.4" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1154.8" y="547.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.8" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1154.8" y="531.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1154.8" y="515.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.8" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1154.8" y="499.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1154.8" y="483.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.8" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1154.8" y="467.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.8" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="1154.8" y="451.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1154.8" y="435.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1154.8" y="419.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.8" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1154.8" y="403.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.8" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1154.8" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.8" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1154.8" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.8" y="382.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="1154.8" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.8" y="366.0"></text>
</g>
<g>
<title>[tid=20256] (4 samples, 0.16%)</title><rect x="1155.3" y="899.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1158.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.16%)</title><rect x="1155.3" y="883.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1158.3" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (4 samples, 0.16%)</title><rect x="1155.3" y="867.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1158.3" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.08%)</title><rect x="1156.3" y="851.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1159.3" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.08%)</title><rect x="1156.3" y="835.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1159.3" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.08%)</title><rect x="1156.3" y="819.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1159.3" y="830.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.08%)</title><rect x="1156.3" y="803.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1159.3" y="814.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.08%)</title><rect x="1156.3" y="787.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1159.3" y="798.0"></text>
</g>
<g>
<title>__unqueue_futex (1 samples, 0.04%)</title><rect x="1156.3" y="771.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1159.3" y="782.0"></text>
</g>
<g>
<title>plist_del (1 samples, 0.04%)</title><rect x="1156.3" y="755.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1159.3" y="766.0"></text>
</g>
<g>
<title>__list_del_entry_valid (1 samples, 0.04%)</title><rect x="1156.3" y="739.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1159.3" y="750.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.04%)</title><rect x="1156.8" y="771.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1159.8" y="782.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="1156.8" y="755.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1159.8" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="1156.8" y="739.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1159.8" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="1156.8" y="723.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1159.8" y="734.0"></text>
</g>
<g>
<title>[tid=20385] (26 samples, 1.06%)</title><rect x="1157.2" y="899.0" width="12.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1160.2" y="910.0"></text>
</g>
<g>
<title>start_thread (26 samples, 1.06%)</title><rect x="1157.2" y="883.0" width="12.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1160.2" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (26 samples, 1.06%)</title><rect x="1157.2" y="867.0" width="12.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1160.2" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 1.06%)</title><rect x="1157.2" y="851.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.2" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (25 samples, 1.02%)</title><rect x="1157.2" y="835.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.2" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (20 samples, 0.82%)</title><rect x="1157.2" y="819.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.2" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (18 samples, 0.73%)</title><rect x="1157.2" y="803.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.2" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 0.41%)</title><rect x="1161.1" y="787.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.12%)</title><rect x="1164.5" y="771.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.5" y="782.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.08%)</title><rect x="1165.9" y="803.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1168.9" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 0.12%)</title><rect x="1166.9" y="819.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.12%)</title><rect x="1166.9" y="803.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.12%)</title><rect x="1166.9" y="787.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.9" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (3 samples, 0.12%)</title><rect x="1166.9" y="771.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.12%)</title><rect x="1166.9" y="755.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1166.9" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (2 samples, 0.08%)</title><rect x="1167.4" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.4" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.08%)</title><rect x="1167.4" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.04%)</title><rect x="1167.4" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (1 samples, 0.04%)</title><rect x="1167.8" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.08%)</title><rect x="1168.3" y="819.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.08%)</title><rect x="1168.3" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.08%)</title><rect x="1168.3" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.08%)</title><rect x="1168.3" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.08%)</title><rect x="1168.3" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.3" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1168.8" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.8" y="750.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1169.3" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.3" y="846.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (1 samples, 0.04%)</title><rect x="1169.3" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.3" y="830.0"></text>
</g>
<g>
<title>nmethod::do_unloading_oops(unsigned char*, BoolObjectClosure*) (1 samples, 0.04%)</title><rect x="1169.3" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.3" y="814.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.04%)</title><rect x="1169.3" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.3" y="798.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.04%)</title><rect x="1169.3" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.3" y="782.0"></text>
</g>
<g>
<title>[tid=20386] (23 samples, 0.94%)</title><rect x="1169.8" y="899.0" width="11.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1172.8" y="910.0"></text>
</g>
<g>
<title>start_thread (23 samples, 0.94%)</title><rect x="1169.8" y="883.0" width="11.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1172.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (23 samples, 0.94%)</title><rect x="1169.8" y="867.0" width="11.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1172.8" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 0.94%)</title><rect x="1169.8" y="851.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.8" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 0.90%)</title><rect x="1169.8" y="835.0" width="10.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 0.65%)</title><rect x="1169.8" y="819.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.8" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 0.61%)</title><rect x="1169.8" y="803.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 0.41%)</title><rect x="1172.2" y="787.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.20%)</title><rect x="1174.6" y="771.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.6" y="782.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1177.0" y="803.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1180.0" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.16%)</title><rect x="1177.5" y="819.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.16%)</title><rect x="1177.5" y="803.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.16%)</title><rect x="1177.5" y="787.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 0.16%)</title><rect x="1177.5" y="771.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.16%)</title><rect x="1177.5" y="755.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1177.5" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1177.5" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (3 samples, 0.12%)</title><rect x="1178.0" y="739.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.08%)</title><rect x="1178.0" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.04%)</title><rect x="1178.0" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.04%)</title><rect x="1178.4" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.04%)</title><rect x="1178.9" y="723.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.08%)</title><rect x="1179.4" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.08%)</title><rect x="1179.4" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.08%)</title><rect x="1179.4" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.08%)</title><rect x="1179.4" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1179.4" y="755.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="766.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.04%)</title><rect x="1179.9" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1180.4" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::clean_weak_instanceklass_links() (1 samples, 0.04%)</title><rect x="1180.4" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="830.0"></text>
</g>
<g>
<title>MethodData::clean_method_data(bool) (1 samples, 0.04%)</title><rect x="1180.4" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>[tid=20387] (19 samples, 0.78%)</title><rect x="1180.8" y="899.0" width="9.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1183.8" y="910.0"></text>
</g>
<g>
<title>start_thread (19 samples, 0.78%)</title><rect x="1180.8" y="883.0" width="9.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1183.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (19 samples, 0.78%)</title><rect x="1180.8" y="867.0" width="9.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1183.8" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 0.78%)</title><rect x="1180.8" y="851.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 0.78%)</title><rect x="1180.8" y="835.0" width="9.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 0.61%)</title><rect x="1180.8" y="819.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1180.8" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 0.53%)</title><rect x="1181.3" y="803.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 0.24%)</title><rect x="1184.2" y="787.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.16%)</title><rect x="1185.2" y="771.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1187.1" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1187.6" y="803.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1190.6" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.08%)</title><rect x="1188.1" y="819.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.08%)</title><rect x="1188.1" y="803.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.08%)</title><rect x="1188.1" y="787.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.08%)</title><rect x="1188.1" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.08%)</title><rect x="1188.1" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.04%)</title><rect x="1188.1" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1188.1" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.1" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.04%)</title><rect x="1188.6" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.6" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="1188.6" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.04%)</title><rect x="1188.6" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.08%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.08%)</title><rect x="1189.0" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.08%)</title><rect x="1189.0" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.08%)</title><rect x="1189.0" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.08%)</title><rect x="1189.0" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.08%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1189.5" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.5" y="734.0"></text>
</g>
</g>
</svg>
