<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (2,430 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>[NIO Selector #1 tid=22295] (2,184 samples, 89.88%)</title><rect x="10.0" y="979.0" width="1060.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="990.0">[NIO Selector #1 tid=22295]</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,182 samples, 89.79%)</title><rect x="11.0" y="963.0" width="1059.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="974.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.04%)</title><rect x="11.5" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.5" y="958.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.04%)</title><rect x="11.5" y="931.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.5" y="942.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.04%)</title><rect x="11.5" y="915.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (278 samples, 11.44%)</title><rect x="11.9" y="947.0" width="135.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="958.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (277 samples, 11.40%)</title><rect x="12.4" y="931.0" width="134.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="942.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (249 samples, 10.25%)</title><rect x="18.7" y="915.0" width="121.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="21.7" y="926.0">.annobin_epoll_..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="47.4" y="899.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="50.4" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (189 samples, 7.78%)</title><rect x="47.9" y="899.0" width="91.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="50.9" y="910.0">entry_SYSCA..</text>
</g>
<g>
<title>do_syscall_64 (189 samples, 7.78%)</title><rect x="47.9" y="883.0" width="91.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="50.9" y="894.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (180 samples, 7.41%)</title><rect x="52.2" y="867.0" width="87.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="55.2" y="878.0">__x64_sys_..</text>
</g>
<g>
<title>do_epoll_wait (179 samples, 7.37%)</title><rect x="52.7" y="851.0" width="87.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="55.7" y="862.0">do_epoll_w..</text>
</g>
<g>
<title>__fget_light (7 samples, 0.29%)</title><rect x="54.2" y="835.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="57.2" y="846.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.21%)</title><rect x="55.2" y="819.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="58.2" y="830.0"></text>
</g>
<g>
<title>ep_poll (168 samples, 6.91%)</title><rect x="57.6" y="835.0" width="81.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="60.6" y="846.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (115 samples, 4.73%)</title><rect x="69.2" y="819.0" width="55.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="72.2" y="830.0">ep_sc..</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.04%)</title><rect x="80.4" y="803.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="83.4" y="814.0"></text>
</g>
<g>
<title>ep_send_events_proc (76 samples, 3.13%)</title><rect x="80.9" y="803.0" width="36.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="83.9" y="814.0">ep_..</text>
</g>
<g>
<title>__list_add_valid (2 samples, 0.08%)</title><rect x="87.2" y="787.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="90.2" y="798.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (61 samples, 2.51%)</title><rect x="88.2" y="787.0" width="29.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="91.2" y="798.0">ep..</text>
</g>
<g>
<title>sock_poll (57 samples, 2.35%)</title><rect x="90.1" y="771.0" width="27.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="93.1" y="782.0">s..</text>
</g>
<g>
<title>tcp_poll (26 samples, 1.07%)</title><rect x="105.2" y="755.0" width="12.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="108.2" y="766.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (8 samples, 0.33%)</title><rect x="113.9" y="739.0" width="3.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="116.9" y="750.0"></text>
</g>
<g>
<title>mutex_lock (9 samples, 0.37%)</title><rect x="117.8" y="803.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="120.8" y="814.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="121.7" y="787.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="124.7" y="798.0"></text>
</g>
<g>
<title>mutex_unlock (6 samples, 0.25%)</title><rect x="122.2" y="803.0" width="2.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="125.2" y="814.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (29 samples, 1.19%)</title><rect x="125.1" y="819.0" width="14.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="128.1" y="830.0"></text>
</g>
<g>
<title>schedule (19 samples, 0.78%)</title><rect x="129.9" y="803.0" width="9.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="132.9" y="814.0"></text>
</g>
<g>
<title>__sched_text_start (17 samples, 0.70%)</title><rect x="130.9" y="787.0" width="8.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="133.9" y="798.0"></text>
</g>
<g>
<title>finish_task_switch (16 samples, 0.66%)</title><rect x="131.4" y="771.0" width="7.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="134.4" y="782.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="139.2" y="835.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="142.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.08%)</title><rect x="139.7" y="915.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="142.7" y="926.0"></text>
</g>
<g>
<title>__GI___clock_gettime (9 samples, 0.37%)</title><rect x="140.6" y="915.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="143.6" y="926.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.12%)</title><rect x="143.5" y="899.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="146.5" y="910.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.04%)</title><rect x="145.0" y="915.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="148.0" y="926.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.08%)</title><rect x="145.5" y="915.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="148.5" y="926.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="146.5" y="915.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="149.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,898 samples, 78.11%)</title><rect x="146.9" y="947.0" width="921.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.9" y="958.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,897 samples, 78.07%)</title><rect x="147.4" y="931.0" width="921.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.4" y="942.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,663 samples, 68.44%)</title><rect x="147.4" y="915.0" width="807.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="150.4" y="926.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="156.7" y="899.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="159.7" y="910.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="156.7" y="883.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="159.7" y="894.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="156.7" y="867.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="159.7" y="878.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="156.7" y="851.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="159.7" y="862.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.04%)</title><rect x="156.7" y="835.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="159.7" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,595 samples, 65.64%)</title><rect x="157.1" y="899.0" width="774.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.1" y="910.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,592 samples, 65.51%)</title><rect x="158.6" y="883.0" width="773.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.6" y="894.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,565 samples, 64.40%)</title><rect x="159.6" y="867.0" width="759.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.6" y="878.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,261 samples, 51.89%)</title><rect x="159.6" y="851.0" width="612.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.6" y="862.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.45%)</title><rect x="162.0" y="835.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.0" y="846.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="163.9" y="819.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="166.9" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.25%)</title><rect x="164.4" y="819.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="167.4" y="830.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.21%)</title><rect x="164.9" y="803.0" width="2.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="167.9" y="814.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.16%)</title><rect x="165.4" y="787.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="168.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,239 samples, 50.99%)</title><rect x="167.3" y="835.0" width="601.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="170.3" y="846.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (36 samples, 1.48%)</title><rect x="169.3" y="819.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (29 samples, 1.19%)</title><rect x="172.7" y="803.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (21 samples, 0.86%)</title><rect x="172.7" y="787.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.7" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="181.4" y="771.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="184.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.33%)</title><rect x="182.9" y="787.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.33%)</title><rect x="182.9" y="771.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="185.9" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,199 samples, 49.34%)</title><rect x="186.8" y="819.0" width="582.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.8" y="830.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,199 samples, 49.34%)</title><rect x="186.8" y="803.0" width="582.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.8" y="814.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,198 samples, 49.30%)</title><rect x="187.2" y="787.0" width="581.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.2" y="798.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.08%)</title><rect x="188.7" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.7" y="782.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,193 samples, 49.09%)</title><rect x="189.7" y="771.0" width="579.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.7" y="782.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>.annobin_send.c (1,175 samples, 48.35%)</title><rect x="191.1" y="755.0" width="570.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="194.1" y="766.0">.annobin_send.c</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.21%)</title><rect x="218.8" y="739.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="221.8" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,113 samples, 45.80%)</title><rect x="221.2" y="739.0" width="540.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="224.2" y="750.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (1,113 samples, 45.80%)</title><rect x="221.2" y="723.0" width="540.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="224.2" y="734.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,099 samples, 45.23%)</title><rect x="228.0" y="707.0" width="533.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="231.0" y="718.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,097 samples, 45.14%)</title><rect x="229.0" y="691.0" width="532.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="232.0" y="702.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="230.0" y="675.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="233.0" y="686.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.04%)</title><rect x="230.5" y="675.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="233.5" y="686.0"></text>
</g>
<g>
<title>sock_sendmsg (1,083 samples, 44.57%)</title><rect x="230.9" y="675.0" width="525.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="233.9" y="686.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (7 samples, 0.29%)</title><rect x="231.9" y="659.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="234.9" y="670.0"></text>
</g>
<g>
<title>security_socket_sendmsg (3 samples, 0.12%)</title><rect x="235.3" y="659.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="238.3" y="670.0"></text>
</g>
<g>
<title>sock_has_perm (3 samples, 0.12%)</title><rect x="235.3" y="643.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="238.3" y="654.0"></text>
</g>
<g>
<title>avc_has_perm (1 samples, 0.04%)</title><rect x="236.3" y="627.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="239.3" y="638.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,071 samples, 44.07%)</title><rect x="236.8" y="659.0" width="520.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="239.8" y="670.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.16%)</title><rect x="239.2" y="643.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="242.2" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.16%)</title><rect x="239.2" y="627.0" width="1.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="242.2" y="638.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.21%)</title><rect x="241.1" y="643.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="244.1" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="242.6" y="627.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="245.6" y="638.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.04%)</title><rect x="243.1" y="627.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="246.1" y="638.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,057 samples, 43.50%)</title><rect x="243.6" y="643.0" width="513.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="246.6" y="654.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (7 samples, 0.29%)</title><rect x="249.4" y="627.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="252.4" y="638.0"></text>
</g>
<g>
<title>__check_heap_object (3 samples, 0.12%)</title><rect x="249.9" y="611.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="252.9" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.08%)</title><rect x="251.3" y="611.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="254.3" y="622.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.04%)</title><rect x="252.3" y="611.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="255.3" y="622.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (976 samples, 40.16%)</title><rect x="252.8" y="627.0" width="473.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="255.8" y="638.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (976 samples, 40.16%)</title><rect x="252.8" y="611.0" width="473.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="255.8" y="622.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (933 samples, 38.40%)</title><rect x="260.1" y="595.0" width="453.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="263.1" y="606.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (886 samples, 36.46%)</title><rect x="267.4" y="579.0" width="430.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="270.4" y="590.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (9 samples, 0.37%)</title><rect x="268.8" y="563.0" width="4.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="271.8" y="574.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="269.3" y="547.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="272.3" y="558.0"></text>
</g>
<g>
<title>ipv4_dst_check (7 samples, 0.29%)</title><rect x="269.8" y="547.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="272.8" y="558.0"></text>
</g>
<g>
<title>ip_local_out (148 samples, 6.09%)</title><rect x="273.2" y="563.0" width="71.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="276.2" y="574.0">ip_local..</text>
</g>
<g>
<title>__ip_local_out (148 samples, 6.09%)</title><rect x="273.2" y="547.0" width="71.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="276.2" y="558.0">__ip_loc..</text>
</g>
<g>
<title>ip_send_check (4 samples, 0.16%)</title><rect x="273.7" y="531.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="276.7" y="542.0"></text>
</g>
<g>
<title>nf_hook_slow (143 samples, 5.88%)</title><rect x="275.6" y="531.0" width="69.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="278.6" y="542.0">nf_hook..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (44 samples, 1.81%)</title><rect x="276.1" y="515.0" width="21.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="279.1" y="526.0">i..</text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.08%)</title><rect x="297.5" y="515.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="300.5" y="526.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (15 samples, 0.62%)</title><rect x="298.4" y="515.0" width="7.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="301.4" y="526.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (11 samples, 0.45%)</title><rect x="300.4" y="499.0" width="5.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="303.4" y="510.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.12%)</title><rect x="305.7" y="515.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="308.7" y="526.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.08%)</title><rect x="307.2" y="515.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="310.2" y="526.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (5 samples, 0.21%)</title><rect x="308.2" y="515.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="311.2" y="526.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (3 samples, 0.12%)</title><rect x="310.6" y="515.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="313.6" y="526.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (55 samples, 2.26%)</title><rect x="312.0" y="515.0" width="26.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="315.0" y="526.0">n..</text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (16 samples, 0.66%)</title><rect x="313.0" y="499.0" width="7.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="316.0" y="510.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (3 samples, 0.12%)</title><rect x="320.8" y="499.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="323.8" y="510.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (1 samples, 0.04%)</title><rect x="322.2" y="499.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="325.2" y="510.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (23 samples, 0.95%)</title><rect x="322.7" y="499.0" width="11.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="325.7" y="510.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct	[nf_conntrack] (2 samples, 0.08%)</title><rect x="329.5" y="483.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="332.5" y="494.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (7 samples, 0.29%)</title><rect x="330.5" y="483.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="333.5" y="494.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (10 samples, 0.41%)</title><rect x="333.9" y="499.0" width="4.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="336.9" y="510.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (9 samples, 0.37%)</title><rect x="338.7" y="515.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="341.7" y="526.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (5 samples, 0.21%)</title><rect x="340.2" y="499.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="343.2" y="510.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (1 samples, 0.04%)</title><rect x="342.6" y="499.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="345.6" y="510.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4 samples, 0.16%)</title><rect x="343.1" y="515.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="346.1" y="526.0"></text>
</g>
<g>
<title>netlbl_enabled (2 samples, 0.08%)</title><rect x="344.1" y="499.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="347.1" y="510.0"></text>
</g>
<g>
<title>ip_output (726 samples, 29.88%)</title><rect x="345.1" y="563.0" width="352.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="348.1" y="574.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (665 samples, 27.37%)</title><rect x="348.9" y="547.0" width="323.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="351.9" y="558.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (43 samples, 1.77%)</title><rect x="353.3" y="531.0" width="20.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="356.3" y="542.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (33 samples, 1.36%)</title><rect x="358.2" y="515.0" width="16.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="361.2" y="526.0"></text>
</g>
<g>
<title>loopback_xmit (30 samples, 1.23%)</title><rect x="359.6" y="499.0" width="14.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="362.6" y="510.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.04%)</title><rect x="363.0" y="483.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="366.0" y="494.0"></text>
</g>
<g>
<title>netif_rx (15 samples, 0.62%)</title><rect x="363.5" y="483.0" width="7.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="366.5" y="494.0"></text>
</g>
<g>
<title>netif_rx_internal (15 samples, 0.62%)</title><rect x="363.5" y="467.0" width="7.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="366.5" y="478.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.29%)</title><rect x="365.5" y="451.0" width="3.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="368.5" y="462.0"></text>
</g>
<g>
<title>ktime_get_with_offset (4 samples, 0.16%)</title><rect x="368.9" y="451.0" width="1.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="371.9" y="462.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.04%)</title><rect x="370.3" y="435.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="373.3" y="446.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.04%)</title><rect x="370.8" y="483.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="373.8" y="494.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (4 samples, 0.16%)</title><rect x="371.3" y="483.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="374.3" y="494.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.08%)</title><rect x="373.2" y="483.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="376.2" y="494.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (612 samples, 25.19%)</title><rect x="374.2" y="531.0" width="297.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="377.2" y="542.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (611 samples, 25.14%)</title><rect x="374.7" y="515.0" width="296.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="377.7" y="526.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (604 samples, 24.86%)</title><rect x="378.1" y="499.0" width="293.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="381.1" y="510.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (604 samples, 24.86%)</title><rect x="378.1" y="483.0" width="293.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="381.1" y="494.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (588 samples, 24.20%)</title><rect x="384.9" y="467.0" width="285.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="387.9" y="478.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (583 samples, 23.99%)</title><rect x="387.3" y="451.0" width="283.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="390.3" y="462.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb_one_core (577 samples, 23.74%)</title><rect x="390.2" y="435.0" width="280.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="393.2" y="446.0">__netif_receive_skb_one_core</text>
</g>
<g>
<title>__netif_receive_skb_core (21 samples, 0.86%)</title><rect x="390.7" y="419.0" width="10.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="393.7" y="430.0"></text>
</g>
<g>
<title>ip_rcv (555 samples, 22.84%)</title><rect x="400.9" y="419.0" width="269.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="403.9" y="430.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (441 samples, 18.15%)</title><rect x="401.9" y="403.0" width="214.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="404.9" y="414.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (369 samples, 15.19%)</title><rect x="402.8" y="387.0" width="179.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="405.8" y="398.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (367 samples, 15.10%)</title><rect x="403.8" y="371.0" width="178.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="406.8" y="382.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>raw_local_deliver (4 samples, 0.16%)</title><rect x="407.2" y="355.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="410.2" y="366.0"></text>
</g>
<g>
<title>tcp_v4_rcv (356 samples, 14.65%)</title><rect x="409.2" y="355.0" width="172.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="412.2" y="366.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (17 samples, 0.70%)</title><rect x="418.4" y="339.0" width="8.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="421.4" y="350.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.12%)</title><rect x="425.2" y="323.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="428.2" y="334.0"></text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.12%)</title><rect x="426.6" y="339.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="429.6" y="350.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (10 samples, 0.41%)</title><rect x="428.1" y="339.0" width="4.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="431.1" y="350.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (10 samples, 0.41%)</title><rect x="428.1" y="323.0" width="4.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="431.1" y="334.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (10 samples, 0.41%)</title><rect x="428.1" y="307.0" width="4.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="431.1" y="318.0"></text>
</g>
<g>
<title>selinux_peerlbl_enabled (2 samples, 0.08%)</title><rect x="432.0" y="291.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="435.0" y="302.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (305 samples, 12.55%)</title><rect x="433.0" y="339.0" width="148.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="436.0" y="350.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.04%)</title><rect x="433.4" y="323.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="436.4" y="334.0"></text>
</g>
<g>
<title>tcp_rcv_established (303 samples, 12.47%)</title><rect x="433.9" y="323.0" width="147.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="436.9" y="334.0">tcp_rcv_established</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.04%)</title><rect x="439.8" y="307.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="442.8" y="318.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.25%)</title><rect x="440.2" y="307.0" width="3.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="443.2" y="318.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.21%)</title><rect x="440.7" y="291.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="443.7" y="302.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.08%)</title><rect x="441.7" y="275.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="444.7" y="286.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.04%)</title><rect x="442.7" y="275.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="445.7" y="286.0"></text>
</g>
<g>
<title>tcp_ack (65 samples, 2.67%)</title><rect x="443.2" y="307.0" width="31.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="446.2" y="318.0">tc..</text>
</g>
<g>
<title>__kfree_skb (12 samples, 0.49%)</title><rect x="451.4" y="291.0" width="5.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="454.4" y="302.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.08%)</title><rect x="451.4" y="275.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="454.4" y="286.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.08%)</title><rect x="452.4" y="275.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="455.4" y="286.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.04%)</title><rect x="453.3" y="275.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="456.3" y="286.0"></text>
</g>
<g>
<title>skb_release_data (7 samples, 0.29%)</title><rect x="453.8" y="275.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="456.8" y="286.0"></text>
</g>
<g>
<title>__list_del_entry_valid (1 samples, 0.04%)</title><rect x="457.2" y="291.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="460.2" y="302.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.12%)</title><rect x="457.7" y="291.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="460.7" y="302.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (6 samples, 0.25%)</title><rect x="459.2" y="291.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="462.2" y="302.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.12%)</title><rect x="462.1" y="291.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="465.1" y="302.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.08%)</title><rect x="462.6" y="275.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="465.6" y="286.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.04%)</title><rect x="463.5" y="291.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="466.5" y="302.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.08%)</title><rect x="464.0" y="291.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="467.0" y="302.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.16%)</title><rect x="465.0" y="291.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="468.0" y="302.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.04%)</title><rect x="466.5" y="275.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="469.5" y="286.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.08%)</title><rect x="466.9" y="291.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="469.9" y="302.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.04%)</title><rect x="467.9" y="291.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="470.9" y="302.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.08%)</title><rect x="468.4" y="291.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="471.4" y="302.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.04%)</title><rect x="469.4" y="291.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="472.4" y="302.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.04%)</title><rect x="469.9" y="291.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="472.9" y="302.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.12%)</title><rect x="470.3" y="291.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="473.3" y="302.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.16%)</title><rect x="471.8" y="291.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="474.8" y="302.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.08%)</title><rect x="473.7" y="291.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="476.7" y="302.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.04%)</title><rect x="474.7" y="307.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="477.7" y="318.0"></text>
</g>
<g>
<title>tcp_data_queue (212 samples, 8.72%)</title><rect x="475.2" y="307.0" width="102.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="478.2" y="318.0">tcp_data_queue</text>
</g>
<g>
<title>dst_release (1 samples, 0.04%)</title><rect x="475.7" y="291.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="478.7" y="302.0"></text>
</g>
<g>
<title>sock_def_readable (202 samples, 8.31%)</title><rect x="476.2" y="291.0" width="98.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="479.2" y="302.0">sock_def_rea..</text>
</g>
<g>
<title>__wake_up_common_lock (198 samples, 8.15%)</title><rect x="477.6" y="275.0" width="96.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="480.6" y="286.0">__wake_up_c..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.08%)</title><rect x="478.6" y="259.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="481.6" y="270.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (194 samples, 7.98%)</title><rect x="479.6" y="259.0" width="94.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="482.6" y="270.0">_raw_spin_u..</text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.04%)</title><rect x="573.8" y="275.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="576.8" y="286.0"></text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.21%)</title><rect x="574.3" y="291.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="577.3" y="302.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.12%)</title><rect x="576.7" y="291.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="579.7" y="302.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.21%)</title><rect x="578.1" y="307.0" width="2.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="581.1" y="318.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.08%)</title><rect x="579.6" y="291.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="582.6" y="302.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.08%)</title><rect x="579.6" y="275.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="582.6" y="286.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.04%)</title><rect x="580.6" y="307.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="583.6" y="318.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.08%)</title><rect x="581.1" y="339.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="584.1" y="350.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.04%)</title><rect x="581.5" y="323.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="584.5" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (70 samples, 2.88%)</title><rect x="582.0" y="387.0" width="34.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="585.0" y="398.0">nf..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (50 samples, 2.06%)</title><rect x="585.9" y="371.0" width="24.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="588.9" y="382.0">i..</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.08%)</title><rect x="603.9" y="355.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="606.9" y="366.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (5 samples, 0.21%)</title><rect x="604.9" y="355.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="607.9" y="366.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (6 samples, 0.25%)</title><rect x="607.3" y="355.0" width="2.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="610.3" y="366.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.08%)</title><rect x="610.2" y="371.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="613.2" y="382.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (4 samples, 0.16%)</title><rect x="611.2" y="371.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="614.2" y="382.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (5 samples, 0.21%)</title><rect x="613.1" y="371.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="616.1" y="382.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (1 samples, 0.04%)</title><rect x="615.5" y="371.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="618.5" y="382.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (1 samples, 0.04%)</title><rect x="615.5" y="355.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="618.5" y="366.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (6 samples, 0.25%)</title><rect x="616.0" y="403.0" width="2.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="619.0" y="414.0"></text>
</g>
<g>
<title>ip_rcv_finish (6 samples, 0.25%)</title><rect x="618.9" y="403.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="621.9" y="414.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (4 samples, 0.16%)</title><rect x="619.9" y="387.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="622.9" y="398.0"></text>
</g>
<g>
<title>nf_hook_slow (100 samples, 4.12%)</title><rect x="621.9" y="403.0" width="48.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="624.9" y="414.0">nf_h..</text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (6 samples, 0.25%)</title><rect x="622.8" y="387.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="625.8" y="398.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (74 samples, 3.05%)</title><rect x="625.7" y="387.0" width="36.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="628.7" y="398.0">ipt..</text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (3 samples, 0.12%)</title><rect x="661.7" y="387.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="664.7" y="398.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.12%)</title><rect x="663.1" y="387.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="666.1" y="398.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.16%)</title><rect x="664.6" y="387.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="667.6" y="398.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (1 samples, 0.04%)</title><rect x="666.5" y="387.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="669.5" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (4 samples, 0.16%)</title><rect x="667.0" y="387.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="670.0" y="398.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (3 samples, 0.12%)</title><rect x="669.0" y="387.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="672.0" y="398.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (1 samples, 0.04%)</title><rect x="669.4" y="371.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="672.4" y="382.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (1 samples, 0.04%)</title><rect x="669.9" y="371.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="672.9" y="382.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="670.4" y="467.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="673.4" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="670.4" y="451.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="673.4" y="462.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.04%)</title><rect x="670.9" y="467.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="673.9" y="478.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="671.4" y="531.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="674.4" y="542.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="671.4" y="515.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="674.4" y="526.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="671.4" y="499.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="674.4" y="510.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="671.4" y="483.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="674.4" y="494.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="671.4" y="467.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="674.4" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.04%)</title><rect x="671.4" y="451.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="674.4" y="462.0"></text>
</g>
<g>
<title>ip_finish_output (8 samples, 0.33%)</title><rect x="671.9" y="547.0" width="3.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="674.9" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.21%)</title><rect x="673.3" y="531.0" width="2.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="676.3" y="542.0"></text>
</g>
<g>
<title>nf_hook_slow (45 samples, 1.85%)</title><rect x="675.8" y="547.0" width="21.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="678.8" y="558.0">n..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (15 samples, 0.62%)</title><rect x="677.2" y="531.0" width="7.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="680.2" y="542.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (2 samples, 0.08%)</title><rect x="684.5" y="531.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="687.5" y="542.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (1 samples, 0.04%)</title><rect x="685.5" y="531.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="688.5" y="542.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (9 samples, 0.37%)</title><rect x="686.0" y="531.0" width="4.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="689.0" y="542.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (6 samples, 0.25%)</title><rect x="687.4" y="515.0" width="2.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="690.4" y="526.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (4 samples, 0.16%)</title><rect x="690.3" y="531.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="693.3" y="542.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.08%)</title><rect x="691.3" y="515.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="694.3" y="526.0"></text>
</g>
<g>
<title>selinux_ip_postroute (5 samples, 0.21%)</title><rect x="692.3" y="531.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="695.3" y="542.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (6 samples, 0.25%)</title><rect x="694.7" y="531.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="697.7" y="542.0"></text>
</g>
<g>
<title>__skb_clone (10 samples, 0.41%)</title><rect x="697.6" y="579.0" width="4.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="700.6" y="590.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.08%)</title><rect x="701.5" y="563.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="704.5" y="574.0"></text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.12%)</title><rect x="702.5" y="579.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="705.5" y="590.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (3 samples, 0.12%)</title><rect x="703.9" y="579.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="706.9" y="590.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.12%)</title><rect x="705.4" y="579.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="708.4" y="590.0"></text>
</g>
<g>
<title>skb_clone (5 samples, 0.21%)</title><rect x="706.8" y="579.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="709.8" y="590.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.04%)</title><rect x="709.3" y="579.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="712.3" y="590.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (3 samples, 0.12%)</title><rect x="709.7" y="579.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="712.7" y="590.0"></text>
</g>
<g>
<title>__list_add_valid (1 samples, 0.04%)</title><rect x="710.2" y="563.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="713.2" y="574.0"></text>
</g>
<g>
<title>__list_del_entry_valid (1 samples, 0.04%)</title><rect x="710.7" y="563.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="713.7" y="574.0"></text>
</g>
<g>
<title>tcp_v4_send_check (4 samples, 0.16%)</title><rect x="711.2" y="579.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="714.2" y="590.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.16%)</title><rect x="713.1" y="595.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="716.1" y="606.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.16%)</title><rect x="713.1" y="579.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="716.1" y="590.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.08%)</title><rect x="715.1" y="595.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="718.1" y="606.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (12 samples, 0.49%)</title><rect x="716.1" y="595.0" width="5.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="719.1" y="606.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.04%)</title><rect x="717.0" y="579.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="720.0" y="590.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.21%)</title><rect x="717.5" y="579.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="720.5" y="590.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.21%)</title><rect x="717.5" y="563.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="720.5" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.08%)</title><rect x="718.5" y="547.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="721.5" y="558.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.04%)</title><rect x="719.5" y="547.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="722.5" y="558.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.08%)</title><rect x="719.9" y="579.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="722.9" y="590.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.08%)</title><rect x="720.9" y="579.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="723.9" y="590.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (10 samples, 0.41%)</title><rect x="721.9" y="595.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="724.9" y="606.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (4 samples, 0.16%)</title><rect x="724.8" y="579.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="727.8" y="590.0"></text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.16%)</title><rect x="726.7" y="627.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="729.7" y="638.0"></text>
</g>
<g>
<title>copyin (4 samples, 0.16%)</title><rect x="726.7" y="611.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="729.7" y="622.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (4 samples, 0.16%)</title><rect x="726.7" y="595.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="729.7" y="606.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="728.7" y="627.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="731.7" y="638.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="728.7" y="611.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="731.7" y="622.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="728.7" y="595.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="731.7" y="606.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="728.7" y="579.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="731.7" y="590.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.04%)</title><rect x="728.7" y="563.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="731.7" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (35 samples, 1.44%)</title><rect x="729.2" y="627.0" width="17.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="732.2" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (33 samples, 1.36%)</title><rect x="730.1" y="611.0" width="16.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="733.1" y="622.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (15 samples, 0.62%)</title><rect x="731.6" y="595.0" width="7.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="734.6" y="606.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (14 samples, 0.58%)</title><rect x="732.1" y="579.0" width="6.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="735.1" y="590.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.16%)</title><rect x="736.5" y="563.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="739.5" y="574.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.04%)</title><rect x="738.4" y="563.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="741.4" y="574.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (10 samples, 0.41%)</title><rect x="738.9" y="595.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="741.9" y="606.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.12%)</title><rect x="740.8" y="579.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="743.8" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="742.3" y="579.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="745.3" y="590.0"></text>
</g>
<g>
<title>should_failslab (2 samples, 0.08%)</title><rect x="742.8" y="579.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="745.8" y="590.0"></text>
</g>
<g>
<title>ksize (5 samples, 0.21%)</title><rect x="743.7" y="595.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="746.7" y="606.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.12%)</title><rect x="746.2" y="627.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="749.2" y="638.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.04%)</title><rect x="747.6" y="627.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="750.6" y="638.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (7 samples, 0.29%)</title><rect x="748.1" y="627.0" width="3.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="751.1" y="638.0"></text>
</g>
<g>
<title>tcp_send_mss (10 samples, 0.41%)</title><rect x="751.5" y="627.0" width="4.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="754.5" y="638.0"></text>
</g>
<g>
<title>tcp_current_mss (8 samples, 0.33%)</title><rect x="752.5" y="611.0" width="3.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="755.5" y="622.0"></text>
</g>
<g>
<title>ipv4_mtu (6 samples, 0.25%)</title><rect x="753.0" y="595.0" width="2.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="756.0" y="606.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.04%)</title><rect x="755.9" y="595.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="758.9" y="606.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.04%)</title><rect x="756.4" y="627.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="759.4" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.41%)</title><rect x="756.8" y="675.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="759.8" y="686.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.04%)</title><rect x="757.3" y="659.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="760.3" y="670.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.33%)</title><rect x="757.8" y="659.0" width="3.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="760.8" y="670.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.29%)</title><rect x="758.3" y="643.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="761.3" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.04%)</title><rect x="761.7" y="755.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="764.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.49%)</title><rect x="762.2" y="755.0" width="5.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="765.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.49%)</title><rect x="762.2" y="739.0" width="5.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="765.2" y="750.0"></text>
</g>
<g>
<title>.annobin_send.c (1 samples, 0.04%)</title><rect x="762.2" y="723.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="765.2" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (11 samples, 0.45%)</title><rect x="762.7" y="723.0" width="5.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="765.7" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="763.6" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="766.6" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="764.1" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="767.1" y="718.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.16%)</title><rect x="764.6" y="707.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="767.6" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.12%)</title><rect x="766.6" y="707.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="769.6" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="766.6" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="769.6" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="767.0" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.0" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.04%)</title><rect x="767.5" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.5" y="702.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.08%)</title><rect x="768.0" y="755.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="771.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.25%)</title><rect x="769.0" y="835.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="772.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="770.4" y="819.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="773.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.12%)</title><rect x="770.4" y="803.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="773.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (33 samples, 1.36%)</title><rect x="771.9" y="851.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="774.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.16%)</title><rect x="777.2" y="835.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.16%)</title><rect x="777.2" y="819.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.33%)</title><rect x="779.2" y="835.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="782.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.33%)</title><rect x="779.2" y="819.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="782.2" y="830.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.25%)</title><rect x="780.2" y="803.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.2" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="783.1" y="835.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="786.1" y="846.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.29%)</title><rect x="784.5" y="835.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.25%)</title><rect x="785.0" y="819.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.25%)</title><rect x="785.0" y="803.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.25%)</title><rect x="785.0" y="787.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.0" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (271 samples, 11.15%)</title><rect x="787.9" y="851.0" width="131.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.9" y="862.0">ru/mail/polis/se..</text>
</g>
<g>
<title>_init (2 samples, 0.08%)</title><rect x="788.4" y="835.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="791.4" y="846.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.08%)</title><rect x="789.4" y="835.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.4" y="846.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.04%)</title><rect x="789.9" y="819.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.04%)</title><rect x="789.9" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="792.9" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.41%)</title><rect x="790.4" y="835.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="793.4" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.41%)</title><rect x="790.4" y="819.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.4" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.41%)</title><rect x="790.4" y="803.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.4" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.33%)</title><rect x="791.3" y="787.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.3" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.33%)</title><rect x="791.3" y="771.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.3" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="791.8" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="794.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="791.8" y="739.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="794.8" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.08%)</title><rect x="791.8" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="794.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.21%)</title><rect x="792.8" y="755.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="795.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.16%)</title><rect x="793.3" y="739.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.3" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.12%)</title><rect x="793.3" y="723.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="796.3" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="794.2" y="707.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.2" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="794.7" y="723.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="797.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.08%)</title><rect x="795.2" y="835.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.2" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="795.2" y="819.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="798.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.remove (242 samples, 9.96%)</title><rect x="796.2" y="835.0" width="117.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.2" y="846.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.flushAndLoad (66 samples, 2.72%)</title><rect x="796.2" y="819.0" width="32.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="799.2" y="830.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.flush (66 samples, 2.72%)</title><rect x="796.2" y="803.0" width="32.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="799.2" y="814.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.04%)</title><rect x="796.2" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putIntUnaligned (1 samples, 0.04%)</title><rect x="796.2" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.04%)</title><rect x="796.2" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.2" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (2 samples, 0.08%)</title><rect x="796.7" y="787.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="799.7" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="797.2" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="800.2" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="797.2" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="800.2" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.04%)</title><rect x="797.2" y="739.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="800.2" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.08%)</title><rect x="797.6" y="787.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.6" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.08%)</title><rect x="797.6" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (1 samples, 0.04%)</title><rect x="798.6" y="787.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="801.6" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="798.6" y="771.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.6" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="798.6" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.6" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="798.6" y="739.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="798.6" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="801.6" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="798.6" y="707.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="798.6" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="801.6" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="798.6" y="675.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.6" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="798.6" y="659.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (2 samples, 0.08%)</title><rect x="799.1" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.1" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="799.1" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="802.1" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.08%)</title><rect x="799.1" y="755.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="802.1" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="799.1" y="739.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="802.1" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="799.1" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="802.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (58 samples, 2.39%)</title><rect x="800.1" y="787.0" width="28.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.1" y="798.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.08%)</title><rect x="800.1" y="771.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="803.1" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.08%)</title><rect x="800.1" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="803.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.08%)</title><rect x="800.1" y="739.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (50 samples, 2.06%)</title><rect x="801.0" y="771.0" width="24.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="804.0" y="782.0">s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="801.0" y="755.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (46 samples, 1.89%)</title><rect x="801.5" y="755.0" width="22.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.5" y="766.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (46 samples, 1.89%)</title><rect x="801.5" y="739.0" width="22.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="804.5" y="750.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (46 samples, 1.89%)</title><rect x="801.5" y="723.0" width="22.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="804.5" y="734.0">s..</text>
</g>
<g>
<title>__libc_write (45 samples, 1.85%)</title><rect x="802.0" y="707.0" width="21.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="805.0" y="718.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (32 samples, 1.32%)</title><rect x="808.3" y="691.0" width="15.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="811.3" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (32 samples, 1.32%)</title><rect x="808.3" y="675.0" width="15.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="811.3" y="686.0"></text>
</g>
<g>
<title>ksys_write (23 samples, 0.95%)</title><rect x="812.7" y="659.0" width="11.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="815.7" y="670.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.08%)</title><rect x="812.7" y="643.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="815.7" y="654.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.08%)</title><rect x="812.7" y="627.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="815.7" y="638.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.08%)</title><rect x="812.7" y="611.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="815.7" y="622.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="813.7" y="643.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="816.7" y="654.0"></text>
</g>
<g>
<title>vfs_write (20 samples, 0.82%)</title><rect x="814.1" y="643.0" width="9.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="817.1" y="654.0"></text>
</g>
<g>
<title>new_sync_write (18 samples, 0.74%)</title><rect x="814.1" y="627.0" width="8.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="817.1" y="638.0"></text>
</g>
<g>
<title>generic_file_write_iter (18 samples, 0.74%)</title><rect x="814.1" y="611.0" width="8.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="817.1" y="622.0"></text>
</g>
<g>
<title>__generic_file_write_iter (16 samples, 0.66%)</title><rect x="815.1" y="595.0" width="7.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="818.1" y="606.0"></text>
</g>
<g>
<title>generic_perform_write (16 samples, 0.66%)</title><rect x="815.1" y="579.0" width="7.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="818.1" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="815.6" y="563.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="818.6" y="574.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="815.6" y="547.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="818.6" y="558.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (3 samples, 0.12%)</title><rect x="816.1" y="563.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="819.1" y="574.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.04%)</title><rect x="817.1" y="547.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="820.1" y="558.0"></text>
</g>
<g>
<title>shmem_write_begin (9 samples, 0.37%)</title><rect x="817.5" y="563.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="820.5" y="574.0"></text>
</g>
<g>
<title>shmem_getpage_gfp (7 samples, 0.29%)</title><rect x="818.5" y="547.0" width="3.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="821.5" y="558.0"></text>
</g>
<g>
<title>find_lock_entry (4 samples, 0.16%)</title><rect x="819.5" y="531.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="822.5" y="542.0"></text>
</g>
<g>
<title>find_get_entry (2 samples, 0.08%)</title><rect x="820.0" y="515.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="823.0" y="526.0"></text>
</g>
<g>
<title>page_mapping (1 samples, 0.04%)</title><rect x="820.9" y="515.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="823.9" y="526.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.04%)</title><rect x="821.4" y="531.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="824.4" y="542.0"></text>
</g>
<g>
<title>shmem_write_end (2 samples, 0.08%)</title><rect x="821.9" y="563.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="824.9" y="574.0"></text>
</g>
<g>
<title>__set_page_dirty_no_writeback (1 samples, 0.04%)</title><rect x="821.9" y="547.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="824.9" y="558.0"></text>
</g>
<g>
<title>set_page_dirty (1 samples, 0.04%)</title><rect x="822.4" y="547.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="825.4" y="558.0"></text>
</g>
<g>
<title>page_mapping (1 samples, 0.04%)</title><rect x="822.4" y="531.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="825.4" y="542.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.08%)</title><rect x="822.9" y="627.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="825.9" y="638.0"></text>
</g>
<g>
<title>selinux_file_permission (1 samples, 0.04%)</title><rect x="823.4" y="611.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="826.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.12%)</title><rect x="823.9" y="755.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="823.9" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.04%)</title><rect x="823.9" y="723.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.9" y="734.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.04%)</title><rect x="823.9" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="826.9" y="718.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.04%)</title><rect x="823.9" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="826.9" y="702.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.04%)</title><rect x="823.9" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="826.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.08%)</title><rect x="824.3" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="827.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.04%)</title><rect x="824.8" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="825.3" y="771.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.21%)</title><rect x="825.8" y="771.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="828.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.08%)</title><rect x="827.3" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="830.3" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.remove (176 samples, 7.24%)</title><rect x="828.2" y="819.0" width="85.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="831.2" y="830.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/TreeMap.put (169 samples, 6.95%)</title><rect x="828.2" y="803.0" width="82.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="831.2" y="814.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (120 samples, 4.94%)</title><rect x="841.3" y="787.0" width="58.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.3" y="798.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (88 samples, 3.62%)</title><rect x="856.9" y="771.0" width="42.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="859.9" y="782.0">java..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (67 samples, 2.76%)</title><rect x="858.3" y="755.0" width="32.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="861.3" y="766.0">ja..</text>
</g>
<g>
<title>vectorizedMismatch (19 samples, 0.78%)</title><rect x="881.6" y="739.0" width="9.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="884.6" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (18 samples, 0.74%)</title><rect x="890.9" y="755.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="893.9" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (22 samples, 0.91%)</title><rect x="899.6" y="787.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="902.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (7 samples, 0.29%)</title><rect x="910.3" y="803.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.3" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.29%)</title><rect x="910.3" y="787.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="913.3" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (7 samples, 0.29%)</title><rect x="910.3" y="771.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="913.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.29%)</title><rect x="910.3" y="755.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="913.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.29%)</title><rect x="910.3" y="739.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="913.3" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.21%)</title><rect x="911.3" y="723.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="914.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="911.3" y="707.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="914.3" y="718.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.04%)</title><rect x="911.3" y="691.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="914.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.12%)</title><rect x="911.8" y="707.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="914.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="912.7" y="691.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="915.7" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="912.7" y="675.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="913.2" y="707.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="916.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="913.2" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.2" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="913.2" y="675.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="916.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (12 samples, 0.49%)</title><rect x="913.7" y="835.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="916.7" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getSizeOfFlushedRow (12 samples, 0.49%)</title><rect x="913.7" y="819.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="913.7" y="803.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="916.7" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="913.7" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.7" y="798.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="914.2" y="803.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="917.2" y="814.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.08%)</title><rect x="914.7" y="803.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="917.7" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.33%)</title><rect x="915.6" y="803.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.6" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.08%)</title><rect x="915.6" y="787.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="918.6" y="798.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.25%)</title><rect x="916.6" y="787.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="919.6" y="798.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.21%)</title><rect x="917.1" y="771.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="920.1" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.08%)</title><rect x="919.5" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="922.5" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.08%)</title><rect x="919.5" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.5" y="862.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.16%)</title><rect x="920.5" y="867.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.16%)</title><rect x="920.5" y="851.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="920.5" y="835.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="920.5" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="920.5" y="803.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="923.5" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.04%)</title><rect x="920.5" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="923.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.12%)</title><rect x="921.0" y="835.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="924.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="922.0" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="925.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (19 samples, 0.78%)</title><rect x="922.4" y="867.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="925.4" y="878.0"></text>
</g>
<g>
<title>java/lang/String.substring (19 samples, 0.78%)</title><rect x="922.4" y="851.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="925.4" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (18 samples, 0.74%)</title><rect x="922.9" y="835.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="925.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.37%)</title><rect x="924.4" y="819.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.12%)</title><rect x="927.3" y="803.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="930.3" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.25%)</title><rect x="928.7" y="819.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (34 samples, 1.40%)</title><rect x="931.7" y="899.0" width="16.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="934.7" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.53%)</title><rect x="936.5" y="883.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="939.5" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.53%)</title><rect x="936.5" y="867.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="939.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.41%)</title><rect x="937.5" y="851.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="940.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (10 samples, 0.41%)</title><rect x="937.5" y="835.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="940.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.04%)</title><rect x="942.3" y="851.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (11 samples, 0.45%)</title><rect x="942.8" y="883.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.8" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="947.7" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="950.7" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.08%)</title><rect x="948.2" y="899.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.2" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.29%)</title><rect x="949.1" y="899.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="952.1" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.21%)</title><rect x="952.5" y="899.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.5" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.21%)</title><rect x="952.5" y="883.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="955.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.16%)</title><rect x="953.0" y="867.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (4 samples, 0.16%)</title><rect x="953.0" y="851.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.0" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (234 samples, 9.63%)</title><rect x="955.0" y="915.0" width="113.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="958.0" y="926.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.04%)</title><rect x="958.9" y="899.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="961.9" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (225 samples, 9.26%)</title><rect x="959.3" y="899.0" width="109.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="962.3" y="910.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.08%)</title><rect x="962.3" y="883.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="965.3" y="894.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 1.36%)</title><rect x="963.2" y="883.0" width="16.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="966.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 1.36%)</title><rect x="963.2" y="867.0" width="16.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="966.2" y="878.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (26 samples, 1.07%)</title><rect x="963.2" y="851.0" width="12.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="966.2" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.08%)</title><rect x="963.2" y="835.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.2" y="846.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="964.2" y="835.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.2" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.12%)</title><rect x="964.7" y="835.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.7" y="846.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.16%)</title><rect x="966.1" y="835.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="969.1" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (15 samples, 0.62%)</title><rect x="968.1" y="835.0" width="7.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="971.1" y="846.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.12%)</title><rect x="969.1" y="819.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.1" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.16%)</title><rect x="970.5" y="819.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.5" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (6 samples, 0.25%)</title><rect x="972.5" y="819.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="975.5" y="830.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.04%)</title><rect x="975.4" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.4" y="846.0"></text>
</g>
<g>
<title>__libc_recv (3 samples, 0.12%)</title><rect x="975.9" y="851.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="978.9" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="977.3" y="851.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="980.3" y="862.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.12%)</title><rect x="977.8" y="851.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="980.8" y="862.0"></text>
</g>
<g>
<title>__libc_recv (182 samples, 7.49%)</title><rect x="979.3" y="883.0" width="88.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="982.3" y="894.0">__libc_recv</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.16%)</title><rect x="998.7" y="867.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1001.7" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (138 samples, 5.68%)</title><rect x="1000.6" y="867.0" width="67.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1003.6" y="878.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (138 samples, 5.68%)</title><rect x="1000.6" y="851.0" width="67.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1003.6" y="862.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_recvfrom (114 samples, 4.69%)</title><rect x="1012.3" y="835.0" width="55.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1015.3" y="846.0">__x64..</text>
</g>
<g>
<title>__sys_recvfrom (111 samples, 4.57%)</title><rect x="1013.7" y="819.0" width="53.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1016.7" y="830.0">__sys..</text>
</g>
<g>
<title>fput_many (1 samples, 0.04%)</title><rect x="1014.7" y="803.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1017.7" y="814.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.04%)</title><rect x="1015.2" y="803.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1018.2" y="814.0"></text>
</g>
<g>
<title>inet_recvmsg (76 samples, 3.13%)</title><rect x="1015.7" y="803.0" width="36.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1018.7" y="814.0">ine..</text>
</g>
<g>
<title>tcp_recvmsg (76 samples, 3.13%)</title><rect x="1015.7" y="787.0" width="36.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1018.7" y="798.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (10 samples, 0.41%)</title><rect x="1026.4" y="771.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1029.4" y="782.0"></text>
</g>
<g>
<title>skb_release_all (8 samples, 0.33%)</title><rect x="1026.4" y="755.0" width="3.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1029.4" y="766.0"></text>
</g>
<g>
<title>skb_release_head_state (8 samples, 0.33%)</title><rect x="1026.4" y="739.0" width="3.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1029.4" y="750.0"></text>
</g>
<g>
<title>sock_rfree (6 samples, 0.25%)</title><rect x="1027.3" y="723.0" width="2.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1030.3" y="734.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.08%)</title><rect x="1030.2" y="755.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1033.2" y="766.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.08%)</title><rect x="1031.2" y="771.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1034.2" y="782.0"></text>
</g>
<g>
<title>lock_sock_nested (12 samples, 0.49%)</title><rect x="1032.2" y="771.0" width="5.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1035.2" y="782.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.08%)</title><rect x="1032.7" y="755.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1035.7" y="766.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (9 samples, 0.37%)</title><rect x="1033.6" y="755.0" width="4.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1036.6" y="766.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.12%)</title><rect x="1038.0" y="771.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1041.0" y="782.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="1039.0" y="755.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1042.0" y="766.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (21 samples, 0.86%)</title><rect x="1039.5" y="771.0" width="10.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1042.5" y="782.0"></text>
</g>
<g>
<title>__skb_datagram_iter (20 samples, 0.82%)</title><rect x="1040.0" y="755.0" width="9.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1043.0" y="766.0"></text>
</g>
<g>
<title>_copy_to_iter (9 samples, 0.37%)</title><rect x="1040.0" y="739.0" width="4.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1043.0" y="750.0"></text>
</g>
<g>
<title>copyout (7 samples, 0.29%)</title><rect x="1040.9" y="723.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1043.9" y="734.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.25%)</title><rect x="1041.4" y="707.0" width="2.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1044.4" y="718.0"></text>
</g>
<g>
<title>simple_copy_to_iter (11 samples, 0.45%)</title><rect x="1044.3" y="739.0" width="5.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1047.3" y="750.0"></text>
</g>
<g>
<title>__check_object_size (11 samples, 0.45%)</title><rect x="1044.3" y="723.0" width="5.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1047.3" y="734.0"></text>
</g>
<g>
<title>__check_heap_object (3 samples, 0.12%)</title><rect x="1046.3" y="707.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1049.3" y="718.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.16%)</title><rect x="1047.7" y="707.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1050.7" y="718.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.04%)</title><rect x="1049.7" y="771.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1052.7" y="782.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.04%)</title><rect x="1049.7" y="755.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1052.7" y="766.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (4 samples, 0.16%)</title><rect x="1050.1" y="771.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1053.1" y="782.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.16%)</title><rect x="1050.1" y="755.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1053.1" y="766.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.08%)</title><rect x="1051.1" y="739.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1054.1" y="750.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.08%)</title><rect x="1051.1" y="723.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1054.1" y="734.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (1 samples, 0.04%)</title><rect x="1052.1" y="771.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1055.1" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (21 samples, 0.86%)</title><rect x="1052.6" y="803.0" width="10.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1055.6" y="814.0"></text>
</g>
<g>
<title>security_socket_recvmsg (21 samples, 0.86%)</title><rect x="1052.6" y="787.0" width="10.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1055.6" y="798.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (5 samples, 0.21%)</title><rect x="1053.1" y="771.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1056.1" y="782.0"></text>
</g>
<g>
<title>sock_has_perm (15 samples, 0.62%)</title><rect x="1055.5" y="771.0" width="7.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1058.5" y="782.0"></text>
</g>
<g>
<title>avc_has_perm (6 samples, 0.25%)</title><rect x="1059.9" y="755.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1062.9" y="766.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.41%)</title><rect x="1062.8" y="803.0" width="4.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1065.8" y="814.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.41%)</title><rect x="1062.8" y="787.0" width="4.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1065.8" y="798.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.29%)</title><rect x="1064.2" y="771.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1067.2" y="782.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.08%)</title><rect x="1067.6" y="883.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1070.6" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.16%)</title><rect x="1068.6" y="947.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.6" y="958.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.16%)</title><rect x="1068.6" y="931.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1071.6" y="942.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.16%)</title><rect x="1068.6" y="915.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1071.6" y="926.0"></text>
</g>
<g>
<title>[tid=22274] (25 samples, 1.03%)</title><rect x="1070.5" y="979.0" width="12.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1073.5" y="990.0"></text>
</g>
<g>
<title>start_thread (25 samples, 1.03%)</title><rect x="1070.5" y="963.0" width="12.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1073.5" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 1.03%)</title><rect x="1070.5" y="947.0" width="12.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1073.5" y="958.0"></text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 1.03%)</title><rect x="1070.5" y="931.0" width="12.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.5" y="942.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (3 samples, 0.12%)</title><rect x="1070.5" y="915.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.5" y="926.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (3 samples, 0.12%)</title><rect x="1070.5" y="899.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.5" y="910.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.12%)</title><rect x="1070.5" y="883.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1073.5" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 0.91%)</title><rect x="1072.0" y="915.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.0" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 0.58%)</title><rect x="1072.0" y="899.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.0" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 0.45%)</title><rect x="1072.0" y="883.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.0" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 0.33%)</title><rect x="1073.5" y="867.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.5" y="878.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.12%)</title><rect x="1077.3" y="883.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1080.3" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (1 samples, 0.04%)</title><rect x="1078.8" y="899.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.8" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long) (1 samples, 0.04%)</title><rect x="1078.8" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.8" y="894.0"></text>
</g>
<g>
<title>AgeTable::AgeTable(bool) (1 samples, 0.04%)</title><rect x="1078.8" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.8" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.25%)</title><rect x="1079.3" y="899.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.3" y="910.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.25%)</title><rect x="1079.3" y="883.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.3" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.25%)</title><rect x="1079.3" y="867.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.3" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.25%)</title><rect x="1079.3" y="851.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.3" y="862.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.25%)</title><rect x="1079.3" y="835.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.3" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 0.21%)</title><rect x="1079.3" y="819.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.3" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.12%)</title><rect x="1080.3" y="803.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.3" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1081.2" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.2" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.04%)</title><rect x="1081.7" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.7" y="830.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="1081.7" y="803.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.7" y="814.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1081.7" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.7" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="1082.2" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.2" y="910.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.04%)</title><rect x="1082.2" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.2" y="894.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1082.2" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.2" y="878.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.04%)</title><rect x="1082.2" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.2" y="862.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1082.2" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.2" y="846.0"></text>
</g>
<g>
<title>[tid=22276] (45 samples, 1.85%)</title><rect x="1082.7" y="979.0" width="21.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1085.7" y="990.0">[..</text>
</g>
<g>
<title>start_thread (45 samples, 1.85%)</title><rect x="1082.7" y="963.0" width="21.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1085.7" y="974.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (45 samples, 1.85%)</title><rect x="1082.7" y="947.0" width="21.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1085.7" y="958.0">t..</text>
</g>
<g>
<title>GangWorker::loop() (45 samples, 1.85%)</title><rect x="1082.7" y="931.0" width="21.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.7" y="942.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (27 samples, 1.11%)</title><rect x="1082.7" y="915.0" width="13.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.7" y="926.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (26 samples, 1.07%)</title><rect x="1082.7" y="899.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.7" y="910.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.394] (2 samples, 0.08%)</title><rect x="1083.7" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.7" y="894.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (11 samples, 0.45%)</title><rect x="1084.6" y="883.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.6" y="894.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.04%)</title><rect x="1085.1" y="867.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.1" y="878.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.04%)</title><rect x="1085.1" y="851.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1088.1" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1085.1" y="835.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1088.1" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1085.1" y="819.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1088.1" y="830.0"></text>
</g>
<g>
<title>__do_sys_getrusage (1 samples, 0.04%)</title><rect x="1085.1" y="803.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1088.1" y="814.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.04%)</title><rect x="1085.1" y="787.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1088.1" y="798.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.04%)</title><rect x="1085.1" y="771.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1088.1" y="782.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.04%)</title><rect x="1085.6" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.6" y="878.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (8 samples, 0.33%)</title><rect x="1086.1" y="867.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.1" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (6 samples, 0.25%)</title><rect x="1087.1" y="851.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.1" y="862.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.04%)</title><rect x="1089.5" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.5" y="846.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.04%)</title><rect x="1089.5" y="819.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1092.5" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1089.5" y="803.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1092.5" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1089.5" y="787.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1092.5" y="798.0"></text>
</g>
<g>
<title>__do_sys_getrusage (1 samples, 0.04%)</title><rect x="1089.5" y="771.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1092.5" y="782.0"></text>
</g>
<g>
<title>getrusage (1 samples, 0.04%)</title><rect x="1089.5" y="755.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1092.5" y="766.0"></text>
</g>
<g>
<title>task_cputime_adjusted (1 samples, 0.04%)</title><rect x="1089.5" y="739.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1092.5" y="750.0"></text>
</g>
<g>
<title>task_cputime (1 samples, 0.04%)</title><rect x="1089.5" y="723.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1092.5" y="734.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (11 samples, 0.45%)</title><rect x="1090.0" y="883.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.0" y="894.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (11 samples, 0.45%)</title><rect x="1090.0" y="867.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.0" y="878.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.04%)</title><rect x="1095.3" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.3" y="910.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (2 samples, 0.08%)</title><rect x="1095.8" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.8" y="926.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1096.8" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.8" y="926.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.04%)</title><rect x="1096.8" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.8" y="910.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1096.8" y="883.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.8" y="894.0"></text>
</g>
<g>
<title>G1CMBitMap::clear_range(MemRegion) (1 samples, 0.04%)</title><rect x="1096.8" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.8" y="878.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.04%)</title><rect x="1096.8" y="851.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1099.8" y="862.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (15 samples, 0.62%)</title><rect x="1097.3" y="915.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.3" y="926.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (15 samples, 0.62%)</title><rect x="1097.3" y="899.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.3" y="910.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (14 samples, 0.58%)</title><rect x="1097.3" y="883.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.3" y="894.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.04%)</title><rect x="1101.1" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.1" y="878.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.04%)</title><rect x="1101.6" y="867.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.6" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.08%)</title><rect x="1102.1" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.1" y="878.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.04%)</title><rect x="1102.6" y="851.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.6" y="862.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1103.1" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.1" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1103.6" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.6" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1104.0" y="883.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.0" y="894.0"></text>
</g>
<g>
<title>[tid=22279] (1 samples, 0.04%)</title><rect x="1104.5" y="979.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1107.5" y="990.0"></text>
</g>
<g>
<title>__GI___clock_gettime (1 samples, 0.04%)</title><rect x="1104.5" y="963.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1107.5" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1104.5" y="947.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1107.5" y="958.0"></text>
</g>
<g>
<title>[tid=22283] (100 samples, 4.12%)</title><rect x="1105.0" y="979.0" width="48.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1108.0" y="990.0">[tid..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1105.0" y="963.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1108.0" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.04%)</title><rect x="1105.0" y="947.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1108.0" y="958.0"></text>
</g>
<g>
<title>start_thread (99 samples, 4.07%)</title><rect x="1105.5" y="963.0" width="48.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1108.5" y="974.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (99 samples, 4.07%)</title><rect x="1105.5" y="947.0" width="48.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1108.5" y="958.0">thre..</text>
</g>
<g>
<title>JavaThread::run() (99 samples, 4.07%)</title><rect x="1105.5" y="931.0" width="48.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.5" y="942.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (99 samples, 4.07%)</title><rect x="1105.5" y="915.0" width="48.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.5" y="926.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (99 samples, 4.07%)</title><rect x="1105.5" y="899.0" width="48.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.5" y="910.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (99 samples, 4.07%)</title><rect x="1105.5" y="883.0" width="48.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.5" y="894.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (99 samples, 4.07%)</title><rect x="1105.5" y="867.0" width="48.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.5" y="878.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (99 samples, 4.07%)</title><rect x="1105.5" y="851.0" width="48.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.5" y="862.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 1.89%)</title><rect x="1105.5" y="835.0" width="22.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.5" y="846.0">C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.08%)</title><rect x="1105.5" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.5" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.04%)</title><rect x="1105.5" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.5" y="814.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.04%)</title><rect x="1105.5" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.5" y="798.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.04%)</title><rect x="1106.0" y="803.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.0" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.04%)</title><rect x="1106.5" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.5" y="830.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.04%)</title><rect x="1106.5" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.5" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="1106.5" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.5" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1106.5" y="771.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.5" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.04%)</title><rect x="1107.0" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.0" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.04%)</title><rect x="1107.0" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.0" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.04%)</title><rect x="1107.0" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.0" y="798.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.04%)</title><rect x="1107.4" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.4" y="830.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.04%)</title><rect x="1107.4" y="803.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.4" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.33%)</title><rect x="1107.9" y="819.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.33%)</title><rect x="1107.9" y="803.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.9" y="814.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.04%)</title><rect x="1107.9" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.9" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.04%)</title><rect x="1108.4" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.04%)</title><rect x="1108.4" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1108.4" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.04%)</title><rect x="1108.9" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.9" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.08%)</title><rect x="1109.4" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.4" y="798.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.08%)</title><rect x="1109.4" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.4" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.12%)</title><rect x="1110.4" y="787.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.4" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="1110.8" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.8" y="782.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.04%)</title><rect x="1111.3" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 1.36%)</title><rect x="1111.8" y="819.0" width="16.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.8" y="830.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.04%)</title><rect x="1111.8" y="803.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.12%)</title><rect x="1112.3" y="803.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.3" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1112.3" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.3" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.08%)</title><rect x="1112.8" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.8" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="1113.3" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.21%)</title><rect x="1113.8" y="803.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.8" y="814.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.04%)</title><rect x="1115.7" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.7" y="798.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.04%)</title><rect x="1115.7" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.49%)</title><rect x="1116.2" y="803.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.08%)</title><rect x="1116.2" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.29%)</title><rect x="1117.2" y="787.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.2" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.08%)</title><rect x="1119.6" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.08%)</title><rect x="1120.6" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.6" y="798.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.08%)</title><rect x="1120.6" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="1121.5" y="787.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.04%)</title><rect x="1122.0" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.08%)</title><rect x="1122.5" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.04%)</title><rect x="1123.5" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.21%)</title><rect x="1124.0" y="803.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.08%)</title><rect x="1125.4" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.4" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.04%)</title><rect x="1126.4" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.4" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.04%)</title><rect x="1126.9" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.9" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="1126.9" y="787.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.9" y="798.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.04%)</title><rect x="1126.9" y="771.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.9" y="782.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="1127.4" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 1.98%)</title><rect x="1127.8" y="835.0" width="23.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.8" y="846.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.08%)</title><rect x="1127.8" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.08%)</title><rect x="1127.8" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (2 samples, 0.08%)</title><rect x="1127.8" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.8" y="798.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.237] (1 samples, 0.04%)</title><rect x="1127.8" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.8" y="782.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.04%)</title><rect x="1127.8" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.8" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1127.8" y="739.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.8" y="750.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1127.8" y="723.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="691.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.3" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="643.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="563.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="547.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="515.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="499.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="483.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="467.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="1128.3" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="462.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.237] (1 samples, 0.04%)</title><rect x="1128.3" y="435.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.3" y="446.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.04%)</title><rect x="1128.3" y="419.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="430.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.04%)</title><rect x="1128.3" y="403.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="414.0"></text>
</g>
<g>
<title>LShiftLNode::Opcode() const (1 samples, 0.04%)</title><rect x="1128.8" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (36 samples, 1.48%)</title><rect x="1129.3" y="819.0" width="17.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.3" y="830.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.04%)</title><rect x="1129.3" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.08%)</title><rect x="1129.8" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (28 samples, 1.15%)</title><rect x="1130.8" y="803.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (26 samples, 1.07%)</title><rect x="1131.7" y="787.0" width="12.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (25 samples, 1.03%)</title><rect x="1131.7" y="771.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.08%)</title><rect x="1132.2" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (22 samples, 0.91%)</title><rect x="1133.2" y="755.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="766.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.04%)</title><rect x="1143.9" y="771.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1146.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.04%)</title><rect x="1144.4" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.04%)</title><rect x="1144.8" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.04%)</title><rect x="1144.8" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1144.8" y="771.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1144.8" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.08%)</title><rect x="1145.3" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.3" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.08%)</title><rect x="1145.3" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.3" y="798.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1145.3" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.3" y="782.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1145.3" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.3" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.04%)</title><rect x="1145.8" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.8" y="782.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.04%)</title><rect x="1146.3" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.3" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.29%)</title><rect x="1146.8" y="819.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1146.8" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.8" y="814.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1146.8" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.8" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.25%)</title><rect x="1147.3" y="803.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.3" y="814.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.04%)</title><rect x="1147.8" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.8" y="798.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.08%)</title><rect x="1148.2" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="798.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.08%)</title><rect x="1148.2" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.2" y="782.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.04%)</title><rect x="1149.2" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.2" y="798.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.04%)</title><rect x="1149.2" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="782.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.04%)</title><rect x="1149.7" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.7" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.04%)</title><rect x="1150.2" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.2" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="1150.2" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.2" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1150.2" y="787.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.2" y="798.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1150.2" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.2" y="782.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1150.7" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.7" y="830.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1150.7" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.7" y="814.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1150.7" y="787.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.7" y="798.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.08%)</title><rect x="1151.2" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.2" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.08%)</title><rect x="1151.2" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.2" y="830.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1151.2" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="814.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.04%)</title><rect x="1151.6" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1152.1" y="835.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1152.1" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1152.1" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1152.1" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1152.1" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1152.1" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="1152.1" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="1152.1" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="1152.1" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="1152.1" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="1152.1" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="1152.1" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.1" y="643.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.1" y="627.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.1" y="611.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.1" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.1" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.1" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.1" y="547.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.1" y="531.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.1" y="515.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.1" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.1" y="483.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.1" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.1" y="451.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.1" y="435.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.1" y="419.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.1" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.1" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.04%)</title><rect x="1152.1" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.1" y="382.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.04%)</title><rect x="1152.1" y="355.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="366.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.04%)</title><rect x="1152.1" y="339.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.6" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.6" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.6" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.6" y="595.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.6" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.6" y="563.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.6" y="547.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.6" y="531.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.6" y="515.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.6" y="499.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.6" y="483.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.6" y="467.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.6" y="451.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.6" y="435.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.6" y="419.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.6" y="403.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.6" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.6" y="371.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.6" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.6" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.6" y="323.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.6" y="307.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.6" y="291.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.6" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.6" y="259.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1152.6" y="243.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1152.6" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1152.6" y="211.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1152.6" y="195.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1152.6" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1152.6" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.6" y="174.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1152.6" y="147.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.6" y="158.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1152.6" y="131.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.6" y="142.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1152.6" y="115.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.6" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1152.6" y="99.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1152.6" y="83.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.04%)</title><rect x="1152.6" y="67.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.6" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1152.6" y="51.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="62.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.04%)</title><rect x="1152.6" y="35.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1153.1" y="835.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="846.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1153.1" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="830.0"></text>
</g>
<g>
<title>[tid=22284] (2 samples, 0.08%)</title><rect x="1153.6" y="979.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1156.6" y="990.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.08%)</title><rect x="1153.6" y="963.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1156.6" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.08%)</title><rect x="1153.6" y="947.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1156.6" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.08%)</title><rect x="1153.6" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.08%)</title><rect x="1153.6" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="926.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.08%)</title><rect x="1153.6" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="910.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.08%)</title><rect x="1153.6" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.08%)</title><rect x="1153.6" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.08%)</title><rect x="1153.6" y="851.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.08%)</title><rect x="1153.6" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.04%)</title><rect x="1153.6" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="830.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.04%)</title><rect x="1153.6" y="803.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="814.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.04%)</title><rect x="1153.6" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="798.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.04%)</title><rect x="1153.6" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.6" y="782.0"></text>
</g>
<g>
<title>ProfileInvoke::input_values_do(ValueVisitor*) (1 samples, 0.04%)</title><rect x="1153.6" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.6" y="766.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.04%)</title><rect x="1154.1" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.1" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="1154.1" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="814.0"></text>
</g>
<g>
<title>[tid=22287] (3 samples, 0.12%)</title><rect x="1154.6" y="979.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1157.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.08%)</title><rect x="1154.6" y="963.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1157.6" y="974.0"></text>
</g>
<g>
<title>__GI___clock_gettime (1 samples, 0.04%)</title><rect x="1154.6" y="947.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1157.6" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.04%)</title><rect x="1155.0" y="947.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1158.0" y="958.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.04%)</title><rect x="1155.5" y="963.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1158.5" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1155.5" y="947.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1158.5" y="958.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.04%)</title><rect x="1155.5" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.5" y="942.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.04%)</title><rect x="1155.5" y="915.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.5" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1155.5" y="899.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1155.5" y="883.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.04%)</title><rect x="1155.5" y="867.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1158.5" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1155.5" y="851.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1158.5" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1155.5" y="835.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1158.5" y="846.0"></text>
</g>
<g>
<title>[tid=22329] (23 samples, 0.95%)</title><rect x="1156.0" y="979.0" width="11.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1159.0" y="990.0"></text>
</g>
<g>
<title>start_thread (23 samples, 0.95%)</title><rect x="1156.0" y="963.0" width="11.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1159.0" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (23 samples, 0.95%)</title><rect x="1156.0" y="947.0" width="11.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1159.0" y="958.0"></text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 0.95%)</title><rect x="1156.0" y="931.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="942.0"></text>
</g>
<g>
<title>G1CMRefProcTaskProxy::work(unsigned int) (1 samples, 0.04%)</title><rect x="1156.0" y="915.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="926.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.04%)</title><rect x="1156.0" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="910.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.04%)</title><rect x="1156.0" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="894.0"></text>
</g>
<g>
<title>G1CMDrainMarkingStackClosure::do_void() (1 samples, 0.04%)</title><rect x="1156.0" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="878.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.04%)</title><rect x="1156.0" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="862.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.04%)</title><rect x="1156.0" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="846.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1156.5" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.5" y="926.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.04%)</title><rect x="1156.5" y="899.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.5" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1156.5" y="883.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1159.5" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 0.86%)</title><rect x="1157.0" y="915.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.0" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 0.49%)</title><rect x="1157.0" y="899.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.0" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 0.41%)</title><rect x="1157.0" y="883.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.0" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 0.29%)</title><rect x="1158.4" y="867.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.4" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.08%)</title><rect x="1160.9" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="862.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.08%)</title><rect x="1161.8" y="883.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1164.8" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (9 samples, 0.37%)</title><rect x="1162.8" y="899.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="910.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (9 samples, 0.37%)</title><rect x="1162.8" y="883.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (9 samples, 0.37%)</title><rect x="1162.8" y="867.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (9 samples, 0.37%)</title><rect x="1162.8" y="851.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="862.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.37%)</title><rect x="1162.8" y="835.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 0.25%)</title><rect x="1162.8" y="819.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.16%)</title><rect x="1163.8" y="803.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.8" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1165.2" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (3 samples, 0.12%)</title><rect x="1165.7" y="819.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.7" y="830.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.12%)</title><rect x="1165.7" y="803.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.08%)</title><rect x="1165.7" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.7" y="798.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1166.7" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.7" y="798.0"></text>
</g>
<g>
<title>[tid=22330] (23 samples, 0.95%)</title><rect x="1167.2" y="979.0" width="11.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1170.2" y="990.0"></text>
</g>
<g>
<title>start_thread (23 samples, 0.95%)</title><rect x="1167.2" y="963.0" width="11.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1170.2" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (23 samples, 0.95%)</title><rect x="1167.2" y="947.0" width="11.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1170.2" y="958.0"></text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 0.95%)</title><rect x="1167.2" y="931.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="942.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1167.2" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="926.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.04%)</title><rect x="1167.2" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.2" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="1167.2" y="883.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1170.2" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 0.86%)</title><rect x="1167.7" y="915.0" width="10.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (17 samples, 0.70%)</title><rect x="1167.7" y="899.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 0.53%)</title><rect x="1168.1" y="883.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.1" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.16%)</title><rect x="1172.5" y="867.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="878.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.12%)</title><rect x="1174.5" y="883.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1177.5" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.16%)</title><rect x="1175.9" y="899.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="910.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.16%)</title><rect x="1175.9" y="883.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.16%)</title><rect x="1175.9" y="867.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 0.16%)</title><rect x="1175.9" y="851.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="862.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.16%)</title><rect x="1175.9" y="835.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.16%)</title><rect x="1175.9" y="819.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.08%)</title><rect x="1176.9" y="803.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1177.4" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>G1UpdateRemSetTrackingBeforeRebuildTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1177.9" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="926.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.04%)</title><rect x="1177.9" y="899.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1177.9" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_before_rebuild(HeapRegion*, unsigned long) (1 samples, 0.04%)</title><rect x="1177.9" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="878.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.04%)</title><rect x="1177.9" y="851.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::num_par_ids() (1 samples, 0.04%)</title><rect x="1177.9" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>[tid=22331] (24 samples, 0.99%)</title><rect x="1178.3" y="979.0" width="11.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1181.3" y="990.0"></text>
</g>
<g>
<title>start_thread (24 samples, 0.99%)</title><rect x="1178.3" y="963.0" width="11.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 0.99%)</title><rect x="1178.3" y="947.0" width="11.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 0.99%)</title><rect x="1178.3" y="931.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (23 samples, 0.95%)</title><rect x="1178.3" y="915.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (17 samples, 0.70%)</title><rect x="1178.3" y="899.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 0.45%)</title><rect x="1178.8" y="883.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (11 samples, 0.45%)</title><rect x="1178.8" y="867.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.16%)</title><rect x="1182.2" y="851.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.04%)</title><rect x="1183.7" y="835.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="846.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.21%)</title><rect x="1184.2" y="883.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1187.2" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.25%)</title><rect x="1186.6" y="899.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="910.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.25%)</title><rect x="1186.6" y="883.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.25%)</title><rect x="1186.6" y="867.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.25%)</title><rect x="1186.6" y="851.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="862.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.25%)</title><rect x="1186.6" y="835.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.12%)</title><rect x="1186.6" y="819.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="1187.6" y="803.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="814.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (3 samples, 0.12%)</title><rect x="1188.1" y="819.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.12%)</title><rect x="1188.1" y="803.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.04%)</title><rect x="1188.1" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.08%)</title><rect x="1188.5" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="798.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1189.5" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="926.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (1 samples, 0.04%)</title><rect x="1189.5" y="899.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.5" y="910.0"></text>
</g>
</g>
</svg>
