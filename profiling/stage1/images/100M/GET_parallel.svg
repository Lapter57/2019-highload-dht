<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (9,105 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=29053] (2,157 samples, 23.69%)</title><rect x="10.0" y="755.0" width="279.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0">[NIO Selector #0 tid=29053]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (17 samples, 0.19%)</title><rect x="10.1" y="739.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.1" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (16 samples, 0.18%)</title><rect x="10.3" y="723.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (16 samples, 0.18%)</title><rect x="10.3" y="707.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.3" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (14 samples, 0.15%)</title><rect x="10.3" y="691.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.3" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="10.3" y="675.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (10 samples, 0.11%)</title><rect x="10.6" y="675.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.6" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (7 samples, 0.08%)</title><rect x="10.6" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.6" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (7 samples, 0.08%)</title><rect x="10.6" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.6" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (3 samples, 0.03%)</title><rect x="10.9" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (3 samples, 0.03%)</title><rect x="10.9" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.9" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.02%)</title><rect x="11.6" y="659.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.6" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="12.1" y="691.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.1" y="702.0"></text>
</g>
<g>
<title>[unknown_Java] (17 samples, 0.19%)</title><rect x="12.5" y="739.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="15.5" y="750.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,119 samples, 23.27%)</title><rect x="14.9" y="739.0" width="274.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (82 samples, 0.90%)</title><rect x="15.2" y="723.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.2" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (79 samples, 0.87%)</title><rect x="15.6" y="707.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.6" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (67 samples, 0.74%)</title><rect x="16.1" y="691.0" width="8.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.1" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (51 samples, 0.56%)</title><rect x="18.2" y="675.0" width="6.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="21.2" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (51 samples, 0.56%)</title><rect x="18.2" y="659.0" width="6.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="21.2" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (44 samples, 0.48%)</title><rect x="19.1" y="643.0" width="5.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="22.1" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (42 samples, 0.46%)</title><rect x="19.3" y="627.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="22.3" y="638.0"></text>
</g>
<g>
<title>ep_poll (40 samples, 0.44%)</title><rect x="19.5" y="611.0" width="5.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="22.5" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (26 samples, 0.29%)</title><rect x="19.7" y="595.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="22.7" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (15 samples, 0.16%)</title><rect x="20.2" y="579.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="23.2" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (13 samples, 0.14%)</title><rect x="20.5" y="563.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="23.5" y="574.0"></text>
</g>
<g>
<title>sock_poll (13 samples, 0.14%)</title><rect x="20.5" y="547.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="23.5" y="558.0"></text>
</g>
<g>
<title>tcp_poll (9 samples, 0.10%)</title><rect x="21.0" y="531.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="24.0" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.04%)</title><rect x="21.7" y="515.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="24.7" y="526.0"></text>
</g>
<g>
<title>mutex_lock (7 samples, 0.08%)</title><rect x="22.2" y="579.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="25.2" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (12 samples, 0.13%)</title><rect x="23.1" y="595.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="26.1" y="606.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.12%)</title><rect x="23.2" y="579.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="26.2" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (9 samples, 0.10%)</title><rect x="23.5" y="563.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="26.5" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (9 samples, 0.10%)</title><rect x="23.5" y="547.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="26.5" y="558.0"></text>
</g>
<g>
<title>__GI___clock_gettime (2 samples, 0.02%)</title><rect x="25.2" y="691.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="28.2" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.02%)</title><rect x="25.2" y="675.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="28.2" y="686.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.02%)</title><rect x="25.4" y="691.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="28.4" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,035 samples, 22.35%)</title><rect x="25.8" y="723.0" width="263.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.8" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,035 samples, 22.35%)</title><rect x="25.8" y="707.0" width="263.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,939 samples, 21.30%)</title><rect x="25.8" y="691.0" width="251.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="702.0">one/nio/http/HttpSession.processH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,913 samples, 21.01%)</title><rect x="26.7" y="675.0" width="247.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.7" y="686.0">one/nio/http/HttpSession.handlePa..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,913 samples, 21.01%)</title><rect x="26.7" y="659.0" width="247.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.7" y="670.0">one/nio/http/HttpServer.handleReq..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,913 samples, 21.01%)</title><rect x="26.7" y="643.0" width="247.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.7" y="654.0">RequestHandler1_entity.handleRequ..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (402 samples, 4.42%)</title><rect x="26.7" y="627.0" width="52.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.7" y="638.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.05%)</title><rect x="27.2" y="611.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.2" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="27.4" y="595.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="30.4" y="606.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="27.5" y="579.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (392 samples, 4.31%)</title><rect x="27.9" y="611.0" width="50.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.9" y="622.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.08%)</title><rect x="27.9" y="595.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.08%)</title><rect x="27.9" y="579.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.9" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.07%)</title><rect x="27.9" y="563.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.9" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="28.4" y="547.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="31.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (385 samples, 4.23%)</title><rect x="28.8" y="595.0" width="49.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.8" y="606.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (385 samples, 4.23%)</title><rect x="28.8" y="579.0" width="49.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.8" y="590.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (383 samples, 4.21%)</title><rect x="29.1" y="563.0" width="49.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.1" y="574.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (378 samples, 4.15%)</title><rect x="29.7" y="547.0" width="49.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.7" y="558.0">one/..</text>
</g>
<g>
<title>.annobin_send.c (365 samples, 4.01%)</title><rect x="30.3" y="531.0" width="47.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="33.3" y="542.0">.ann..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (349 samples, 3.83%)</title><rect x="32.4" y="515.0" width="45.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="35.4" y="526.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (349 samples, 3.83%)</title><rect x="32.4" y="499.0" width="45.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="35.4" y="510.0">do_s..</text>
</g>
<g>
<title>__x64_sys_sendto (338 samples, 3.71%)</title><rect x="33.3" y="483.0" width="43.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="36.3" y="494.0">__x6..</text>
</g>
<g>
<title>__sys_sendto (338 samples, 3.71%)</title><rect x="33.3" y="467.0" width="43.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="36.3" y="478.0">__sy..</text>
</g>
<g>
<title>sock_sendmsg (331 samples, 3.64%)</title><rect x="33.5" y="451.0" width="42.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="36.5" y="462.0">sock..</text>
</g>
<g>
<title>security_socket_sendmsg (3 samples, 0.03%)</title><rect x="33.6" y="435.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="36.6" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (3 samples, 0.03%)</title><rect x="33.6" y="419.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="36.6" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg (327 samples, 3.59%)</title><rect x="34.0" y="435.0" width="42.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="37.0" y="446.0">tcp_..</text>
</g>
<g>
<title>tcp_sendmsg_locked (326 samples, 3.58%)</title><rect x="34.1" y="419.0" width="42.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="37.1" y="430.0">tcp_..</text>
</g>
<g>
<title>__tcp_push_pending_frames (296 samples, 3.25%)</title><rect x="34.9" y="403.0" width="38.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="37.9" y="414.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (296 samples, 3.25%)</title><rect x="34.9" y="387.0" width="38.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="37.9" y="398.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (291 samples, 3.20%)</title><rect x="34.9" y="371.0" width="37.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="37.9" y="382.0">__t..</text>
</g>
<g>
<title>__ip_queue_xmit (275 samples, 3.02%)</title><rect x="35.9" y="355.0" width="35.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="38.9" y="366.0">__i..</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.02%)</title><rect x="36.3" y="339.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="39.3" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.02%)</title><rect x="36.3" y="323.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="39.3" y="334.0"></text>
</g>
<g>
<title>ip_local_out (54 samples, 0.59%)</title><rect x="36.6" y="339.0" width="7.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="39.6" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (54 samples, 0.59%)</title><rect x="36.6" y="323.0" width="7.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="39.6" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (53 samples, 0.58%)</title><rect x="36.7" y="307.0" width="6.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="39.7" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (11 samples, 0.12%)</title><rect x="36.7" y="291.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="39.7" y="302.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.02%)</title><rect x="37.9" y="275.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="40.9" y="286.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (3 samples, 0.03%)</title><rect x="38.1" y="291.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="41.1" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (4 samples, 0.04%)</title><rect x="38.5" y="291.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="41.5" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (4 samples, 0.04%)</title><rect x="38.5" y="275.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="41.5" y="286.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (2 samples, 0.02%)</title><rect x="39.3" y="291.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="42.3" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (2 samples, 0.02%)</title><rect x="39.5" y="291.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="42.5" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (23 samples, 0.25%)</title><rect x="39.8" y="291.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="42.8" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (6 samples, 0.07%)</title><rect x="40.3" y="275.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="43.3" y="286.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (2 samples, 0.02%)</title><rect x="41.1" y="275.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="44.1" y="286.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (2 samples, 0.02%)</title><rect x="41.4" y="275.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="44.4" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (8 samples, 0.09%)</title><rect x="41.6" y="275.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="44.6" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (2 samples, 0.02%)</title><rect x="42.8" y="291.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="45.8" y="302.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.02%)</title><rect x="42.8" y="275.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="45.8" y="286.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4 samples, 0.04%)</title><rect x="43.0" y="291.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="46.0" y="302.0"></text>
</g>
<g>
<title>netlbl_enabled (3 samples, 0.03%)</title><rect x="43.2" y="275.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="46.2" y="286.0"></text>
</g>
<g>
<title>ip_output (216 samples, 2.37%)</title><rect x="43.6" y="339.0" width="28.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="46.6" y="350.0">i..</text>
</g>
<g>
<title>ip_finish_output2 (202 samples, 2.22%)</title><rect x="43.6" y="323.0" width="26.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="46.6" y="334.0">i..</text>
</g>
<g>
<title>__dev_queue_xmit (8 samples, 0.09%)</title><rect x="44.1" y="307.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="47.1" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (7 samples, 0.08%)</title><rect x="44.2" y="291.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="47.2" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (6 samples, 0.07%)</title><rect x="44.3" y="275.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="47.3" y="286.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.04%)</title><rect x="44.6" y="259.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="47.6" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.04%)</title><rect x="44.6" y="243.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="47.6" y="254.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.02%)</title><rect x="44.6" y="227.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="47.6" y="238.0"></text>
</g>
<g>
<title>ktime_get_with_offset (2 samples, 0.02%)</title><rect x="44.9" y="227.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="47.9" y="238.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (190 samples, 2.09%)</title><rect x="45.1" y="307.0" width="24.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="48.1" y="318.0">_..</text>
</g>
<g>
<title>do_softirq.part.0 (190 samples, 2.09%)</title><rect x="45.1" y="291.0" width="24.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="48.1" y="302.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (189 samples, 2.08%)</title><rect x="45.3" y="275.0" width="24.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="48.3" y="286.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (189 samples, 2.08%)</title><rect x="45.3" y="259.0" width="24.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="48.3" y="270.0">_..</text>
</g>
<g>
<title>net_rx_action (184 samples, 2.02%)</title><rect x="45.9" y="243.0" width="23.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="48.9" y="254.0">n..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.02%)</title><rect x="46.3" y="227.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="49.3" y="238.0"></text>
</g>
<g>
<title>process_backlog (178 samples, 1.95%)</title><rect x="46.7" y="227.0" width="23.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="49.7" y="238.0">p..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (175 samples, 1.92%)</title><rect x="47.1" y="211.0" width="22.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="50.1" y="222.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_core (5 samples, 0.05%)</title><rect x="47.2" y="195.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="50.2" y="206.0"></text>
</g>
<g>
<title>ip_rcv (169 samples, 1.86%)</title><rect x="47.8" y="195.0" width="21.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="50.8" y="206.0">i..</text>
</g>
<g>
<title>ip_local_deliver (132 samples, 1.45%)</title><rect x="47.8" y="179.0" width="17.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="50.8" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (114 samples, 1.25%)</title><rect x="48.1" y="163.0" width="14.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="51.1" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (114 samples, 1.25%)</title><rect x="48.1" y="147.0" width="14.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="51.1" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (108 samples, 1.19%)</title><rect x="48.9" y="131.0" width="14.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="51.9" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (6 samples, 0.07%)</title><rect x="49.3" y="115.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="52.3" y="126.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.02%)</title><rect x="50.0" y="115.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="53.0" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (4 samples, 0.04%)</title><rect x="50.3" y="115.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="53.3" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.03%)</title><rect x="50.4" y="99.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="53.4" y="110.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (3 samples, 0.03%)</title><rect x="50.4" y="83.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="53.4" y="94.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (93 samples, 1.02%)</title><rect x="50.8" y="115.0" width="12.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="53.8" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (93 samples, 1.02%)</title><rect x="50.8" y="99.0" width="12.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="53.8" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.04%)</title><rect x="50.8" y="83.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="53.8" y="94.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.04%)</title><rect x="50.8" y="67.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="53.8" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="51.1" y="51.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="54.1" y="62.0"></text>
</g>
<g>
<title>tcp_ack (30 samples, 0.33%)</title><rect x="51.3" y="83.0" width="3.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="54.3" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.07%)</title><rect x="53.3" y="67.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="56.3" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.02%)</title><rect x="53.3" y="51.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="56.3" y="62.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.02%)</title><rect x="53.5" y="51.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="56.5" y="62.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.02%)</title><rect x="53.8" y="51.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="56.8" y="62.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.02%)</title><rect x="54.1" y="67.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="57.1" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.02%)</title><rect x="54.3" y="67.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="57.3" y="78.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.02%)</title><rect x="54.6" y="67.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="57.6" y="78.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.02%)</title><rect x="54.8" y="67.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="57.8" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.02%)</title><rect x="55.2" y="83.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="58.2" y="94.0"></text>
</g>
<g>
<title>tcp_data_queue (56 samples, 0.62%)</title><rect x="55.5" y="83.0" width="7.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="58.5" y="94.0"></text>
</g>
<g>
<title>dst_release (2 samples, 0.02%)</title><rect x="55.6" y="67.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="58.6" y="78.0"></text>
</g>
<g>
<title>sock_def_readable (52 samples, 0.57%)</title><rect x="55.9" y="67.0" width="6.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="58.9" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (47 samples, 0.52%)</title><rect x="56.4" y="51.0" width="6.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="59.4" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (47 samples, 0.52%)</title><rect x="56.4" y="35.0" width="6.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="59.4" y="46.0"></text>
</g>
<g>
<title>nf_hook_slow (16 samples, 0.18%)</title><rect x="62.9" y="163.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="65.9" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (13 samples, 0.14%)</title><rect x="62.9" y="147.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="65.9" y="158.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (2 samples, 0.02%)</title><rect x="64.3" y="131.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="67.3" y="142.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.03%)</title><rect x="65.0" y="179.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="68.0" y="190.0"></text>
</g>
<g>
<title>nf_hook_slow (34 samples, 0.37%)</title><rect x="65.3" y="179.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="68.3" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (20 samples, 0.22%)</title><rect x="66.0" y="163.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="69.0" y="174.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (2 samples, 0.02%)</title><rect x="68.6" y="163.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="71.6" y="174.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (2 samples, 0.02%)</title><rect x="68.8" y="163.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="71.8" y="174.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (2 samples, 0.02%)</title><rect x="69.1" y="163.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="72.1" y="174.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (3 samples, 0.03%)</title><rect x="69.4" y="163.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="72.4" y="174.0"></text>
</g>
<g>
<title>nf_hook_slow (14 samples, 0.15%)</title><rect x="69.7" y="323.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="72.7" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (7 samples, 0.08%)</title><rect x="69.9" y="307.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="72.9" y="318.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (2 samples, 0.02%)</title><rect x="70.8" y="307.0" width="0.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="73.8" y="318.0"></text>
</g>
<g>
<title>selinux_ip_postroute (3 samples, 0.03%)</title><rect x="71.2" y="307.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="74.2" y="318.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.03%)</title><rect x="71.6" y="355.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="74.6" y="366.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.02%)</title><rect x="72.1" y="355.0" width="0.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="75.1" y="366.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.02%)</title><rect x="72.7" y="371.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="75.7" y="382.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.02%)</title><rect x="72.7" y="355.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="75.7" y="366.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.02%)</title><rect x="72.7" y="339.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="75.7" y="350.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.02%)</title><rect x="73.2" y="403.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="76.2" y="414.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.02%)</title><rect x="73.2" y="387.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="76.2" y="398.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.02%)</title><rect x="73.2" y="371.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="76.2" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (13 samples, 0.14%)</title><rect x="73.5" y="403.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="76.5" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (13 samples, 0.14%)</title><rect x="73.5" y="387.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="76.5" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (7 samples, 0.08%)</title><rect x="73.6" y="371.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="76.6" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (7 samples, 0.08%)</title><rect x="73.6" y="355.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="76.6" y="366.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.03%)</title><rect x="74.0" y="339.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="77.0" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.04%)</title><rect x="74.5" y="371.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="77.5" y="382.0"></text>
</g>
<g>
<title>tcp_send_mss (6 samples, 0.07%)</title><rect x="75.4" y="403.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="78.4" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (5 samples, 0.05%)</title><rect x="75.6" y="387.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="78.6" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.05%)</title><rect x="75.6" y="371.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="78.6" y="382.0"></text>
</g>
<g>
<title>sockfd_lookup_light (6 samples, 0.07%)</title><rect x="76.4" y="451.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="79.4" y="462.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.05%)</title><rect x="76.5" y="435.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="79.5" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.04%)</title><rect x="77.1" y="483.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="80.1" y="494.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="77.3" y="467.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="80.3" y="478.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="77.4" y="451.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="80.4" y="462.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.02%)</title><rect x="77.4" y="435.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="80.4" y="446.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.09%)</title><rect x="77.7" y="531.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="80.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.09%)</title><rect x="77.7" y="515.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="80.7" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (7 samples, 0.08%)</title><rect x="77.7" y="499.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="80.7" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="78.0" y="483.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="81.0" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.03%)</title><rect x="78.2" y="467.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="81.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.05%)</title><rect x="78.8" y="627.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="78.9" y="611.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="78.9" y="595.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (1,506 samples, 16.54%)</title><rect x="79.5" y="627.0" width="195.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.5" y="638.0">ru/mail/polis/service/sha..</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.08%)</title><rect x="79.5" y="611.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.08%)</title><rect x="79.5" y="595.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.5" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.04%)</title><rect x="79.9" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.04%)</title><rect x="79.9" y="563.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.04%)</title><rect x="79.9" y="547.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="82.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.03%)</title><rect x="80.0" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.03%)</title><rect x="80.0" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="80.4" y="611.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="80.4" y="595.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.4" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="80.4" y="579.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="80.4" y="563.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.4" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="80.4" y="547.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="80.4" y="531.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.4" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="80.6" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="80.6" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.6" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="80.6" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.6" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="80.6" y="563.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="80.6" y="547.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="80.6" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.6" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="80.8" y="515.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,494 samples, 16.41%)</title><rect x="81.0" y="611.0" width="193.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.0" y="622.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (28 samples, 0.31%)</title><rect x="81.1" y="595.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.1" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (28 samples, 0.31%)</title><rect x="81.1" y="579.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (28 samples, 0.31%)</title><rect x="81.1" y="563.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (28 samples, 0.31%)</title><rect x="81.1" y="547.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (28 samples, 0.31%)</title><rect x="81.1" y="531.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (22 samples, 0.24%)</title><rect x="81.1" y="515.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.1" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (11 samples, 0.12%)</title><rect x="81.1" y="499.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.1" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (11 samples, 0.12%)</title><rect x="81.1" y="483.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.1" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (10 samples, 0.11%)</title><rect x="81.3" y="467.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.11%)</title><rect x="81.3" y="451.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.3" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.11%)</title><rect x="81.3" y="435.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (9 samples, 0.10%)</title><rect x="81.4" y="419.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (9 samples, 0.10%)</title><rect x="81.4" y="403.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.4" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (9 samples, 0.10%)</title><rect x="81.4" y="387.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.10%)</title><rect x="81.4" y="371.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.4" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (9 samples, 0.10%)</title><rect x="81.4" y="355.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.4" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.10%)</title><rect x="81.4" y="339.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.4" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (8 samples, 0.09%)</title><rect x="81.4" y="323.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.09%)</title><rect x="81.4" y="307.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="81.4" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="81.4" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.4" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="81.4" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (4 samples, 0.04%)</title><rect x="81.9" y="291.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="81.9" y="275.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="81.9" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.9" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="81.9" y="243.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="81.9" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="81.9" y="211.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.9" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (11 samples, 0.12%)</title><rect x="82.6" y="499.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (11 samples, 0.12%)</title><rect x="82.6" y="483.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (11 samples, 0.12%)</title><rect x="82.6" y="467.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (11 samples, 0.12%)</title><rect x="82.6" y="451.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.12%)</title><rect x="82.6" y="435.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.12%)</title><rect x="82.6" y="419.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.6" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4 samples, 0.04%)</title><rect x="82.6" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="82.6" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="82.6" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (4 samples, 0.04%)</title><rect x="82.6" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (2 samples, 0.02%)</title><rect x="82.8" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (7 samples, 0.08%)</title><rect x="83.1" y="403.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.08%)</title><rect x="83.1" y="387.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.1" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (7 samples, 0.08%)</title><rect x="83.1" y="371.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="83.1" y="355.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (7 samples, 0.08%)</title><rect x="83.1" y="339.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="83.1" y="323.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.1" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (7 samples, 0.08%)</title><rect x="83.1" y="307.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.1" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.08%)</title><rect x="83.1" y="291.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="83.1" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="83.1" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.1" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="83.1" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="86.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (5 samples, 0.05%)</title><rect x="83.4" y="275.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (5 samples, 0.05%)</title><rect x="83.4" y="259.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="83.4" y="243.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="86.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="83.4" y="227.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="83.4" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="83.4" y="195.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$56/1514133115.apply (6 samples, 0.07%)</title><rect x="84.0" y="515.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.07%)</title><rect x="84.0" y="499.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.0" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.07%)</title><rect x="84.0" y="483.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.07%)</title><rect x="84.0" y="467.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.07%)</title><rect x="84.0" y="451.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="84.0" y="435.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.0" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="84.1" y="419.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="84.1" y="403.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="84.1" y="387.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="87.1" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="84.1" y="371.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.1" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="84.3" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.3" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="84.5" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="84.5" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.5" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.02%)</title><rect x="84.5" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.5" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (9 samples, 0.10%)</title><rect x="84.8" y="595.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.8" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 0.02%)</title><rect x="84.8" y="579.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.8" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (7 samples, 0.08%)</title><rect x="85.0" y="579.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$62/1670576925.apply (6 samples, 0.07%)</title><rect x="85.2" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (6 samples, 0.07%)</title><rect x="85.2" y="547.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.03%)</title><rect x="85.2" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.2" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="85.2" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.2" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="85.2" y="499.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.2" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.2" y="483.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.2" y="467.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.2" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.2" y="451.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.2" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.2" y="419.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.2" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.2" y="403.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="85.3" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (3 samples, 0.03%)</title><rect x="85.6" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="85.6" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="85.6" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.6" y="483.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.6" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.6" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.6" y="451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.6" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.6" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.6" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="85.6" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,453 samples, 15.96%)</title><rect x="86.3" y="595.0" width="188.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.3" y="606.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (4 samples, 0.04%)</title><rect x="86.5" y="579.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (4 samples, 0.04%)</title><rect x="86.5" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.5" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="86.5" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,448 samples, 15.90%)</title><rect x="87.0" y="579.0" width="187.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.0" y="590.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (121 samples, 1.33%)</title><rect x="87.4" y="563.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (121 samples, 1.33%)</title><rect x="87.4" y="547.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.4" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (107 samples, 1.18%)</title><rect x="89.1" y="531.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="92.1" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (102 samples, 1.12%)</title><rect x="89.6" y="515.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.6" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.02%)</title><rect x="89.6" y="499.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (100 samples, 1.10%)</title><rect x="89.8" y="499.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="92.8" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (100 samples, 1.10%)</title><rect x="89.8" y="483.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (98 samples, 1.08%)</title><rect x="90.1" y="467.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.1" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (98 samples, 1.08%)</title><rect x="90.1" y="451.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.1" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (56 samples, 0.62%)</title><rect x="90.1" y="435.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.1" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (4 samples, 0.04%)</title><rect x="90.1" y="419.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.1" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.04%)</title><rect x="90.1" y="403.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.1" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.04%)</title><rect x="90.1" y="387.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="93.1" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (4 samples, 0.04%)</title><rect x="90.1" y="371.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.1" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (4 samples, 0.04%)</title><rect x="90.1" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.02%)</title><rect x="90.4" y="339.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (52 samples, 0.57%)</title><rect x="90.6" y="419.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (52 samples, 0.57%)</title><rect x="90.6" y="403.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (49 samples, 0.54%)</title><rect x="91.0" y="387.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (17 samples, 0.19%)</title><rect x="91.0" y="371.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.09%)</title><rect x="91.0" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.09%)</title><rect x="91.0" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.09%)</title><rect x="91.0" y="323.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="91.0" y="307.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="91.0" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="91.0" y="275.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="94.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="91.0" y="259.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="91.0" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.05%)</title><rect x="91.0" y="227.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.0" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="91.6" y="227.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (9 samples, 0.10%)</title><rect x="92.0" y="355.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.10%)</title><rect x="92.0" y="339.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="92.0" y="323.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="95.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="92.0" y="307.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="92.0" y="291.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="92.0" y="275.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="95.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="92.0" y="259.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.10%)</title><rect x="92.0" y="243.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.10%)</title><rect x="92.0" y="227.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (15 samples, 0.16%)</title><rect x="93.2" y="371.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.13%)</title><rect x="93.2" y="355.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.2" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.13%)</title><rect x="93.2" y="339.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (12 samples, 0.13%)</title><rect x="93.2" y="323.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="93.2" y="307.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="93.2" y="291.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="93.2" y="275.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="93.2" y="259.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="93.2" y="243.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.2" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (9 samples, 0.10%)</title><rect x="93.2" y="227.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.2" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="94.4" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.03%)</title><rect x="94.8" y="355.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="94.8" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="94.8" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.8" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="94.8" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="94.8" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="94.8" y="275.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.8" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="94.8" y="259.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="94.8" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.8" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="94.8" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.04%)</title><rect x="95.1" y="371.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="95.1" y="355.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="95.1" y="339.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="95.1" y="323.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="95.1" y="307.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="95.1" y="291.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="95.1" y="275.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.1" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="95.1" y="259.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.1" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="95.1" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.1" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="95.1" y="227.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.1" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="95.4" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="95.4" y="227.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (13 samples, 0.14%)</title><rect x="95.7" y="371.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.7" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.10%)</title><rect x="95.7" y="355.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.10%)</title><rect x="95.7" y="339.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.10%)</title><rect x="95.7" y="323.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="95.7" y="307.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.7" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="95.7" y="291.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="95.7" y="275.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="95.7" y="259.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.7" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="95.7" y="243.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.05%)</title><rect x="95.7" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.7" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="96.3" y="227.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="96.4" y="211.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.04%)</title><rect x="96.8" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="96.8" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="96.8" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.8" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="96.8" y="307.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="96.8" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="96.8" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.8" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="96.8" y="259.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="96.8" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.8" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="96.8" y="227.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="97.0" y="211.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.02%)</title><rect x="97.0" y="195.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (42 samples, 0.46%)</title><rect x="97.3" y="435.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (42 samples, 0.46%)</title><rect x="97.3" y="419.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.3" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (42 samples, 0.46%)</title><rect x="97.3" y="403.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.3" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (39 samples, 0.43%)</title><rect x="97.7" y="387.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (38 samples, 0.42%)</title><rect x="97.9" y="371.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (38 samples, 0.42%)</title><rect x="97.9" y="355.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (37 samples, 0.41%)</title><rect x="97.9" y="339.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="100.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (37 samples, 0.41%)</title><rect x="97.9" y="323.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.13%)</title><rect x="97.9" y="307.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.11%)</title><rect x="98.1" y="291.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="101.1" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.10%)</title><rect x="98.1" y="275.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.1" y="286.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="99.0" y="259.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="102.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (25 samples, 0.27%)</title><rect x="99.4" y="307.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (25 samples, 0.27%)</title><rect x="99.4" y="291.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.4" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (12 samples, 0.13%)</title><rect x="99.4" y="275.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (12 samples, 0.13%)</title><rect x="99.4" y="259.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (12 samples, 0.13%)</title><rect x="99.4" y="243.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (12 samples, 0.13%)</title><rect x="99.4" y="227.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.4" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="100.3" y="211.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="100.3" y="195.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="100.3" y="179.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.3" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="100.3" y="163.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.3" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (13 samples, 0.14%)</title><rect x="101.0" y="275.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (13 samples, 0.14%)</title><rect x="101.0" y="259.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.0" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="101.0" y="243.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.14%)</title><rect x="101.0" y="227.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="102.0" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.0" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="102.3" y="211.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.3" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (8 samples, 0.09%)</title><rect x="103.1" y="563.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.1" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (8 samples, 0.09%)</title><rect x="103.1" y="547.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.1" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (8 samples, 0.09%)</title><rect x="103.1" y="531.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.1" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (8 samples, 0.09%)</title><rect x="103.1" y="515.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.1" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (3 samples, 0.03%)</title><rect x="103.1" y="499.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="106.1" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="103.4" y="499.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (32 samples, 0.35%)</title><rect x="104.2" y="563.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (32 samples, 0.35%)</title><rect x="104.2" y="547.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.2" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (3 samples, 0.03%)</title><rect x="104.2" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.2" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (2 samples, 0.02%)</title><rect x="104.3" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="107.3" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.size (2 samples, 0.02%)</title><rect x="104.3" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.3" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28 samples, 0.31%)</title><rect x="104.6" y="531.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.6" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (10 samples, 0.11%)</title><rect x="105.0" y="515.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.0" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (10 samples, 0.11%)</title><rect x="105.0" y="499.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (9 samples, 0.10%)</title><rect x="105.1" y="483.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.1" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="105.3" y="467.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="105.3" y="451.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="108.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (7 samples, 0.08%)</title><rect x="105.4" y="435.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.08%)</title><rect x="105.4" y="419.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.4" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (7 samples, 0.08%)</title><rect x="105.4" y="403.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.4" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="105.5" y="387.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (6 samples, 0.07%)</title><rect x="105.5" y="371.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="105.5" y="355.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="108.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (6 samples, 0.07%)</title><rect x="105.5" y="339.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="108.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (6 samples, 0.07%)</title><rect x="105.5" y="323.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (5 samples, 0.05%)</title><rect x="105.6" y="307.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (5 samples, 0.05%)</title><rect x="105.6" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="108.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="105.6" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.6" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="105.6" y="259.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.6" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="105.6" y="243.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.6" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="105.6" y="227.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="108.6" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (15 samples, 0.16%)</title><rect x="106.3" y="515.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.3" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (15 samples, 0.16%)</title><rect x="106.3" y="499.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.3" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (15 samples, 0.16%)</title><rect x="106.3" y="483.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.3" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (15 samples, 0.16%)</title><rect x="106.3" y="467.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.14%)</title><rect x="106.6" y="451.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.14%)</title><rect x="106.6" y="435.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9 samples, 0.10%)</title><rect x="106.6" y="419.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (9 samples, 0.10%)</title><rect x="106.6" y="403.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (9 samples, 0.10%)</title><rect x="106.6" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (8 samples, 0.09%)</title><rect x="106.7" y="371.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.03%)</title><rect x="106.8" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="106.8" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="106.8" y="323.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="106.8" y="307.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="109.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="106.8" y="291.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="106.8" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.8" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="106.8" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="106.8" y="243.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.8" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="106.8" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.8" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="106.8" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="109.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (3 samples, 0.03%)</title><rect x="107.3" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="107.3" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="107.3" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="110.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="107.3" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="107.3" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.3" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="107.3" y="275.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="110.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="107.3" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="110.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="107.3" y="243.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.3" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="107.3" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="110.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="107.3" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (4 samples, 0.04%)</title><rect x="107.7" y="419.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="110.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.04%)</title><rect x="107.7" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.7" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (4 samples, 0.04%)</title><rect x="107.7" y="387.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="107.7" y="371.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (4 samples, 0.04%)</title><rect x="107.7" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="107.7" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (4 samples, 0.04%)</title><rect x="107.7" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.04%)</title><rect x="107.7" y="307.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="107.7" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="107.7" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.7" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="107.7" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (2 samples, 0.02%)</title><rect x="108.0" y="291.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="108.0" y="275.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="108.0" y="259.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.0" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="108.0" y="243.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.0" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="108.0" y="227.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.0" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="108.0" y="211.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (40 samples, 0.44%)</title><rect x="108.4" y="563.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.4" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (35 samples, 0.38%)</title><rect x="108.4" y="547.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.4" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (35 samples, 0.38%)</title><rect x="108.4" y="531.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.4" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (34 samples, 0.37%)</title><rect x="108.4" y="515.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.4" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (34 samples, 0.37%)</title><rect x="108.4" y="499.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.4" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (34 samples, 0.37%)</title><rect x="108.4" y="483.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.4" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (27 samples, 0.30%)</title><rect x="109.3" y="467.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="112.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.10%)</title><rect x="111.6" y="451.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.10%)</title><rect x="111.6" y="435.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.6" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.09%)</title><rect x="111.7" y="419.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="112.0" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.03%)</title><rect x="112.4" y="403.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.4" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (5 samples, 0.05%)</title><rect x="112.9" y="547.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.9" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (5 samples, 0.05%)</title><rect x="112.9" y="531.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.9" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (5 samples, 0.05%)</title><rect x="112.9" y="515.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.9" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (5 samples, 0.05%)</title><rect x="112.9" y="499.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.9" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (5 samples, 0.05%)</title><rect x="112.9" y="483.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="112.9" y="467.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="112.9" y="451.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.9" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.03%)</title><rect x="113.0" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (1,243 samples, 13.65%)</title><rect x="113.5" y="563.0" width="161.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="116.5" y="574.0">ru/mail/polis/dao/sha..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (1,242 samples, 13.64%)</title><rect x="113.7" y="547.0" width="160.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.7" y="558.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (1,227 samples, 13.48%)</title><rect x="115.6" y="531.0" width="159.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.6" y="542.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (222 samples, 2.44%)</title><rect x="118.0" y="515.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.0" y="526.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (172 samples, 1.89%)</title><rect x="122.0" y="499.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.0" y="510.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.03%)</title><rect x="132.0" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (28 samples, 0.31%)</title><rect x="132.3" y="483.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.3" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (15 samples, 0.16%)</title><rect x="134.0" y="467.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (10 samples, 0.11%)</title><rect x="136.0" y="483.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="139.0" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.22%)</title><rect x="137.3" y="483.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="140.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (21 samples, 0.23%)</title><rect x="139.9" y="483.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (9 samples, 0.10%)</title><rect x="140.8" y="467.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.8" y="478.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="141.9" y="467.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="144.9" y="478.0"></text>
</g>
<g>
<title>vtable stub (13 samples, 0.14%)</title><rect x="142.6" y="483.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="145.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (16 samples, 0.18%)</title><rect x="144.3" y="499.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.3" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (10 samples, 0.11%)</title><rect x="145.0" y="483.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.0" y="494.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="146.3" y="499.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="149.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (457 samples, 5.02%)</title><rect x="146.7" y="515.0" width="59.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.7" y="526.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (126 samples, 1.38%)</title><rect x="146.7" y="499.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="149.7" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (126 samples, 1.38%)</title><rect x="146.7" y="483.0" width="16.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.7" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (126 samples, 1.38%)</title><rect x="146.7" y="467.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (126 samples, 1.38%)</title><rect x="146.7" y="451.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.7" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (126 samples, 1.38%)</title><rect x="146.7" y="435.0" width="16.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (126 samples, 1.38%)</title><rect x="146.7" y="419.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (126 samples, 1.38%)</title><rect x="146.7" y="403.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.7" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (126 samples, 1.38%)</title><rect x="146.7" y="387.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.7" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (84 samples, 0.92%)</title><rect x="146.7" y="371.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.08%)</title><rect x="154.9" y="355.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.13%)</title><rect x="155.8" y="355.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.13%)</title><rect x="155.8" y="339.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.8" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.13%)</title><rect x="155.8" y="323.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.8" y="334.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.02%)</title><rect x="157.4" y="355.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="160.4" y="366.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.02%)</title><rect x="157.4" y="339.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="160.4" y="350.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.02%)</title><rect x="157.4" y="323.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="160.4" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (42 samples, 0.46%)</title><rect x="157.6" y="371.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.6" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.16%)</title><rect x="160.6" y="355.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="163.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.04%)</title><rect x="162.5" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="162.5" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="165.5" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="162.5" y="323.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="165.5" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (331 samples, 3.64%)</title><rect x="163.1" y="499.0" width="42.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.1" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (331 samples, 3.64%)</title><rect x="163.1" y="483.0" width="42.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.1" y="494.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (331 samples, 3.64%)</title><rect x="163.1" y="467.0" width="42.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.1" y="478.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (331 samples, 3.64%)</title><rect x="163.1" y="451.0" width="42.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="166.1" y="462.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (331 samples, 3.64%)</title><rect x="163.1" y="435.0" width="42.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.1" y="446.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (331 samples, 3.64%)</title><rect x="163.1" y="419.0" width="42.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.1" y="430.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (331 samples, 3.64%)</title><rect x="163.1" y="403.0" width="42.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.1" y="414.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (302 samples, 3.32%)</title><rect x="163.1" y="387.0" width="39.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.1" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (302 samples, 3.32%)</title><rect x="163.1" y="371.0" width="39.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.1" y="382.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.13%)</title><rect x="199.1" y="355.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.13%)</title><rect x="199.1" y="339.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.13%)</title><rect x="200.6" y="355.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (29 samples, 0.32%)</title><rect x="202.2" y="387.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.2" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (29 samples, 0.32%)</title><rect x="202.2" y="371.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="204.0" y="355.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.11%)</title><rect x="204.7" y="355.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.7" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.11%)</title><rect x="204.7" y="339.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (530 samples, 5.82%)</title><rect x="206.0" y="515.0" width="68.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.0" y="526.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (374 samples, 4.11%)</title><rect x="206.0" y="499.0" width="48.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.0" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (374 samples, 4.11%)</title><rect x="206.0" y="483.0" width="48.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.0" y="494.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.10%)</title><rect x="211.1" y="467.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (325 samples, 3.57%)</title><rect x="212.3" y="467.0" width="42.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.3" y="478.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (325 samples, 3.57%)</title><rect x="212.3" y="451.0" width="42.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.3" y="462.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (325 samples, 3.57%)</title><rect x="212.3" y="435.0" width="42.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.3" y="446.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (325 samples, 3.57%)</title><rect x="212.3" y="419.0" width="42.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.3" y="430.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (325 samples, 3.57%)</title><rect x="212.3" y="403.0" width="42.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.3" y="414.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (325 samples, 3.57%)</title><rect x="212.3" y="387.0" width="42.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.3" y="398.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (268 samples, 2.94%)</title><rect x="212.3" y="371.0" width="34.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.3" y="382.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.09%)</title><rect x="245.9" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.09%)</title><rect x="245.9" y="339.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.9" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.09%)</title><rect x="245.9" y="323.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.9" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (57 samples, 0.63%)</title><rect x="247.0" y="371.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.0" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.16%)</title><rect x="251.1" y="355.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.1" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (11 samples, 0.12%)</title><rect x="253.0" y="355.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.12%)</title><rect x="253.0" y="339.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.12%)</title><rect x="253.0" y="323.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (156 samples, 1.71%)</title><rect x="254.4" y="499.0" width="20.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.4" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (156 samples, 1.71%)</title><rect x="254.4" y="483.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (156 samples, 1.71%)</title><rect x="254.4" y="467.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.4" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (156 samples, 1.71%)</title><rect x="254.4" y="451.0" width="20.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (156 samples, 1.71%)</title><rect x="254.4" y="435.0" width="20.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (156 samples, 1.71%)</title><rect x="254.4" y="419.0" width="20.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.4" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (156 samples, 1.71%)</title><rect x="254.4" y="403.0" width="20.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.4" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (126 samples, 1.38%)</title><rect x="254.4" y="387.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.4" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (126 samples, 1.38%)</title><rect x="254.4" y="371.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.10%)</title><rect x="268.6" y="355.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.10%)</title><rect x="268.6" y="339.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.09%)</title><rect x="269.7" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.7" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.33%)</title><rect x="270.8" y="387.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.8" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.33%)</title><rect x="270.8" y="371.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.10%)</title><rect x="271.8" y="355.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (13 samples, 0.14%)</title><rect x="273.0" y="355.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (13 samples, 0.14%)</title><rect x="273.0" y="339.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.14%)</title><rect x="274.6" y="675.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.6" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.07%)</title><rect x="274.8" y="659.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.8" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.07%)</title><rect x="274.8" y="643.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.05%)</title><rect x="274.8" y="627.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (5 samples, 0.05%)</title><rect x="274.8" y="611.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.07%)</title><rect x="275.5" y="659.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.5" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.05%)</title><rect x="276.3" y="675.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (96 samples, 1.05%)</title><rect x="277.1" y="691.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.1" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (96 samples, 1.05%)</title><rect x="277.1" y="675.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.20%)</title><rect x="277.8" y="659.0" width="2.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="280.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.20%)</title><rect x="277.8" y="643.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="280.8" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (15 samples, 0.16%)</title><rect x="277.8" y="627.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="280.8" y="638.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="277.9" y="611.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="280.9" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="278.3" y="611.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="281.3" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.08%)</title><rect x="278.8" y="611.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="281.8" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="279.0" y="595.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="282.0" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.02%)</title><rect x="279.4" y="595.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="282.4" y="606.0"></text>
</g>
<g>
<title>__libc_recv (73 samples, 0.80%)</title><rect x="280.1" y="659.0" width="9.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="283.1" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (58 samples, 0.64%)</title><rect x="282.0" y="643.0" width="7.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="285.0" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (58 samples, 0.64%)</title><rect x="282.0" y="627.0" width="7.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="285.0" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (54 samples, 0.59%)</title><rect x="282.5" y="611.0" width="7.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="285.5" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (53 samples, 0.58%)</title><rect x="282.7" y="595.0" width="6.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="285.7" y="606.0"></text>
</g>
<g>
<title>inet_recvmsg (37 samples, 0.41%)</title><rect x="282.8" y="579.0" width="4.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="285.8" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (37 samples, 0.41%)</title><rect x="282.8" y="563.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="285.8" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.02%)</title><rect x="283.7" y="547.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="286.7" y="558.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.02%)</title><rect x="284.1" y="547.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="287.1" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.02%)</title><rect x="284.4" y="547.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="287.4" y="558.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.02%)</title><rect x="284.6" y="547.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="287.6" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.02%)</title><rect x="284.6" y="531.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="287.6" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (17 samples, 0.19%)</title><rect x="284.9" y="547.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="287.9" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (16 samples, 0.18%)</title><rect x="285.0" y="531.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="288.0" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.02%)</title><rect x="285.4" y="515.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="288.4" y="526.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.02%)</title><rect x="285.4" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="288.4" y="510.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.02%)</title><rect x="285.4" y="483.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="288.4" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (11 samples, 0.12%)</title><rect x="285.7" y="515.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="288.7" y="526.0"></text>
</g>
<g>
<title>__check_object_size (11 samples, 0.12%)</title><rect x="285.7" y="499.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="288.7" y="510.0"></text>
</g>
<g>
<title>__check_heap_object (5 samples, 0.05%)</title><rect x="285.8" y="483.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="288.8" y="494.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.05%)</title><rect x="286.4" y="483.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="289.4" y="494.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.03%)</title><rect x="287.1" y="547.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="290.1" y="558.0"></text>
</g>
<g>
<title>sock_recvmsg (10 samples, 0.11%)</title><rect x="287.6" y="579.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="290.6" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (9 samples, 0.10%)</title><rect x="287.7" y="563.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="290.7" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (6 samples, 0.07%)</title><rect x="288.1" y="547.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="291.1" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (3 samples, 0.03%)</title><rect x="288.5" y="531.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="291.5" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (5 samples, 0.05%)</title><rect x="288.9" y="579.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="291.9" y="590.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.05%)</title><rect x="288.9" y="563.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="291.9" y="574.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.04%)</title><rect x="289.0" y="547.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="292.0" y="558.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=29054] (2,157 samples, 23.69%)</title><rect x="289.5" y="755.0" width="279.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="292.5" y="766.0">[NIO Selector #1 tid=29054]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (24 samples, 0.26%)</title><rect x="289.5" y="739.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="292.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (18 samples, 0.20%)</title><rect x="290.2" y="723.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="293.2" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (18 samples, 0.20%)</title><rect x="290.2" y="707.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="293.2" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (17 samples, 0.19%)</title><rect x="290.3" y="691.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="293.3" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (12 samples, 0.13%)</title><rect x="291.0" y="675.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="294.0" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (9 samples, 0.10%)</title><rect x="291.2" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="294.2" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (7 samples, 0.08%)</title><rect x="291.5" y="643.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="294.5" y="654.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (4 samples, 0.04%)</title><rect x="291.7" y="627.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="294.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.02%)</title><rect x="291.7" y="611.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.7" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.02%)</title><rect x="291.7" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="294.7" y="606.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.02%)</title><rect x="291.7" y="579.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="294.7" y="590.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (2 samples, 0.02%)</title><rect x="292.0" y="611.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="295.0" y="622.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.03%)</title><rect x="292.7" y="739.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="295.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="293.0" y="739.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="296.0" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.02%)</title><rect x="293.0" y="723.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="296.0" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (19 samples, 0.21%)</title><rect x="293.3" y="739.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="296.3" y="750.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,109 samples, 23.16%)</title><rect x="295.8" y="739.0" width="273.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="298.8" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (96 samples, 1.05%)</title><rect x="296.0" y="723.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.0" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (92 samples, 1.01%)</title><rect x="296.5" y="707.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.5" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (81 samples, 0.89%)</title><rect x="296.9" y="691.0" width="10.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="299.9" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (62 samples, 0.68%)</title><rect x="299.4" y="675.0" width="8.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="302.4" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (62 samples, 0.68%)</title><rect x="299.4" y="659.0" width="8.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="302.4" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (57 samples, 0.63%)</title><rect x="300.0" y="643.0" width="7.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="303.0" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (56 samples, 0.62%)</title><rect x="300.2" y="627.0" width="7.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="303.2" y="638.0"></text>
</g>
<g>
<title>ep_poll (53 samples, 0.58%)</title><rect x="300.3" y="611.0" width="6.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="303.3" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (32 samples, 0.35%)</title><rect x="301.7" y="595.0" width="4.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="304.7" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (18 samples, 0.20%)</title><rect x="302.6" y="579.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="305.6" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (16 samples, 0.18%)</title><rect x="302.9" y="563.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="305.9" y="574.0"></text>
</g>
<g>
<title>sock_poll (15 samples, 0.16%)</title><rect x="303.0" y="547.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="306.0" y="558.0"></text>
</g>
<g>
<title>tcp_poll (8 samples, 0.09%)</title><rect x="303.9" y="531.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="306.9" y="542.0"></text>
</g>
<g>
<title>mutex_lock (5 samples, 0.05%)</title><rect x="305.0" y="579.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="308.0" y="590.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.02%)</title><rect x="305.6" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="308.6" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (10 samples, 0.11%)</title><rect x="305.9" y="595.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="308.9" y="606.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.09%)</title><rect x="306.1" y="579.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="309.1" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 0.07%)</title><rect x="306.4" y="563.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="309.4" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 0.07%)</title><rect x="306.4" y="547.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="309.4" y="558.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.02%)</title><rect x="307.2" y="611.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="310.2" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.02%)</title><rect x="307.4" y="691.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="310.4" y="702.0"></text>
</g>
<g>
<title>__GI___clock_gettime (3 samples, 0.03%)</title><rect x="307.8" y="691.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="310.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,010 samples, 22.08%)</title><rect x="308.5" y="723.0" width="260.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.5" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,010 samples, 22.08%)</title><rect x="308.5" y="707.0" width="260.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.5" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,924 samples, 21.13%)</title><rect x="308.6" y="691.0" width="249.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.6" y="702.0">one/nio/http/HttpSession.processH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,900 samples, 20.87%)</title><rect x="309.9" y="675.0" width="246.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.9" y="686.0">one/nio/http/HttpSession.handlePa..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,900 samples, 20.87%)</title><rect x="309.9" y="659.0" width="246.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.9" y="670.0">one/nio/http/HttpServer.handleReq..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,896 samples, 20.82%)</title><rect x="309.9" y="643.0" width="245.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.9" y="654.0">RequestHandler1_entity.handleRequ..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (394 samples, 4.33%)</title><rect x="309.9" y="627.0" width="51.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.9" y="638.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.05%)</title><rect x="310.2" y="611.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.2" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="310.5" y="595.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="313.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (387 samples, 4.25%)</title><rect x="310.8" y="611.0" width="50.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.8" y="622.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.11%)</title><rect x="310.9" y="595.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.11%)</title><rect x="310.9" y="579.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.9" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 0.10%)</title><rect x="310.9" y="563.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.9" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="311.7" y="547.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="314.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (376 samples, 4.13%)</title><rect x="312.2" y="595.0" width="48.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.2" y="606.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (376 samples, 4.13%)</title><rect x="312.2" y="579.0" width="48.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.2" y="590.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (373 samples, 4.10%)</title><rect x="312.6" y="563.0" width="48.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.6" y="574.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (371 samples, 4.07%)</title><rect x="312.9" y="547.0" width="48.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.9" y="558.0">one/..</text>
</g>
<g>
<title>.annobin_send.c (357 samples, 3.92%)</title><rect x="313.4" y="531.0" width="46.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="316.4" y="542.0">.ann..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.02%)</title><rect x="314.7" y="515.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="317.7" y="526.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (344 samples, 3.78%)</title><rect x="315.1" y="515.0" width="44.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="318.1" y="526.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (344 samples, 3.78%)</title><rect x="315.1" y="499.0" width="44.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="318.1" y="510.0">do_s..</text>
</g>
<g>
<title>__x64_sys_sendto (333 samples, 3.66%)</title><rect x="315.7" y="483.0" width="43.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="318.7" y="494.0">__x6..</text>
</g>
<g>
<title>__sys_sendto (332 samples, 3.65%)</title><rect x="315.9" y="467.0" width="43.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="318.9" y="478.0">__sy..</text>
</g>
<g>
<title>sock_sendmsg (327 samples, 3.59%)</title><rect x="316.0" y="451.0" width="42.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="319.0" y="462.0">sock..</text>
</g>
<g>
<title>tcp_sendmsg (326 samples, 3.58%)</title><rect x="316.1" y="435.0" width="42.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="319.1" y="446.0">tcp_..</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.02%)</title><rect x="316.1" y="419.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="319.1" y="430.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.02%)</title><rect x="316.1" y="403.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="319.1" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (323 samples, 3.55%)</title><rect x="316.5" y="419.0" width="41.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="319.5" y="430.0">tcp..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.02%)</title><rect x="316.6" y="403.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="319.6" y="414.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (302 samples, 3.32%)</title><rect x="316.9" y="403.0" width="39.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="319.9" y="414.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (301 samples, 3.31%)</title><rect x="317.0" y="387.0" width="39.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="320.0" y="398.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (290 samples, 3.19%)</title><rect x="317.5" y="371.0" width="37.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="320.5" y="382.0">__t..</text>
</g>
<g>
<title>__ip_queue_xmit (286 samples, 3.14%)</title><rect x="317.8" y="355.0" width="37.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="320.8" y="366.0">__i..</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.02%)</title><rect x="317.9" y="339.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="320.9" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.02%)</title><rect x="317.9" y="323.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="320.9" y="334.0"></text>
</g>
<g>
<title>ip_local_out (68 samples, 0.75%)</title><rect x="318.2" y="339.0" width="8.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="321.2" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (68 samples, 0.75%)</title><rect x="318.2" y="323.0" width="8.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="321.2" y="334.0"></text>
</g>
<g>
<title>ip_send_check (3 samples, 0.03%)</title><rect x="318.4" y="307.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="321.4" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (63 samples, 0.69%)</title><rect x="318.8" y="307.0" width="8.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="321.8" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (16 samples, 0.18%)</title><rect x="319.2" y="291.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="322.2" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (5 samples, 0.05%)</title><rect x="321.3" y="291.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="324.3" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (4 samples, 0.04%)</title><rect x="321.4" y="275.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="324.4" y="286.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.04%)</title><rect x="322.1" y="291.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="325.1" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (3 samples, 0.03%)</title><rect x="322.6" y="291.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="325.6" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (23 samples, 0.25%)</title><rect x="323.0" y="291.0" width="3.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="326.0" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (6 samples, 0.07%)</title><rect x="323.2" y="275.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="326.2" y="286.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (3 samples, 0.03%)</title><rect x="324.0" y="275.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="327.0" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (10 samples, 0.11%)</title><rect x="324.4" y="275.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="327.4" y="286.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (2 samples, 0.02%)</title><rect x="325.7" y="275.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="328.7" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (6 samples, 0.07%)</title><rect x="326.0" y="291.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="329.0" y="302.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (3 samples, 0.03%)</title><rect x="326.1" y="275.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="329.1" y="286.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (2 samples, 0.02%)</title><rect x="326.5" y="275.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="329.5" y="286.0"></text>
</g>
<g>
<title>selinux_ipv4_output (2 samples, 0.02%)</title><rect x="326.7" y="291.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="329.7" y="302.0"></text>
</g>
<g>
<title>ip_output (215 samples, 2.36%)</title><rect x="327.0" y="339.0" width="27.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="330.0" y="350.0">i..</text>
</g>
<g>
<title>ip_finish_output2 (195 samples, 2.14%)</title><rect x="327.3" y="323.0" width="25.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="330.3" y="334.0">i..</text>
</g>
<g>
<title>__dev_queue_xmit (18 samples, 0.20%)</title><rect x="327.8" y="307.0" width="2.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="330.8" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.12%)</title><rect x="328.7" y="291.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="331.7" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (10 samples, 0.11%)</title><rect x="328.8" y="275.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="331.8" y="286.0"></text>
</g>
<g>
<title>netif_rx (6 samples, 0.07%)</title><rect x="329.1" y="259.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="332.1" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.07%)</title><rect x="329.1" y="243.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="332.1" y="254.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.05%)</title><rect x="329.2" y="227.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="332.2" y="238.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.02%)</title><rect x="329.9" y="259.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="332.9" y="270.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (173 samples, 1.90%)</title><rect x="330.1" y="307.0" width="22.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="333.1" y="318.0">_..</text>
</g>
<g>
<title>do_softirq.part.0 (173 samples, 1.90%)</title><rect x="330.1" y="291.0" width="22.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="333.1" y="302.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (172 samples, 1.89%)</title><rect x="330.2" y="275.0" width="22.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="333.2" y="286.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (172 samples, 1.89%)</title><rect x="330.2" y="259.0" width="22.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="333.2" y="270.0">_..</text>
</g>
<g>
<title>net_rx_action (167 samples, 1.83%)</title><rect x="330.8" y="243.0" width="21.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="333.8" y="254.0">n..</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.03%)</title><rect x="330.8" y="227.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="333.8" y="238.0"></text>
</g>
<g>
<title>process_backlog (164 samples, 1.80%)</title><rect x="331.1" y="227.0" width="21.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="334.1" y="238.0">p..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (160 samples, 1.76%)</title><rect x="331.7" y="211.0" width="20.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="334.7" y="222.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.03%)</title><rect x="331.7" y="195.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="334.7" y="206.0"></text>
</g>
<g>
<title>ip_rcv (157 samples, 1.72%)</title><rect x="332.1" y="195.0" width="20.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="335.1" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (115 samples, 1.26%)</title><rect x="332.3" y="179.0" width="14.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="335.3" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (97 samples, 1.07%)</title><rect x="332.3" y="163.0" width="12.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="335.3" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (97 samples, 1.07%)</title><rect x="332.3" y="147.0" width="12.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="335.3" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (97 samples, 1.07%)</title><rect x="332.3" y="131.0" width="12.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="335.3" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.03%)</title><rect x="332.4" y="115.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="335.4" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (90 samples, 0.99%)</title><rect x="333.0" y="115.0" width="11.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="336.0" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (90 samples, 0.99%)</title><rect x="333.0" y="99.0" width="11.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="336.0" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.02%)</title><rect x="333.2" y="83.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="336.2" y="94.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.02%)</title><rect x="333.2" y="67.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="336.2" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="333.2" y="51.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="336.2" y="62.0"></text>
</g>
<g>
<title>tcp_ack (14 samples, 0.15%)</title><rect x="333.5" y="83.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="336.5" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.07%)</title><rect x="334.1" y="67.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="337.1" y="78.0"></text>
</g>
<g>
<title>kfree (4 samples, 0.04%)</title><rect x="334.1" y="51.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="337.1" y="62.0"></text>
</g>
<g>
<title>tcp_data_queue (69 samples, 0.76%)</title><rect x="335.4" y="83.0" width="9.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="338.4" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (62 samples, 0.68%)</title><rect x="335.9" y="67.0" width="8.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="338.9" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (60 samples, 0.66%)</title><rect x="336.2" y="51.0" width="7.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="339.2" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (60 samples, 0.66%)</title><rect x="336.2" y="35.0" width="7.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="339.2" y="46.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.02%)</title><rect x="344.1" y="67.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="347.1" y="78.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.02%)</title><rect x="344.4" y="83.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="347.4" y="94.0"></text>
</g>
<g>
<title>nf_hook_slow (18 samples, 0.20%)</title><rect x="344.9" y="163.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="347.9" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (10 samples, 0.11%)</title><rect x="345.0" y="147.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="348.0" y="158.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (5 samples, 0.05%)</title><rect x="346.6" y="147.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="349.6" y="158.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.02%)</title><rect x="347.2" y="179.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="350.2" y="190.0"></text>
</g>
<g>
<title>nf_hook_slow (37 samples, 0.41%)</title><rect x="347.6" y="179.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="350.6" y="190.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (4 samples, 0.04%)</title><rect x="347.9" y="163.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="350.9" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (23 samples, 0.25%)</title><rect x="348.4" y="163.0" width="3.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="351.4" y="174.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (4 samples, 0.04%)</title><rect x="351.6" y="163.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="354.6" y="174.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (2 samples, 0.02%)</title><rect x="352.1" y="163.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="355.1" y="174.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.04%)</title><rect x="352.5" y="323.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="355.5" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (14 samples, 0.15%)</title><rect x="353.0" y="323.0" width="1.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="356.0" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (6 samples, 0.07%)</title><rect x="353.2" y="307.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="356.2" y="318.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (2 samples, 0.02%)</title><rect x="354.1" y="307.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="357.1" y="318.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (2 samples, 0.02%)</title><rect x="354.1" y="291.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="357.1" y="302.0"></text>
</g>
<g>
<title>selinux_ip_postroute (2 samples, 0.02%)</title><rect x="354.5" y="307.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="357.5" y="318.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.03%)</title><rect x="355.3" y="371.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="358.3" y="382.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.02%)</title><rect x="355.4" y="355.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="358.4" y="366.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.03%)</title><rect x="355.6" y="371.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="358.6" y="382.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.02%)</title><rect x="355.6" y="355.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="358.6" y="366.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.02%)</title><rect x="356.0" y="403.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="359.0" y="414.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (9 samples, 0.10%)</title><rect x="356.3" y="403.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="359.3" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (9 samples, 0.10%)</title><rect x="356.3" y="387.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="359.3" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (6 samples, 0.07%)</title><rect x="356.3" y="371.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="359.3" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (6 samples, 0.07%)</title><rect x="356.3" y="355.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="359.3" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.02%)</title><rect x="357.1" y="371.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="360.1" y="382.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.04%)</title><rect x="357.6" y="403.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="360.6" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.04%)</title><rect x="357.6" y="387.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="360.6" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.03%)</title><rect x="357.6" y="371.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="360.6" y="382.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.02%)</title><rect x="358.1" y="403.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="361.1" y="414.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.04%)</title><rect x="358.4" y="451.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="361.4" y="462.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="358.4" y="435.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="361.4" y="446.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.04%)</title><rect x="358.4" y="419.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="361.4" y="430.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.07%)</title><rect x="358.9" y="483.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="361.9" y="494.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.02%)</title><rect x="359.4" y="467.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="362.4" y="478.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.02%)</title><rect x="359.7" y="531.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="362.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.08%)</title><rect x="359.9" y="531.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="362.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.08%)</title><rect x="359.9" y="515.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="362.9" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (7 samples, 0.08%)</title><rect x="359.9" y="499.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="362.9" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.02%)</title><rect x="360.6" y="483.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="363.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.09%)</title><rect x="361.0" y="627.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="361.2" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="361.2" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="364.2" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="361.7" y="611.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="364.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (1,494 samples, 16.41%)</title><rect x="362.0" y="627.0" width="193.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.0" y="638.0">ru/mail/polis/service/sha..</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.08%)</title><rect x="362.0" y="611.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.0" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.08%)</title><rect x="362.0" y="595.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.05%)</title><rect x="362.3" y="579.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.05%)</title><rect x="362.3" y="563.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.05%)</title><rect x="362.3" y="547.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.02%)</title><rect x="362.3" y="531.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkNativeAddress (2 samples, 0.02%)</title><rect x="362.3" y="515.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.03%)</title><rect x="362.5" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.02%)</title><rect x="362.6" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="363.0" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.0" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="363.0" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.0" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="363.0" y="579.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.0" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="363.0" y="563.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="363.0" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="363.0" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.0" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="363.0" y="515.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.0" y="526.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="363.3" y="499.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="366.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,482 samples, 16.28%)</title><rect x="363.5" y="611.0" width="192.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.5" y="622.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (30 samples, 0.33%)</title><rect x="363.5" y="595.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="366.5" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (30 samples, 0.33%)</title><rect x="363.5" y="579.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (30 samples, 0.33%)</title><rect x="363.5" y="563.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.5" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (30 samples, 0.33%)</title><rect x="363.5" y="547.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (30 samples, 0.33%)</title><rect x="363.5" y="531.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 0.22%)</title><rect x="363.5" y="515.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.5" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (11 samples, 0.12%)</title><rect x="363.5" y="499.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (11 samples, 0.12%)</title><rect x="363.5" y="483.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.5" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (11 samples, 0.12%)</title><rect x="363.5" y="467.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="366.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.11%)</title><rect x="363.7" y="451.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="366.7" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.11%)</title><rect x="363.7" y="435.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (10 samples, 0.11%)</title><rect x="363.7" y="419.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (10 samples, 0.11%)</title><rect x="363.7" y="403.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.7" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (10 samples, 0.11%)</title><rect x="363.7" y="387.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.11%)</title><rect x="363.7" y="371.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (9 samples, 0.10%)</title><rect x="363.8" y="355.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.8" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.10%)</title><rect x="363.8" y="339.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.8" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (9 samples, 0.10%)</title><rect x="363.8" y="323.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.8" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.10%)</title><rect x="363.8" y="307.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="363.8" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.05%)</title><rect x="363.8" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.8" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="363.8" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="366.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (4 samples, 0.04%)</title><rect x="364.5" y="291.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="364.5" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="367.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="364.5" y="259.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.5" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="364.5" y="243.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.5" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="364.5" y="227.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="364.5" y="211.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.5" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="364.7" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="364.7" y="243.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="364.7" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="364.7" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="367.7" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9 samples, 0.10%)</title><rect x="365.0" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9 samples, 0.10%)</title><rect x="365.0" y="483.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (9 samples, 0.10%)</title><rect x="365.0" y="467.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (9 samples, 0.10%)</title><rect x="365.0" y="451.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="365.0" y="435.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="365.0" y="419.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5 samples, 0.05%)</title><rect x="365.0" y="403.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (5 samples, 0.05%)</title><rect x="365.0" y="387.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (5 samples, 0.05%)</title><rect x="365.0" y="371.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (5 samples, 0.05%)</title><rect x="365.0" y="355.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.02%)</title><rect x="365.0" y="339.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="365.0" y="323.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.0" y="307.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.0" y="291.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.0" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.0" y="275.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.0" y="259.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.0" y="243.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.0" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.0" y="227.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.02%)</title><rect x="365.2" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="365.2" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.2" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.2" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.2" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.2" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.2" y="243.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="365.2" y="227.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.2" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="365.2" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="365.2" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (4 samples, 0.04%)</title><rect x="365.6" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.04%)</title><rect x="365.6" y="387.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.6" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (4 samples, 0.04%)</title><rect x="365.6" y="371.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.6" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="365.6" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.6" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (4 samples, 0.04%)</title><rect x="365.6" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.6" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="365.6" y="323.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.6" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (4 samples, 0.04%)</title><rect x="365.6" y="307.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.6" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.04%)</title><rect x="365.6" y="291.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="365.6" y="275.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="365.6" y="259.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.6" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="365.6" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$56/1514133115.apply (9 samples, 0.10%)</title><rect x="366.3" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (9 samples, 0.10%)</title><rect x="366.3" y="499.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.3" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.09%)</title><rect x="366.3" y="483.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.09%)</title><rect x="366.3" y="467.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.3" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.08%)</title><rect x="366.4" y="451.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="366.4" y="435.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.4" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="366.4" y="419.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="366.5" y="403.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="366.5" y="387.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="366.5" y="371.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="366.9" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="369.9" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (11 samples, 0.12%)</title><rect x="367.4" y="595.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (10 samples, 0.11%)</title><rect x="367.6" y="579.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$62/1670576925.apply (8 samples, 0.09%)</title><rect x="367.8" y="563.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (7 samples, 0.08%)</title><rect x="368.0" y="547.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="368.1" y="531.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="368.1" y="515.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="371.1" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="368.1" y="499.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.1" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="368.1" y="483.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="368.1" y="467.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.1" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="368.1" y="451.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="368.1" y="435.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="368.1" y="419.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.1" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="368.1" y="403.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="371.1" y="414.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="368.1" y="387.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="371.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (4 samples, 0.04%)</title><rect x="368.3" y="531.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="371.3" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="368.3" y="515.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="371.3" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="368.3" y="499.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.3" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="368.3" y="483.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="368.3" y="467.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.3" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="368.3" y="451.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="368.3" y="435.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="371.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="368.3" y="419.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.3" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="368.3" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.03%)</title><rect x="368.9" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,436 samples, 15.77%)</title><rect x="369.5" y="595.0" width="186.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.5" y="606.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,433 samples, 15.74%)</title><rect x="369.8" y="579.0" width="185.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.8" y="590.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (107 samples, 1.18%)</title><rect x="370.2" y="563.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.2" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (107 samples, 1.18%)</title><rect x="370.2" y="547.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="373.2" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (97 samples, 1.07%)</title><rect x="371.5" y="531.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (93 samples, 1.02%)</title><rect x="371.7" y="515.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (7 samples, 0.08%)</title><rect x="371.7" y="499.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.7" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="372.2" y="483.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.2" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (86 samples, 0.94%)</title><rect x="372.6" y="499.0" width="11.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="375.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (86 samples, 0.94%)</title><rect x="372.6" y="483.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (83 samples, 0.91%)</title><rect x="373.0" y="467.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.0" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (83 samples, 0.91%)</title><rect x="373.0" y="451.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (46 samples, 0.51%)</title><rect x="373.0" y="435.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (46 samples, 0.51%)</title><rect x="373.0" y="419.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (46 samples, 0.51%)</title><rect x="373.0" y="403.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (43 samples, 0.47%)</title><rect x="373.4" y="387.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (18 samples, 0.20%)</title><rect x="373.4" y="371.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="376.4" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="373.4" y="355.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.4" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="373.4" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="373.4" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="373.4" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="373.4" y="291.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="376.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="373.4" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="373.4" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="373.4" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="376.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="373.4" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (15 samples, 0.16%)</title><rect x="373.8" y="355.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="376.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (15 samples, 0.16%)</title><rect x="373.8" y="339.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="373.8" y="323.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="376.8" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="373.8" y="307.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="373.8" y="291.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="373.8" y="275.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.8" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="373.8" y="259.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="373.8" y="243.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="376.8" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="373.8" y="227.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="376.8" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.05%)</title><rect x="375.1" y="243.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.1" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.05%)</title><rect x="375.1" y="227.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="375.3" y="211.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.3" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="375.3" y="195.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="378.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (14 samples, 0.15%)</title><rect x="375.7" y="371.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.7" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (10 samples, 0.11%)</title><rect x="375.7" y="355.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.11%)</title><rect x="375.7" y="339.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="378.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.07%)</title><rect x="376.2" y="323.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="376.2" y="307.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.2" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="376.2" y="291.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="376.2" y="275.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="376.2" y="259.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="379.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="376.2" y="243.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.2" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="376.2" y="227.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (4 samples, 0.04%)</title><rect x="377.0" y="355.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="377.0" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="377.0" y="323.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="380.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="377.0" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="377.0" y="291.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="380.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="377.0" y="275.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="377.0" y="259.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="377.0" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="380.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="377.0" y="227.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="380.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (3 samples, 0.03%)</title><rect x="377.5" y="371.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.5" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="377.5" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="377.5" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="380.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="377.5" y="323.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.5" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="377.5" y="307.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="377.5" y="291.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="377.5" y="275.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.5" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="377.5" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="377.5" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.5" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="377.5" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (8 samples, 0.09%)</title><rect x="377.9" y="371.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="380.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.09%)</title><rect x="377.9" y="355.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.09%)</title><rect x="377.9" y="339.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.09%)</title><rect x="377.9" y="323.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="380.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="377.9" y="307.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.9" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="377.9" y="291.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="380.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="377.9" y="275.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="377.9" y="259.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.9" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="377.9" y="243.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.9" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="377.9" y="227.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (37 samples, 0.41%)</title><rect x="379.0" y="435.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (37 samples, 0.41%)</title><rect x="379.0" y="419.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="382.0" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (37 samples, 0.41%)</title><rect x="379.0" y="403.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.0" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (37 samples, 0.41%)</title><rect x="379.0" y="387.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (2 samples, 0.02%)</title><rect x="379.0" y="371.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="382.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.02%)</title><rect x="379.0" y="355.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (2 samples, 0.02%)</title><rect x="379.0" y="339.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="382.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="379.0" y="323.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="379.0" y="307.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.0" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="379.0" y="291.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="379.0" y="275.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="379.0" y="259.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="382.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="379.0" y="243.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="379.0" y="227.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.0" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (35 samples, 0.38%)</title><rect x="379.2" y="371.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="382.2" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (35 samples, 0.38%)</title><rect x="379.2" y="355.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.2" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (35 samples, 0.38%)</title><rect x="379.2" y="339.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="382.2" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (35 samples, 0.38%)</title><rect x="379.2" y="323.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.15%)</title><rect x="379.2" y="307.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="382.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.14%)</title><rect x="379.4" y="291.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.4" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.12%)</title><rect x="379.5" y="275.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (2 samples, 0.02%)</title><rect x="379.9" y="259.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.04%)</title><rect x="380.3" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="383.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (21 samples, 0.23%)</title><rect x="381.0" y="307.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (21 samples, 0.23%)</title><rect x="381.0" y="291.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="384.0" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (11 samples, 0.12%)</title><rect x="381.0" y="275.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (11 samples, 0.12%)</title><rect x="381.0" y="259.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="381.0" y="243.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="384.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="381.0" y="227.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.0" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="381.9" y="211.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="381.9" y="195.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="381.9" y="179.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.9" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="381.9" y="163.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.11%)</title><rect x="382.5" y="275.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.5" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (10 samples, 0.11%)</title><rect x="382.5" y="259.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="382.5" y="243.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="382.5" y="227.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.5" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="383.4" y="211.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.4" y="222.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="383.8" y="515.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="386.8" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.15%)</title><rect x="384.0" y="563.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.0" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.15%)</title><rect x="384.0" y="547.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.15%)</title><rect x="384.0" y="531.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.0" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.15%)</title><rect x="384.0" y="515.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.0" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.14%)</title><rect x="384.2" y="499.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="387.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (3 samples, 0.03%)</title><rect x="385.4" y="483.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (23 samples, 0.25%)</title><rect x="386.0" y="563.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (23 samples, 0.25%)</title><rect x="386.0" y="547.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.0" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (21 samples, 0.23%)</title><rect x="386.1" y="531.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="389.1" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (12 samples, 0.13%)</title><rect x="386.2" y="515.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.2" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (12 samples, 0.13%)</title><rect x="386.2" y="499.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="389.2" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (10 samples, 0.11%)</title><rect x="386.5" y="483.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="386.7" y="467.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="386.7" y="451.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (7 samples, 0.08%)</title><rect x="386.9" y="435.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.08%)</title><rect x="386.9" y="419.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.9" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (7 samples, 0.08%)</title><rect x="386.9" y="403.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.9" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="386.9" y="387.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="389.9" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (7 samples, 0.08%)</title><rect x="386.9" y="371.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="386.9" y="355.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="389.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (7 samples, 0.08%)</title><rect x="386.9" y="339.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="389.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.08%)</title><rect x="386.9" y="323.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="386.9" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="386.9" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.9" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="386.9" y="275.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (4 samples, 0.04%)</title><rect x="387.3" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="387.3" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="390.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="387.3" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.3" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="387.3" y="259.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.3" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="387.3" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="387.3" y="227.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.4" y="211.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.4" y="195.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="390.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.4" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.4" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="387.4" y="163.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="390.4" y="174.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (8 samples, 0.09%)</title><rect x="387.8" y="515.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="390.8" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (8 samples, 0.09%)</title><rect x="387.8" y="499.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="390.8" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (7 samples, 0.08%)</title><rect x="387.9" y="483.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.9" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (7 samples, 0.08%)</title><rect x="387.9" y="467.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.9" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.07%)</title><rect x="388.0" y="451.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.07%)</title><rect x="388.0" y="435.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (6 samples, 0.07%)</title><rect x="388.0" y="419.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="391.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (6 samples, 0.07%)</title><rect x="388.0" y="403.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.0" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (6 samples, 0.07%)</title><rect x="388.0" y="387.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="388.0" y="371.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (6 samples, 0.07%)</title><rect x="388.0" y="355.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 0.07%)</title><rect x="388.0" y="339.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (5 samples, 0.05%)</title><rect x="388.0" y="323.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.05%)</title><rect x="388.0" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (4 samples, 0.04%)</title><rect x="388.2" y="291.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="388.2" y="275.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="388.2" y="259.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="388.2" y="243.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.2" y="227.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.2" y="211.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.2" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="388.4" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.4" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.4" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.4" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.4" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="388.4" y="211.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (43 samples, 0.47%)</title><rect x="388.9" y="563.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="391.9" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (29 samples, 0.32%)</title><rect x="388.9" y="547.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.9" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (29 samples, 0.32%)</title><rect x="388.9" y="531.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.9" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (25 samples, 0.27%)</title><rect x="388.9" y="515.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.9" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (25 samples, 0.27%)</title><rect x="388.9" y="499.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.9" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (25 samples, 0.27%)</title><rect x="388.9" y="483.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.9" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (18 samples, 0.20%)</title><rect x="389.9" y="467.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="392.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.10%)</title><rect x="391.0" y="451.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="394.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.10%)</title><rect x="391.0" y="435.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.0" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.09%)</title><rect x="391.2" y="419.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.02%)</title><rect x="391.9" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="394.9" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (4 samples, 0.04%)</title><rect x="392.2" y="515.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.2" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (14 samples, 0.15%)</title><rect x="392.7" y="547.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.7" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (14 samples, 0.15%)</title><rect x="392.7" y="531.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.7" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (14 samples, 0.15%)</title><rect x="392.7" y="515.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.7" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (14 samples, 0.15%)</title><rect x="392.7" y="499.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.7" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (14 samples, 0.15%)</title><rect x="392.7" y="483.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.15%)</title><rect x="392.7" y="467.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.15%)</title><rect x="392.7" y="451.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="395.7" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.12%)</title><rect x="393.1" y="435.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.02%)</title><rect x="394.0" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.0" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="394.3" y="419.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (1,242 samples, 13.64%)</title><rect x="394.5" y="563.0" width="161.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.5" y="574.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (1,241 samples, 13.63%)</title><rect x="394.7" y="547.0" width="160.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.7" y="558.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (1,223 samples, 13.43%)</title><rect x="397.0" y="531.0" width="158.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.0" y="542.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (220 samples, 2.42%)</title><rect x="399.7" y="515.0" width="28.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.7" y="526.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (185 samples, 2.03%)</title><rect x="402.8" y="499.0" width="24.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.8" y="510.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.03%)</title><rect x="413.3" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (29 samples, 0.32%)</title><rect x="413.7" y="483.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 0.15%)</title><rect x="415.6" y="467.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="418.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (5 samples, 0.05%)</title><rect x="417.5" y="483.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.5" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (27 samples, 0.30%)</title><rect x="418.1" y="483.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="421.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (20 samples, 0.22%)</title><rect x="421.6" y="483.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (9 samples, 0.10%)</title><rect x="422.8" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="425.8" y="478.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="423.9" y="467.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="426.9" y="478.0"></text>
</g>
<g>
<title>vtable stub (20 samples, 0.22%)</title><rect x="424.2" y="483.0" width="2.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="427.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.11%)</title><rect x="426.8" y="499.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.8" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (7 samples, 0.08%)</title><rect x="427.2" y="483.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="430.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (482 samples, 5.29%)</title><rect x="428.2" y="515.0" width="62.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.2" y="526.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (145 samples, 1.59%)</title><rect x="428.2" y="499.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="431.2" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (145 samples, 1.59%)</title><rect x="428.2" y="483.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (145 samples, 1.59%)</title><rect x="428.2" y="467.0" width="18.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="431.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (145 samples, 1.59%)</title><rect x="428.2" y="451.0" width="18.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.2" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (145 samples, 1.59%)</title><rect x="428.2" y="435.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="431.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (145 samples, 1.59%)</title><rect x="428.2" y="419.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="431.2" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (145 samples, 1.59%)</title><rect x="428.2" y="403.0" width="18.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.2" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (145 samples, 1.59%)</title><rect x="428.2" y="387.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="431.2" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (97 samples, 1.07%)</title><rect x="428.2" y="371.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="431.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.09%)</title><rect x="437.5" y="355.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.5" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.19%)</title><rect x="438.6" y="355.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (17 samples, 0.19%)</title><rect x="438.6" y="339.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (17 samples, 0.19%)</title><rect x="438.6" y="323.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (48 samples, 0.53%)</title><rect x="440.8" y="371.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.8" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.19%)</title><rect x="443.9" y="355.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="446.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.08%)</title><rect x="446.1" y="355.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.08%)</title><rect x="446.1" y="339.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="449.1" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.08%)</title><rect x="446.1" y="323.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (337 samples, 3.70%)</title><rect x="447.0" y="499.0" width="43.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.0" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (337 samples, 3.70%)</title><rect x="447.0" y="483.0" width="43.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.0" y="494.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (337 samples, 3.70%)</title><rect x="447.0" y="467.0" width="43.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.0" y="478.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (337 samples, 3.70%)</title><rect x="447.0" y="451.0" width="43.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="450.0" y="462.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (337 samples, 3.70%)</title><rect x="447.0" y="435.0" width="43.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.0" y="446.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (337 samples, 3.70%)</title><rect x="447.0" y="419.0" width="43.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="450.0" y="430.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (337 samples, 3.70%)</title><rect x="447.0" y="403.0" width="43.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.0" y="414.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (309 samples, 3.39%)</title><rect x="447.0" y="387.0" width="40.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.0" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (309 samples, 3.39%)</title><rect x="447.0" y="371.0" width="40.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="450.0" y="382.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.11%)</title><rect x="483.9" y="355.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="483.9" y="339.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.9" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.14%)</title><rect x="485.2" y="355.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (28 samples, 0.31%)</title><rect x="487.1" y="387.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.1" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (28 samples, 0.31%)</title><rect x="487.1" y="371.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.09%)</title><rect x="488.9" y="355.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.07%)</title><rect x="489.9" y="355.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.07%)</title><rect x="489.9" y="339.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (500 samples, 5.49%)</title><rect x="490.7" y="515.0" width="64.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.7" y="526.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (356 samples, 3.91%)</title><rect x="490.7" y="499.0" width="46.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.7" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (356 samples, 3.91%)</title><rect x="490.7" y="483.0" width="46.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.7" y="494.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.08%)</title><rect x="494.7" y="467.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (317 samples, 3.48%)</title><rect x="495.6" y="467.0" width="41.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.6" y="478.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (317 samples, 3.48%)</title><rect x="495.6" y="451.0" width="41.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.6" y="462.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (317 samples, 3.48%)</title><rect x="495.6" y="435.0" width="41.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.6" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (317 samples, 3.48%)</title><rect x="495.6" y="419.0" width="41.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.6" y="430.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (317 samples, 3.48%)</title><rect x="495.6" y="403.0" width="41.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.6" y="414.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (317 samples, 3.48%)</title><rect x="495.6" y="387.0" width="41.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.6" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (265 samples, 2.91%)</title><rect x="495.6" y="371.0" width="34.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.6" y="382.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="528.5" y="355.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.11%)</title><rect x="528.5" y="339.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.5" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="528.5" y="323.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.5" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (52 samples, 0.57%)</title><rect x="530.0" y="371.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.0" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="533.7" y="355.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="536.7" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.14%)</title><rect x="535.0" y="355.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (13 samples, 0.14%)</title><rect x="535.0" y="339.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="538.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (13 samples, 0.14%)</title><rect x="535.0" y="323.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (144 samples, 1.58%)</title><rect x="536.8" y="499.0" width="18.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.8" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (144 samples, 1.58%)</title><rect x="536.8" y="483.0" width="18.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="539.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="536.8" y="467.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.8" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="536.8" y="451.0" width="18.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="536.8" y="435.0" width="18.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="539.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="536.8" y="419.0" width="18.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="539.8" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="536.8" y="403.0" width="18.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="539.8" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (106 samples, 1.16%)</title><rect x="536.8" y="387.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="539.8" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (106 samples, 1.16%)</title><rect x="536.8" y="371.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 0.24%)</title><rect x="546.8" y="355.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (22 samples, 0.24%)</title><rect x="546.8" y="339.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="549.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.07%)</title><rect x="549.7" y="355.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="552.7" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (38 samples, 0.42%)</title><rect x="550.6" y="387.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.6" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (38 samples, 0.42%)</title><rect x="550.6" y="371.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (15 samples, 0.16%)</title><rect x="552.0" y="355.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="555.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.13%)</title><rect x="553.9" y="355.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="556.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.13%)</title><rect x="553.9" y="339.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="556.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.04%)</title><rect x="555.6" y="643.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="558.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="555.6" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="558.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="555.6" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.04%)</title><rect x="555.6" y="595.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.6" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.04%)</title><rect x="555.6" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="558.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 0.13%)</title><rect x="556.1" y="675.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.02%)</title><rect x="556.1" y="659.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.1" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="556.1" y="643.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="556.1" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.1" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="556.1" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.1" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.08%)</title><rect x="556.4" y="659.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="559.4" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.07%)</title><rect x="556.5" y="643.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="559.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="556.8" y="627.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (4 samples, 0.04%)</title><rect x="556.8" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.03%)</title><rect x="557.3" y="659.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.3" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (85 samples, 0.93%)</title><rect x="557.9" y="691.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="560.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (81 samples, 0.89%)</title><rect x="558.5" y="675.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="561.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="558.6" y="659.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="561.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="558.6" y="643.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="561.6" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (10 samples, 0.11%)</title><rect x="558.6" y="627.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="561.6" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="558.9" y="611.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="561.9" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.05%)</title><rect x="559.1" y="611.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="562.1" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.02%)</title><rect x="559.4" y="595.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="562.4" y="606.0"></text>
</g>
<g>
<title>__libc_recv (69 samples, 0.76%)</title><rect x="560.0" y="659.0" width="9.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="563.0" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (60 samples, 0.66%)</title><rect x="561.2" y="643.0" width="7.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="564.2" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (60 samples, 0.66%)</title><rect x="561.2" y="627.0" width="7.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="564.2" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (53 samples, 0.58%)</title><rect x="562.1" y="611.0" width="6.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="565.1" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (50 samples, 0.55%)</title><rect x="562.5" y="595.0" width="6.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="565.5" y="606.0"></text>
</g>
<g>
<title>inet_recvmsg (40 samples, 0.44%)</title><rect x="562.7" y="579.0" width="5.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="565.7" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (40 samples, 0.44%)</title><rect x="562.7" y="563.0" width="5.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="565.7" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.04%)</title><rect x="563.5" y="547.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="566.5" y="558.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.03%)</title><rect x="563.5" y="531.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="566.5" y="542.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.03%)</title><rect x="563.5" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="566.5" y="526.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.02%)</title><rect x="563.6" y="499.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="566.6" y="510.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (20 samples, 0.22%)</title><rect x="564.4" y="547.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="567.4" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (18 samples, 0.20%)</title><rect x="564.7" y="531.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="567.7" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.02%)</title><rect x="564.9" y="515.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="567.9" y="526.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.02%)</title><rect x="564.9" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="567.9" y="510.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.02%)</title><rect x="564.9" y="483.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="567.9" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (14 samples, 0.15%)</title><rect x="565.2" y="515.0" width="1.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="568.2" y="526.0"></text>
</g>
<g>
<title>__check_object_size (14 samples, 0.15%)</title><rect x="565.2" y="499.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="568.2" y="510.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.02%)</title><rect x="566.0" y="483.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="569.0" y="494.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.03%)</title><rect x="566.2" y="483.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="569.2" y="494.0"></text>
</g>
<g>
<title>check_stack_object (3 samples, 0.03%)</title><rect x="566.6" y="483.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="569.6" y="494.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.02%)</title><rect x="567.0" y="547.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="570.0" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.03%)</title><rect x="567.3" y="547.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="570.3" y="558.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.02%)</title><rect x="567.4" y="531.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="570.4" y="542.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.02%)</title><rect x="567.4" y="515.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="570.4" y="526.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.02%)</title><rect x="567.4" y="499.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="570.4" y="510.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (2 samples, 0.02%)</title><rect x="567.7" y="547.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="570.7" y="558.0"></text>
</g>
<g>
<title>sock_recvmsg (5 samples, 0.05%)</title><rect x="567.9" y="579.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="570.9" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.05%)</title><rect x="567.9" y="563.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="570.9" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (5 samples, 0.05%)</title><rect x="567.9" y="547.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="570.9" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.04%)</title><rect x="568.1" y="531.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="571.1" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.03%)</title><rect x="568.6" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="571.6" y="590.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="568.6" y="563.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="571.6" y="574.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=29055] (2,162 samples, 23.75%)</title><rect x="569.1" y="755.0" width="280.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="572.1" y="766.0">[NIO Selector #2 tid=29055]</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (2 samples, 0.02%)</title><rect x="569.1" y="739.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="572.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (22 samples, 0.24%)</title><rect x="569.3" y="739.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="572.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (21 samples, 0.23%)</title><rect x="569.5" y="723.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="572.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (21 samples, 0.23%)</title><rect x="569.5" y="707.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="572.5" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (15 samples, 0.16%)</title><rect x="569.6" y="691.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.6" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (12 samples, 0.13%)</title><rect x="569.6" y="675.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="572.6" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (9 samples, 0.10%)</title><rect x="569.7" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="572.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (9 samples, 0.10%)</title><rect x="569.7" y="643.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="572.7" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.02%)</title><rect x="570.1" y="627.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="573.1" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.02%)</title><rect x="570.1" y="611.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="573.1" y="622.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (3 samples, 0.03%)</title><rect x="570.4" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="573.4" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.02%)</title><rect x="570.4" y="611.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="573.4" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.02%)</title><rect x="570.4" y="595.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="573.4" y="606.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.02%)</title><rect x="571.3" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="574.3" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.04%)</title><rect x="571.7" y="691.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="574.7" y="702.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.03%)</title><rect x="572.2" y="739.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="575.2" y="750.0"></text>
</g>
<g>
<title>[unknown_Java] (24 samples, 0.26%)</title><rect x="572.7" y="739.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="575.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="575.4" y="723.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="578.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.03%)</title><rect x="575.4" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="578.4" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,110 samples, 23.17%)</title><rect x="575.8" y="739.0" width="273.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.8" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.02%)</title><rect x="576.1" y="723.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="579.1" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (87 samples, 0.96%)</title><rect x="576.3" y="723.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (78 samples, 0.86%)</title><rect x="577.5" y="707.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="580.5" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (63 samples, 0.69%)</title><rect x="577.9" y="691.0" width="8.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="580.9" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (50 samples, 0.55%)</title><rect x="579.6" y="675.0" width="6.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="582.6" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (50 samples, 0.55%)</title><rect x="579.6" y="659.0" width="6.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="582.6" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (44 samples, 0.48%)</title><rect x="580.4" y="643.0" width="5.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="583.4" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (44 samples, 0.48%)</title><rect x="580.4" y="627.0" width="5.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="583.4" y="638.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.05%)</title><rect x="580.6" y="611.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="583.6" y="622.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.02%)</title><rect x="581.0" y="595.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="584.0" y="606.0"></text>
</g>
<g>
<title>ep_poll (36 samples, 0.40%)</title><rect x="581.3" y="611.0" width="4.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="584.3" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (24 samples, 0.26%)</title><rect x="581.7" y="595.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="584.7" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (12 samples, 0.13%)</title><rect x="582.3" y="579.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="585.3" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (10 samples, 0.11%)</title><rect x="582.6" y="563.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="585.6" y="574.0"></text>
</g>
<g>
<title>sock_poll (9 samples, 0.10%)</title><rect x="582.7" y="547.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="585.7" y="558.0"></text>
</g>
<g>
<title>tcp_poll (7 samples, 0.08%)</title><rect x="583.0" y="531.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="586.0" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.04%)</title><rect x="583.3" y="515.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="586.3" y="526.0"></text>
</g>
<g>
<title>mutex_lock (7 samples, 0.08%)</title><rect x="583.9" y="579.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="586.9" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (9 samples, 0.10%)</title><rect x="584.8" y="595.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="587.8" y="606.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.09%)</title><rect x="584.9" y="579.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="587.9" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 0.07%)</title><rect x="585.2" y="563.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="588.2" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 0.07%)</title><rect x="585.2" y="547.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="588.2" y="558.0"></text>
</g>
<g>
<title>__GI___clock_gettime (8 samples, 0.09%)</title><rect x="586.2" y="691.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="589.2" y="702.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.03%)</title><rect x="586.8" y="675.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="589.8" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,018 samples, 22.16%)</title><rect x="587.6" y="723.0" width="261.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.6" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,016 samples, 22.14%)</title><rect x="587.9" y="707.0" width="261.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="590.9" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,944 samples, 21.35%)</title><rect x="587.9" y="691.0" width="251.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="590.9" y="702.0">one/nio/http/HttpSession.processH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,914 samples, 21.02%)</title><rect x="588.3" y="675.0" width="248.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="591.3" y="686.0">one/nio/http/HttpSession.handlePa..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,914 samples, 21.02%)</title><rect x="588.3" y="659.0" width="248.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="591.3" y="670.0">one/nio/http/HttpServer.handleReq..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,908 samples, 20.96%)</title><rect x="588.3" y="643.0" width="247.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="591.3" y="654.0">RequestHandler1_entity.handleRequ..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (393 samples, 4.32%)</title><rect x="588.3" y="627.0" width="50.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="591.3" y="638.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.04%)</title><rect x="588.7" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.7" y="622.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="588.7" y="595.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="591.7" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="588.9" y="595.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="591.9" y="606.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="588.9" y="579.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="591.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (386 samples, 4.24%)</title><rect x="589.2" y="611.0" width="50.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="592.2" y="622.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.09%)</title><rect x="589.2" y="595.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="592.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.05%)</title><rect x="589.6" y="579.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.05%)</title><rect x="589.6" y="563.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="592.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (378 samples, 4.15%)</title><rect x="590.2" y="595.0" width="49.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.2" y="606.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (378 samples, 4.15%)</title><rect x="590.2" y="579.0" width="49.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="593.2" y="590.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (375 samples, 4.12%)</title><rect x="590.6" y="563.0" width="48.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.6" y="574.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (375 samples, 4.12%)</title><rect x="590.6" y="547.0" width="48.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.6" y="558.0">one/..</text>
</g>
<g>
<title>.annobin_send.c (358 samples, 3.93%)</title><rect x="591.1" y="531.0" width="46.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="594.1" y="542.0">.ann..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (341 samples, 3.75%)</title><rect x="593.3" y="515.0" width="44.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="596.3" y="526.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (341 samples, 3.75%)</title><rect x="593.3" y="499.0" width="44.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="596.3" y="510.0">do_s..</text>
</g>
<g>
<title>__x64_sys_sendto (332 samples, 3.65%)</title><rect x="593.8" y="483.0" width="43.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="596.8" y="494.0">__x6..</text>
</g>
<g>
<title>__sys_sendto (331 samples, 3.64%)</title><rect x="594.0" y="467.0" width="42.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="597.0" y="478.0">__sy..</text>
</g>
<g>
<title>sock_sendmsg (323 samples, 3.55%)</title><rect x="594.6" y="451.0" width="41.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="597.6" y="462.0">soc..</text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.04%)</title><rect x="594.8" y="435.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="597.8" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (4 samples, 0.04%)</title><rect x="594.8" y="419.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="597.8" y="430.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.04%)</title><rect x="594.8" y="403.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="597.8" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (318 samples, 3.49%)</title><rect x="595.3" y="435.0" width="41.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="598.3" y="446.0">tcp..</text>
</g>
<g>
<title>release_sock (3 samples, 0.03%)</title><rect x="595.3" y="419.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="598.3" y="430.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.02%)</title><rect x="595.4" y="403.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="598.4" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (315 samples, 3.46%)</title><rect x="595.7" y="419.0" width="40.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="598.7" y="430.0">tcp..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.02%)</title><rect x="595.7" y="403.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="598.7" y="414.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (293 samples, 3.22%)</title><rect x="595.9" y="403.0" width="38.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="598.9" y="414.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (293 samples, 3.22%)</title><rect x="595.9" y="387.0" width="38.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="598.9" y="398.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (279 samples, 3.06%)</title><rect x="597.0" y="371.0" width="36.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="600.0" y="382.0">__t..</text>
</g>
<g>
<title>__ip_queue_xmit (271 samples, 2.98%)</title><rect x="597.5" y="355.0" width="35.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="600.5" y="366.0">__i..</text>
</g>
<g>
<title>__sk_dst_check (5 samples, 0.05%)</title><rect x="597.5" y="339.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="600.5" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (5 samples, 0.05%)</title><rect x="597.5" y="323.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="600.5" y="334.0"></text>
</g>
<g>
<title>ip_local_out (61 samples, 0.67%)</title><rect x="598.1" y="339.0" width="7.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="601.1" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (61 samples, 0.67%)</title><rect x="598.1" y="323.0" width="7.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="601.1" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (61 samples, 0.67%)</title><rect x="598.1" y="307.0" width="7.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="601.1" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (19 samples, 0.21%)</title><rect x="598.3" y="291.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="601.3" y="302.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.02%)</title><rect x="600.7" y="291.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="603.7" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (5 samples, 0.05%)</title><rect x="601.0" y="291.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="604.0" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (4 samples, 0.04%)</title><rect x="601.1" y="275.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="604.1" y="286.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (4 samples, 0.04%)</title><rect x="601.6" y="291.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="604.6" y="302.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.02%)</title><rect x="602.1" y="291.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="605.1" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (2 samples, 0.02%)</title><rect x="602.4" y="291.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="605.4" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (24 samples, 0.26%)</title><rect x="602.7" y="291.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="605.7" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (4 samples, 0.04%)</title><rect x="603.2" y="275.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="606.2" y="286.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (2 samples, 0.02%)</title><rect x="603.7" y="275.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="606.7" y="286.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (2 samples, 0.02%)</title><rect x="604.0" y="275.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="607.0" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (10 samples, 0.11%)</title><rect x="604.2" y="275.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="607.2" y="286.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (2 samples, 0.02%)</title><rect x="605.5" y="275.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="608.5" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (2 samples, 0.02%)</title><rect x="605.8" y="291.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="608.8" y="302.0"></text>
</g>
<g>
<title>ip_output (205 samples, 2.25%)</title><rect x="606.0" y="339.0" width="26.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="609.0" y="350.0">i..</text>
</g>
<g>
<title>ip_finish_output2 (198 samples, 2.17%)</title><rect x="606.0" y="323.0" width="25.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="609.0" y="334.0">i..</text>
</g>
<g>
<title>__dev_queue_xmit (15 samples, 0.16%)</title><rect x="606.4" y="307.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="609.4" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.12%)</title><rect x="606.9" y="291.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="609.9" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.09%)</title><rect x="607.3" y="275.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="610.3" y="286.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.03%)</title><rect x="607.7" y="259.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="610.7" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.03%)</title><rect x="607.7" y="243.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="610.7" y="254.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.03%)</title><rect x="607.7" y="227.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="610.7" y="238.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (180 samples, 1.98%)</title><rect x="608.4" y="307.0" width="23.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="611.4" y="318.0">_..</text>
</g>
<g>
<title>do_softirq.part.0 (179 samples, 1.97%)</title><rect x="608.5" y="291.0" width="23.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="611.5" y="302.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (177 samples, 1.94%)</title><rect x="608.7" y="275.0" width="23.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="611.7" y="286.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (177 samples, 1.94%)</title><rect x="608.7" y="259.0" width="23.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="611.7" y="270.0">_..</text>
</g>
<g>
<title>net_rx_action (171 samples, 1.88%)</title><rect x="609.5" y="243.0" width="22.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="612.5" y="254.0">n..</text>
</g>
<g>
<title>process_backlog (169 samples, 1.86%)</title><rect x="609.8" y="227.0" width="21.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="612.8" y="238.0">p..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (168 samples, 1.85%)</title><rect x="609.9" y="211.0" width="21.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="612.9" y="222.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_core (5 samples, 0.05%)</title><rect x="609.9" y="195.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="612.9" y="206.0"></text>
</g>
<g>
<title>ip_rcv (163 samples, 1.79%)</title><rect x="610.6" y="195.0" width="21.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="613.6" y="206.0">i..</text>
</g>
<g>
<title>ip_local_deliver (129 samples, 1.42%)</title><rect x="610.8" y="179.0" width="16.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="613.8" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (104 samples, 1.14%)</title><rect x="611.1" y="163.0" width="13.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="614.1" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (104 samples, 1.14%)</title><rect x="611.1" y="147.0" width="13.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="614.1" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (102 samples, 1.12%)</title><rect x="611.3" y="131.0" width="13.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="614.3" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (8 samples, 0.09%)</title><rect x="612.0" y="115.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="615.0" y="126.0"></text>
</g>
<g>
<title>inet_ehashfn (4 samples, 0.04%)</title><rect x="612.5" y="99.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="615.5" y="110.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.03%)</title><rect x="613.2" y="115.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="616.2" y="126.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.03%)</title><rect x="613.2" y="99.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="616.2" y="110.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (84 samples, 0.92%)</title><rect x="613.5" y="115.0" width="10.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="616.5" y="126.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.02%)</title><rect x="613.5" y="99.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="616.5" y="110.0"></text>
</g>
<g>
<title>tcp_rcv_established (82 samples, 0.90%)</title><rect x="613.8" y="99.0" width="10.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="616.8" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.04%)</title><rect x="614.1" y="83.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="617.1" y="94.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.02%)</title><rect x="614.3" y="67.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="617.3" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="614.3" y="51.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="617.3" y="62.0"></text>
</g>
<g>
<title>tcp_ack (21 samples, 0.23%)</title><rect x="614.6" y="83.0" width="2.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="617.6" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.04%)</title><rect x="615.6" y="67.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="618.6" y="78.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.03%)</title><rect x="615.7" y="51.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="618.7" y="62.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.02%)</title><rect x="616.4" y="67.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="619.4" y="78.0"></text>
</g>
<g>
<title>tcp_data_queue (51 samples, 0.56%)</title><rect x="617.4" y="83.0" width="6.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="620.4" y="94.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (2 samples, 0.02%)</title><rect x="617.4" y="67.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="620.4" y="78.0"></text>
</g>
<g>
<title>sock_def_readable (49 samples, 0.54%)</title><rect x="617.7" y="67.0" width="6.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="620.7" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (47 samples, 0.52%)</title><rect x="617.9" y="51.0" width="6.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="620.9" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (47 samples, 0.52%)</title><rect x="617.9" y="35.0" width="6.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="620.9" y="46.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.02%)</title><rect x="624.0" y="83.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="627.0" y="94.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.02%)</title><rect x="624.0" y="67.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="627.0" y="78.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.02%)</title><rect x="624.0" y="51.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="627.0" y="62.0"></text>
</g>
<g>
<title>nf_hook_slow (23 samples, 0.25%)</title><rect x="624.6" y="163.0" width="2.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="627.6" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (15 samples, 0.16%)</title><rect x="624.6" y="147.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="627.6" y="158.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (2 samples, 0.02%)</title><rect x="626.1" y="131.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="629.1" y="142.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.02%)</title><rect x="626.8" y="147.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="629.8" y="158.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (2 samples, 0.02%)</title><rect x="627.2" y="147.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="630.2" y="158.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (2 samples, 0.02%)</title><rect x="627.2" y="131.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="630.2" y="142.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.02%)</title><rect x="627.5" y="179.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="630.5" y="190.0"></text>
</g>
<g>
<title>nf_hook_slow (30 samples, 0.33%)</title><rect x="627.8" y="179.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="630.8" y="190.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (25 samples, 0.27%)</title><rect x="627.9" y="163.0" width="3.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="630.9" y="174.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.02%)</title><rect x="631.7" y="323.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="634.7" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (5 samples, 0.05%)</title><rect x="631.9" y="323.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="634.9" y="334.0"></text>
</g>
<g>
<title>selinux_ip_postroute (3 samples, 0.03%)</title><rect x="632.1" y="307.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="635.1" y="318.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.04%)</title><rect x="633.2" y="371.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="636.2" y="382.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.02%)</title><rect x="633.9" y="403.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="636.9" y="414.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.02%)</title><rect x="633.9" y="387.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="636.9" y="398.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.02%)</title><rect x="633.9" y="371.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="636.9" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (8 samples, 0.09%)</title><rect x="634.1" y="403.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="637.1" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.09%)</title><rect x="634.1" y="387.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="637.1" y="398.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (4 samples, 0.04%)</title><rect x="634.1" y="371.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="637.1" y="382.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.04%)</title><rect x="634.1" y="355.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="637.1" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.02%)</title><rect x="634.7" y="371.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="637.7" y="382.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.02%)</title><rect x="634.9" y="371.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="637.9" y="382.0"></text>
</g>
<g>
<title>tcp_send_mss (6 samples, 0.07%)</title><rect x="635.4" y="403.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="638.4" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.07%)</title><rect x="635.4" y="387.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="638.4" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.03%)</title><rect x="635.8" y="371.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="638.8" y="382.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.03%)</title><rect x="636.5" y="451.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="639.5" y="462.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="636.5" y="435.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="639.5" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.05%)</title><rect x="636.9" y="483.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="639.9" y="494.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="637.1" y="467.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="640.1" y="478.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="637.3" y="451.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="640.3" y="462.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.02%)</title><rect x="637.3" y="435.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="640.3" y="446.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.13%)</title><rect x="637.5" y="531.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="640.5" y="542.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.13%)</title><rect x="637.5" y="515.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="640.5" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (11 samples, 0.12%)</title><rect x="637.6" y="499.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="640.6" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="638.0" y="483.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="641.0" y="494.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="638.3" y="483.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="641.3" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.02%)</title><rect x="638.8" y="483.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="641.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (11 samples, 0.12%)</title><rect x="639.2" y="627.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="639.2" y="611.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="642.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.05%)</title><rect x="639.2" y="595.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.04%)</title><rect x="639.3" y="579.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.3" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="639.9" y="611.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="642.9" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.03%)</title><rect x="640.2" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (1,504 samples, 16.52%)</title><rect x="640.6" y="627.0" width="194.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.6" y="638.0">ru/mail/polis/service/sha..</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (5 samples, 0.05%)</title><rect x="640.6" y="611.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.05%)</title><rect x="640.6" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.6" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="640.8" y="579.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="640.8" y="563.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.8" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.02%)</title><rect x="640.8" y="547.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.02%)</title><rect x="641.0" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="644.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.02%)</title><rect x="641.0" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="644.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.02%)</title><rect x="641.0" y="547.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="641.3" y="611.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.3" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="641.3" y="595.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="644.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.3" y="579.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="644.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.3" y="563.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.3" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.3" y="547.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="641.3" y="531.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="644.3" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="641.5" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.5" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.5" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.5" y="579.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="644.5" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.5" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="644.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.5" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="641.5" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,495 samples, 16.42%)</title><rect x="641.8" y="611.0" width="193.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.8" y="622.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (28 samples, 0.31%)</title><rect x="641.8" y="595.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.8" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (27 samples, 0.30%)</title><rect x="641.9" y="579.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="644.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (27 samples, 0.30%)</title><rect x="641.9" y="563.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (27 samples, 0.30%)</title><rect x="641.9" y="547.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (26 samples, 0.29%)</title><rect x="642.1" y="531.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (21 samples, 0.23%)</title><rect x="642.2" y="515.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="645.2" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (14 samples, 0.15%)</title><rect x="642.2" y="499.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="645.2" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (14 samples, 0.15%)</title><rect x="642.2" y="483.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.2" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (13 samples, 0.14%)</title><rect x="642.3" y="467.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.12%)</title><rect x="642.6" y="451.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.12%)</title><rect x="642.6" y="435.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (11 samples, 0.12%)</title><rect x="642.6" y="419.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="645.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (11 samples, 0.12%)</title><rect x="642.6" y="403.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.6" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (11 samples, 0.12%)</title><rect x="642.6" y="387.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.6" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.12%)</title><rect x="642.6" y="371.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.6" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (11 samples, 0.12%)</title><rect x="642.6" y="355.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.6" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.12%)</title><rect x="642.6" y="339.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.6" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (11 samples, 0.12%)</title><rect x="642.6" y="323.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.6" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (11 samples, 0.12%)</title><rect x="642.6" y="307.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.07%)</title><rect x="642.6" y="291.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.07%)</title><rect x="642.6" y="275.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.6" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.05%)</title><rect x="642.6" y="259.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (5 samples, 0.05%)</title><rect x="643.4" y="291.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="646.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (5 samples, 0.05%)</title><rect x="643.4" y="275.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="646.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="643.4" y="259.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="646.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="643.4" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="643.4" y="227.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="643.4" y="211.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.4" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="643.7" y="195.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="643.7" y="179.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="643.7" y="163.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.7" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="643.7" y="147.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.7" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7 samples, 0.08%)</title><rect x="644.0" y="499.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7 samples, 0.08%)</title><rect x="644.0" y="483.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="647.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (7 samples, 0.08%)</title><rect x="644.0" y="467.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.0" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (7 samples, 0.08%)</title><rect x="644.0" y="451.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.08%)</title><rect x="644.0" y="435.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.08%)</title><rect x="644.0" y="419.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4 samples, 0.04%)</title><rect x="644.0" y="403.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="644.0" y="387.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="644.0" y="371.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (2 samples, 0.02%)</title><rect x="644.3" y="355.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (3 samples, 0.03%)</title><rect x="644.5" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (3 samples, 0.03%)</title><rect x="644.5" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (3 samples, 0.03%)</title><rect x="644.5" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.03%)</title><rect x="644.5" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (3 samples, 0.03%)</title><rect x="644.5" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.03%)</title><rect x="644.5" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (3 samples, 0.03%)</title><rect x="644.5" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.5" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.03%)</title><rect x="644.5" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (2 samples, 0.02%)</title><rect x="644.6" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="647.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="644.6" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.6" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="644.6" y="243.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.6" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="644.6" y="227.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="644.6" y="211.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="644.6" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$56/1514133115.apply (3 samples, 0.03%)</title><rect x="645.0" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.03%)</title><rect x="645.0" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.0" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="645.0" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="645.0" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.0" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.0" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="648.0" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="645.2" y="419.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="648.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (6 samples, 0.07%)</title><rect x="645.4" y="595.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="648.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 0.07%)</title><rect x="645.4" y="579.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$62/1670576925.apply (5 samples, 0.05%)</title><rect x="645.6" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (5 samples, 0.05%)</title><rect x="645.6" y="547.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="645.6" y="531.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="645.6" y="515.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="648.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="645.6" y="499.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="645.6" y="483.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="648.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="645.6" y="467.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.6" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="645.6" y="451.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="645.6" y="435.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="645.6" y="419.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.6" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="645.6" y="403.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (3 samples, 0.03%)</title><rect x="645.8" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="648.8" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="645.8" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="648.8" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="645.8" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="648.8" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.8" y="483.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.8" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.8" y="467.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.8" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.8" y="451.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.8" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.8" y="419.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.8" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="645.8" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.07%)</title><rect x="646.2" y="595.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.2" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.05%)</title><rect x="646.3" y="579.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.3" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.04%)</title><rect x="646.5" y="563.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.02%)</title><rect x="647.0" y="595.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="650.0" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="647.0" y="579.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="650.0" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="647.0" y="563.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,452 samples, 15.95%)</title><rect x="647.4" y="595.0" width="188.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.4" y="606.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (2 samples, 0.02%)</title><rect x="647.4" y="579.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="650.4" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (2 samples, 0.02%)</title><rect x="647.4" y="563.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="650.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="647.4" y="547.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="650.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,449 samples, 15.91%)</title><rect x="647.8" y="579.0" width="187.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.8" y="590.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (131 samples, 1.44%)</title><rect x="647.9" y="563.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (131 samples, 1.44%)</title><rect x="647.9" y="547.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="650.9" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (118 samples, 1.30%)</title><rect x="649.4" y="531.0" width="15.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="652.4" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (113 samples, 1.24%)</title><rect x="649.8" y="515.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.8" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (4 samples, 0.04%)</title><rect x="649.8" y="499.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="652.8" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="649.8" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="652.8" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (109 samples, 1.20%)</title><rect x="650.3" y="499.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.3" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (109 samples, 1.20%)</title><rect x="650.3" y="483.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="653.3" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (105 samples, 1.15%)</title><rect x="650.9" y="467.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.9" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (105 samples, 1.15%)</title><rect x="650.9" y="451.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="653.9" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (54 samples, 0.59%)</title><rect x="650.9" y="435.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="653.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (53 samples, 0.58%)</title><rect x="651.0" y="419.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="654.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (53 samples, 0.58%)</title><rect x="651.0" y="403.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="654.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (51 samples, 0.56%)</title><rect x="651.3" y="387.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (15 samples, 0.16%)</title><rect x="651.4" y="371.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="654.4" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="651.4" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.4" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="651.4" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="651.4" y="323.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="651.4" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="651.4" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="651.4" y="275.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="651.4" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="651.4" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="654.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="651.5" y="227.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (11 samples, 0.12%)</title><rect x="651.9" y="355.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="651.9" y="339.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="651.9" y="323.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="654.9" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="651.9" y="307.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="651.9" y="291.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="651.9" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="654.9" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="651.9" y="259.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="651.9" y="243.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="654.9" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="651.9" y="227.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (21 samples, 0.23%)</title><rect x="653.3" y="371.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.3" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (18 samples, 0.20%)</title><rect x="653.3" y="355.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="656.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (18 samples, 0.20%)</title><rect x="653.3" y="339.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (15 samples, 0.16%)</title><rect x="653.7" y="323.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="653.7" y="307.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.7" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="653.7" y="291.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="653.7" y="275.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="653.7" y="259.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.7" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.16%)</title><rect x="653.7" y="243.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (14 samples, 0.15%)</title><rect x="653.7" y="227.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.7" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.03%)</title><rect x="655.7" y="355.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.7" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="655.7" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="655.7" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.7" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="655.7" y="307.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="655.7" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="655.7" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.7" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="655.7" y="259.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.7" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="655.7" y="243.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="655.7" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.04%)</title><rect x="656.1" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="656.1" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="656.1" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="656.1" y="323.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.1" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="656.1" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="656.1" y="291.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="659.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="656.1" y="275.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.1" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="656.1" y="259.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.1" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="656.1" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.1" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="656.1" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (10 samples, 0.11%)</title><rect x="656.6" y="371.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.08%)</title><rect x="656.6" y="355.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.08%)</title><rect x="656.6" y="339.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.08%)</title><rect x="656.6" y="323.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="656.6" y="307.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.6" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="656.6" y="291.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="656.6" y="275.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="656.6" y="259.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="656.6" y="243.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="656.6" y="227.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="659.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.03%)</title><rect x="657.5" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="657.5" y="339.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.5" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="657.5" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.5" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="657.5" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="660.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="657.5" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="657.5" y="275.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.5" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="657.5" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="657.5" y="243.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.5" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="657.5" y="227.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="660.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (51 samples, 0.56%)</title><rect x="657.9" y="435.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (51 samples, 0.56%)</title><rect x="657.9" y="419.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.9" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (51 samples, 0.56%)</title><rect x="657.9" y="403.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="660.9" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (48 samples, 0.53%)</title><rect x="658.3" y="387.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.3" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (4 samples, 0.04%)</title><rect x="658.3" y="371.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="661.3" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.04%)</title><rect x="658.3" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="661.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (4 samples, 0.04%)</title><rect x="658.3" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="658.3" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="661.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="658.3" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="661.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.04%)</title><rect x="658.3" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.04%)</title><rect x="658.3" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.3" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="658.3" y="259.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.3" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="658.3" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="661.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="658.3" y="227.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.3" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (44 samples, 0.48%)</title><rect x="658.8" y="371.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.8" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (44 samples, 0.48%)</title><rect x="658.8" y="355.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.8" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (43 samples, 0.47%)</title><rect x="658.8" y="339.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.8" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (43 samples, 0.47%)</title><rect x="658.8" y="323.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 0.26%)</title><rect x="658.8" y="307.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="661.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 0.26%)</title><rect x="658.8" y="291.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="661.8" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (20 samples, 0.22%)</title><rect x="659.0" y="275.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="660.2" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (5 samples, 0.05%)</title><rect x="660.6" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.02%)</title><rect x="661.4" y="259.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="664.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="661.6" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="664.6" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.02%)</title><rect x="661.6" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (19 samples, 0.21%)</title><rect x="661.9" y="307.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="664.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (19 samples, 0.21%)</title><rect x="661.9" y="291.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="664.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (11 samples, 0.12%)</title><rect x="661.9" y="275.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="664.9" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (11 samples, 0.12%)</title><rect x="661.9" y="259.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="664.9" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="661.9" y="243.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="664.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="661.9" y="227.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="664.9" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="663.0" y="211.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="663.0" y="195.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="663.0" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.0" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="663.0" y="163.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.0" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.09%)</title><rect x="663.3" y="275.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.3" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (8 samples, 0.09%)</title><rect x="663.3" y="259.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="663.3" y="243.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="663.3" y="227.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.3" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="664.0" y="211.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.0" y="222.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="664.0" y="195.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="667.0" y="206.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="664.5" y="515.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="667.5" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (11 samples, 0.12%)</title><rect x="664.9" y="563.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.9" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (11 samples, 0.12%)</title><rect x="664.9" y="547.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="667.9" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (11 samples, 0.12%)</title><rect x="664.9" y="531.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.9" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (11 samples, 0.12%)</title><rect x="664.9" y="515.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="667.9" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.02%)</title><rect x="664.9" y="499.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.9" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.10%)</title><rect x="665.1" y="499.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (21 samples, 0.23%)</title><rect x="666.3" y="563.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (21 samples, 0.23%)</title><rect x="666.3" y="547.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.3" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (3 samples, 0.03%)</title><rect x="666.3" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.3" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (17 samples, 0.19%)</title><rect x="666.7" y="531.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.7" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (7 samples, 0.08%)</title><rect x="666.7" y="515.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (7 samples, 0.08%)</title><rect x="666.7" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.7" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (5 samples, 0.05%)</title><rect x="666.9" y="483.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.9" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.04%)</title><rect x="667.1" y="467.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.1" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.04%)</title><rect x="667.1" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="670.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (4 samples, 0.04%)</title><rect x="667.1" y="435.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="670.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.04%)</title><rect x="667.1" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="670.1" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (4 samples, 0.04%)</title><rect x="667.1" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="667.1" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="670.1" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (4 samples, 0.04%)</title><rect x="667.1" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.04%)</title><rect x="667.1" y="355.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.1" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (4 samples, 0.04%)</title><rect x="667.1" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.04%)</title><rect x="667.1" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="670.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="667.1" y="307.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="670.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="667.1" y="291.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.1" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="667.1" y="275.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (2 samples, 0.02%)</title><rect x="667.3" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.02%)</title><rect x="667.3" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="670.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="667.3" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="670.3" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="667.3" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="670.3" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="667.3" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="667.3" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.3" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (10 samples, 0.11%)</title><rect x="667.6" y="515.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="670.6" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9 samples, 0.10%)</title><rect x="667.7" y="499.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.7" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (9 samples, 0.10%)</title><rect x="667.7" y="483.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.7" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (9 samples, 0.10%)</title><rect x="667.7" y="467.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="670.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="667.8" y="451.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="670.8" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="667.8" y="435.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="670.8" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4 samples, 0.04%)</title><rect x="667.8" y="419.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="670.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="667.8" y="403.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="667.8" y="387.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (4 samples, 0.04%)</title><rect x="667.8" y="371.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="670.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.02%)</title><rect x="668.0" y="355.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.02%)</title><rect x="668.0" y="339.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="671.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="668.0" y="323.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="671.0" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="668.0" y="307.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="671.0" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="668.0" y="291.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="668.0" y="275.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="671.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="668.0" y="259.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="668.0" y="243.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="671.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (4 samples, 0.04%)</title><rect x="668.4" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.04%)</title><rect x="668.4" y="403.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="671.4" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (4 samples, 0.04%)</title><rect x="668.4" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="671.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.03%)</title><rect x="668.5" y="371.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (3 samples, 0.03%)</title><rect x="668.5" y="355.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="671.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.03%)</title><rect x="668.5" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (3 samples, 0.03%)</title><rect x="668.5" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.03%)</title><rect x="668.5" y="307.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="671.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="668.5" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.02%)</title><rect x="668.5" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="671.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (46 samples, 0.51%)</title><rect x="669.0" y="563.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="672.0" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (38 samples, 0.42%)</title><rect x="669.0" y="547.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="672.0" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (38 samples, 0.42%)</title><rect x="669.0" y="531.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="672.0" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (35 samples, 0.38%)</title><rect x="669.3" y="515.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="672.3" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (35 samples, 0.38%)</title><rect x="669.3" y="499.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="672.3" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (35 samples, 0.38%)</title><rect x="669.3" y="483.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.3" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (30 samples, 0.33%)</title><rect x="669.9" y="467.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="672.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.21%)</title><rect x="671.3" y="451.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="674.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.21%)</title><rect x="671.3" y="435.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.3" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (18 samples, 0.20%)</title><rect x="671.5" y="419.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.5" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.08%)</title><rect x="672.3" y="403.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (5 samples, 0.05%)</title><rect x="673.2" y="403.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="676.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.03%)</title><rect x="673.4" y="387.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="676.4" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (8 samples, 0.09%)</title><rect x="673.9" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.9" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (8 samples, 0.09%)</title><rect x="673.9" y="531.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="676.9" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (8 samples, 0.09%)</title><rect x="673.9" y="515.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.9" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (8 samples, 0.09%)</title><rect x="673.9" y="499.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="676.9" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (8 samples, 0.09%)</title><rect x="673.9" y="483.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.09%)</title><rect x="673.9" y="467.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.09%)</title><rect x="673.9" y="451.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="676.9" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.07%)</title><rect x="674.1" y="435.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.1" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="674.5" y="419.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (1,239 samples, 13.61%)</title><rect x="675.0" y="563.0" width="160.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.0" y="574.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (1,238 samples, 13.60%)</title><rect x="675.1" y="547.0" width="160.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="678.1" y="558.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (1,223 samples, 13.43%)</title><rect x="677.0" y="531.0" width="158.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.0" y="542.0">ru/mail/polis/dao/sh..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (219 samples, 2.41%)</title><rect x="680.0" y="515.0" width="28.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.0" y="526.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (198 samples, 2.17%)</title><rect x="682.1" y="499.0" width="25.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.1" y="510.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.02%)</title><rect x="696.0" y="483.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (27 samples, 0.30%)</title><rect x="696.2" y="483.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (12 samples, 0.13%)</title><rect x="698.2" y="467.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (7 samples, 0.08%)</title><rect x="699.7" y="483.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.7" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (19 samples, 0.21%)</title><rect x="700.6" y="483.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="703.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (20 samples, 0.22%)</title><rect x="703.1" y="483.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (5 samples, 0.05%)</title><rect x="704.4" y="467.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="707.4" y="478.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="705.0" y="467.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="708.0" y="478.0"></text>
</g>
<g>
<title>vtable stub (16 samples, 0.18%)</title><rect x="705.7" y="483.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="708.7" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="707.8" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.8" y="510.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="708.2" y="499.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="711.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (500 samples, 5.49%)</title><rect x="708.4" y="515.0" width="64.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.4" y="526.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (151 samples, 1.66%)</title><rect x="708.4" y="499.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.4" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (151 samples, 1.66%)</title><rect x="708.4" y="483.0" width="19.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="711.4" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (151 samples, 1.66%)</title><rect x="708.4" y="467.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.4" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (151 samples, 1.66%)</title><rect x="708.4" y="451.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.4" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (151 samples, 1.66%)</title><rect x="708.4" y="435.0" width="19.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (151 samples, 1.66%)</title><rect x="708.4" y="419.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (151 samples, 1.66%)</title><rect x="708.4" y="403.0" width="19.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="711.4" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (151 samples, 1.66%)</title><rect x="708.4" y="387.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.4" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (100 samples, 1.10%)</title><rect x="708.4" y="371.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.11%)</title><rect x="717.9" y="355.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.18%)</title><rect x="719.2" y="355.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="722.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (16 samples, 0.18%)</title><rect x="719.2" y="339.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="722.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (16 samples, 0.18%)</title><rect x="719.2" y="323.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (51 samples, 0.56%)</title><rect x="721.4" y="371.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.14%)</title><rect x="724.6" y="355.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="727.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.14%)</title><rect x="726.3" y="355.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="729.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (13 samples, 0.14%)</title><rect x="726.3" y="339.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="729.3" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (13 samples, 0.14%)</title><rect x="726.3" y="323.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="729.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (349 samples, 3.83%)</title><rect x="728.0" y="499.0" width="45.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.0" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (349 samples, 3.83%)</title><rect x="728.0" y="483.0" width="45.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.0" y="494.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (349 samples, 3.83%)</title><rect x="728.0" y="467.0" width="45.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.0" y="478.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (349 samples, 3.83%)</title><rect x="728.0" y="451.0" width="45.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="731.0" y="462.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (349 samples, 3.83%)</title><rect x="728.0" y="435.0" width="45.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="731.0" y="446.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (349 samples, 3.83%)</title><rect x="728.0" y="419.0" width="45.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.0" y="430.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (349 samples, 3.83%)</title><rect x="728.0" y="403.0" width="45.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.0" y="414.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (310 samples, 3.40%)</title><rect x="728.0" y="387.0" width="40.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.0" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (310 samples, 3.40%)</title><rect x="728.0" y="371.0" width="40.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="731.0" y="382.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (19 samples, 0.21%)</title><rect x="764.3" y="355.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.3" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (19 samples, 0.21%)</title><rect x="764.3" y="339.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="767.3" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (10 samples, 0.11%)</title><rect x="766.7" y="355.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.7" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (39 samples, 0.43%)</title><rect x="768.2" y="387.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="771.2" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (39 samples, 0.43%)</title><rect x="768.2" y="371.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="771.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.14%)</title><rect x="770.0" y="355.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.13%)</title><rect x="771.7" y="355.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="774.7" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.13%)</title><rect x="771.7" y="339.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="774.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (481 samples, 5.28%)</title><rect x="773.2" y="515.0" width="62.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="776.2" y="526.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (358 samples, 3.93%)</title><rect x="773.2" y="499.0" width="46.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="776.2" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (358 samples, 3.93%)</title><rect x="773.2" y="483.0" width="46.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.2" y="494.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.05%)</title><rect x="777.6" y="467.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="780.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (319 samples, 3.50%)</title><rect x="778.3" y="467.0" width="41.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.3" y="478.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (319 samples, 3.50%)</title><rect x="778.3" y="451.0" width="41.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.3" y="462.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (319 samples, 3.50%)</title><rect x="778.3" y="435.0" width="41.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.3" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (319 samples, 3.50%)</title><rect x="778.3" y="419.0" width="41.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.3" y="430.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (319 samples, 3.50%)</title><rect x="778.3" y="403.0" width="41.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="781.3" y="414.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (319 samples, 3.50%)</title><rect x="778.3" y="387.0" width="41.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="781.3" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (260 samples, 2.86%)</title><rect x="778.3" y="371.0" width="33.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.3" y="382.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (18 samples, 0.20%)</title><rect x="809.5" y="355.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (18 samples, 0.20%)</title><rect x="809.5" y="339.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.5" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (18 samples, 0.20%)</title><rect x="809.5" y="323.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.5" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (59 samples, 0.65%)</title><rect x="812.0" y="371.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="815.0" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (17 samples, 0.19%)</title><rect x="816.0" y="355.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="819.0" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (11 samples, 0.12%)</title><rect x="818.2" y="355.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="821.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.12%)</title><rect x="818.2" y="339.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.12%)</title><rect x="818.2" y="323.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.2" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (123 samples, 1.35%)</title><rect x="819.6" y="499.0" width="15.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (123 samples, 1.35%)</title><rect x="819.6" y="483.0" width="15.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="822.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (123 samples, 1.35%)</title><rect x="819.6" y="467.0" width="15.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.6" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (123 samples, 1.35%)</title><rect x="819.6" y="451.0" width="15.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (123 samples, 1.35%)</title><rect x="819.6" y="435.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="822.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (123 samples, 1.35%)</title><rect x="819.6" y="419.0" width="15.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="822.6" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (123 samples, 1.35%)</title><rect x="819.6" y="403.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.6" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (92 samples, 1.01%)</title><rect x="819.6" y="387.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="822.6" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (92 samples, 1.01%)</title><rect x="819.6" y="371.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="829.3" y="355.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.3" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.05%)</title><rect x="829.3" y="339.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="832.3" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.13%)</title><rect x="830.0" y="355.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.0" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (31 samples, 0.34%)</title><rect x="831.5" y="387.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="834.5" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (31 samples, 0.34%)</title><rect x="831.5" y="371.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="834.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.10%)</title><rect x="833.3" y="355.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="836.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.09%)</title><rect x="834.5" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.5" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.09%)</title><rect x="834.5" y="339.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.07%)</title><rect x="835.5" y="643.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="838.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.07%)</title><rect x="835.5" y="627.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="838.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="835.7" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="835.7" y="595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="838.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.05%)</title><rect x="835.7" y="579.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (23 samples, 0.25%)</title><rect x="836.3" y="675.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="839.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.03%)</title><rect x="836.3" y="659.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="836.3" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="836.3" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="836.3" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="839.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.15%)</title><rect x="836.7" y="659.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="839.7" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.15%)</title><rect x="836.7" y="643.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.7" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.09%)</title><rect x="837.1" y="627.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (8 samples, 0.09%)</title><rect x="837.1" y="611.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="840.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (3 samples, 0.03%)</title><rect x="838.1" y="627.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="841.1" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.07%)</title><rect x="838.5" y="659.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.5" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="839.6" y="675.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="842.6" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (72 samples, 0.79%)</title><rect x="839.8" y="691.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="842.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (71 samples, 0.78%)</title><rect x="840.0" y="675.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.13%)</title><rect x="840.1" y="659.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="843.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.13%)</title><rect x="840.1" y="643.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="843.1" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (9 samples, 0.10%)</title><rect x="840.1" y="627.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="843.1" y="638.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.03%)</title><rect x="840.1" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.1" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="840.7" y="611.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="843.7" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="840.9" y="595.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="843.9" y="606.0"></text>
</g>
<g>
<title>__libc_recv (57 samples, 0.63%)</title><rect x="841.6" y="659.0" width="7.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="844.6" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (47 samples, 0.52%)</title><rect x="842.9" y="643.0" width="6.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="845.9" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (47 samples, 0.52%)</title><rect x="842.9" y="627.0" width="6.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="845.9" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (43 samples, 0.47%)</title><rect x="843.5" y="611.0" width="5.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="846.5" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (42 samples, 0.46%)</title><rect x="843.6" y="595.0" width="5.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="846.6" y="606.0"></text>
</g>
<g>
<title>import_single_range (4 samples, 0.04%)</title><rect x="843.7" y="579.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="846.7" y="590.0"></text>
</g>
<g>
<title>inet_recvmsg (27 samples, 0.30%)</title><rect x="844.2" y="579.0" width="3.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="847.2" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (27 samples, 0.30%)</title><rect x="844.2" y="563.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="847.2" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.03%)</title><rect x="845.1" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="848.1" y="558.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.02%)</title><rect x="845.3" y="531.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="848.3" y="542.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.03%)</title><rect x="845.9" y="547.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="848.9" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.02%)</title><rect x="846.0" y="531.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="849.0" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (7 samples, 0.08%)</title><rect x="846.3" y="547.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="849.3" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (7 samples, 0.08%)</title><rect x="846.3" y="531.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="849.3" y="542.0"></text>
</g>
<g>
<title>simple_copy_to_iter (6 samples, 0.07%)</title><rect x="846.4" y="515.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="849.4" y="526.0"></text>
</g>
<g>
<title>__check_object_size (5 samples, 0.05%)</title><rect x="846.6" y="499.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="849.6" y="510.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.04%)</title><rect x="846.7" y="483.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="849.7" y="494.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.03%)</title><rect x="847.2" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="850.2" y="558.0"></text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.03%)</title><rect x="847.2" y="531.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="850.2" y="542.0"></text>
</g>
<g>
<title>sock_recvmsg (5 samples, 0.05%)</title><rect x="847.7" y="579.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="850.7" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.05%)</title><rect x="847.7" y="563.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="850.7" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (4 samples, 0.04%)</title><rect x="847.9" y="547.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="850.9" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (3 samples, 0.03%)</title><rect x="848.0" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="851.0" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (5 samples, 0.05%)</title><rect x="848.4" y="579.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="851.4" y="590.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.05%)</title><rect x="848.4" y="563.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="851.4" y="574.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.03%)</title><rect x="848.6" y="547.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="851.6" y="558.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=29056] (2,158 samples, 23.70%)</title><rect x="849.3" y="755.0" width="279.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="852.3" y="766.0">[NIO Selector #3 tid=29056]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (22 samples, 0.24%)</title><rect x="849.5" y="739.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="852.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (21 samples, 0.23%)</title><rect x="849.7" y="723.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="852.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (20 samples, 0.22%)</title><rect x="849.8" y="707.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.8" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (18 samples, 0.20%)</title><rect x="849.8" y="691.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="852.8" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (15 samples, 0.16%)</title><rect x="849.9" y="675.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="852.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (6 samples, 0.07%)</title><rect x="850.2" y="659.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.2" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (6 samples, 0.07%)</title><rect x="850.2" y="643.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="853.2" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.02%)</title><rect x="850.2" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="853.2" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.02%)</title><rect x="850.2" y="611.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="853.2" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (2 samples, 0.02%)</title><rect x="850.2" y="595.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="853.2" y="606.0"></text>
</g>
<g>
<title>Monitor::lock() (2 samples, 0.02%)</title><rect x="850.5" y="627.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="853.5" y="638.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.02%)</title><rect x="850.7" y="627.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="853.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.02%)</title><rect x="850.7" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.7" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.02%)</title><rect x="850.7" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="853.7" y="606.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.02%)</title><rect x="850.7" y="579.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="853.7" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (3 samples, 0.03%)</title><rect x="851.0" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="854.0" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.02%)</title><rect x="851.4" y="659.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.4" y="670.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="851.6" y="659.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="854.6" y="670.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.04%)</title><rect x="852.4" y="739.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="855.4" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.02%)</title><rect x="852.7" y="723.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.7" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (18 samples, 0.20%)</title><rect x="853.0" y="739.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="856.0" y="750.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,108 samples, 23.15%)</title><rect x="855.6" y="739.0" width="273.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="858.6" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (91 samples, 1.00%)</title><rect x="856.4" y="723.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (85 samples, 0.93%)</title><rect x="857.2" y="707.0" width="11.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="860.2" y="718.0"></text>
</g>
<g>
<title>.annobin_epoll_wait.c (71 samples, 0.78%)</title><rect x="857.6" y="691.0" width="9.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="860.6" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (63 samples, 0.69%)</title><rect x="858.6" y="675.0" width="8.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="861.6" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (63 samples, 0.69%)</title><rect x="858.6" y="659.0" width="8.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="861.6" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (52 samples, 0.57%)</title><rect x="860.0" y="643.0" width="6.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="863.0" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (51 samples, 0.56%)</title><rect x="860.2" y="627.0" width="6.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="863.2" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="860.3" y="611.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="863.3" y="622.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.03%)</title><rect x="860.4" y="595.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="863.4" y="606.0"></text>
</g>
<g>
<title>ep_poll (44 samples, 0.48%)</title><rect x="860.8" y="611.0" width="5.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="863.8" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (32 samples, 0.35%)</title><rect x="861.5" y="595.0" width="4.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="864.5" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (18 samples, 0.20%)</title><rect x="862.5" y="579.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="865.5" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (13 samples, 0.14%)</title><rect x="863.2" y="563.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="866.2" y="574.0"></text>
</g>
<g>
<title>sock_poll (12 samples, 0.13%)</title><rect x="863.3" y="547.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="866.3" y="558.0"></text>
</g>
<g>
<title>tcp_poll (5 samples, 0.05%)</title><rect x="864.2" y="531.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="867.2" y="542.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.03%)</title><rect x="864.8" y="579.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="867.8" y="590.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.03%)</title><rect x="865.2" y="579.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="868.2" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (7 samples, 0.08%)</title><rect x="865.6" y="595.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="868.6" y="606.0"></text>
</g>
<g>
<title>schedule (6 samples, 0.07%)</title><rect x="865.7" y="579.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="868.7" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.05%)</title><rect x="865.9" y="563.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="868.9" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.04%)</title><rect x="866.0" y="547.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="869.0" y="558.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.02%)</title><rect x="866.5" y="611.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="869.5" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.02%)</title><rect x="866.8" y="691.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="869.8" y="702.0"></text>
</g>
<g>
<title>__GI___clock_gettime (5 samples, 0.05%)</title><rect x="867.0" y="691.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="870.0" y="702.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.02%)</title><rect x="867.7" y="691.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="870.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,011 samples, 22.09%)</title><rect x="868.2" y="723.0" width="260.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="871.2" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,011 samples, 22.09%)</title><rect x="868.2" y="707.0" width="260.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.2" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,923 samples, 21.12%)</title><rect x="868.2" y="691.0" width="249.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="871.2" y="702.0">one/nio/http/HttpSession.processH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,901 samples, 20.88%)</title><rect x="868.5" y="675.0" width="246.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.5" y="686.0">one/nio/http/HttpSession.handlePa..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,901 samples, 20.88%)</title><rect x="868.5" y="659.0" width="246.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.5" y="670.0">one/nio/http/HttpServer.handleReq..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,896 samples, 20.82%)</title><rect x="868.5" y="643.0" width="245.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="871.5" y="654.0">RequestHandler1_entity.handleRequ..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (364 samples, 4.00%)</title><rect x="868.5" y="627.0" width="47.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.5" y="638.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.03%)</title><rect x="868.9" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="871.9" y="622.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="869.0" y="595.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="872.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (356 samples, 3.91%)</title><rect x="869.2" y="611.0" width="46.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="872.2" y="622.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.09%)</title><rect x="869.2" y="595.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="872.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.04%)</title><rect x="869.8" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="872.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.03%)</title><rect x="869.8" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="872.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (348 samples, 3.82%)</title><rect x="870.3" y="595.0" width="45.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="873.3" y="606.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (348 samples, 3.82%)</title><rect x="870.3" y="579.0" width="45.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="873.3" y="590.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (348 samples, 3.82%)</title><rect x="870.3" y="563.0" width="45.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="873.3" y="574.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (345 samples, 3.79%)</title><rect x="870.7" y="547.0" width="44.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.7" y="558.0">one/..</text>
</g>
<g>
<title>.annobin_send.c (332 samples, 3.65%)</title><rect x="871.2" y="531.0" width="43.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="874.2" y="542.0">.ann..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (317 samples, 3.48%)</title><rect x="873.1" y="515.0" width="41.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="876.1" y="526.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (317 samples, 3.48%)</title><rect x="873.1" y="499.0" width="41.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="876.1" y="510.0">do_..</text>
</g>
<g>
<title>__x64_sys_sendto (307 samples, 3.37%)</title><rect x="873.9" y="483.0" width="39.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="876.9" y="494.0">__x..</text>
</g>
<g>
<title>__sys_sendto (306 samples, 3.36%)</title><rect x="874.0" y="467.0" width="39.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="877.0" y="478.0">__s..</text>
</g>
<g>
<title>sock_sendmsg (304 samples, 3.34%)</title><rect x="874.3" y="451.0" width="39.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="877.3" y="462.0">soc..</text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.02%)</title><rect x="874.3" y="435.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="877.3" y="446.0"></text>
</g>
<g>
<title>sock_has_perm (2 samples, 0.02%)</title><rect x="874.3" y="419.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="877.3" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg (302 samples, 3.32%)</title><rect x="874.6" y="435.0" width="39.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="877.6" y="446.0">tcp..</text>
</g>
<g>
<title>tcp_sendmsg_locked (301 samples, 3.31%)</title><rect x="874.7" y="419.0" width="39.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="877.7" y="430.0">tcp..</text>
</g>
<g>
<title>__check_object_size (5 samples, 0.05%)</title><rect x="874.8" y="403.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="877.8" y="414.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.05%)</title><rect x="874.8" y="387.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="877.8" y="398.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (282 samples, 3.10%)</title><rect x="875.5" y="403.0" width="36.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="878.5" y="414.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (282 samples, 3.10%)</title><rect x="875.5" y="387.0" width="36.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="878.5" y="398.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (269 samples, 2.95%)</title><rect x="876.1" y="371.0" width="34.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="879.1" y="382.0">__..</text>
</g>
<g>
<title>__ip_queue_xmit (260 samples, 2.86%)</title><rect x="876.4" y="355.0" width="33.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="879.4" y="366.0">__..</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.02%)</title><rect x="876.5" y="339.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="879.5" y="350.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.02%)</title><rect x="876.5" y="323.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="879.5" y="334.0"></text>
</g>
<g>
<title>ip_local_out (62 samples, 0.68%)</title><rect x="876.8" y="339.0" width="8.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="879.8" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (62 samples, 0.68%)</title><rect x="876.8" y="323.0" width="8.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="879.8" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (61 samples, 0.67%)</title><rect x="876.9" y="307.0" width="7.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="879.9" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (10 samples, 0.11%)</title><rect x="876.9" y="291.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="879.9" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (7 samples, 0.08%)</title><rect x="878.3" y="291.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="881.3" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (5 samples, 0.05%)</title><rect x="878.6" y="275.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="881.6" y="286.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.03%)</title><rect x="879.2" y="291.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="882.2" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.04%)</title><rect x="879.6" y="291.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="882.6" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (32 samples, 0.35%)</title><rect x="880.3" y="291.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="883.3" y="302.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (10 samples, 0.11%)</title><rect x="880.9" y="275.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="883.9" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (12 samples, 0.13%)</title><rect x="882.3" y="275.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="885.3" y="286.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (3 samples, 0.03%)</title><rect x="883.5" y="259.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="886.5" y="270.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (4 samples, 0.04%)</title><rect x="883.9" y="275.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="886.9" y="286.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (3 samples, 0.03%)</title><rect x="884.4" y="291.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="887.4" y="302.0"></text>
</g>
<g>
<title>ip_output (194 samples, 2.13%)</title><rect x="884.8" y="339.0" width="25.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="887.8" y="350.0">i..</text>
</g>
<g>
<title>ip_finish_output2 (174 samples, 1.91%)</title><rect x="884.8" y="323.0" width="22.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="887.8" y="334.0">i..</text>
</g>
<g>
<title>__dev_queue_xmit (14 samples, 0.15%)</title><rect x="886.0" y="307.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="889.0" y="318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (12 samples, 0.13%)</title><rect x="886.1" y="291.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="889.1" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (12 samples, 0.13%)</title><rect x="886.1" y="275.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="889.1" y="286.0"></text>
</g>
<g>
<title>netif_rx (5 samples, 0.05%)</title><rect x="886.2" y="259.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="889.2" y="270.0"></text>
</g>
<g>
<title>netif_rx_internal (5 samples, 0.05%)</title><rect x="886.2" y="243.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="889.2" y="254.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.05%)</title><rect x="886.2" y="227.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="889.2" y="238.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.02%)</title><rect x="886.9" y="259.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="889.9" y="270.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.03%)</title><rect x="887.3" y="259.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="890.3" y="270.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (151 samples, 1.66%)</title><rect x="887.8" y="307.0" width="19.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="890.8" y="318.0"></text>
</g>
<g>
<title>do_softirq.part.0 (151 samples, 1.66%)</title><rect x="887.8" y="291.0" width="19.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="890.8" y="302.0"></text>
</g>
<g>
<title>do_softirq_own_stack (150 samples, 1.65%)</title><rect x="887.9" y="275.0" width="19.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="890.9" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (150 samples, 1.65%)</title><rect x="887.9" y="259.0" width="19.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="890.9" y="270.0"></text>
</g>
<g>
<title>net_rx_action (147 samples, 1.61%)</title><rect x="888.3" y="243.0" width="19.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="891.3" y="254.0"></text>
</g>
<g>
<title>process_backlog (145 samples, 1.59%)</title><rect x="888.6" y="227.0" width="18.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="891.6" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (140 samples, 1.54%)</title><rect x="889.2" y="211.0" width="18.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="892.2" y="222.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (5 samples, 0.05%)</title><rect x="889.2" y="195.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="892.2" y="206.0"></text>
</g>
<g>
<title>ip_rcv (135 samples, 1.48%)</title><rect x="889.8" y="195.0" width="17.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="892.8" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (111 samples, 1.22%)</title><rect x="889.8" y="179.0" width="14.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="892.8" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (100 samples, 1.10%)</title><rect x="890.0" y="163.0" width="12.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="893.0" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (100 samples, 1.10%)</title><rect x="890.0" y="147.0" width="12.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="893.0" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (100 samples, 1.10%)</title><rect x="890.0" y="131.0" width="12.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="893.0" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (93 samples, 1.02%)</title><rect x="890.9" y="115.0" width="12.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="893.9" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (93 samples, 1.02%)</title><rect x="890.9" y="99.0" width="12.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="893.9" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.03%)</title><rect x="891.0" y="83.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="894.0" y="94.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.03%)</title><rect x="891.0" y="67.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="894.0" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="891.1" y="51.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="894.1" y="62.0"></text>
</g>
<g>
<title>tcp_ack (21 samples, 0.23%)</title><rect x="891.4" y="83.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="894.4" y="94.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.03%)</title><rect x="892.4" y="67.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="895.4" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.03%)</title><rect x="893.0" y="67.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="896.0" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.02%)</title><rect x="893.1" y="51.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="896.1" y="62.0"></text>
</g>
<g>
<title>tcp_data_queue (67 samples, 0.74%)</title><rect x="894.1" y="83.0" width="8.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="897.1" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (62 samples, 0.68%)</title><rect x="894.5" y="67.0" width="8.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="897.5" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (61 samples, 0.67%)</title><rect x="894.6" y="51.0" width="7.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="897.6" y="62.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.02%)</title><rect x="894.8" y="35.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="897.8" y="46.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (58 samples, 0.64%)</title><rect x="895.0" y="35.0" width="7.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="898.0" y="46.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.02%)</title><rect x="902.5" y="67.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="905.5" y="78.0"></text>
</g>
<g>
<title>nf_hook_slow (10 samples, 0.11%)</title><rect x="902.9" y="163.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="905.9" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (7 samples, 0.08%)</title><rect x="902.9" y="147.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="905.9" y="158.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.02%)</title><rect x="903.8" y="147.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="906.8" y="158.0"></text>
</g>
<g>
<title>nf_hook_slow (23 samples, 0.25%)</title><rect x="904.4" y="179.0" width="2.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="907.4" y="190.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (3 samples, 0.03%)</title><rect x="904.4" y="163.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="907.4" y="174.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (15 samples, 0.16%)</title><rect x="904.8" y="163.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="907.8" y="174.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (2 samples, 0.02%)</title><rect x="907.1" y="163.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="910.1" y="174.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.04%)</title><rect x="907.3" y="323.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="910.3" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (16 samples, 0.18%)</title><rect x="907.9" y="323.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="910.9" y="334.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (6 samples, 0.07%)</title><rect x="908.0" y="307.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="911.0" y="318.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (2 samples, 0.02%)</title><rect x="908.8" y="307.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="911.8" y="318.0"></text>
</g>
<g>
<title>selinux_ip_postroute (5 samples, 0.05%)</title><rect x="909.2" y="307.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="912.2" y="318.0"></text>
</g>
<g>
<title>selinux_peerlbl_enabled (2 samples, 0.02%)</title><rect x="909.5" y="291.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="912.5" y="302.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.03%)</title><rect x="910.1" y="355.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="913.1" y="366.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.02%)</title><rect x="910.5" y="355.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="913.5" y="366.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.04%)</title><rect x="911.0" y="371.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="914.0" y="382.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.02%)</title><rect x="911.2" y="355.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="914.2" y="366.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.02%)</title><rect x="911.5" y="371.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="914.5" y="382.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.02%)</title><rect x="911.8" y="371.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="914.8" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (8 samples, 0.09%)</title><rect x="912.1" y="403.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="915.1" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.09%)</title><rect x="912.1" y="387.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="915.1" y="398.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.03%)</title><rect x="912.4" y="371.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="915.4" y="382.0"></text>
</g>
<g>
<title>ksize (3 samples, 0.03%)</title><rect x="912.8" y="371.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="915.8" y="382.0"></text>
</g>
<g>
<title>tcp_send_mss (3 samples, 0.03%)</title><rect x="913.3" y="403.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="916.3" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.03%)</title><rect x="913.3" y="387.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="916.3" y="398.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.04%)</title><rect x="913.7" y="483.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="916.7" y="494.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.04%)</title><rect x="913.7" y="467.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="916.7" y="478.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.04%)</title><rect x="913.7" y="451.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="916.7" y="462.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.04%)</title><rect x="913.7" y="435.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="916.7" y="446.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.09%)</title><rect x="914.2" y="531.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="917.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.09%)</title><rect x="914.2" y="515.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="917.2" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.07%)</title><rect x="914.3" y="499.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="917.3" y="510.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="914.6" y="483.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="917.6" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.02%)</title><rect x="914.9" y="483.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="917.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.02%)</title><rect x="915.4" y="611.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="918.4" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.08%)</title><rect x="915.6" y="627.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="918.6" y="638.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="916.3" y="611.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="916.3" y="595.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="919.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="916.3" y="579.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="916.3" y="563.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (1,525 samples, 16.75%)</title><rect x="916.5" y="627.0" width="197.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="919.5" y="638.0">ru/mail/polis/service/shak..</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.03%)</title><rect x="916.5" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="919.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="916.5" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.5" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.03%)</title><rect x="916.5" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="916.5" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="919.5" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="916.5" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="919.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.02%)</title><rect x="916.5" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="919.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="916.9" y="611.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="919.9" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="916.9" y="595.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="919.9" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="916.9" y="579.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="919.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="916.9" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="919.9" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="916.9" y="547.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="916.9" y="531.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="919.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,518 samples, 16.67%)</title><rect x="917.5" y="611.0" width="196.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.5" y="622.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (29 samples, 0.32%)</title><rect x="917.5" y="595.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.5" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (28 samples, 0.31%)</title><rect x="917.6" y="579.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.6" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (28 samples, 0.31%)</title><rect x="917.6" y="563.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (28 samples, 0.31%)</title><rect x="917.6" y="547.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (27 samples, 0.30%)</title><rect x="917.7" y="531.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 0.22%)</title><rect x="918.1" y="515.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="921.1" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (11 samples, 0.12%)</title><rect x="918.1" y="499.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.1" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (11 samples, 0.12%)</title><rect x="918.1" y="483.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.1" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (10 samples, 0.11%)</title><rect x="918.2" y="467.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.2" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="918.4" y="451.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.4" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="918.4" y="435.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="921.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (8 samples, 0.09%)</title><rect x="918.5" y="419.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (8 samples, 0.09%)</title><rect x="918.5" y="403.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (8 samples, 0.09%)</title><rect x="918.5" y="387.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.09%)</title><rect x="918.5" y="371.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (8 samples, 0.09%)</title><rect x="918.5" y="355.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="921.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.09%)</title><rect x="918.5" y="339.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (8 samples, 0.09%)</title><rect x="918.5" y="323.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.09%)</title><rect x="918.5" y="307.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="921.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="918.5" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="921.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="918.5" y="275.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.5" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="918.5" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="921.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (4 samples, 0.04%)</title><rect x="919.0" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="919.0" y="275.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="919.0" y="259.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="919.0" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="919.0" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="919.0" y="211.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.0" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.1" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="922.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.1" y="179.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="922.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.1" y="163.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.1" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.1" y="147.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.1" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9 samples, 0.10%)</title><rect x="919.5" y="499.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (8 samples, 0.09%)</title><rect x="919.7" y="483.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.7" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (8 samples, 0.09%)</title><rect x="919.7" y="467.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.7" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (8 samples, 0.09%)</title><rect x="919.7" y="451.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.7" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.08%)</title><rect x="919.8" y="435.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.8" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.08%)</title><rect x="919.8" y="419.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="922.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4 samples, 0.04%)</title><rect x="919.8" y="403.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="919.8" y="387.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.04%)</title><rect x="919.8" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (4 samples, 0.04%)</title><rect x="919.8" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.03%)</title><rect x="919.8" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.8" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="919.8" y="323.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="919.8" y="307.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.8" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.8" y="291.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="922.8" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.8" y="275.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.8" y="259.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.8" y="243.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.8" y="227.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="919.8" y="211.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.8" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="919.8" y="195.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (3 samples, 0.03%)</title><rect x="920.3" y="403.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="923.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (3 samples, 0.03%)</title><rect x="920.3" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.3" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (3 samples, 0.03%)</title><rect x="920.3" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.3" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.03%)</title><rect x="920.3" y="355.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.3" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (3 samples, 0.03%)</title><rect x="920.3" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.3" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.03%)</title><rect x="920.3" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="923.3" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (3 samples, 0.03%)</title><rect x="920.3" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.3" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.03%)</title><rect x="920.3" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="920.3" y="275.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="920.3" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.3" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="920.4" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$56/1514133115.apply (4 samples, 0.04%)</title><rect x="920.7" y="515.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.04%)</title><rect x="920.7" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.7" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="920.8" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.8" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="920.8" y="467.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.8" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="920.8" y="451.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.8" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="920.8" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.8" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="920.8" y="419.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.8" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (7 samples, 0.08%)</title><rect x="921.2" y="595.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="924.2" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (7 samples, 0.08%)</title><rect x="921.2" y="579.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="924.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$62/1670576925.apply (7 samples, 0.08%)</title><rect x="921.2" y="563.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (6 samples, 0.07%)</title><rect x="921.3" y="547.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="924.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.03%)</title><rect x="921.3" y="531.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.3" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="921.3" y="515.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.3" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="921.3" y="499.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="924.3" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.3" y="483.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.3" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.3" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.3" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="924.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.3" y="435.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.3" y="419.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="924.3" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.3" y="403.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.3" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="924.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (3 samples, 0.03%)</title><rect x="921.7" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.7" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="921.7" y="515.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="924.7" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.03%)</title><rect x="921.7" y="499.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="924.7" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.7" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="924.7" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.7" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="924.7" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.7" y="451.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.7" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="924.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.7" y="419.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="924.7" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="921.7" y="403.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="924.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.02%)</title><rect x="922.1" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="925.1" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.02%)</title><rect x="922.1" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.02%)</title><rect x="922.4" y="595.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="925.4" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="922.4" y="579.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="925.4" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="922.4" y="563.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="925.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (2 samples, 0.02%)</title><rect x="922.6" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="925.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,476 samples, 16.21%)</title><rect x="922.9" y="595.0" width="191.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="925.9" y="606.0">ru/mail/polis/dao/shakhmi..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (7 samples, 0.08%)</title><rect x="923.0" y="579.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="926.0" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (7 samples, 0.08%)</title><rect x="923.0" y="563.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="926.0" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (7 samples, 0.08%)</title><rect x="923.0" y="547.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,467 samples, 16.11%)</title><rect x="924.1" y="579.0" width="190.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="927.1" y="590.0">ru/mail/polis/dao/shakhmi..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (119 samples, 1.31%)</title><rect x="924.3" y="563.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (119 samples, 1.31%)</title><rect x="924.3" y="547.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.3" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (98 samples, 1.08%)</title><rect x="926.9" y="531.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="929.9" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (97 samples, 1.07%)</title><rect x="927.0" y="515.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="930.0" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (3 samples, 0.03%)</title><rect x="927.0" y="499.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.0" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (94 samples, 1.03%)</title><rect x="927.4" y="499.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="930.4" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (94 samples, 1.03%)</title><rect x="927.4" y="483.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.4" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (91 samples, 1.00%)</title><rect x="927.8" y="467.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (90 samples, 0.99%)</title><rect x="928.0" y="451.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="931.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (54 samples, 0.59%)</title><rect x="928.0" y="435.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.0" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (3 samples, 0.03%)</title><rect x="928.0" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="931.0" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.03%)</title><rect x="928.0" y="403.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="931.0" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.03%)</title><rect x="928.0" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.0" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (3 samples, 0.03%)</title><rect x="928.0" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.0" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.03%)</title><rect x="928.0" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.02%)</title><rect x="928.1" y="339.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (51 samples, 0.56%)</title><rect x="928.3" y="419.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="931.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (51 samples, 0.56%)</title><rect x="928.3" y="403.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (50 samples, 0.55%)</title><rect x="928.5" y="387.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="931.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (19 samples, 0.21%)</title><rect x="928.6" y="371.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="931.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.09%)</title><rect x="928.6" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.09%)</title><rect x="928.6" y="339.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="931.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 0.09%)</title><rect x="928.6" y="323.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="928.6" y="307.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="931.6" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="928.6" y="291.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="931.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="928.6" y="275.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="928.6" y="259.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="931.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="928.6" y="243.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="931.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.08%)</title><rect x="928.6" y="227.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="929.2" y="211.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="932.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (11 samples, 0.12%)</title><rect x="929.6" y="355.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="929.6" y="339.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="929.6" y="323.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="932.6" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="929.6" y="307.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="929.6" y="291.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="929.6" y="275.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.6" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="929.6" y="259.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="932.6" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="929.6" y="243.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="929.6" y="227.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="932.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (14 samples, 0.15%)</title><rect x="931.1" y="371.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="934.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.10%)</title><rect x="931.1" y="355.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.10%)</title><rect x="931.1" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="934.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.07%)</title><rect x="931.4" y="323.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.4" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="931.4" y="307.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="934.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="931.4" y="291.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="934.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="931.4" y="275.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="931.4" y="259.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="934.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="931.4" y="243.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.05%)</title><rect x="931.4" y="227.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="934.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (5 samples, 0.05%)</title><rect x="932.2" y="355.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.2" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="932.2" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="935.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="932.2" y="323.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="935.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="932.2" y="307.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="935.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="932.2" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="932.2" y="275.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.2" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="932.2" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="935.2" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="932.2" y="243.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="935.2" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.03%)</title><rect x="932.2" y="227.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="935.2" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="932.6" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="935.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="932.6" y="227.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="935.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (2 samples, 0.02%)</title><rect x="932.9" y="371.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="935.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="932.9" y="355.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="932.9" y="339.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="935.9" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="932.9" y="323.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="935.9" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="932.9" y="307.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="935.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="932.9" y="291.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="935.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="932.9" y="275.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="935.9" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="932.9" y="259.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="935.9" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="932.9" y="243.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="935.9" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="932.9" y="227.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="935.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (14 samples, 0.15%)</title><rect x="933.1" y="371.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="936.1" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.08%)</title><rect x="933.1" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="936.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.08%)</title><rect x="933.1" y="339.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="936.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.08%)</title><rect x="933.1" y="323.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="936.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="933.1" y="307.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="936.1" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="933.1" y="291.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="936.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="933.1" y="275.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="936.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="933.1" y="259.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="936.1" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="933.1" y="243.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="936.1" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="933.1" y="227.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="936.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (7 samples, 0.08%)</title><rect x="934.0" y="355.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.08%)</title><rect x="934.0" y="339.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="937.0" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="934.0" y="323.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="937.0" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="934.0" y="307.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="937.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="934.0" y="291.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="937.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="934.0" y="275.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="937.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="934.0" y="259.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="934.0" y="243.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="937.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.07%)</title><rect x="934.0" y="227.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="937.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (36 samples, 0.40%)</title><rect x="934.9" y="435.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="937.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (36 samples, 0.40%)</title><rect x="934.9" y="419.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="937.9" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (36 samples, 0.40%)</title><rect x="934.9" y="403.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.9" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (35 samples, 0.38%)</title><rect x="935.1" y="387.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="938.1" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (34 samples, 0.37%)</title><rect x="935.2" y="371.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="938.2" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (34 samples, 0.37%)</title><rect x="935.2" y="355.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="938.2" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (33 samples, 0.36%)</title><rect x="935.2" y="339.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.2" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (33 samples, 0.36%)</title><rect x="935.2" y="323.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.16%)</title><rect x="935.2" y="307.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.15%)</title><rect x="935.3" y="291.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="938.3" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (12 samples, 0.13%)</title><rect x="935.5" y="275.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="938.5" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.02%)</title><rect x="936.2" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="939.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (3 samples, 0.03%)</title><rect x="936.5" y="259.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (18 samples, 0.20%)</title><rect x="937.2" y="307.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="940.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (18 samples, 0.20%)</title><rect x="937.2" y="291.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="940.2" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.08%)</title><rect x="937.2" y="275.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="940.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.08%)</title><rect x="937.2" y="259.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="940.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.08%)</title><rect x="937.2" y="243.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="940.2" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.08%)</title><rect x="937.2" y="227.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="940.2" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="937.7" y="211.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="940.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="937.7" y="195.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="940.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="937.7" y="179.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="940.7" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="937.7" y="163.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="940.7" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (11 samples, 0.12%)</title><rect x="938.1" y="275.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (11 samples, 0.12%)</title><rect x="938.1" y="259.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="941.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="938.1" y="243.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="941.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="938.1" y="227.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="941.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="938.8" y="211.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="941.8" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="939.2" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="942.2" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.15%)</title><rect x="939.7" y="563.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="942.7" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.15%)</title><rect x="939.7" y="547.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="942.7" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.15%)</title><rect x="939.7" y="531.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="942.7" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.15%)</title><rect x="939.7" y="515.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="942.7" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 0.15%)</title><rect x="939.7" y="499.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="942.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (22 samples, 0.24%)</title><rect x="941.6" y="563.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="944.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (22 samples, 0.24%)</title><rect x="941.6" y="547.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (3 samples, 0.03%)</title><rect x="941.6" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="944.6" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (2 samples, 0.02%)</title><rect x="941.7" y="515.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="944.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.size (2 samples, 0.02%)</title><rect x="941.7" y="499.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.21%)</title><rect x="941.9" y="531.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="944.9" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (9 samples, 0.10%)</title><rect x="941.9" y="515.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="944.9" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (9 samples, 0.10%)</title><rect x="941.9" y="499.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.9" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (9 samples, 0.10%)</title><rect x="941.9" y="483.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.9" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="941.9" y="467.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="944.9" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="941.9" y="451.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="944.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (9 samples, 0.10%)</title><rect x="941.9" y="435.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="944.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (9 samples, 0.10%)</title><rect x="941.9" y="419.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="944.9" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (9 samples, 0.10%)</title><rect x="941.9" y="403.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="944.9" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.10%)</title><rect x="941.9" y="387.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.9" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (9 samples, 0.10%)</title><rect x="941.9" y="371.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.9" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.10%)</title><rect x="941.9" y="355.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.9" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (9 samples, 0.10%)</title><rect x="941.9" y="339.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="944.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.10%)</title><rect x="941.9" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="944.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="941.9" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="944.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="941.9" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="944.9" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.03%)</title><rect x="941.9" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="944.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (6 samples, 0.07%)</title><rect x="942.3" y="307.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="945.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.07%)</title><rect x="942.3" y="291.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.3" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="942.3" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="945.3" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.05%)</title><rect x="942.3" y="259.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="945.3" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.05%)</title><rect x="942.3" y="243.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="945.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="942.3" y="227.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="945.3" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="942.7" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="945.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="942.7" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="945.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="942.7" y="179.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="945.7" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="942.7" y="163.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="945.7" y="174.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (10 samples, 0.11%)</title><rect x="943.1" y="515.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="946.1" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (8 samples, 0.09%)</title><rect x="943.4" y="499.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="946.4" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (8 samples, 0.09%)</title><rect x="943.4" y="483.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="946.4" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (8 samples, 0.09%)</title><rect x="943.4" y="467.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="946.4" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="943.4" y="451.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="946.4" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.09%)</title><rect x="943.4" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/2085993036.compare (7 samples, 0.08%)</title><rect x="943.5" y="419.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="946.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.08%)</title><rect x="943.5" y="403.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (7 samples, 0.08%)</title><rect x="943.5" y="387.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="946.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="943.5" y="371.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="946.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/319369334.compare (7 samples, 0.08%)</title><rect x="943.5" y="355.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="946.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.08%)</title><rect x="943.5" y="339.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="946.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1566087346.compare (7 samples, 0.08%)</title><rect x="943.5" y="323.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="946.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.08%)</title><rect x="943.5" y="307.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="946.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="943.5" y="291.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="946.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.04%)</title><rect x="943.5" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="946.5" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.04%)</title><rect x="943.5" y="259.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="946.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/831155523.apply (3 samples, 0.03%)</title><rect x="944.0" y="291.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="947.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.03%)</title><rect x="944.0" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="947.0" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="944.0" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.02%)</title><rect x="944.0" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="947.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.02%)</title><rect x="944.0" y="227.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="947.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="944.0" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="947.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (48 samples, 0.53%)</title><rect x="944.4" y="563.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="947.4" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (37 samples, 0.41%)</title><rect x="944.4" y="547.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="947.4" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (37 samples, 0.41%)</title><rect x="944.4" y="531.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="947.4" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (35 samples, 0.38%)</title><rect x="944.5" y="515.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.5" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (35 samples, 0.38%)</title><rect x="944.5" y="499.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="947.5" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (34 samples, 0.37%)</title><rect x="944.7" y="483.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="947.7" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (24 samples, 0.26%)</title><rect x="946.0" y="467.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="949.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="947.6" y="451.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="947.6" y="435.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="950.6" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.12%)</title><rect x="947.6" y="419.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="950.6" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="948.4" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="951.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.03%)</title><rect x="948.7" y="403.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="951.7" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (11 samples, 0.12%)</title><rect x="949.2" y="547.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="952.2" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (11 samples, 0.12%)</title><rect x="949.2" y="531.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="952.2" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (11 samples, 0.12%)</title><rect x="949.2" y="515.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="952.2" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (11 samples, 0.12%)</title><rect x="949.2" y="499.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="952.2" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (11 samples, 0.12%)</title><rect x="949.2" y="483.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="952.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="949.2" y="467.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.12%)</title><rect x="949.2" y="451.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="952.2" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.09%)</title><rect x="949.5" y="435.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="952.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.03%)</title><rect x="950.0" y="419.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="953.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (1,262 samples, 13.86%)</title><rect x="950.6" y="563.0" width="163.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="953.6" y="574.0">ru/mail/polis/dao/sha..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (1,262 samples, 13.86%)</title><rect x="950.6" y="547.0" width="163.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.6" y="558.0">ru/mail/polis/dao/sha..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (1,247 samples, 13.70%)</title><rect x="952.6" y="531.0" width="161.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="955.6" y="542.0">ru/mail/polis/dao/sha..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (222 samples, 2.44%)</title><rect x="954.8" y="515.0" width="28.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="957.8" y="526.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (189 samples, 2.08%)</title><rect x="957.2" y="499.0" width="24.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="960.2" y="510.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (2 samples, 0.02%)</title><rect x="967.3" y="483.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="970.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (28 samples, 0.31%)</title><rect x="967.6" y="483.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="970.6" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (13 samples, 0.14%)</title><rect x="969.6" y="467.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (12 samples, 0.13%)</title><rect x="971.2" y="483.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="974.2" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (21 samples, 0.23%)</title><rect x="972.8" y="483.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="975.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (29 samples, 0.32%)</title><rect x="975.5" y="483.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="978.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (6 samples, 0.07%)</title><rect x="977.8" y="467.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="980.8" y="478.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.05%)</title><rect x="978.6" y="467.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="981.6" y="478.0"></text>
</g>
<g>
<title>vtable stub (19 samples, 0.21%)</title><rect x="979.3" y="483.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="982.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.12%)</title><rect x="981.7" y="499.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="984.7" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.05%)</title><rect x="982.5" y="483.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="985.5" y="494.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="983.2" y="499.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="986.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (472 samples, 5.18%)</title><rect x="983.5" y="515.0" width="61.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.5" y="526.0">ru/mai..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (144 samples, 1.58%)</title><rect x="983.5" y="499.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="986.5" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (144 samples, 1.58%)</title><rect x="983.5" y="483.0" width="18.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (144 samples, 1.58%)</title><rect x="983.5" y="467.0" width="18.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="986.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="983.5" y="451.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="986.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="983.5" y="435.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="986.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="983.5" y="419.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="986.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="983.5" y="403.0" width="18.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="986.5" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (144 samples, 1.58%)</title><rect x="983.5" y="387.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="986.5" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (97 samples, 1.07%)</title><rect x="983.5" y="371.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="986.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.10%)</title><rect x="993.5" y="355.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="996.5" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.11%)</title><rect x="994.7" y="355.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="997.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.11%)</title><rect x="994.7" y="339.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="997.7" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="994.7" y="323.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="997.7" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (47 samples, 0.52%)</title><rect x="996.1" y="371.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="999.1" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (18 samples, 0.20%)</title><rect x="998.3" y="355.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1001.3" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.13%)</title><rect x="1000.7" y="355.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1003.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.13%)</title><rect x="1000.7" y="339.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1003.7" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.13%)</title><rect x="1000.7" y="323.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1003.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (328 samples, 3.60%)</title><rect x="1002.2" y="499.0" width="42.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1005.2" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (328 samples, 3.60%)</title><rect x="1002.2" y="483.0" width="42.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1005.2" y="494.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (328 samples, 3.60%)</title><rect x="1002.2" y="467.0" width="42.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.2" y="478.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (328 samples, 3.60%)</title><rect x="1002.2" y="451.0" width="42.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1005.2" y="462.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (328 samples, 3.60%)</title><rect x="1002.2" y="435.0" width="42.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.2" y="446.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (328 samples, 3.60%)</title><rect x="1002.2" y="419.0" width="42.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1005.2" y="430.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (328 samples, 3.60%)</title><rect x="1002.2" y="403.0" width="42.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1005.2" y="414.0">java..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (292 samples, 3.21%)</title><rect x="1002.2" y="387.0" width="37.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1005.2" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (292 samples, 3.21%)</title><rect x="1002.2" y="371.0" width="37.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1005.2" y="382.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.14%)</title><rect x="1036.8" y="355.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1039.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.14%)</title><rect x="1036.8" y="339.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1039.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.10%)</title><rect x="1038.5" y="355.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1041.5" y="366.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="1039.7" y="355.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1042.7" y="366.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="1039.7" y="339.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1042.7" y="350.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="1039.7" y="323.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1042.7" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (36 samples, 0.40%)</title><rect x="1040.1" y="387.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1043.1" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (36 samples, 0.40%)</title><rect x="1040.1" y="371.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1043.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.10%)</title><rect x="1042.0" y="355.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.13%)</title><rect x="1043.2" y="355.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1046.2" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.13%)</title><rect x="1043.2" y="339.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1046.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (536 samples, 5.89%)</title><rect x="1044.7" y="515.0" width="69.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1047.7" y="526.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (375 samples, 4.12%)</title><rect x="1044.7" y="499.0" width="48.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1047.7" y="510.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (375 samples, 4.12%)</title><rect x="1044.7" y="483.0" width="48.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1047.7" y="494.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.11%)</title><rect x="1050.0" y="467.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1053.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (324 samples, 3.56%)</title><rect x="1051.3" y="467.0" width="42.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.3" y="478.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (324 samples, 3.56%)</title><rect x="1051.3" y="451.0" width="42.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1054.3" y="462.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (324 samples, 3.56%)</title><rect x="1051.3" y="435.0" width="42.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1054.3" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (324 samples, 3.56%)</title><rect x="1051.3" y="419.0" width="42.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1054.3" y="430.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (324 samples, 3.56%)</title><rect x="1051.3" y="403.0" width="42.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.3" y="414.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (324 samples, 3.56%)</title><rect x="1051.3" y="387.0" width="42.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1054.3" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (262 samples, 2.88%)</title><rect x="1051.3" y="371.0" width="34.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.3" y="382.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (24 samples, 0.26%)</title><rect x="1082.2" y="355.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1085.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (24 samples, 0.26%)</title><rect x="1082.2" y="339.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1085.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (24 samples, 0.26%)</title><rect x="1082.2" y="323.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1085.2" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (62 samples, 0.68%)</title><rect x="1085.3" y="371.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1088.3" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (19 samples, 0.21%)</title><rect x="1089.3" y="355.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1092.3" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (12 samples, 0.13%)</title><rect x="1091.8" y="355.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1094.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.13%)</title><rect x="1091.8" y="339.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1094.8" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (12 samples, 0.13%)</title><rect x="1091.8" y="323.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1094.8" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (161 samples, 1.77%)</title><rect x="1093.3" y="499.0" width="20.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1096.3" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (161 samples, 1.77%)</title><rect x="1093.3" y="483.0" width="20.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1096.3" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (161 samples, 1.77%)</title><rect x="1093.3" y="467.0" width="20.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1096.3" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (161 samples, 1.77%)</title><rect x="1093.3" y="451.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (161 samples, 1.77%)</title><rect x="1093.3" y="435.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1096.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (161 samples, 1.77%)</title><rect x="1093.3" y="419.0" width="20.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.3" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (161 samples, 1.77%)</title><rect x="1093.3" y="403.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1096.3" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (116 samples, 1.27%)</title><rect x="1093.3" y="387.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1096.3" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (116 samples, 1.27%)</title><rect x="1093.3" y="371.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1096.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.11%)</title><rect x="1106.3" y="355.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1109.3" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.11%)</title><rect x="1106.3" y="339.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1109.3" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.07%)</title><rect x="1107.6" y="355.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1110.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (45 samples, 0.49%)</title><rect x="1108.4" y="387.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.4" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (45 samples, 0.49%)</title><rect x="1108.4" y="371.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.14%)</title><rect x="1110.4" y="355.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.18%)</title><rect x="1112.1" y="355.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1115.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (16 samples, 0.18%)</title><rect x="1112.1" y="339.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1115.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.05%)</title><rect x="1114.2" y="643.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.05%)</title><rect x="1114.2" y="627.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="1114.2" y="611.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1117.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="1114.2" y="595.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.05%)</title><rect x="1114.2" y="579.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1117.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.18%)</title><rect x="1114.8" y="675.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1117.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1115.0" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1118.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1115.0" y="643.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1118.0" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1115.0" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1118.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="1115.0" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1118.0" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.10%)</title><rect x="1115.4" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1118.4" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.10%)</title><rect x="1115.4" y="643.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1118.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.09%)</title><rect x="1115.5" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1118.5" y="638.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (8 samples, 0.09%)</title><rect x="1115.5" y="611.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.03%)</title><rect x="1116.5" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1119.5" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="1117.2" y="675.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.2" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (88 samples, 0.97%)</title><rect x="1117.4" y="691.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1120.4" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (86 samples, 0.94%)</title><rect x="1117.7" y="675.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1120.7" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.02%)</title><rect x="1118.5" y="659.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1121.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.16%)</title><rect x="1118.7" y="659.0" width="2.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1121.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.16%)</title><rect x="1118.7" y="643.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1121.7" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (11 samples, 0.12%)</title><rect x="1118.7" y="627.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1121.7" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="1119.1" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.1" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="1119.5" y="611.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1122.5" y="622.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.02%)</title><rect x="1120.1" y="627.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1123.1" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.02%)</title><rect x="1120.4" y="627.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1123.4" y="638.0"></text>
</g>
<g>
<title>__libc_recv (62 samples, 0.68%)</title><rect x="1120.7" y="659.0" width="8.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1123.7" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (38 samples, 0.42%)</title><rect x="1123.8" y="643.0" width="4.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1126.8" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (38 samples, 0.42%)</title><rect x="1123.8" y="627.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1126.8" y="638.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (38 samples, 0.42%)</title><rect x="1123.8" y="611.0" width="4.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1126.8" y="622.0"></text>
</g>
<g>
<title>__sys_recvfrom (38 samples, 0.42%)</title><rect x="1123.8" y="595.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1126.8" y="606.0"></text>
</g>
<g>
<title>inet_recvmsg (26 samples, 0.29%)</title><rect x="1124.2" y="579.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1127.2" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (25 samples, 0.27%)</title><rect x="1124.3" y="563.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1127.3" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.02%)</title><rect x="1124.9" y="547.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1127.9" y="558.0"></text>
</g>
<g>
<title>ns_to_timespec64 (3 samples, 0.03%)</title><rect x="1125.5" y="547.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1128.5" y="558.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.03%)</title><rect x="1125.8" y="547.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1128.8" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.02%)</title><rect x="1126.0" y="531.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1129.0" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (5 samples, 0.05%)</title><rect x="1126.2" y="547.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1129.2" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (5 samples, 0.05%)</title><rect x="1126.2" y="531.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1129.2" y="542.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.03%)</title><rect x="1126.5" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1129.5" y="526.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.02%)</title><rect x="1126.6" y="499.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1129.6" y="510.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (4 samples, 0.04%)</title><rect x="1127.0" y="547.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1130.0" y="558.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.04%)</title><rect x="1127.0" y="531.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1130.0" y="542.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.03%)</title><rect x="1127.1" y="515.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1130.1" y="526.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.03%)</title><rect x="1127.1" y="499.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1130.1" y="510.0"></text>
</g>
<g>
<title>sock_recvmsg (8 samples, 0.09%)</title><rect x="1127.5" y="579.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1130.5" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (8 samples, 0.09%)</title><rect x="1127.5" y="563.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1130.5" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (7 samples, 0.08%)</title><rect x="1127.7" y="547.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1130.7" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (3 samples, 0.03%)</title><rect x="1128.2" y="531.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1131.2" y="542.0"></text>
</g>
<g>
<title>[tid=29027] (99 samples, 1.09%)</title><rect x="1129.0" y="755.0" width="12.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1132.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1129.0" y="739.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1132.0" y="750.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (2 samples, 0.02%)</title><rect x="1129.0" y="723.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1132.0" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1129.0" y="707.0" width="0.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1132.0" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1129.0" y="691.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1132.0" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1129.0" y="675.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1132.0" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1129.0" y="659.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1132.0" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.02%)</title><rect x="1129.0" y="643.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1132.0" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.02%)</title><rect x="1129.0" y="627.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1132.0" y="638.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.02%)</title><rect x="1129.0" y="611.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1132.0" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="1129.0" y="595.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1132.0" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.02%)</title><rect x="1129.0" y="579.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1132.0" y="590.0"></text>
</g>
<g>
<title>start_thread (97 samples, 1.07%)</title><rect x="1129.2" y="739.0" width="12.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1132.2" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (97 samples, 1.07%)</title><rect x="1129.2" y="723.0" width="12.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1132.2" y="734.0"></text>
</g>
<g>
<title>GangWorker::loop() (97 samples, 1.07%)</title><rect x="1129.2" y="707.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.2" y="718.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.02%)</title><rect x="1129.2" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.2" y="702.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (93 samples, 1.02%)</title><rect x="1129.5" y="691.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.5" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (85 samples, 0.93%)</title><rect x="1129.5" y="675.0" width="11.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.5" y="686.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.05%)</title><rect x="1129.5" y="659.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.5" y="670.0"></text>
</g>
<g>
<title>SpinPause (80 samples, 0.88%)</title><rect x="1130.1" y="659.0" width="10.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1133.1" y="670.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.02%)</title><rect x="1140.6" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.6" y="686.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.02%)</title><rect x="1140.6" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.6" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.04%)</title><rect x="1141.0" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.0" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.03%)</title><rect x="1141.0" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.0" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1141.0" y="643.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.0" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1141.0" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.0" y="638.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.02%)</title><rect x="1141.1" y="611.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.1" y="622.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.02%)</title><rect x="1141.1" y="595.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="606.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="1141.5" y="691.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1144.5" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1141.5" y="675.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1144.5" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1141.5" y="659.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1144.5" y="670.0"></text>
</g>
<g>
<title>[tid=29034] (52 samples, 0.57%)</title><rect x="1141.9" y="755.0" width="6.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1144.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.08%)</title><rect x="1141.9" y="739.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1144.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="1141.9" y="723.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1144.9" y="734.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (3 samples, 0.03%)</title><rect x="1141.9" y="707.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1144.9" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="1141.9" y="691.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1144.9" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="1141.9" y="675.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1144.9" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.03%)</title><rect x="1141.9" y="659.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1144.9" y="670.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.03%)</title><rect x="1141.9" y="643.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1144.9" y="654.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.03%)</title><rect x="1141.9" y="627.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1144.9" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.03%)</title><rect x="1141.9" y="611.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1144.9" y="622.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.02%)</title><rect x="1142.0" y="595.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1145.0" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="1142.0" y="579.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1145.0" y="590.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.02%)</title><rect x="1142.0" y="563.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1145.0" y="574.0"></text>
</g>
<g>
<title>__vsnprintf_internal (2 samples, 0.02%)</title><rect x="1142.4" y="723.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1145.4" y="734.0"></text>
</g>
<g>
<title>__vfprintf_internal (2 samples, 0.02%)</title><rect x="1142.4" y="707.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1145.4" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.02%)</title><rect x="1142.8" y="739.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1145.8" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1142.8" y="723.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1145.8" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1142.8" y="707.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1145.8" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1142.8" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1145.8" y="702.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1142.8" y="675.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1145.8" y="686.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.02%)</title><rect x="1142.8" y="659.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1145.8" y="670.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.02%)</title><rect x="1142.8" y="643.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1145.8" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.02%)</title><rect x="1142.8" y="627.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1145.8" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="1142.8" y="611.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1145.8" y="622.0"></text>
</g>
<g>
<title>start_thread (43 samples, 0.47%)</title><rect x="1143.1" y="739.0" width="5.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1146.1" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (43 samples, 0.47%)</title><rect x="1143.1" y="723.0" width="5.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1146.1" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (43 samples, 0.47%)</title><rect x="1143.1" y="707.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="718.0"></text>
</g>
<g>
<title>VMThread::loop() (43 samples, 0.47%)</title><rect x="1143.1" y="691.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (5 samples, 0.05%)</title><rect x="1143.1" y="675.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="686.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.03%)</title><rect x="1143.7" y="675.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1146.7" y="686.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (22 samples, 0.24%)</title><rect x="1144.1" y="675.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.1" y="686.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (22 samples, 0.24%)</title><rect x="1144.1" y="659.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.1" y="670.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (22 samples, 0.24%)</title><rect x="1144.1" y="643.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.1" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (18 samples, 0.20%)</title><rect x="1144.3" y="627.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.3" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::print_heap_before_gc() (2 samples, 0.02%)</title><rect x="1144.4" y="611.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (2 samples, 0.02%)</title><rect x="1144.6" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.6" y="622.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.02%)</title><rect x="1144.6" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.6" y="606.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.02%)</title><rect x="1144.6" y="579.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.6" y="590.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="1144.6" y="563.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1147.6" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="1144.6" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1147.6" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="1144.6" y="531.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1147.6" y="542.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="1144.6" y="515.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1147.6" y="526.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="1144.6" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1147.6" y="510.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.02%)</title><rect x="1144.6" y="483.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1147.6" y="494.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.02%)</title><rect x="1144.6" y="467.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1147.6" y="478.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.02%)</title><rect x="1144.6" y="451.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1147.6" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="1144.6" y="435.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1147.6" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (2 samples, 0.02%)</title><rect x="1144.9" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.02%)</title><rect x="1145.2" y="611.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.2" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::finalize_old_part(double) (2 samples, 0.02%)</title><rect x="1145.7" y="611.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="622.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (2 samples, 0.02%)</title><rect x="1145.7" y="595.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.7" y="606.0"></text>
</g>
<g>
<title>__GI_sched_yield (13 samples, 0.14%)</title><rect x="1147.0" y="675.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1150.0" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.05%)</title><rect x="1148.0" y="659.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1151.0" y="670.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.05%)</title><rect x="1148.0" y="643.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1151.0" y="654.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (3 samples, 0.03%)</title><rect x="1148.3" y="627.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1151.3" y="638.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="1148.3" y="611.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1151.3" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.03%)</title><rect x="1148.3" y="595.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1151.3" y="606.0"></text>
</g>
<g>
<title>[tid=29038] (25 samples, 0.27%)</title><rect x="1148.7" y="755.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1151.7" y="766.0"></text>
</g>
<g>
<title>start_thread (25 samples, 0.27%)</title><rect x="1148.7" y="739.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1151.7" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 0.27%)</title><rect x="1148.7" y="723.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1151.7" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (25 samples, 0.27%)</title><rect x="1148.7" y="707.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.7" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (25 samples, 0.27%)</title><rect x="1148.7" y="691.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="702.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (25 samples, 0.27%)</title><rect x="1148.7" y="675.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.7" y="686.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (25 samples, 0.27%)</title><rect x="1148.7" y="659.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.7" y="670.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (25 samples, 0.27%)</title><rect x="1148.7" y="643.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.7" y="654.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (25 samples, 0.27%)</title><rect x="1148.7" y="627.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.7" y="638.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (12 samples, 0.13%)</title><rect x="1148.8" y="611.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 0.11%)</title><rect x="1149.0" y="595.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.02%)</title><rect x="1149.8" y="579.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.02%)</title><rect x="1149.8" y="563.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 0.09%)</title><rect x="1150.3" y="611.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (7 samples, 0.08%)</title><rect x="1150.3" y="595.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.03%)</title><rect x="1150.3" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.02%)</title><rect x="1150.7" y="579.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.7" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.02%)</title><rect x="1150.7" y="563.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.02%)</title><rect x="1150.7" y="547.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1151.4" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1151.4" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1151.4" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1151.4" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1151.4" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1151.4" y="531.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1151.4" y="515.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1151.4" y="499.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1151.4" y="483.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1151.4" y="467.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1151.4" y="451.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1151.4" y="435.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1151.4" y="419.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1151.4" y="403.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1151.4" y="387.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1151.4" y="371.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1151.4" y="355.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1151.4" y="339.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1151.4" y="323.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1151.4" y="307.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1151.4" y="291.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1151.4" y="275.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1151.4" y="259.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1151.4" y="243.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1151.4" y="227.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1151.4" y="211.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1151.4" y="195.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1151.4" y="179.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1151.4" y="163.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1151.4" y="147.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1151.4" y="131.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.4" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1151.4" y="115.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1151.4" y="99.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1151.4" y="83.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1151.4" y="67.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.4" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1151.4" y="51.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.4" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1151.4" y="35.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.4" y="46.0"></text>
</g>
<g>
<title>[tid=29044] (3 samples, 0.03%)</title><rect x="1151.9" y="755.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1154.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1151.9" y="739.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.02%)</title><rect x="1151.9" y="723.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1154.9" y="734.0"></text>
</g>
<g>
<title>[tid=29064] (97 samples, 1.07%)</title><rect x="1152.3" y="755.0" width="12.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1155.3" y="766.0"></text>
</g>
<g>
<title>start_thread (94 samples, 1.03%)</title><rect x="1152.7" y="739.0" width="12.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1155.7" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (94 samples, 1.03%)</title><rect x="1152.7" y="723.0" width="12.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1155.7" y="734.0"></text>
</g>
<g>
<title>GangWorker::loop() (94 samples, 1.03%)</title><rect x="1152.7" y="707.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.7" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (88 samples, 0.97%)</title><rect x="1152.8" y="691.0" width="11.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.8" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (83 samples, 0.91%)</title><rect x="1152.8" y="675.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.8" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.02%)</title><rect x="1152.8" y="659.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.8" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.03%)</title><rect x="1153.1" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.1" y="670.0"></text>
</g>
<g>
<title>SpinPause (78 samples, 0.86%)</title><rect x="1153.5" y="659.0" width="10.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1156.5" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.04%)</title><rect x="1163.7" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.02%)</title><rect x="1164.0" y="659.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="670.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.02%)</title><rect x="1164.0" y="643.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.0" y="654.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1164.3" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="702.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.03%)</title><rect x="1164.3" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="686.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.63] (2 samples, 0.02%)</title><rect x="1164.3" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.3" y="670.0"></text>
</g>
<g>
<title>[tid=29065] (97 samples, 1.07%)</title><rect x="1164.9" y="755.0" width="12.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1167.9" y="766.0"></text>
</g>
<g>
<title>start_thread (96 samples, 1.05%)</title><rect x="1165.0" y="739.0" width="12.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1168.0" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (96 samples, 1.05%)</title><rect x="1165.0" y="723.0" width="12.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1168.0" y="734.0"></text>
</g>
<g>
<title>GangWorker::loop() (96 samples, 1.05%)</title><rect x="1165.0" y="707.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="718.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1165.0" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.0" y="702.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (3 samples, 0.03%)</title><rect x="1165.0" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.0" y="686.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="1165.0" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.0" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (2 samples, 0.02%)</title><rect x="1165.1" y="643.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.1" y="654.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (90 samples, 0.99%)</title><rect x="1165.4" y="691.0" width="11.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.4" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (82 samples, 0.90%)</title><rect x="1165.4" y="675.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.4" y="686.0"></text>
</g>
<g>
<title>SpinPause (81 samples, 0.89%)</title><rect x="1165.5" y="659.0" width="10.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1168.5" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.07%)</title><rect x="1176.1" y="675.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.03%)</title><rect x="1176.3" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1176.3" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1176.3" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.02%)</title><rect x="1176.3" y="611.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.02%)</title><rect x="1176.3" y="595.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="606.0"></text>
</g>
<g>
<title>[tid=29066] (97 samples, 1.07%)</title><rect x="1177.4" y="755.0" width="12.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>start_thread (97 samples, 1.07%)</title><rect x="1177.4" y="739.0" width="12.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (97 samples, 1.07%)</title><rect x="1177.4" y="723.0" width="12.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>GangWorker::loop() (97 samples, 1.07%)</title><rect x="1177.4" y="707.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (94 samples, 1.03%)</title><rect x="1177.7" y="691.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (84 samples, 0.92%)</title><rect x="1177.7" y="675.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.02%)</title><rect x="1177.7" y="659.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.05%)</title><rect x="1177.9" y="659.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>SpinPause (76 samples, 0.83%)</title><rect x="1178.6" y="659.0" width="9.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.03%)</title><rect x="1188.7" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.7" y="686.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.03%)</title><rect x="1188.7" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.7" y="670.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="1188.7" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.7" y="654.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.02%)</title><rect x="1188.8" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.07%)</title><rect x="1189.1" y="675.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.1" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.07%)</title><rect x="1189.1" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (4 samples, 0.04%)</title><rect x="1189.2" y="643.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (4 samples, 0.04%)</title><rect x="1189.2" y="627.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.2" y="638.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.02%)</title><rect x="1189.2" y="611.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.2" y="622.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.02%)</title><rect x="1189.2" y="595.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.2" y="606.0"></text>
</g>
</g>
</svg>
