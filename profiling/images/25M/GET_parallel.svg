<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (6,247 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=28448] (1,555 samples, 24.89%)</title><rect x="10.0" y="883.0" width="293.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="894.0">[NIO Selector #0 tid=28448]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (10 samples, 0.16%)</title><rect x="10.0" y="867.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (10 samples, 0.16%)</title><rect x="10.0" y="851.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (10 samples, 0.16%)</title><rect x="10.0" y="835.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 0.13%)</title><rect x="10.0" y="819.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (7 samples, 0.11%)</title><rect x="10.2" y="803.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.2" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.05%)</title><rect x="10.4" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="10.6" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.6" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="10.9" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.03%)</title><rect x="10.9" y="771.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.9" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="11.5" y="819.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.5" y="830.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.03%)</title><rect x="11.9" y="867.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="14.9" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (9 samples, 0.14%)</title><rect x="12.3" y="867.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="15.3" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,533 samples, 24.54%)</title><rect x="14.2" y="867.0" width="289.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="878.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="15.1" y="851.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="18.1" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (142 samples, 2.27%)</title><rect x="15.9" y="851.0" width="26.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="862.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (142 samples, 2.27%)</title><rect x="15.9" y="835.0" width="26.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.9" y="846.0">o..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (117 samples, 1.87%)</title><rect x="17.6" y="819.0" width="22.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="20.6" y="830.0">...</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (99 samples, 1.58%)</title><rect x="21.0" y="803.0" width="18.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="24.0" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (99 samples, 1.58%)</title><rect x="21.0" y="787.0" width="18.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="24.0" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (91 samples, 1.46%)</title><rect x="22.5" y="771.0" width="17.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="25.5" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (89 samples, 1.42%)</title><rect x="22.8" y="755.0" width="16.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="25.8" y="766.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.08%)</title><rect x="23.0" y="739.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="26.0" y="750.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.06%)</title><rect x="23.2" y="723.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="26.2" y="734.0"></text>
</g>
<g>
<title>ep_poll (80 samples, 1.28%)</title><rect x="24.0" y="739.0" width="15.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="27.0" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (34 samples, 0.54%)</title><rect x="25.3" y="723.0" width="6.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="28.3" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (22 samples, 0.35%)</title><rect x="27.0" y="707.0" width="4.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="30.0" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (13 samples, 0.21%)</title><rect x="28.7" y="691.0" width="2.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="31.7" y="702.0"></text>
</g>
<g>
<title>sock_poll (11 samples, 0.18%)</title><rect x="29.1" y="675.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="32.1" y="686.0"></text>
</g>
<g>
<title>tcp_poll (6 samples, 0.10%)</title><rect x="30.0" y="659.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="33.0" y="670.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.05%)</title><rect x="30.6" y="643.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="33.6" y="654.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.05%)</title><rect x="31.2" y="707.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="34.2" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (39 samples, 0.62%)</title><rect x="31.7" y="723.0" width="7.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="34.7" y="734.0"></text>
</g>
<g>
<title>schedule (38 samples, 0.61%)</title><rect x="31.9" y="707.0" width="7.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="34.9" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (34 samples, 0.54%)</title><rect x="32.7" y="691.0" width="6.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="35.7" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (31 samples, 0.50%)</title><rect x="33.2" y="675.0" width="5.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="36.2" y="686.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="39.1" y="739.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="42.1" y="750.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.06%)</title><rect x="39.7" y="819.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="42.7" y="830.0"></text>
</g>
<g>
<title>__GI___clock_gettime (6 samples, 0.10%)</title><rect x="40.6" y="819.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="43.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="41.2" y="803.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="44.2" y="814.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 0.06%)</title><rect x="41.9" y="819.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="44.9" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,381 samples, 22.11%)</title><rect x="42.7" y="851.0" width="260.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.7" y="862.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,381 samples, 22.11%)</title><rect x="42.7" y="835.0" width="260.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.7" y="846.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,232 samples, 19.72%)</title><rect x="42.7" y="819.0" width="232.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.7" y="830.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,184 samples, 18.95%)</title><rect x="44.0" y="803.0" width="223.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.0" y="814.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,182 samples, 18.92%)</title><rect x="44.4" y="787.0" width="223.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.4" y="798.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,169 samples, 18.71%)</title><rect x="44.4" y="771.0" width="220.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.4" y="782.0">RequestHandler1_entity.handle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (571 samples, 9.14%)</title><rect x="45.1" y="755.0" width="107.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.1" y="766.0">one/nio/http/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.13%)</title><rect x="45.9" y="739.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.9" y="750.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="46.3" y="723.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="49.3" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="47.0" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="50.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (559 samples, 8.95%)</title><rect x="47.4" y="739.0" width="105.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.4" y="750.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.16%)</title><rect x="47.6" y="723.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.11%)</title><rect x="48.2" y="707.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.2" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.08%)</title><rect x="48.2" y="691.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.2" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="49.1" y="691.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.1" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="49.1" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.1" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (548 samples, 8.77%)</title><rect x="49.5" y="723.0" width="103.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.5" y="734.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (548 samples, 8.77%)</title><rect x="49.5" y="707.0" width="103.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.5" y="718.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.03%)</title><rect x="49.5" y="691.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (546 samples, 8.74%)</title><rect x="49.9" y="691.0" width="103.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.9" y="702.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (544 samples, 8.71%)</title><rect x="50.2" y="675.0" width="102.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="53.2" y="686.0">one/nio/net/..</text>
</g>
<g>
<title>.annobin_send.c (529 samples, 8.47%)</title><rect x="51.0" y="659.0" width="99.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="54.0" y="670.0">.annobin_sen..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.03%)</title><rect x="53.8" y="643.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="56.8" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (512 samples, 8.20%)</title><rect x="54.2" y="643.0" width="96.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="57.2" y="654.0">entry_SYSCA..</text>
</g>
<g>
<title>do_syscall_64 (512 samples, 8.20%)</title><rect x="54.2" y="627.0" width="96.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="57.2" y="638.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (505 samples, 8.08%)</title><rect x="55.3" y="611.0" width="95.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="58.3" y="622.0">__x64_sys_s..</text>
</g>
<g>
<title>__sys_sendto (505 samples, 8.08%)</title><rect x="55.3" y="595.0" width="95.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="58.3" y="606.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (2 samples, 0.03%)</title><rect x="55.9" y="579.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="58.9" y="590.0"></text>
</g>
<g>
<title>sock_sendmsg (499 samples, 7.99%)</title><rect x="56.3" y="579.0" width="94.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="59.3" y="590.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (11 samples, 0.18%)</title><rect x="56.7" y="563.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="59.7" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (8 samples, 0.13%)</title><rect x="57.2" y="547.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="60.2" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.06%)</title><rect x="58.0" y="531.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="61.0" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg (486 samples, 7.78%)</title><rect x="58.7" y="563.0" width="91.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="61.7" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="58.7" y="547.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="61.7" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="59.1" y="547.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="62.1" y="558.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.06%)</title><rect x="59.5" y="547.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="62.5" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (478 samples, 7.65%)</title><rect x="60.2" y="547.0" width="90.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="63.2" y="558.0">tcp_sendms..</text>
</g>
<g>
<title>__check_object_size (5 samples, 0.08%)</title><rect x="61.4" y="531.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="64.4" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.05%)</title><rect x="61.8" y="515.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="64.8" y="526.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (446 samples, 7.14%)</title><rect x="62.3" y="531.0" width="84.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="65.3" y="542.0">__tcp_push..</text>
</g>
<g>
<title>tcp_write_xmit (444 samples, 7.11%)</title><rect x="62.7" y="515.0" width="83.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="65.7" y="526.0">tcp_write..</text>
</g>
<g>
<title>__tcp_transmit_skb (431 samples, 6.90%)</title><rect x="62.7" y="499.0" width="81.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="65.7" y="510.0">__tcp_tra..</text>
</g>
<g>
<title>__ip_queue_xmit (410 samples, 6.56%)</title><rect x="64.0" y="483.0" width="77.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="67.0" y="494.0">__ip_queu..</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="64.2" y="467.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="67.2" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="64.2" y="451.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="67.2" y="462.0"></text>
</g>
<g>
<title>ip_local_out (88 samples, 1.41%)</title><rect x="64.6" y="467.0" width="16.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="67.6" y="478.0"></text>
</g>
<g>
<title>__ip_local_out (88 samples, 1.41%)</title><rect x="64.6" y="451.0" width="16.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="67.6" y="462.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.03%)</title><rect x="64.8" y="435.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="67.8" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (85 samples, 1.36%)</title><rect x="65.2" y="435.0" width="16.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="68.2" y="446.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (28 samples, 0.45%)</title><rect x="65.3" y="419.0" width="5.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="68.3" y="430.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="70.3" y="403.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="73.3" y="414.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.03%)</title><rect x="70.6" y="419.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="73.6" y="430.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (13 samples, 0.21%)</title><rect x="71.0" y="419.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="74.0" y="430.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (10 samples, 0.16%)</title><rect x="71.6" y="403.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="74.6" y="414.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (2 samples, 0.03%)</title><rect x="73.5" y="419.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="76.5" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.06%)</title><rect x="74.0" y="419.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="77.0" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (2 samples, 0.03%)</title><rect x="74.8" y="419.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="77.8" y="430.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (28 samples, 0.45%)</title><rect x="75.2" y="419.0" width="5.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="78.2" y="430.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (2 samples, 0.03%)</title><rect x="75.9" y="403.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="78.9" y="414.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (5 samples, 0.08%)</title><rect x="76.3" y="403.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="79.3" y="414.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (3 samples, 0.05%)</title><rect x="77.2" y="403.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="80.2" y="414.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (11 samples, 0.18%)</title><rect x="77.8" y="403.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="80.8" y="414.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (4 samples, 0.06%)</title><rect x="79.1" y="387.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="82.1" y="398.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (3 samples, 0.05%)</title><rect x="79.9" y="403.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="82.9" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (3 samples, 0.05%)</title><rect x="80.5" y="419.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="83.5" y="430.0"></text>
</g>
<g>
<title>ip_output (319 samples, 5.11%)</title><rect x="81.2" y="467.0" width="60.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="84.2" y="478.0">ip_out..</text>
</g>
<g>
<title>ip_finish_output2 (292 samples, 4.67%)</title><rect x="82.0" y="451.0" width="55.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="85.0" y="462.0">ip_fi..</text>
</g>
<g>
<title>__dev_queue_xmit (22 samples, 0.35%)</title><rect x="82.5" y="435.0" width="4.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="85.5" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (17 samples, 0.27%)</title><rect x="82.9" y="419.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="85.9" y="430.0"></text>
</g>
<g>
<title>loopback_xmit (13 samples, 0.21%)</title><rect x="83.7" y="403.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="86.7" y="414.0"></text>
</g>
<g>
<title>netif_rx (9 samples, 0.14%)</title><rect x="84.0" y="387.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="87.0" y="398.0"></text>
</g>
<g>
<title>netif_rx_internal (9 samples, 0.14%)</title><rect x="84.0" y="371.0" width="1.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="87.0" y="382.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.08%)</title><rect x="84.4" y="355.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="87.4" y="366.0"></text>
</g>
<g>
<title>ktime_get_with_offset (2 samples, 0.03%)</title><rect x="85.4" y="355.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="88.4" y="366.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.03%)</title><rect x="85.7" y="387.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="88.7" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.03%)</title><rect x="86.1" y="419.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="89.1" y="430.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (267 samples, 4.27%)</title><rect x="86.7" y="435.0" width="50.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="89.7" y="446.0">__loc..</text>
</g>
<g>
<title>do_softirq.part.0 (267 samples, 4.27%)</title><rect x="86.7" y="419.0" width="50.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="89.7" y="430.0">do_so..</text>
</g>
<g>
<title>do_softirq_own_stack (262 samples, 4.19%)</title><rect x="87.6" y="403.0" width="49.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="90.6" y="414.0">do_so..</text>
</g>
<g>
<title>__softirqentry_text_start (262 samples, 4.19%)</title><rect x="87.6" y="387.0" width="49.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="90.6" y="398.0">__sof..</text>
</g>
<g>
<title>net_rx_action (260 samples, 4.16%)</title><rect x="88.0" y="371.0" width="49.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="91.0" y="382.0">net_r..</text>
</g>
<g>
<title>__kfree_skb_flush (4 samples, 0.06%)</title><rect x="88.2" y="355.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="91.2" y="366.0"></text>
</g>
<g>
<title>process_backlog (254 samples, 4.07%)</title><rect x="89.1" y="355.0" width="48.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="92.1" y="366.0">proc..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (250 samples, 4.00%)</title><rect x="89.9" y="339.0" width="47.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="92.9" y="350.0">__ne..</text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.05%)</title><rect x="89.9" y="323.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="92.9" y="334.0"></text>
</g>
<g>
<title>ip_rcv (247 samples, 3.95%)</title><rect x="90.5" y="323.0" width="46.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="93.5" y="334.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (191 samples, 3.06%)</title><rect x="90.8" y="307.0" width="36.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="93.8" y="318.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver_finish (162 samples, 2.59%)</title><rect x="91.2" y="291.0" width="30.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="94.2" y="302.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (162 samples, 2.59%)</title><rect x="91.2" y="275.0" width="30.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="94.2" y="286.0">ip..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="91.2" y="259.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="94.2" y="270.0"></text>
</g>
<g>
<title>tcp_v4_rcv (160 samples, 2.56%)</title><rect x="91.6" y="259.0" width="30.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="94.6" y="270.0">tc..</text>
</g>
<g>
<title>__inet_lookup_established (13 samples, 0.21%)</title><rect x="92.2" y="243.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="95.2" y="254.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.05%)</title><rect x="94.6" y="243.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="97.6" y="254.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.03%)</title><rect x="94.8" y="227.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="97.8" y="238.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="94.8" y="211.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="97.8" y="222.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (141 samples, 2.26%)</title><rect x="95.2" y="243.0" width="26.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="98.2" y="254.0">t..</text>
</g>
<g>
<title>tcp_rcv_established (141 samples, 2.26%)</title><rect x="95.2" y="227.0" width="26.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="98.2" y="238.0">t..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.03%)</title><rect x="95.2" y="211.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="98.2" y="222.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.05%)</title><rect x="95.6" y="211.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="98.6" y="222.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.05%)</title><rect x="95.6" y="195.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="98.6" y="206.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.05%)</title><rect x="95.6" y="179.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="98.6" y="190.0"></text>
</g>
<g>
<title>tcp_ack (32 samples, 0.51%)</title><rect x="96.1" y="211.0" width="6.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="99.1" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (7 samples, 0.11%)</title><rect x="97.6" y="195.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="100.6" y="206.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="97.6" y="179.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="100.6" y="190.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.06%)</title><rect x="98.2" y="179.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="101.2" y="190.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="99.0" y="195.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="102.0" y="206.0"></text>
</g>
<g>
<title>kmem_cache_free (6 samples, 0.10%)</title><rect x="99.7" y="195.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="102.7" y="206.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="100.5" y="179.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="103.5" y="190.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (3 samples, 0.05%)</title><rect x="100.9" y="195.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="103.9" y="206.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.05%)</title><rect x="101.6" y="195.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="104.6" y="206.0"></text>
</g>
<g>
<title>tcp_data_queue (104 samples, 1.66%)</title><rect x="102.2" y="211.0" width="19.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="105.2" y="222.0"></text>
</g>
<g>
<title>sock_def_readable (98 samples, 1.57%)</title><rect x="102.4" y="195.0" width="18.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="105.4" y="206.0"></text>
</g>
<g>
<title>__wake_up_common_lock (95 samples, 1.52%)</title><rect x="102.9" y="179.0" width="18.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="105.9" y="190.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (95 samples, 1.52%)</title><rect x="102.9" y="163.0" width="18.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="105.9" y="174.0"></text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.05%)</title><rect x="120.9" y="195.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="123.9" y="206.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.03%)</title><rect x="121.4" y="195.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="124.4" y="206.0"></text>
</g>
<g>
<title>nf_hook_slow (27 samples, 0.43%)</title><rect x="121.8" y="291.0" width="5.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="124.8" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (22 samples, 0.35%)</title><rect x="122.0" y="275.0" width="4.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="125.0" y="286.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (3 samples, 0.05%)</title><rect x="125.6" y="259.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="128.6" y="270.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (3 samples, 0.05%)</title><rect x="126.4" y="275.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="129.4" y="286.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.03%)</title><rect x="126.9" y="307.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="129.9" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (52 samples, 0.83%)</title><rect x="127.3" y="307.0" width="9.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="130.3" y="318.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (4 samples, 0.06%)</title><rect x="128.2" y="291.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="131.2" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (30 samples, 0.48%)</title><rect x="129.0" y="291.0" width="5.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="132.0" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.06%)</title><rect x="135.0" y="291.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="138.0" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (2 samples, 0.03%)</title><rect x="136.0" y="291.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="139.0" y="302.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (4 samples, 0.06%)</title><rect x="136.4" y="291.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="139.4" y="302.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.03%)</title><rect x="136.7" y="275.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="139.7" y="286.0"></text>
</g>
<g>
<title>ip_finish_output (3 samples, 0.05%)</title><rect x="137.1" y="451.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="140.1" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (20 samples, 0.32%)</title><rect x="137.7" y="451.0" width="3.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="140.7" y="462.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (8 samples, 0.13%)</title><rect x="138.1" y="435.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="141.1" y="446.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (5 samples, 0.08%)</title><rect x="139.8" y="435.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="142.8" y="446.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (4 samples, 0.06%)</title><rect x="140.0" y="419.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="143.0" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (2 samples, 0.03%)</title><rect x="140.7" y="435.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="143.7" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (2 samples, 0.03%)</title><rect x="141.1" y="435.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="144.1" y="446.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.06%)</title><rect x="141.5" y="483.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="144.5" y="494.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.03%)</title><rect x="142.2" y="483.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="145.2" y="494.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.05%)</title><rect x="142.8" y="483.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="145.8" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (10 samples, 0.16%)</title><rect x="144.3" y="499.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="147.3" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (7 samples, 0.11%)</title><rect x="144.7" y="483.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="147.7" y="494.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.10%)</title><rect x="144.9" y="467.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="147.9" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.03%)</title><rect x="145.4" y="451.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="148.4" y="462.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="146.2" y="499.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="149.2" y="510.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (11 samples, 0.18%)</title><rect x="146.8" y="531.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="149.8" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (10 samples, 0.16%)</title><rect x="146.9" y="515.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="149.9" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (5 samples, 0.08%)</title><rect x="147.3" y="499.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="150.3" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.08%)</title><rect x="147.3" y="483.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="150.3" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.05%)</title><rect x="148.3" y="499.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="151.3" y="510.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.05%)</title><rect x="148.8" y="531.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="151.8" y="542.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.03%)</title><rect x="149.4" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="152.4" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.06%)</title><rect x="149.8" y="531.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="152.8" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.05%)</title><rect x="150.0" y="515.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="153.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="151.1" y="659.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="154.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="151.1" y="643.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="154.1" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.10%)</title><rect x="151.1" y="627.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="154.1" y="638.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="151.9" y="611.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="154.9" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="152.6" y="659.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="155.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.19%)</title><rect x="153.0" y="755.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.05%)</title><rect x="153.9" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.05%)</title><rect x="153.9" y="723.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.9" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="154.5" y="739.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="157.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="154.9" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="154.9" y="723.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="154.9" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.9" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="154.9" y="691.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (582 samples, 9.32%)</title><rect x="155.3" y="755.0" width="109.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.3" y="766.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.05%)</title><rect x="155.6" y="739.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="158.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="155.6" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (2 samples, 0.03%)</title><rect x="156.2" y="739.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="159.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="156.6" y="739.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.6" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="156.6" y="723.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.6" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="157.0" y="739.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="157.0" y="723.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.0" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="157.3" y="739.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.3" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.03%)</title><rect x="157.9" y="739.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (564 samples, 9.03%)</title><rect x="158.3" y="739.0" width="106.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.3" y="750.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (26 samples, 0.42%)</title><rect x="158.5" y="723.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.5" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (26 samples, 0.42%)</title><rect x="158.5" y="707.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.5" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (24 samples, 0.38%)</title><rect x="158.8" y="691.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.8" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (23 samples, 0.37%)</title><rect x="159.0" y="675.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="162.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (20 samples, 0.32%)</title><rect x="159.6" y="659.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (14 samples, 0.22%)</title><rect x="160.5" y="643.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.5" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (7 samples, 0.11%)</title><rect x="160.7" y="627.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.7" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (7 samples, 0.11%)</title><rect x="160.7" y="611.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.7" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (6 samples, 0.10%)</title><rect x="160.9" y="595.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.9" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.08%)</title><rect x="161.1" y="579.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="164.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.08%)</title><rect x="161.1" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="164.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (5 samples, 0.08%)</title><rect x="161.1" y="547.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (5 samples, 0.08%)</title><rect x="161.1" y="531.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="164.1" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (5 samples, 0.08%)</title><rect x="161.1" y="515.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.1" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.08%)</title><rect x="161.1" y="499.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="164.1" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (5 samples, 0.08%)</title><rect x="161.1" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.1" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.08%)</title><rect x="161.1" y="467.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.1" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (5 samples, 0.08%)</title><rect x="161.1" y="451.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.1" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.08%)</title><rect x="161.1" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="161.1" y="419.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="161.1" y="403.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.1" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="161.3" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="164.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (2 samples, 0.03%)</title><rect x="161.7" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.7" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (6 samples, 0.10%)</title><rect x="162.1" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.1" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (6 samples, 0.10%)</title><rect x="162.1" y="611.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.1" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (6 samples, 0.10%)</title><rect x="162.1" y="595.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.1" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (6 samples, 0.10%)</title><rect x="162.1" y="579.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="165.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.10%)</title><rect x="162.1" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.10%)</title><rect x="162.1" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.1" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2 samples, 0.03%)</title><rect x="162.1" y="531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (2 samples, 0.03%)</title><rect x="162.1" y="515.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (2 samples, 0.03%)</title><rect x="162.1" y="499.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (2 samples, 0.03%)</title><rect x="162.1" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.03%)</title><rect x="162.1" y="467.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (4 samples, 0.06%)</title><rect x="162.4" y="531.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="165.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (4 samples, 0.06%)</title><rect x="162.4" y="515.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.4" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (4 samples, 0.06%)</title><rect x="162.4" y="499.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.4" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.06%)</title><rect x="162.4" y="483.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="165.4" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (4 samples, 0.06%)</title><rect x="162.4" y="467.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.4" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.06%)</title><rect x="162.4" y="451.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.4" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (4 samples, 0.06%)</title><rect x="162.4" y="435.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.4" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.06%)</title><rect x="162.4" y="419.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="162.4" y="403.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="162.4" y="387.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="165.4" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="162.6" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.6" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (8 samples, 0.13%)</title><rect x="163.4" y="723.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.4" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (8 samples, 0.13%)</title><rect x="163.4" y="707.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$57/204060277.apply (8 samples, 0.13%)</title><rect x="163.4" y="691.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (8 samples, 0.13%)</title><rect x="163.4" y="675.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.05%)</title><rect x="163.6" y="659.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.6" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.05%)</title><rect x="163.6" y="643.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.6" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.05%)</title><rect x="163.6" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.6" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="163.6" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="163.6" y="595.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.6" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="163.6" y="579.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="163.6" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="163.6" y="547.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="166.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (4 samples, 0.06%)</title><rect x="164.1" y="659.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.1" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.06%)</title><rect x="164.1" y="643.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="167.1" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.06%)</title><rect x="164.1" y="627.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.1" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="164.5" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="164.5" y="595.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.06%)</title><rect x="164.9" y="723.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.9" y="734.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.06%)</title><rect x="164.9" y="707.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (524 samples, 8.39%)</title><rect x="165.8" y="723.0" width="99.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.8" y="734.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (524 samples, 8.39%)</title><rect x="165.8" y="707.0" width="99.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.8" y="718.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (43 samples, 0.69%)</title><rect x="166.0" y="691.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.0" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (43 samples, 0.69%)</title><rect x="166.0" y="675.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.0" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (37 samples, 0.59%)</title><rect x="167.2" y="659.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.2" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (37 samples, 0.59%)</title><rect x="167.2" y="643.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.2" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (4 samples, 0.06%)</title><rect x="167.2" y="627.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="170.2" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (33 samples, 0.53%)</title><rect x="167.9" y="627.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.9" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (33 samples, 0.53%)</title><rect x="167.9" y="611.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.9" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (31 samples, 0.50%)</title><rect x="168.3" y="595.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.3" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (30 samples, 0.48%)</title><rect x="168.5" y="579.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="171.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (21 samples, 0.34%)</title><rect x="168.7" y="563.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (19 samples, 0.30%)</title><rect x="169.0" y="547.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (19 samples, 0.30%)</title><rect x="169.0" y="531.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (19 samples, 0.30%)</title><rect x="169.0" y="515.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (12 samples, 0.19%)</title><rect x="169.0" y="499.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.0" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.13%)</title><rect x="169.0" y="483.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.13%)</title><rect x="169.0" y="467.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.11%)</title><rect x="169.2" y="451.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.2" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.11%)</title><rect x="169.2" y="435.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.2" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="170.0" y="419.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="170.0" y="403.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="170.0" y="387.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="170.2" y="371.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.03%)</title><rect x="170.6" y="483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="170.6" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="170.6" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.6" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="170.6" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.6" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="170.9" y="483.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.9" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="170.9" y="467.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="170.9" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.9" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="170.9" y="435.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.9" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="170.9" y="419.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="173.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (3 samples, 0.05%)</title><rect x="171.5" y="499.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.5" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.05%)</title><rect x="171.5" y="483.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="171.7" y="467.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="171.7" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="174.7" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="171.7" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="171.7" y="419.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="171.7" y="403.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="174.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (3 samples, 0.05%)</title><rect x="172.1" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.1" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.05%)</title><rect x="172.1" y="483.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="172.1" y="467.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="172.1" y="451.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.1" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="172.1" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="172.1" y="419.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="172.1" y="403.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="175.1" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="172.1" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.1" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="172.3" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (8 samples, 0.13%)</title><rect x="172.6" y="563.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (8 samples, 0.13%)</title><rect x="172.6" y="547.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.6" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (8 samples, 0.13%)</title><rect x="172.6" y="531.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.6" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.13%)</title><rect x="172.6" y="515.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.6" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (8 samples, 0.13%)</title><rect x="172.6" y="499.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.6" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.13%)</title><rect x="172.6" y="483.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.6" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (8 samples, 0.13%)</title><rect x="172.6" y="467.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.6" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.13%)</title><rect x="172.6" y="451.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.08%)</title><rect x="172.6" y="435.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.08%)</title><rect x="172.6" y="419.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.6" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.06%)</title><rect x="172.8" y="403.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="175.8" y="414.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="173.2" y="387.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="176.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (2 samples, 0.03%)</title><rect x="173.6" y="435.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.03%)</title><rect x="173.6" y="419.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="173.6" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.6" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="173.6" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="173.6" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="173.6" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="173.6" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="173.6" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="173.6" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.6" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.05%)</title><rect x="174.3" y="691.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.3" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (8 samples, 0.13%)</title><rect x="174.9" y="691.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.9" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (8 samples, 0.13%)</title><rect x="174.9" y="675.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.9" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.03%)</title><rect x="176.0" y="659.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.0" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.03%)</title><rect x="176.0" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (27 samples, 0.43%)</title><rect x="176.4" y="691.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (27 samples, 0.43%)</title><rect x="176.4" y="675.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.4" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (24 samples, 0.38%)</title><rect x="177.0" y="659.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.0" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (9 samples, 0.14%)</title><rect x="177.2" y="643.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.11%)</title><rect x="177.5" y="627.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.11%)</title><rect x="177.5" y="611.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (7 samples, 0.11%)</title><rect x="177.5" y="595.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="180.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (6 samples, 0.10%)</title><rect x="177.5" y="579.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.5" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.05%)</title><rect x="177.7" y="563.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.7" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="177.7" y="547.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.7" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="177.9" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.9" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="177.9" y="515.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.9" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="178.3" y="563.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="181.3" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="178.3" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="181.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="178.3" y="531.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="181.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="178.3" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5 samples, 0.08%)</title><rect x="178.9" y="643.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.9" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (5 samples, 0.08%)</title><rect x="178.9" y="627.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.9" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (5 samples, 0.08%)</title><rect x="178.9" y="611.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.9" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.03%)</title><rect x="179.4" y="595.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2 samples, 0.03%)</title><rect x="179.4" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (2 samples, 0.03%)</title><rect x="179.4" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (2 samples, 0.03%)</title><rect x="179.4" y="547.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.4" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (2 samples, 0.03%)</title><rect x="179.4" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.4" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.03%)</title><rect x="179.4" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.4" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (2 samples, 0.03%)</title><rect x="179.4" y="499.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.4" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.03%)</title><rect x="179.4" y="483.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.4" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (2 samples, 0.03%)</title><rect x="179.4" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.4" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.03%)</title><rect x="179.4" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="179.4" y="435.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="182.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="179.4" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.4" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="179.4" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.4" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9 samples, 0.14%)</title><rect x="179.8" y="643.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.8" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9 samples, 0.14%)</title><rect x="179.8" y="627.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.8" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (9 samples, 0.14%)</title><rect x="179.8" y="611.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.8" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (9 samples, 0.14%)</title><rect x="179.8" y="595.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.8" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.11%)</title><rect x="180.2" y="579.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.2" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.11%)</title><rect x="180.2" y="563.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.2" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4 samples, 0.06%)</title><rect x="180.2" y="547.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.06%)</title><rect x="180.2" y="531.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (4 samples, 0.06%)</title><rect x="180.2" y="515.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (4 samples, 0.06%)</title><rect x="180.2" y="499.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.03%)</title><rect x="180.2" y="483.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (3 samples, 0.05%)</title><rect x="180.9" y="547.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (3 samples, 0.05%)</title><rect x="180.9" y="531.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.9" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (3 samples, 0.05%)</title><rect x="180.9" y="515.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.9" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.05%)</title><rect x="180.9" y="499.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (3 samples, 0.05%)</title><rect x="180.9" y="483.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.9" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.05%)</title><rect x="180.9" y="467.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.9" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (3 samples, 0.05%)</title><rect x="180.9" y="451.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="183.9" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.05%)</title><rect x="180.9" y="435.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="180.9" y="419.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="183.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="180.9" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.9" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="180.9" y="387.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (63 samples, 1.01%)</title><rect x="181.5" y="691.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.5" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (43 samples, 0.69%)</title><rect x="181.5" y="675.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.5" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (43 samples, 0.69%)</title><rect x="181.5" y="659.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.5" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (39 samples, 0.62%)</title><rect x="181.7" y="643.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.7" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (39 samples, 0.62%)</title><rect x="181.7" y="627.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.7" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (39 samples, 0.62%)</title><rect x="181.7" y="611.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="184.7" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (36 samples, 0.58%)</title><rect x="182.3" y="595.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 0.43%)</title><rect x="184.0" y="579.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (21 samples, 0.34%)</title><rect x="185.1" y="563.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.1" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 0.21%)</title><rect x="186.2" y="547.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="187.4" y="531.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.4" y="542.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.05%)</title><rect x="188.1" y="531.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="191.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="188.7" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.7" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (3 samples, 0.05%)</title><rect x="189.1" y="643.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.1" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (2 samples, 0.03%)</title><rect x="189.6" y="675.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.6" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (18 samples, 0.29%)</title><rect x="190.0" y="675.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="193.0" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (18 samples, 0.29%)</title><rect x="190.0" y="659.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.0" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (18 samples, 0.29%)</title><rect x="190.0" y="643.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.0" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (18 samples, 0.29%)</title><rect x="190.0" y="627.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.0" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (17 samples, 0.27%)</title><rect x="190.2" y="611.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.27%)</title><rect x="190.2" y="595.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.2" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.22%)</title><rect x="190.8" y="579.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.8" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.22%)</title><rect x="190.8" y="563.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.05%)</title><rect x="191.7" y="547.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="192.3" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.3" y="558.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.06%)</title><rect x="192.7" y="547.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="195.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (378 samples, 6.05%)</title><rect x="193.4" y="691.0" width="71.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.4" y="702.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (378 samples, 6.05%)</title><rect x="193.4" y="675.0" width="71.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.4" y="686.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (376 samples, 6.02%)</title><rect x="193.8" y="659.0" width="71.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.8" y="670.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (67 samples, 1.07%)</title><rect x="195.7" y="643.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.7" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.11%)</title><rect x="196.2" y="627.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.2" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.05%)</title><rect x="197.0" y="611.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.0" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (54 samples, 0.86%)</title><rect x="197.6" y="627.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="200.6" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.13%)</title><rect x="202.1" y="611.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="203.2" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (7 samples, 0.11%)</title><rect x="203.6" y="611.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.6" y="622.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (9 samples, 0.14%)</title><rect x="204.9" y="611.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="207.9" y="622.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.10%)</title><rect x="206.6" y="611.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="209.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="208.0" y="627.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.0" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="208.0" y="611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (150 samples, 2.40%)</title><rect x="208.3" y="643.0" width="28.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.3" y="654.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (49 samples, 0.78%)</title><rect x="208.3" y="627.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.3" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.03%)</title><rect x="208.3" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.3" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (47 samples, 0.75%)</title><rect x="208.7" y="611.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (47 samples, 0.75%)</title><rect x="208.7" y="595.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (46 samples, 0.74%)</title><rect x="208.9" y="579.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.9" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (50 samples, 0.80%)</title><rect x="217.6" y="627.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.6" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (50 samples, 0.80%)</title><rect x="217.6" y="611.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (43 samples, 0.69%)</title><rect x="218.9" y="595.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.9" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (42 samples, 0.67%)</title><rect x="219.1" y="579.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.1" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (40 samples, 0.64%)</title><rect x="219.5" y="563.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.64%)</title><rect x="219.5" y="547.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (40 samples, 0.64%)</title><rect x="219.5" y="531.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.5" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (20 samples, 0.32%)</title><rect x="221.6" y="515.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.6" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.06%)</title><rect x="221.7" y="499.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.7" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.05%)</title><rect x="221.9" y="483.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.05%)</title><rect x="221.9" y="467.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.9" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.05%)</title><rect x="221.9" y="451.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.9" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (15 samples, 0.24%)</title><rect x="222.5" y="499.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.5" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.06%)</title><rect x="223.4" y="483.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.4" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.10%)</title><rect x="224.2" y="483.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.10%)</title><rect x="224.2" y="467.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.2" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.10%)</title><rect x="224.2" y="451.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.2" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.06%)</title><rect x="225.3" y="515.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (5 samples, 0.08%)</title><rect x="226.1" y="515.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.1" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (43 samples, 0.69%)</title><rect x="227.0" y="627.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.0" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (35 samples, 0.56%)</title><rect x="228.5" y="611.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (35 samples, 0.56%)</title><rect x="228.5" y="595.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.5" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (31 samples, 0.50%)</title><rect x="229.3" y="579.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (31 samples, 0.50%)</title><rect x="229.3" y="563.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.3" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (31 samples, 0.50%)</title><rect x="229.3" y="547.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.3" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (23 samples, 0.37%)</title><rect x="230.4" y="531.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.4" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="230.8" y="515.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="230.8" y="499.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.10%)</title><rect x="231.2" y="483.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.10%)</title><rect x="231.2" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.2" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.21%)</title><rect x="232.3" y="515.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.3" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.21%)</title><rect x="232.3" y="499.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.11%)</title><rect x="233.1" y="483.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="234.4" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.4" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="234.4" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="234.8" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.8" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="235.2" y="627.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.2" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="235.2" y="611.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.13%)</title><rect x="235.2" y="595.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.2" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.13%)</title><rect x="235.2" y="579.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (149 samples, 2.39%)</title><rect x="236.7" y="643.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.7" y="654.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (55 samples, 0.88%)</title><rect x="238.6" y="627.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.6" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (55 samples, 0.88%)</title><rect x="238.6" y="611.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (48 samples, 0.77%)</title><rect x="239.9" y="595.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.9" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (48 samples, 0.77%)</title><rect x="239.9" y="579.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.9" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (43 samples, 0.69%)</title><rect x="240.8" y="563.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (43 samples, 0.69%)</title><rect x="240.8" y="547.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.8" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (43 samples, 0.69%)</title><rect x="240.8" y="531.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.8" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (19 samples, 0.30%)</title><rect x="244.6" y="515.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="245.2" y="499.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.2" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="245.2" y="483.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.11%)</title><rect x="245.4" y="467.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.4" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.11%)</title><rect x="245.4" y="451.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.4" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.13%)</title><rect x="246.7" y="499.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.7" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.13%)</title><rect x="246.7" y="483.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.05%)</title><rect x="247.1" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="247.6" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.05%)</title><rect x="247.6" y="451.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="248.2" y="515.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.2" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (41 samples, 0.66%)</title><rect x="248.9" y="627.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.9" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (36 samples, 0.58%)</title><rect x="249.9" y="611.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.9" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (36 samples, 0.58%)</title><rect x="249.9" y="595.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.9" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (35 samples, 0.56%)</title><rect x="250.1" y="579.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.56%)</title><rect x="250.1" y="563.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.1" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.56%)</title><rect x="250.1" y="547.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.1" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (28 samples, 0.45%)</title><rect x="250.8" y="531.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.8" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.19%)</title><rect x="250.8" y="515.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.19%)</title><rect x="250.8" y="499.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.19%)</title><rect x="250.8" y="483.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.8" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (8 samples, 0.13%)</title><rect x="251.6" y="467.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.6" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (16 samples, 0.26%)</title><rect x="253.1" y="515.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.1" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (16 samples, 0.26%)</title><rect x="253.1" y="499.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.26%)</title><rect x="253.1" y="483.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.1" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.05%)</title><rect x="254.6" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.08%)</title><rect x="255.2" y="467.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.2" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.05%)</title><rect x="256.1" y="531.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (35 samples, 0.56%)</title><rect x="256.7" y="627.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (35 samples, 0.56%)</title><rect x="256.7" y="611.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.7" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.06%)</title><rect x="263.3" y="627.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.3" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.06%)</title><rect x="263.3" y="611.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.3" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.06%)</title><rect x="263.3" y="595.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.3" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.06%)</title><rect x="263.3" y="579.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.3" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.06%)</title><rect x="264.1" y="627.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.1" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.06%)</title><rect x="264.1" y="611.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="264.1" y="595.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.1" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.06%)</title><rect x="264.1" y="579.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (2 samples, 0.03%)</title><rect x="264.8" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (2 samples, 0.03%)</title><rect x="264.8" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.08%)</title><rect x="265.2" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.08%)</title><rect x="265.2" y="755.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="265.2" y="739.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.05%)</title><rect x="265.4" y="723.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (8 samples, 0.13%)</title><rect x="266.1" y="771.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.13%)</title><rect x="266.1" y="755.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.06%)</title><rect x="266.9" y="739.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.9" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.05%)</title><rect x="267.1" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.1" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.03%)</title><rect x="267.1" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20 samples, 0.32%)</title><rect x="267.6" y="803.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.06%)</title><rect x="268.0" y="787.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="268.0" y="771.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="268.0" y="755.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.05%)</title><rect x="268.2" y="739.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.18%)</title><rect x="268.8" y="787.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.18%)</title><rect x="268.8" y="771.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.16%)</title><rect x="269.0" y="755.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (10 samples, 0.16%)</title><rect x="269.0" y="739.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.05%)</title><rect x="270.9" y="787.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (7 samples, 0.11%)</title><rect x="271.4" y="803.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.11%)</title><rect x="271.4" y="787.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.11%)</title><rect x="271.4" y="771.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.05%)</title><rect x="271.8" y="755.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="272.4" y="755.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="272.4" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.4" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (2 samples, 0.03%)</title><rect x="272.4" y="723.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.08%)</title><rect x="272.7" y="803.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.13%)</title><rect x="273.9" y="803.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.11%)</title><rect x="274.1" y="787.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.06%)</title><rect x="274.6" y="771.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (4 samples, 0.06%)</title><rect x="274.6" y="755.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.03%)</title><rect x="275.4" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.4" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (147 samples, 2.35%)</title><rect x="275.8" y="819.0" width="27.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.8" y="830.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (139 samples, 2.23%)</title><rect x="277.3" y="803.0" width="26.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.3" y="814.0">o..</text>
</g>
<g>
<title>[unknown] (23 samples, 0.37%)</title><rect x="278.2" y="787.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="281.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.37%)</title><rect x="278.2" y="771.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="281.2" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (16 samples, 0.26%)</title><rect x="278.2" y="755.0" width="3.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="281.2" y="766.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.06%)</title><rect x="279.2" y="739.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="282.2" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.10%)</title><rect x="279.9" y="739.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="282.9" y="750.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="280.3" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="283.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.03%)</title><rect x="280.7" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="283.7" y="734.0"></text>
</g>
<g>
<title>__libc_recv (3 samples, 0.05%)</title><rect x="281.2" y="755.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="284.2" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.05%)</title><rect x="282.0" y="755.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="285.0" y="766.0"></text>
</g>
<g>
<title>__libc_recv (111 samples, 1.78%)</title><rect x="282.6" y="787.0" width="20.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="285.6" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (91 samples, 1.46%)</title><rect x="286.3" y="771.0" width="17.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="289.3" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (91 samples, 1.46%)</title><rect x="286.3" y="755.0" width="17.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="289.3" y="766.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (80 samples, 1.28%)</title><rect x="288.4" y="739.0" width="15.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="291.4" y="750.0"></text>
</g>
<g>
<title>__sys_recvfrom (78 samples, 1.25%)</title><rect x="288.8" y="723.0" width="14.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="291.8" y="734.0"></text>
</g>
<g>
<title>inet_recvmsg (54 samples, 0.86%)</title><rect x="289.0" y="707.0" width="10.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="292.0" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (53 samples, 0.85%)</title><rect x="289.2" y="691.0" width="10.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="292.2" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.03%)</title><rect x="291.3" y="675.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="294.3" y="686.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.03%)</title><rect x="291.3" y="659.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="294.3" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.03%)</title><rect x="291.3" y="643.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="294.3" y="654.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.03%)</title><rect x="291.3" y="627.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="294.3" y="638.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="291.6" y="675.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="294.6" y="686.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="292.0" y="675.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="295.0" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="292.4" y="675.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="295.4" y="686.0"></text>
</g>
<g>
<title>ns_to_timespec64 (2 samples, 0.03%)</title><rect x="292.8" y="675.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="295.8" y="686.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.06%)</title><rect x="293.1" y="675.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="296.1" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.05%)</title><rect x="293.1" y="659.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="296.1" y="670.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (20 samples, 0.32%)</title><rect x="293.9" y="675.0" width="3.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="296.9" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (20 samples, 0.32%)</title><rect x="293.9" y="659.0" width="3.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="296.9" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.08%)</title><rect x="294.1" y="643.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="297.1" y="654.0"></text>
</g>
<g>
<title>copyout (5 samples, 0.08%)</title><rect x="294.1" y="627.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="297.1" y="638.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.08%)</title><rect x="294.1" y="611.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="297.1" y="622.0"></text>
</g>
<g>
<title>simple_copy_to_iter (14 samples, 0.22%)</title><rect x="295.0" y="643.0" width="2.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="298.0" y="654.0"></text>
</g>
<g>
<title>__check_object_size (13 samples, 0.21%)</title><rect x="295.2" y="627.0" width="2.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="298.2" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.11%)</title><rect x="296.4" y="611.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="299.4" y="622.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.03%)</title><rect x="297.7" y="675.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="300.7" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (6 samples, 0.10%)</title><rect x="298.1" y="675.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="301.1" y="686.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.08%)</title><rect x="298.2" y="659.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="301.2" y="670.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.08%)</title><rect x="298.2" y="643.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="301.2" y="654.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.08%)</title><rect x="298.2" y="627.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="301.2" y="638.0"></text>
</g>
<g>
<title>sock_recvmsg (16 samples, 0.26%)</title><rect x="299.2" y="707.0" width="3.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="302.2" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (16 samples, 0.26%)</title><rect x="299.2" y="691.0" width="3.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="302.2" y="702.0"></text>
</g>
<g>
<title>sock_has_perm (15 samples, 0.24%)</title><rect x="299.4" y="675.0" width="2.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="302.4" y="686.0"></text>
</g>
<g>
<title>avc_has_perm (8 samples, 0.13%)</title><rect x="300.7" y="659.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="303.7" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7 samples, 0.11%)</title><rect x="302.2" y="707.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="305.2" y="718.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.11%)</title><rect x="302.2" y="691.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="305.2" y="702.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.10%)</title><rect x="302.4" y="675.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="305.4" y="686.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=28449] (2,637 samples, 42.21%)</title><rect x="303.7" y="883.0" width="498.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="306.7" y="894.0">[NIO Selector #1 tid=28449]</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="303.7" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="306.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (9 samples, 0.14%)</title><rect x="304.1" y="867.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="307.1" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (8 samples, 0.13%)</title><rect x="304.3" y="851.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="307.3" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (7 samples, 0.11%)</title><rect x="304.5" y="835.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="307.5" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.11%)</title><rect x="304.5" y="819.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="307.5" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.10%)</title><rect x="304.7" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="307.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (4 samples, 0.06%)</title><rect x="304.9" y="787.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="307.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (4 samples, 0.06%)</title><rect x="304.9" y="771.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="307.9" y="782.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.03%)</title><rect x="304.9" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="307.9" y="766.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.03%)</title><rect x="305.2" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="308.2" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="305.2" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="308.2" y="750.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="305.2" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="308.2" y="734.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.03%)</title><rect x="305.2" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="308.2" y="718.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.03%)</title><rect x="305.8" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="308.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="306.4" y="867.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="309.4" y="878.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.03%)</title><rect x="306.4" y="851.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="309.4" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.21%)</title><rect x="306.7" y="867.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="309.7" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,608 samples, 41.75%)</title><rect x="309.2" y="867.0" width="492.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="312.2" y="878.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.03%)</title><rect x="310.0" y="851.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.0" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.03%)</title><rect x="310.0" y="835.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.03%)</title><rect x="310.0" y="819.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.0" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (191 samples, 3.06%)</title><rect x="310.3" y="851.0" width="36.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.3" y="862.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (191 samples, 3.06%)</title><rect x="310.3" y="835.0" width="36.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.3" y="846.0">one..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (166 samples, 2.66%)</title><rect x="311.8" y="819.0" width="31.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="314.8" y="830.0">.a..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (135 samples, 2.16%)</title><rect x="317.7" y="803.0" width="25.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="320.7" y="814.0">e..</text>
</g>
<g>
<title>do_syscall_64 (135 samples, 2.16%)</title><rect x="317.7" y="787.0" width="25.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="320.7" y="798.0">d..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (124 samples, 1.98%)</title><rect x="319.6" y="771.0" width="23.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="322.6" y="782.0">_..</text>
</g>
<g>
<title>do_epoll_wait (121 samples, 1.94%)</title><rect x="320.2" y="755.0" width="22.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="323.2" y="766.0">d..</text>
</g>
<g>
<title>__fget_light (4 samples, 0.06%)</title><rect x="320.5" y="739.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="323.5" y="750.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.06%)</title><rect x="320.5" y="723.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="323.5" y="734.0"></text>
</g>
<g>
<title>ep_poll (112 samples, 1.79%)</title><rect x="321.3" y="739.0" width="21.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="324.3" y="750.0">e..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (61 samples, 0.98%)</title><rect x="322.6" y="723.0" width="11.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="325.6" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (46 samples, 0.74%)</title><rect x="324.7" y="707.0" width="8.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="327.7" y="718.0"></text>
</g>
<g>
<title>__list_del_entry_valid (2 samples, 0.03%)</title><rect x="326.6" y="691.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="329.6" y="702.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (34 samples, 0.54%)</title><rect x="327.0" y="691.0" width="6.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="330.0" y="702.0"></text>
</g>
<g>
<title>sock_poll (32 samples, 0.51%)</title><rect x="327.3" y="675.0" width="6.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="330.3" y="686.0"></text>
</g>
<g>
<title>tcp_poll (17 samples, 0.27%)</title><rect x="330.2" y="659.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="333.2" y="670.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.06%)</title><rect x="332.6" y="643.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="335.6" y="654.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.05%)</title><rect x="333.4" y="707.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="336.4" y="718.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (43 samples, 0.69%)</title><rect x="334.3" y="723.0" width="8.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="337.3" y="734.0"></text>
</g>
<g>
<title>schedule (38 samples, 0.61%)</title><rect x="335.3" y="707.0" width="7.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="338.3" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (35 samples, 0.56%)</title><rect x="335.8" y="691.0" width="6.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="338.8" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (34 samples, 0.54%)</title><rect x="336.0" y="675.0" width="6.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="339.0" y="686.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.05%)</title><rect x="342.4" y="739.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="345.4" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="343.4" y="819.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="346.4" y="830.0"></text>
</g>
<g>
<title>__GI___clock_gettime (8 samples, 0.13%)</title><rect x="343.8" y="819.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="346.8" y="830.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.10%)</title><rect x="344.1" y="803.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="347.1" y="814.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.05%)</title><rect x="345.7" y="819.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="348.7" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,409 samples, 38.56%)</title><rect x="346.4" y="851.0" width="455.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.4" y="862.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,409 samples, 38.56%)</title><rect x="346.4" y="835.0" width="455.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.4" y="846.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,182 samples, 34.93%)</title><rect x="346.6" y="819.0" width="412.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.6" y="830.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,103 samples, 33.66%)</title><rect x="349.8" y="803.0" width="397.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.8" y="814.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,091 samples, 33.47%)</title><rect x="352.1" y="787.0" width="395.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.1" y="798.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,078 samples, 33.26%)</title><rect x="352.1" y="771.0" width="392.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.1" y="782.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (963 samples, 15.42%)</title><rect x="352.5" y="755.0" width="181.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.5" y="766.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.13%)</title><rect x="354.0" y="739.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="357.0" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.08%)</title><rect x="354.5" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="357.5" y="734.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="354.7" y="707.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="357.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="354.9" y="691.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="357.9" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (946 samples, 15.14%)</title><rect x="355.5" y="739.0" width="178.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.5" y="750.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (18 samples, 0.29%)</title><rect x="355.5" y="723.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.22%)</title><rect x="356.2" y="707.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="359.2" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.16%)</title><rect x="356.2" y="691.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.2" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.06%)</title><rect x="358.1" y="691.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.1" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.06%)</title><rect x="358.1" y="675.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.1" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (928 samples, 14.86%)</title><rect x="358.9" y="723.0" width="175.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.9" y="734.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (928 samples, 14.86%)</title><rect x="358.9" y="707.0" width="175.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.9" y="718.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (921 samples, 14.74%)</title><rect x="360.2" y="691.0" width="174.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.2" y="702.0">one/nio/net/Session$Ar..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (920 samples, 14.73%)</title><rect x="360.4" y="675.0" width="173.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.4" y="686.0">one/nio/net/NativeSock..</text>
</g>
<g>
<title>.annobin_send.c (899 samples, 14.39%)</title><rect x="361.3" y="659.0" width="169.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="364.3" y="670.0">.annobin_send.c</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.05%)</title><rect x="365.9" y="643.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="368.9" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (872 samples, 13.96%)</title><rect x="366.4" y="643.0" width="164.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="369.4" y="654.0">entry_SYSCALL_64_afte..</text>
</g>
<g>
<title>do_syscall_64 (872 samples, 13.96%)</title><rect x="366.4" y="627.0" width="164.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="369.4" y="638.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (850 samples, 13.61%)</title><rect x="370.4" y="611.0" width="160.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="373.4" y="622.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (849 samples, 13.59%)</title><rect x="370.6" y="595.0" width="160.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="373.6" y="606.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (836 samples, 13.38%)</title><rect x="371.0" y="579.0" width="157.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="374.0" y="590.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (7 samples, 0.11%)</title><rect x="371.2" y="563.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="374.2" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (7 samples, 0.11%)</title><rect x="371.2" y="547.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="374.2" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.06%)</title><rect x="371.7" y="531.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="374.7" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg (828 samples, 13.25%)</title><rect x="372.5" y="563.0" width="156.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="375.5" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.06%)</title><rect x="372.9" y="547.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="375.9" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="373.2" y="531.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="376.2" y="542.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.10%)</title><rect x="373.6" y="547.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="376.6" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.05%)</title><rect x="373.8" y="531.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="376.8" y="542.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="374.4" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="377.4" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (816 samples, 13.06%)</title><rect x="374.7" y="547.0" width="154.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="377.7" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (6 samples, 0.10%)</title><rect x="375.7" y="531.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="378.7" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.05%)</title><rect x="375.9" y="515.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="378.9" y="526.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.03%)</title><rect x="376.4" y="515.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="379.4" y="526.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (743 samples, 11.89%)</title><rect x="376.8" y="531.0" width="140.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="379.8" y="542.0">__tcp_push_pending..</text>
</g>
<g>
<title>tcp_write_xmit (742 samples, 11.88%)</title><rect x="377.0" y="515.0" width="140.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="380.0" y="526.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (717 samples, 11.48%)</title><rect x="378.7" y="499.0" width="135.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="381.7" y="510.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (683 samples, 10.93%)</title><rect x="380.8" y="483.0" width="129.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="383.8" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="381.4" y="467.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="384.4" y="478.0"></text>
</g>
<g>
<title>ip_local_out (121 samples, 1.94%)</title><rect x="381.7" y="467.0" width="22.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="384.7" y="478.0">i..</text>
</g>
<g>
<title>__ip_local_out (121 samples, 1.94%)</title><rect x="381.7" y="451.0" width="22.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="384.7" y="462.0">_..</text>
</g>
<g>
<title>nf_hook_slow (119 samples, 1.90%)</title><rect x="382.1" y="435.0" width="22.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="385.1" y="446.0">n..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (38 samples, 0.61%)</title><rect x="382.9" y="419.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="385.9" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.03%)</title><rect x="390.0" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="393.0" y="430.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (13 samples, 0.21%)</title><rect x="390.4" y="419.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="393.4" y="430.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (12 samples, 0.19%)</title><rect x="390.6" y="403.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="393.6" y="414.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.05%)</title><rect x="392.9" y="419.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="395.9" y="430.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (3 samples, 0.05%)</title><rect x="393.4" y="419.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="396.4" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (3 samples, 0.05%)</title><rect x="394.0" y="419.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="397.0" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (5 samples, 0.08%)</title><rect x="394.6" y="419.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="397.6" y="430.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (43 samples, 0.69%)</title><rect x="395.5" y="419.0" width="8.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="398.5" y="430.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (8 samples, 0.13%)</title><rect x="396.5" y="403.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="399.5" y="414.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (2 samples, 0.03%)</title><rect x="398.2" y="403.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="401.2" y="414.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (21 samples, 0.34%)</title><rect x="398.5" y="403.0" width="4.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="401.5" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="401.8" y="387.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="404.8" y="398.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (2 samples, 0.03%)</title><rect x="402.1" y="387.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="405.1" y="398.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (6 samples, 0.10%)</title><rect x="402.5" y="403.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="405.5" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (4 samples, 0.06%)</title><rect x="403.6" y="419.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="406.6" y="430.0"></text>
</g>
<g>
<title>ip_output (556 samples, 8.90%)</title><rect x="404.6" y="467.0" width="105.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="407.6" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (502 samples, 8.04%)</title><rect x="406.1" y="451.0" width="94.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="409.1" y="462.0">ip_finish_o..</text>
</g>
<g>
<title>__dev_queue_xmit (35 samples, 0.56%)</title><rect x="407.8" y="435.0" width="6.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="410.8" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (26 samples, 0.42%)</title><rect x="408.6" y="419.0" width="4.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="411.6" y="430.0"></text>
</g>
<g>
<title>loopback_xmit (22 samples, 0.35%)</title><rect x="409.3" y="403.0" width="4.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="412.3" y="414.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.05%)</title><rect x="410.1" y="387.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="413.1" y="398.0"></text>
</g>
<g>
<title>netif_rx (10 samples, 0.16%)</title><rect x="410.6" y="387.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="413.6" y="398.0"></text>
</g>
<g>
<title>netif_rx_internal (10 samples, 0.16%)</title><rect x="410.6" y="371.0" width="1.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="413.6" y="382.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.03%)</title><rect x="411.8" y="355.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="414.8" y="366.0"></text>
</g>
<g>
<title>ktime_get_with_offset (2 samples, 0.03%)</title><rect x="412.1" y="355.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="415.1" y="366.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.03%)</title><rect x="412.5" y="387.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="415.5" y="398.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.03%)</title><rect x="412.9" y="387.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="415.9" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (3 samples, 0.05%)</title><rect x="413.7" y="419.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="416.7" y="430.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (458 samples, 7.33%)</title><rect x="414.4" y="435.0" width="86.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="417.4" y="446.0">__local_bh..</text>
</g>
<g>
<title>do_softirq.part.0 (458 samples, 7.33%)</title><rect x="414.4" y="419.0" width="86.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="417.4" y="430.0">do_softirq..</text>
</g>
<g>
<title>do_softirq_own_stack (455 samples, 7.28%)</title><rect x="415.0" y="403.0" width="85.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="418.0" y="414.0">do_softirq..</text>
</g>
<g>
<title>__softirqentry_text_start (455 samples, 7.28%)</title><rect x="415.0" y="387.0" width="85.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="418.0" y="398.0">__softirqe..</text>
</g>
<g>
<title>net_rx_action (445 samples, 7.12%)</title><rect x="416.7" y="371.0" width="84.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="419.7" y="382.0">net_rx_act..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.03%)</title><rect x="416.7" y="355.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="419.7" y="366.0"></text>
</g>
<g>
<title>process_backlog (442 samples, 7.08%)</title><rect x="417.2" y="355.0" width="83.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="420.2" y="366.0">process_b..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (435 samples, 6.96%)</title><rect x="418.6" y="339.0" width="82.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="421.6" y="350.0">__netif_r..</text>
</g>
<g>
<title>__netif_receive_skb_core (4 samples, 0.06%)</title><rect x="418.9" y="323.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="421.9" y="334.0"></text>
</g>
<g>
<title>ip_rcv (428 samples, 6.85%)</title><rect x="419.9" y="323.0" width="80.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="422.9" y="334.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (338 samples, 5.41%)</title><rect x="419.9" y="307.0" width="63.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="422.9" y="318.0">ip_loca..</text>
</g>
<g>
<title>ip_local_deliver_finish (291 samples, 4.66%)</title><rect x="420.5" y="291.0" width="54.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="423.5" y="302.0">ip_lo..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (290 samples, 4.64%)</title><rect x="420.6" y="275.0" width="54.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="423.6" y="286.0">ip_pr..</text>
</g>
<g>
<title>raw_local_deliver (6 samples, 0.10%)</title><rect x="421.2" y="259.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="424.2" y="270.0"></text>
</g>
<g>
<title>tcp_v4_rcv (281 samples, 4.50%)</title><rect x="422.3" y="259.0" width="53.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="425.3" y="270.0">tcp_v..</text>
</g>
<g>
<title>__inet_lookup_established (9 samples, 0.14%)</title><rect x="423.3" y="243.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="426.3" y="254.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.03%)</title><rect x="425.0" y="243.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="428.0" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (263 samples, 4.21%)</title><rect x="425.4" y="243.0" width="49.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="428.4" y="254.0">tcp_v..</text>
</g>
<g>
<title>tcp_rcv_established (263 samples, 4.21%)</title><rect x="425.4" y="227.0" width="49.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="428.4" y="238.0">tcp_r..</text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.16%)</title><rect x="425.6" y="211.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="428.6" y="222.0"></text>
</g>
<g>
<title>mod_timer (10 samples, 0.16%)</title><rect x="425.6" y="195.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="428.6" y="206.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.11%)</title><rect x="425.9" y="179.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="428.9" y="190.0"></text>
</g>
<g>
<title>tcp_ack (71 samples, 1.14%)</title><rect x="427.4" y="211.0" width="13.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="430.4" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (20 samples, 0.32%)</title><rect x="430.8" y="195.0" width="3.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="433.8" y="206.0"></text>
</g>
<g>
<title>__slab_free (7 samples, 0.11%)</title><rect x="430.8" y="179.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="433.8" y="190.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.03%)</title><rect x="432.2" y="179.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="435.2" y="190.0"></text>
</g>
<g>
<title>skb_release_data (9 samples, 0.14%)</title><rect x="432.9" y="179.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="435.9" y="190.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.06%)</title><rect x="434.6" y="195.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="437.6" y="206.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (6 samples, 0.10%)</title><rect x="435.4" y="195.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="438.4" y="206.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.06%)</title><rect x="436.5" y="195.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="439.5" y="206.0"></text>
</g>
<g>
<title>rb_erase (2 samples, 0.03%)</title><rect x="437.5" y="195.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="440.5" y="206.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (3 samples, 0.05%)</title><rect x="437.8" y="195.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="440.8" y="206.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.03%)</title><rect x="438.0" y="179.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="441.0" y="190.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2 samples, 0.03%)</title><rect x="438.6" y="195.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="441.6" y="206.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.05%)</title><rect x="439.3" y="195.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="442.3" y="206.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.05%)</title><rect x="439.9" y="195.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="442.9" y="206.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.03%)</title><rect x="440.5" y="195.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="443.5" y="206.0"></text>
</g>
<g>
<title>tcp_check_space (5 samples, 0.08%)</title><rect x="440.9" y="211.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="443.9" y="222.0"></text>
</g>
<g>
<title>tcp_data_queue (174 samples, 2.79%)</title><rect x="441.8" y="211.0" width="32.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="444.8" y="222.0">tc..</text>
</g>
<g>
<title>dst_release (3 samples, 0.05%)</title><rect x="442.0" y="195.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="445.0" y="206.0"></text>
</g>
<g>
<title>sock_def_readable (169 samples, 2.71%)</title><rect x="442.6" y="195.0" width="31.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="445.6" y="206.0">so..</text>
</g>
<g>
<title>__wake_up_common_lock (165 samples, 2.64%)</title><rect x="443.3" y="179.0" width="31.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="446.3" y="190.0">__..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (164 samples, 2.63%)</title><rect x="443.5" y="163.0" width="31.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="446.5" y="174.0">_r..</text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="474.7" y="211.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="477.7" y="222.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="474.7" y="195.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="477.7" y="206.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.03%)</title><rect x="475.0" y="243.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="478.0" y="254.0"></text>
</g>
<g>
<title>nf_hook_slow (44 samples, 0.70%)</title><rect x="475.4" y="291.0" width="8.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="478.4" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (35 samples, 0.56%)</title><rect x="476.0" y="275.0" width="6.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="479.0" y="286.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (4 samples, 0.06%)</title><rect x="480.7" y="259.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="483.7" y="270.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (6 samples, 0.10%)</title><rect x="481.5" y="259.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="484.5" y="270.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (3 samples, 0.05%)</title><rect x="483.0" y="275.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="486.0" y="286.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.06%)</title><rect x="483.7" y="307.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="486.7" y="318.0"></text>
</g>
<g>
<title>nf_hook_slow (85 samples, 1.36%)</title><rect x="484.7" y="307.0" width="16.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="487.7" y="318.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (5 samples, 0.08%)</title><rect x="485.2" y="291.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="488.2" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (64 samples, 1.02%)</title><rect x="486.2" y="291.0" width="12.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="489.2" y="302.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.05%)</title><rect x="498.5" y="291.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="501.5" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (3 samples, 0.05%)</title><rect x="499.0" y="291.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="502.0" y="302.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (3 samples, 0.05%)</title><rect x="499.8" y="291.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="502.8" y="302.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (2 samples, 0.03%)</title><rect x="500.4" y="291.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="503.4" y="302.0"></text>
</g>
<g>
<title>ip_finish_output (5 samples, 0.08%)</title><rect x="500.9" y="451.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="503.9" y="462.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="501.5" y="435.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="504.5" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (41 samples, 0.66%)</title><rect x="501.9" y="451.0" width="7.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="504.9" y="462.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (14 samples, 0.22%)</title><rect x="502.2" y="435.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="505.2" y="446.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (4 samples, 0.06%)</title><rect x="505.1" y="435.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="508.1" y="446.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (8 samples, 0.13%)</title><rect x="505.8" y="435.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="508.8" y="446.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (6 samples, 0.10%)</title><rect x="506.2" y="419.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="509.2" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (3 samples, 0.05%)</title><rect x="507.3" y="435.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="510.3" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (6 samples, 0.10%)</title><rect x="507.9" y="435.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="510.9" y="446.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (3 samples, 0.05%)</title><rect x="509.0" y="435.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="512.0" y="446.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.05%)</title><rect x="509.8" y="483.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="512.8" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (3 samples, 0.05%)</title><rect x="509.8" y="467.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="512.8" y="478.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.06%)</title><rect x="510.7" y="483.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="513.7" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (4 samples, 0.06%)</title><rect x="511.5" y="483.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="514.5" y="494.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.03%)</title><rect x="512.3" y="483.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="515.3" y="494.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.03%)</title><rect x="513.2" y="483.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="516.2" y="494.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.03%)</title><rect x="513.6" y="483.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="516.6" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (12 samples, 0.19%)</title><rect x="514.3" y="499.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="517.3" y="510.0"></text>
</g>
<g>
<title>rb_insert_color (3 samples, 0.05%)</title><rect x="514.7" y="483.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="517.7" y="494.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.10%)</title><rect x="515.3" y="483.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="518.3" y="494.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.10%)</title><rect x="515.3" y="467.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="518.3" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (5 samples, 0.08%)</title><rect x="515.5" y="451.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="518.5" y="462.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.05%)</title><rect x="516.6" y="499.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="519.6" y="510.0"></text>
</g>
<g>
<title>_copy_from_iter_full (3 samples, 0.05%)</title><rect x="517.2" y="531.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="520.2" y="542.0"></text>
</g>
<g>
<title>copyin (3 samples, 0.05%)</title><rect x="517.2" y="515.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="520.2" y="526.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (3 samples, 0.05%)</title><rect x="517.2" y="499.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="520.2" y="510.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (35 samples, 0.56%)</title><rect x="517.7" y="531.0" width="6.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="520.7" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (34 samples, 0.54%)</title><rect x="517.9" y="515.0" width="6.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="520.9" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (14 samples, 0.22%)</title><rect x="519.1" y="499.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="522.1" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (13 samples, 0.21%)</title><rect x="519.2" y="483.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="522.2" y="494.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="520.6" y="467.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="523.6" y="478.0"></text>
</g>
<g>
<title>kmalloc_slab (4 samples, 0.06%)</title><rect x="520.9" y="467.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="523.9" y="478.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (10 samples, 0.16%)</title><rect x="521.7" y="499.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="524.7" y="510.0"></text>
</g>
<g>
<title>ksize (4 samples, 0.06%)</title><rect x="523.6" y="499.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="526.6" y="510.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.05%)</title><rect x="524.3" y="531.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="527.3" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (18 samples, 0.29%)</title><rect x="525.1" y="531.0" width="3.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="528.1" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (15 samples, 0.24%)</title><rect x="525.7" y="515.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="528.7" y="526.0"></text>
</g>
<g>
<title>ipv4_mtu (10 samples, 0.16%)</title><rect x="526.6" y="499.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="529.6" y="510.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.03%)</title><rect x="528.5" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="531.5" y="542.0"></text>
</g>
<g>
<title>sockfd_lookup_light (11 samples, 0.18%)</title><rect x="528.9" y="579.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="531.9" y="590.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.18%)</title><rect x="528.9" y="563.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="531.9" y="574.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.14%)</title><rect x="529.3" y="547.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="532.3" y="558.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.03%)</title><rect x="531.1" y="659.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="534.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.22%)</title><rect x="531.5" y="659.0" width="2.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="534.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.22%)</title><rect x="531.5" y="643.0" width="2.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="534.5" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 0.21%)</title><rect x="531.5" y="627.0" width="2.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="534.5" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="532.3" y="611.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="535.3" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.10%)</title><rect x="532.8" y="611.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="535.8" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="532.8" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="535.8" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.05%)</title><rect x="533.2" y="595.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="536.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.16%)</title><rect x="534.4" y="755.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="534.7" y="739.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="534.7" y="723.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="537.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.06%)</title><rect x="535.5" y="739.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="535.9" y="723.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="538.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="535.9" y="707.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.9" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="535.9" y="691.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="538.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (1,103 samples, 17.66%)</title><rect x="536.2" y="755.0" width="208.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.2" y="766.0">ru/mail/polis/service/shakh..</text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.08%)</title><rect x="537.2" y="739.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (5 samples, 0.08%)</title><rect x="537.2" y="723.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.2" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (5 samples, 0.08%)</title><rect x="537.2" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.2" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="537.6" y="691.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="540.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (8 samples, 0.13%)</title><rect x="538.1" y="739.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="541.1" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="539.3" y="723.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="542.3" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.10%)</title><rect x="539.8" y="739.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.8" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.08%)</title><rect x="540.0" y="723.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.06%)</title><rect x="540.2" y="707.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="543.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.05%)</title><rect x="540.4" y="691.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.05%)</title><rect x="540.4" y="675.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="540.6" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="543.6" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.11%)</title><rect x="541.0" y="739.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.11%)</title><rect x="541.0" y="723.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="544.0" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="541.0" y="707.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="541.0" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.0" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="541.2" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="544.2" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="541.5" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.5" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.05%)</title><rect x="542.3" y="739.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.3" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="542.3" y="723.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="545.3" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="542.3" y="707.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="545.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.05%)</title><rect x="542.9" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="545.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,057 samples, 16.92%)</title><rect x="543.6" y="739.0" width="199.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="546.6" y="750.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (53 samples, 0.85%)</title><rect x="543.6" y="723.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.6" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (53 samples, 0.85%)</title><rect x="543.6" y="707.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.6" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (52 samples, 0.83%)</title><rect x="543.8" y="691.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.8" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (52 samples, 0.83%)</title><rect x="543.8" y="675.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="546.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (2 samples, 0.03%)</title><rect x="544.2" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (48 samples, 0.77%)</title><rect x="544.6" y="659.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (30 samples, 0.48%)</title><rect x="545.5" y="643.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.5" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.05%)</title><rect x="545.5" y="627.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="548.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="545.5" y="611.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="545.5" y="595.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="548.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (3 samples, 0.05%)</title><rect x="545.5" y="579.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.03%)</title><rect x="545.5" y="563.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="548.5" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="545.5" y="547.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="548.5" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="545.5" y="531.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="548.5" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="545.5" y="515.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="545.5" y="499.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.5" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="545.5" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="548.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="545.5" y="467.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="548.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="545.5" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.5" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="545.5" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="548.5" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="545.5" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="548.5" y="430.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (15 samples, 0.24%)</title><rect x="546.1" y="627.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="549.1" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (15 samples, 0.24%)</title><rect x="546.1" y="611.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="549.1" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (12 samples, 0.19%)</title><rect x="546.6" y="595.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="549.6" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.18%)</title><rect x="546.8" y="579.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="549.8" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 0.18%)</title><rect x="546.8" y="563.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (11 samples, 0.18%)</title><rect x="546.8" y="547.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="549.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (11 samples, 0.18%)</title><rect x="546.8" y="531.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="549.8" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (11 samples, 0.18%)</title><rect x="546.8" y="515.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.8" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.18%)</title><rect x="546.8" y="499.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.8" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (11 samples, 0.18%)</title><rect x="546.8" y="483.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.8" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.18%)</title><rect x="546.8" y="467.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.8" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (10 samples, 0.16%)</title><rect x="547.0" y="451.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.0" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (10 samples, 0.16%)</title><rect x="547.0" y="435.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="550.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.06%)</title><rect x="547.0" y="419.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="550.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.06%)</title><rect x="547.0" y="403.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="550.0" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="547.4" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="550.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (6 samples, 0.10%)</title><rect x="547.8" y="419.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.10%)</title><rect x="547.8" y="403.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.8" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.08%)</title><rect x="548.0" y="387.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.08%)</title><rect x="548.0" y="371.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.06%)</title><rect x="548.1" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="548.1" y="339.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="548.1" y="323.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="551.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="548.1" y="307.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="548.1" y="291.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="551.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="548.3" y="275.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="548.5" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="551.5" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="548.5" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="548.5" y="227.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (12 samples, 0.19%)</title><rect x="548.9" y="627.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.9" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (12 samples, 0.19%)</title><rect x="548.9" y="611.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.9" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (10 samples, 0.16%)</title><rect x="549.3" y="595.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.3" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (10 samples, 0.16%)</title><rect x="549.3" y="579.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="552.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.16%)</title><rect x="549.3" y="563.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.16%)</title><rect x="549.3" y="547.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.3" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3 samples, 0.05%)</title><rect x="549.3" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="549.3" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="552.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="549.3" y="499.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (3 samples, 0.05%)</title><rect x="549.3" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (2 samples, 0.03%)</title><rect x="549.5" y="467.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="549.5" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="552.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="549.5" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="552.5" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="549.5" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="552.5" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="549.5" y="403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="552.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="549.5" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="549.5" y="371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.5" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="549.5" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (7 samples, 0.11%)</title><rect x="549.8" y="531.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.11%)</title><rect x="549.8" y="515.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="552.8" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (7 samples, 0.11%)</title><rect x="549.8" y="499.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="552.8" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.11%)</title><rect x="549.8" y="483.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.8" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (7 samples, 0.11%)</title><rect x="549.8" y="467.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.8" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.11%)</title><rect x="549.8" y="451.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="552.8" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (7 samples, 0.11%)</title><rect x="549.8" y="435.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="552.8" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.11%)</title><rect x="549.8" y="419.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.08%)</title><rect x="549.8" y="403.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="552.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.08%)</title><rect x="549.8" y="387.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.8" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.05%)</title><rect x="550.2" y="371.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (2 samples, 0.03%)</title><rect x="550.8" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5 samples, 0.08%)</title><rect x="551.2" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.2" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.05%)</title><rect x="551.5" y="627.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="554.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.03%)</title><rect x="551.7" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$55/1238651899.apply (8 samples, 0.13%)</title><rect x="552.1" y="643.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (7 samples, 0.11%)</title><rect x="552.3" y="627.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="555.3" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.06%)</title><rect x="552.3" y="611.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="555.3" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.06%)</title><rect x="552.3" y="595.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="555.3" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.06%)</title><rect x="552.3" y="579.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="555.3" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="552.3" y="563.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.3" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="552.7" y="547.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="555.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.05%)</title><rect x="553.1" y="611.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="556.1" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="553.1" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="556.1" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="553.1" y="579.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="553.1" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (11 samples, 0.18%)</title><rect x="553.6" y="723.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.6" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 0.03%)</title><rect x="553.6" y="707.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="556.6" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.03%)</title><rect x="553.6" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.6" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (9 samples, 0.14%)</title><rect x="554.0" y="707.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="557.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$57/204060277.apply (9 samples, 0.14%)</title><rect x="554.0" y="691.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="557.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (9 samples, 0.14%)</title><rect x="554.0" y="675.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.05%)</title><rect x="554.2" y="659.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.2" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.05%)</title><rect x="554.2" y="643.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="557.2" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.05%)</title><rect x="554.2" y="627.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.2" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="554.2" y="611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="557.2" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="554.2" y="595.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.2" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="554.4" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="554.4" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="557.4" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="554.4" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (5 samples, 0.08%)</title><rect x="554.8" y="659.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.8" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.06%)</title><rect x="554.9" y="643.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="557.9" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.06%)</title><rect x="554.9" y="627.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (992 samples, 15.88%)</title><rect x="555.9" y="723.0" width="187.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="558.9" y="734.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (992 samples, 15.88%)</title><rect x="555.9" y="707.0" width="187.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.9" y="718.0">ru/mail/polis/dao/shakhm..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (3 samples, 0.05%)</title><rect x="557.8" y="691.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="560.8" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.&lt;init&gt; (3 samples, 0.05%)</title><rect x="557.8" y="675.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.8" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="557.8" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.8" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (95 samples, 1.52%)</title><rect x="558.3" y="691.0" width="18.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="561.3" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (94 samples, 1.50%)</title><rect x="558.5" y="675.0" width="17.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.5" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (2 samples, 0.03%)</title><rect x="559.1" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.1" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.hasNext (2 samples, 0.03%)</title><rect x="559.1" y="643.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="562.1" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.03%)</title><rect x="559.5" y="659.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.5" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (87 samples, 1.39%)</title><rect x="559.9" y="659.0" width="16.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.9" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (87 samples, 1.39%)</title><rect x="559.9" y="643.0" width="16.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.9" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (6 samples, 0.10%)</title><rect x="559.9" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.9" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.05%)</title><rect x="560.2" y="611.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.2" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (81 samples, 1.30%)</title><rect x="561.0" y="627.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="564.0" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (80 samples, 1.28%)</title><rect x="561.2" y="611.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="564.2" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (78 samples, 1.25%)</title><rect x="561.6" y="595.0" width="14.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="564.6" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (78 samples, 1.25%)</title><rect x="561.6" y="579.0" width="14.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="564.6" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (44 samples, 0.70%)</title><rect x="561.6" y="563.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="564.6" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (5 samples, 0.08%)</title><rect x="561.6" y="547.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="564.6" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (5 samples, 0.08%)</title><rect x="561.6" y="531.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.6" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (5 samples, 0.08%)</title><rect x="561.6" y="515.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.6" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (5 samples, 0.08%)</title><rect x="561.6" y="499.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="564.6" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.05%)</title><rect x="561.9" y="483.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="564.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (39 samples, 0.62%)</title><rect x="562.5" y="547.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="565.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (39 samples, 0.62%)</title><rect x="562.5" y="531.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="565.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (39 samples, 0.62%)</title><rect x="562.5" y="515.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="565.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (24 samples, 0.38%)</title><rect x="562.5" y="499.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="565.5" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (18 samples, 0.29%)</title><rect x="562.5" y="483.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="565.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (18 samples, 0.29%)</title><rect x="562.5" y="467.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="565.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (13 samples, 0.21%)</title><rect x="563.4" y="451.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.4" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (13 samples, 0.21%)</title><rect x="563.4" y="435.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.4" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (11 samples, 0.18%)</title><rect x="563.8" y="419.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.16%)</title><rect x="564.0" y="403.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.14%)</title><rect x="564.2" y="387.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="567.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.11%)</title><rect x="564.6" y="371.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="567.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.05%)</title><rect x="565.0" y="355.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.0" y="366.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.03%)</title><rect x="565.1" y="339.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="568.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.03%)</title><rect x="565.5" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.5" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.08%)</title><rect x="566.1" y="483.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.1" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.08%)</title><rect x="566.1" y="467.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.08%)</title><rect x="566.1" y="451.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="569.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.08%)</title><rect x="566.1" y="435.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="569.1" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="566.7" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="569.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (9 samples, 0.14%)</title><rect x="567.0" y="499.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="570.0" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.10%)</title><rect x="567.0" y="483.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.0" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.10%)</title><rect x="567.0" y="467.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="570.0" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.10%)</title><rect x="567.0" y="451.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="570.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="567.0" y="435.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="570.0" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="567.0" y="419.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="570.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="567.0" y="403.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="567.0" y="387.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="567.4" y="371.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="570.4" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="567.6" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="570.6" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="567.6" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="570.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="567.6" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.6" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="567.6" y="307.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="570.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (3 samples, 0.05%)</title><rect x="568.2" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="571.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="568.2" y="467.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="571.2" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="568.2" y="451.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.2" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="568.4" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="568.4" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="571.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="568.4" y="403.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="571.4" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="568.4" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (4 samples, 0.06%)</title><rect x="568.7" y="499.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="571.7" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.06%)</title><rect x="568.7" y="483.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.7" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="568.9" y="467.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="571.9" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="568.9" y="451.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="571.9" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="569.1" y="435.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="572.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (2 samples, 0.03%)</title><rect x="569.5" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.5" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="569.5" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="569.5" y="467.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.5" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="569.5" y="451.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.5" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="569.5" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.5" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="569.5" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="572.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="569.5" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="569.5" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="572.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="569.5" y="371.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (34 samples, 0.54%)</title><rect x="569.9" y="563.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="572.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (33 samples, 0.53%)</title><rect x="570.1" y="547.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.1" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (33 samples, 0.53%)</title><rect x="570.1" y="531.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.1" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.53%)</title><rect x="570.1" y="515.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.1" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (33 samples, 0.53%)</title><rect x="570.1" y="499.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.1" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.53%)</title><rect x="570.1" y="483.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="573.1" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (33 samples, 0.53%)</title><rect x="570.1" y="467.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="573.1" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (33 samples, 0.53%)</title><rect x="570.1" y="451.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.24%)</title><rect x="570.2" y="435.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="573.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.24%)</title><rect x="570.2" y="419.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.2" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.22%)</title><rect x="570.4" y="403.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.4" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="571.0" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (4 samples, 0.06%)</title><rect x="571.4" y="387.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.4" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="572.1" y="387.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="575.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (3 samples, 0.05%)</title><rect x="572.1" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="575.1" y="382.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="572.7" y="387.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="575.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (17 samples, 0.27%)</title><rect x="573.1" y="435.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="576.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (16 samples, 0.26%)</title><rect x="573.3" y="419.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="576.3" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (14 samples, 0.22%)</title><rect x="573.5" y="403.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="576.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (14 samples, 0.22%)</title><rect x="573.5" y="387.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="576.5" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.18%)</title><rect x="574.0" y="371.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="577.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.16%)</title><rect x="574.2" y="355.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="577.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.16%)</title><rect x="574.2" y="339.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="577.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.16%)</title><rect x="574.2" y="323.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="577.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.16%)</title><rect x="574.2" y="307.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="577.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="574.8" y="291.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="577.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="575.0" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.0" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="575.0" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.0" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="575.3" y="275.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="578.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="575.3" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="578.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="575.3" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="578.3" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="575.3" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="578.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="575.7" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="578.7" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.10%)</title><rect x="576.3" y="691.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="579.3" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.10%)</title><rect x="577.4" y="691.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="580.4" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.10%)</title><rect x="577.4" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="580.4" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.05%)</title><rect x="578.0" y="659.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="581.0" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.05%)</title><rect x="578.0" y="643.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (40 samples, 0.64%)</title><rect x="578.6" y="691.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="581.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (40 samples, 0.64%)</title><rect x="578.6" y="675.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="581.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (37 samples, 0.59%)</title><rect x="579.1" y="659.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="582.1" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (8 samples, 0.13%)</title><rect x="579.1" y="643.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="582.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (8 samples, 0.13%)</title><rect x="579.1" y="627.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (8 samples, 0.13%)</title><rect x="579.1" y="611.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="582.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (8 samples, 0.13%)</title><rect x="579.1" y="595.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (6 samples, 0.10%)</title><rect x="579.1" y="579.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.1" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.06%)</title><rect x="579.1" y="563.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.1" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.06%)</title><rect x="579.1" y="547.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="582.1" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.06%)</title><rect x="579.1" y="531.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.1" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="579.1" y="515.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.1" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="579.1" y="499.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="579.1" y="483.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="582.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="579.1" y="467.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.1" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="579.5" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="582.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="579.9" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="582.9" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="579.9" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="579.9" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.9" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="579.9" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.9" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (10 samples, 0.16%)</title><rect x="580.6" y="643.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.6" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (10 samples, 0.16%)</title><rect x="580.6" y="627.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="583.6" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (10 samples, 0.16%)</title><rect x="580.6" y="611.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.6" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.11%)</title><rect x="581.2" y="595.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.2" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 0.11%)</title><rect x="581.2" y="579.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="584.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (7 samples, 0.11%)</title><rect x="581.2" y="563.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.11%)</title><rect x="581.2" y="547.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="584.2" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (7 samples, 0.11%)</title><rect x="581.2" y="531.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="584.2" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.11%)</title><rect x="581.2" y="515.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="584.2" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (7 samples, 0.11%)</title><rect x="581.2" y="499.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="584.2" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.11%)</title><rect x="581.2" y="483.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="584.2" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (7 samples, 0.11%)</title><rect x="581.2" y="467.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.2" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.11%)</title><rect x="581.2" y="451.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.06%)</title><rect x="581.2" y="435.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.06%)</title><rect x="581.2" y="419.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="584.2" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.05%)</title><rect x="581.2" y="403.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (3 samples, 0.05%)</title><rect x="582.0" y="435.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="585.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.05%)</title><rect x="582.0" y="419.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="585.0" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (19 samples, 0.30%)</title><rect x="582.5" y="643.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.5" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (18 samples, 0.29%)</title><rect x="582.7" y="627.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.7" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (17 samples, 0.27%)</title><rect x="582.9" y="611.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="585.9" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (17 samples, 0.27%)</title><rect x="582.9" y="595.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.9" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.27%)</title><rect x="582.9" y="579.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.27%)</title><rect x="582.9" y="563.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="585.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (7 samples, 0.11%)</title><rect x="583.1" y="547.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.11%)</title><rect x="583.1" y="531.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.11%)</title><rect x="583.1" y="515.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (7 samples, 0.11%)</title><rect x="583.1" y="499.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (3 samples, 0.05%)</title><rect x="583.1" y="483.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="586.1" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="583.1" y="467.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="586.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="583.1" y="451.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="583.1" y="435.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.1" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="583.1" y="419.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.05%)</title><rect x="583.7" y="483.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.7" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="583.7" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="586.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="583.7" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="586.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (9 samples, 0.14%)</title><rect x="584.4" y="547.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (9 samples, 0.14%)</title><rect x="584.4" y="531.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="587.4" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (9 samples, 0.14%)</title><rect x="584.4" y="515.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.4" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.14%)</title><rect x="584.4" y="499.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.4" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (9 samples, 0.14%)</title><rect x="584.4" y="483.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="587.4" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.14%)</title><rect x="584.4" y="467.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.4" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (9 samples, 0.14%)</title><rect x="584.4" y="451.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.4" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.14%)</title><rect x="584.4" y="435.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="587.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="584.4" y="419.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.05%)</title><rect x="584.4" y="403.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="587.4" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.05%)</title><rect x="584.4" y="387.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="587.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (6 samples, 0.10%)</title><rect x="585.0" y="419.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="588.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.10%)</title><rect x="585.0" y="403.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.0" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.10%)</title><rect x="585.0" y="387.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.10%)</title><rect x="585.0" y="371.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.10%)</title><rect x="585.0" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="588.0" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="585.0" y="339.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="588.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="585.0" y="323.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="585.0" y="307.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="585.0" y="291.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="585.2" y="275.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="588.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.05%)</title><rect x="585.4" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.4" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.05%)</title><rect x="585.4" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="588.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (85 samples, 1.36%)</title><rect x="586.1" y="691.0" width="16.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="589.1" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (73 samples, 1.17%)</title><rect x="586.1" y="675.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.1" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (73 samples, 1.17%)</title><rect x="586.1" y="659.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.1" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (63 samples, 1.01%)</title><rect x="586.5" y="643.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="589.5" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (61 samples, 0.98%)</title><rect x="586.9" y="627.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="589.9" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (61 samples, 0.98%)</title><rect x="586.9" y="611.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="589.9" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (58 samples, 0.93%)</title><rect x="587.4" y="595.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (48 samples, 0.77%)</title><rect x="589.3" y="579.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (34 samples, 0.54%)</title><rect x="592.0" y="563.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.0" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.10%)</title><rect x="592.3" y="547.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="595.3" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="593.1" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="596.1" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (4 samples, 0.06%)</title><rect x="593.5" y="547.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="596.5" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (19 samples, 0.30%)</title><rect x="594.2" y="547.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="597.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="596.3" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="599.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="596.3" y="515.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="599.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.03%)</title><rect x="596.7" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.7" y="542.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.06%)</title><rect x="597.1" y="531.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="600.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="597.8" y="547.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="600.8" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.05%)</title><rect x="597.8" y="531.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.8" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (7 samples, 0.11%)</title><rect x="598.4" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="601.4" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (11 samples, 0.18%)</title><rect x="600.1" y="675.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="603.1" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (10 samples, 0.16%)</title><rect x="600.3" y="659.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="603.3" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (10 samples, 0.16%)</title><rect x="600.3" y="643.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.3" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (10 samples, 0.16%)</title><rect x="600.3" y="627.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.3" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (10 samples, 0.16%)</title><rect x="600.3" y="611.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.3" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.16%)</title><rect x="600.3" y="595.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.11%)</title><rect x="600.9" y="579.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="603.9" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.11%)</title><rect x="600.9" y="563.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="603.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (747 samples, 11.96%)</title><rect x="602.2" y="691.0" width="141.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.2" y="702.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (747 samples, 11.96%)</title><rect x="602.2" y="675.0" width="141.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.2" y="686.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.03%)</title><rect x="602.2" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.2" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (2 samples, 0.03%)</title><rect x="602.2" y="643.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.2" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="602.2" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (745 samples, 11.93%)</title><rect x="602.6" y="659.0" width="140.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.6" y="670.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (140 samples, 2.24%)</title><rect x="606.1" y="643.0" width="26.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.1" y="654.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.16%)</title><rect x="607.8" y="627.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.8" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.06%)</title><rect x="609.0" y="611.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="612.0" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (7 samples, 0.11%)</title><rect x="609.7" y="627.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="612.7" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (107 samples, 1.71%)</title><rect x="611.1" y="627.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="614.1" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (20 samples, 0.32%)</title><rect x="621.6" y="611.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.6" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (7 samples, 0.11%)</title><rect x="623.5" y="595.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.5" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (3 samples, 0.05%)</title><rect x="624.8" y="595.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="627.8" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (4 samples, 0.06%)</title><rect x="625.4" y="611.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.4" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="626.2" y="611.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (16 samples, 0.26%)</title><rect x="626.5" y="611.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="629.5" y="622.0"></text>
</g>
<g>
<title>vtable stub (9 samples, 0.14%)</title><rect x="629.6" y="611.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="632.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="631.3" y="627.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (2 samples, 0.03%)</title><rect x="631.3" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.3" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.08%)</title><rect x="631.6" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.6" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.08%)</title><rect x="631.6" y="611.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (293 samples, 4.69%)</title><rect x="632.6" y="643.0" width="55.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.6" y="654.0">ru/ma..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (81 samples, 1.30%)</title><rect x="632.8" y="627.0" width="15.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.8" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (6 samples, 0.10%)</title><rect x="632.8" y="611.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.8" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (75 samples, 1.20%)</title><rect x="633.9" y="611.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (75 samples, 1.20%)</title><rect x="633.9" y="595.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (70 samples, 1.12%)</title><rect x="634.9" y="579.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.9" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (135 samples, 2.16%)</title><rect x="648.1" y="627.0" width="25.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.1" y="638.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (135 samples, 2.16%)</title><rect x="648.1" y="611.0" width="25.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="651.1" y="622.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.05%)</title><rect x="649.6" y="595.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="652.6" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (2 samples, 0.03%)</title><rect x="650.2" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (121 samples, 1.94%)</title><rect x="650.5" y="595.0" width="22.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="653.5" y="606.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (120 samples, 1.92%)</title><rect x="650.7" y="579.0" width="22.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="653.7" y="590.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (116 samples, 1.86%)</title><rect x="651.5" y="563.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.5" y="574.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (116 samples, 1.86%)</title><rect x="651.5" y="547.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.5" y="558.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (116 samples, 1.86%)</title><rect x="651.5" y="531.0" width="21.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.5" y="542.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (44 samples, 0.70%)</title><rect x="661.1" y="515.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.1" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.21%)</title><rect x="661.3" y="499.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.3" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.19%)</title><rect x="661.5" y="483.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="664.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.19%)</title><rect x="661.5" y="467.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.5" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.19%)</title><rect x="661.5" y="451.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="664.5" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.48%)</title><rect x="663.8" y="499.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.8" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="666.2" y="483.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.2" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.14%)</title><rect x="667.7" y="483.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="670.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.14%)</title><rect x="667.7" y="467.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="670.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.13%)</title><rect x="667.9" y="451.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.9" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.21%)</title><rect x="669.4" y="515.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (8 samples, 0.13%)</title><rect x="671.9" y="515.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.9" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (63 samples, 1.01%)</title><rect x="673.6" y="627.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.6" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (50 samples, 0.80%)</title><rect x="676.0" y="611.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.0" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (50 samples, 0.80%)</title><rect x="676.0" y="595.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.0" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (44 samples, 0.70%)</title><rect x="677.2" y="579.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.2" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (44 samples, 0.70%)</title><rect x="677.2" y="563.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="680.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (44 samples, 0.70%)</title><rect x="677.2" y="547.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="680.2" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (37 samples, 0.59%)</title><rect x="677.7" y="531.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="680.7" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.26%)</title><rect x="678.3" y="515.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="681.3" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (16 samples, 0.26%)</title><rect x="678.3" y="499.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="681.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.22%)</title><rect x="678.7" y="483.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.21%)</title><rect x="678.9" y="467.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="681.9" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (18 samples, 0.29%)</title><rect x="681.3" y="515.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="684.3" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (18 samples, 0.29%)</title><rect x="681.3" y="499.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.06%)</title><rect x="682.6" y="483.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.11%)</title><rect x="683.4" y="483.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.4" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.11%)</title><rect x="683.4" y="467.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="684.7" y="531.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="687.7" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.21%)</title><rect x="685.5" y="627.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.5" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.21%)</title><rect x="685.5" y="611.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.21%)</title><rect x="685.5" y="595.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.5" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (13 samples, 0.21%)</title><rect x="685.5" y="579.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (293 samples, 4.69%)</title><rect x="687.9" y="643.0" width="55.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.9" y="654.0">ru/ma..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (116 samples, 1.86%)</title><rect x="691.3" y="627.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.3" y="638.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (116 samples, 1.86%)</title><rect x="691.3" y="611.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="694.3" y="622.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (101 samples, 1.62%)</title><rect x="694.2" y="595.0" width="19.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="697.2" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (101 samples, 1.62%)</title><rect x="694.2" y="579.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.2" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (98 samples, 1.57%)</title><rect x="694.7" y="563.0" width="18.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="697.7" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (98 samples, 1.57%)</title><rect x="694.7" y="547.0" width="18.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (98 samples, 1.57%)</title><rect x="694.7" y="531.0" width="18.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="697.7" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (41 samples, 0.66%)</title><rect x="704.6" y="515.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="707.6" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="706.1" y="499.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.1" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (8 samples, 0.13%)</title><rect x="706.1" y="483.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="709.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.08%)</title><rect x="706.6" y="467.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="709.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.08%)</title><rect x="706.6" y="451.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.6" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.40%)</title><rect x="707.6" y="499.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.6" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (25 samples, 0.40%)</title><rect x="707.6" y="483.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="710.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.11%)</title><rect x="708.7" y="467.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="711.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (12 samples, 0.19%)</title><rect x="710.0" y="467.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.0" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.18%)</title><rect x="710.2" y="451.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="713.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.08%)</title><rect x="712.3" y="515.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="715.3" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (72 samples, 1.15%)</title><rect x="713.2" y="627.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.2" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (64 samples, 1.02%)</title><rect x="714.8" y="611.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="717.8" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (64 samples, 1.02%)</title><rect x="714.8" y="595.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="717.8" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (57 samples, 0.91%)</title><rect x="716.1" y="579.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (57 samples, 0.91%)</title><rect x="716.1" y="563.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.1" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (57 samples, 0.91%)</title><rect x="716.1" y="547.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="719.1" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (53 samples, 0.85%)</title><rect x="716.5" y="531.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.5" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.21%)</title><rect x="717.8" y="515.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (13 samples, 0.21%)</title><rect x="717.8" y="499.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="720.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.21%)</title><rect x="717.8" y="483.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="720.8" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (11 samples, 0.18%)</title><rect x="718.2" y="467.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="721.2" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (33 samples, 0.53%)</title><rect x="720.2" y="515.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.2" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (33 samples, 0.53%)</title><rect x="720.2" y="499.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (33 samples, 0.53%)</title><rect x="720.2" y="483.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.14%)</title><rect x="724.0" y="467.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="727.0" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.06%)</title><rect x="725.7" y="467.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="726.5" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="729.5" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (78 samples, 1.25%)</title><rect x="726.8" y="627.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="729.8" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (66 samples, 1.06%)</title><rect x="727.0" y="611.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.0" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.14%)</title><rect x="739.5" y="611.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="742.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (2 samples, 0.03%)</title><rect x="741.2" y="611.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.2" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.14%)</title><rect x="741.6" y="627.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.6" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.14%)</title><rect x="741.6" y="611.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.14%)</title><rect x="741.6" y="595.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.6" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.14%)</title><rect x="741.6" y="579.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (7 samples, 0.11%)</title><rect x="743.3" y="739.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="746.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (5 samples, 0.08%)</title><rect x="743.3" y="723.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="746.3" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (4 samples, 0.06%)</title><rect x="743.3" y="707.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="746.3" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.03%)</title><rect x="743.7" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="746.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.upsert (2 samples, 0.03%)</title><rect x="744.2" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="747.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.08%)</title><rect x="744.6" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.08%)</title><rect x="744.6" y="755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="744.6" y="739.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.05%)</title><rect x="744.8" y="723.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (8 samples, 0.13%)</title><rect x="745.5" y="771.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="748.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.13%)</title><rect x="745.5" y="755.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="748.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.10%)</title><rect x="745.9" y="739.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="748.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="745.9" y="723.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.05%)</title><rect x="746.5" y="723.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.5" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="746.5" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="749.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (35 samples, 0.56%)</title><rect x="747.1" y="803.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.08%)</title><rect x="747.4" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="747.8" y="771.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="747.8" y="755.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="750.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="748.0" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.30%)</title><rect x="748.4" y="787.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.4" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.30%)</title><rect x="748.4" y="771.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.24%)</title><rect x="749.1" y="755.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (15 samples, 0.24%)</title><rect x="749.1" y="739.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="752.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (9 samples, 0.14%)</title><rect x="752.0" y="787.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (15 samples, 0.24%)</title><rect x="753.7" y="803.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.19%)</title><rect x="753.7" y="787.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.19%)</title><rect x="753.7" y="771.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.06%)</title><rect x="755.2" y="755.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (3 samples, 0.05%)</title><rect x="755.9" y="787.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="755.9" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.9" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="756.7" y="803.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="759.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (2 samples, 0.03%)</title><rect x="757.3" y="803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="760.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="757.6" y="803.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="757.6" y="787.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.08%)</title><rect x="757.8" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (5 samples, 0.08%)</title><rect x="757.8" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.8" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (226 samples, 3.62%)</title><rect x="758.8" y="819.0" width="42.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="761.8" y="830.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (214 samples, 3.43%)</title><rect x="761.0" y="803.0" width="40.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="764.0" y="814.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.03%)</title><rect x="762.2" y="787.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="765.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 0.69%)</title><rect x="762.5" y="787.0" width="8.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="765.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 0.69%)</title><rect x="762.5" y="771.0" width="8.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="765.5" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (38 samples, 0.61%)</title><rect x="762.5" y="755.0" width="7.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="765.5" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.08%)</title><rect x="762.7" y="739.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="765.7" y="750.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.10%)</title><rect x="764.2" y="739.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="767.2" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (21 samples, 0.34%)</title><rect x="765.4" y="739.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="768.4" y="750.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.06%)</title><rect x="766.5" y="723.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="769.5" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.10%)</title><rect x="767.3" y="723.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (5 samples, 0.08%)</title><rect x="768.4" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="771.4" y="734.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="769.3" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="772.3" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.08%)</title><rect x="769.7" y="755.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="772.7" y="766.0"></text>
</g>
<g>
<title>__libc_recv (163 samples, 2.61%)</title><rect x="770.7" y="787.0" width="30.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="773.7" y="798.0">__..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.03%)</title><rect x="777.3" y="771.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="780.3" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (126 samples, 2.02%)</title><rect x="777.7" y="771.0" width="23.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="780.7" y="782.0">e..</text>
</g>
<g>
<title>do_syscall_64 (126 samples, 2.02%)</title><rect x="777.7" y="755.0" width="23.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="780.7" y="766.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (119 samples, 1.90%)</title><rect x="779.0" y="739.0" width="22.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="782.0" y="750.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (116 samples, 1.86%)</title><rect x="779.5" y="723.0" width="22.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="782.5" y="734.0">_..</text>
</g>
<g>
<title>inet_recvmsg (84 samples, 1.34%)</title><rect x="780.5" y="707.0" width="15.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="783.5" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (83 samples, 1.33%)</title><rect x="780.7" y="691.0" width="15.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="783.7" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.13%)</title><rect x="785.0" y="675.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="788.0" y="686.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.11%)</title><rect x="785.0" y="659.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="788.0" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (7 samples, 0.11%)</title><rect x="785.0" y="643.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="788.0" y="654.0"></text>
</g>
<g>
<title>sock_rfree (7 samples, 0.11%)</title><rect x="785.0" y="627.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="788.0" y="638.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.06%)</title><rect x="786.7" y="675.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="789.7" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="787.5" y="675.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="790.5" y="686.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.06%)</title><rect x="787.9" y="675.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="790.9" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.05%)</title><rect x="787.9" y="659.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="790.9" y="670.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (30 samples, 0.48%)</title><rect x="788.6" y="675.0" width="5.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="791.6" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (30 samples, 0.48%)</title><rect x="788.6" y="659.0" width="5.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="791.6" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (12 samples, 0.19%)</title><rect x="788.6" y="643.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="791.6" y="654.0"></text>
</g>
<g>
<title>copyout (11 samples, 0.18%)</title><rect x="788.8" y="627.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="791.8" y="638.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (11 samples, 0.18%)</title><rect x="788.8" y="611.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="791.8" y="622.0"></text>
</g>
<g>
<title>simple_copy_to_iter (18 samples, 0.29%)</title><rect x="790.9" y="643.0" width="3.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="793.9" y="654.0"></text>
</g>
<g>
<title>__check_object_size (17 samples, 0.27%)</title><rect x="791.1" y="627.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="794.1" y="638.0"></text>
</g>
<g>
<title>__check_heap_object (5 samples, 0.08%)</title><rect x="791.8" y="611.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="794.8" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.11%)</title><rect x="792.8" y="611.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="795.8" y="622.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.05%)</title><rect x="794.3" y="675.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="797.3" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (5 samples, 0.08%)</title><rect x="794.8" y="675.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="797.8" y="686.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.06%)</title><rect x="795.0" y="659.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="798.0" y="670.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.05%)</title><rect x="795.2" y="643.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="798.2" y="654.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.05%)</title><rect x="795.2" y="627.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="798.2" y="638.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (3 samples, 0.05%)</title><rect x="795.8" y="675.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="798.8" y="686.0"></text>
</g>
<g>
<title>sock_recvmsg (15 samples, 0.24%)</title><rect x="796.4" y="707.0" width="2.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="799.4" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (14 samples, 0.22%)</title><rect x="796.5" y="691.0" width="2.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="799.5" y="702.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (2 samples, 0.03%)</title><rect x="796.5" y="675.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="799.5" y="686.0"></text>
</g>
<g>
<title>sock_has_perm (12 samples, 0.19%)</title><rect x="796.9" y="675.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="799.9" y="686.0"></text>
</g>
<g>
<title>avc_has_perm (8 samples, 0.13%)</title><rect x="797.7" y="659.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="800.7" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (12 samples, 0.19%)</title><rect x="799.2" y="707.0" width="2.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="802.2" y="718.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.18%)</title><rect x="799.4" y="691.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="802.4" y="702.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.14%)</title><rect x="799.8" y="675.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="802.8" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="801.5" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="804.5" y="862.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=28450] (1,562 samples, 25.00%)</title><rect x="801.8" y="883.0" width="295.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="804.8" y="894.0">[NIO Selector #2 tid=28450]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (7 samples, 0.11%)</title><rect x="802.2" y="867.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="805.2" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (6 samples, 0.10%)</title><rect x="802.4" y="851.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="805.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.08%)</title><rect x="802.6" y="835.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="805.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.08%)</title><rect x="802.6" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="805.6" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="803.0" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="806.0" y="814.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.05%)</title><rect x="803.5" y="867.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="806.5" y="878.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.03%)</title><rect x="803.5" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="806.5" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (11 samples, 0.18%)</title><rect x="804.1" y="867.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="807.1" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,539 samples, 24.64%)</title><rect x="806.2" y="867.0" width="290.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.2" y="878.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (141 samples, 2.26%)</title><rect x="806.9" y="851.0" width="26.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.9" y="862.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (141 samples, 2.26%)</title><rect x="806.9" y="835.0" width="26.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.9" y="846.0">o..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (112 samples, 1.79%)</title><rect x="808.6" y="819.0" width="21.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="811.6" y="830.0">...</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (95 samples, 1.52%)</title><rect x="811.8" y="803.0" width="18.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="814.8" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (95 samples, 1.52%)</title><rect x="811.8" y="787.0" width="18.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="814.8" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (87 samples, 1.39%)</title><rect x="813.4" y="771.0" width="16.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="816.4" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (86 samples, 1.38%)</title><rect x="813.5" y="755.0" width="16.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="816.5" y="766.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.08%)</title><rect x="813.5" y="739.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="816.5" y="750.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.05%)</title><rect x="813.9" y="723.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="816.9" y="734.0"></text>
</g>
<g>
<title>ep_poll (80 samples, 1.28%)</title><rect x="814.5" y="739.0" width="15.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="817.5" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (31 samples, 0.50%)</title><rect x="815.4" y="723.0" width="5.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="818.4" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (18 samples, 0.29%)</title><rect x="817.7" y="707.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="820.7" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (10 samples, 0.16%)</title><rect x="819.2" y="691.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="822.2" y="702.0"></text>
</g>
<g>
<title>sock_poll (9 samples, 0.14%)</title><rect x="819.4" y="675.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="822.4" y="686.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.06%)</title><rect x="820.3" y="659.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="823.3" y="670.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (44 samples, 0.70%)</title><rect x="821.3" y="723.0" width="8.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="824.3" y="734.0"></text>
</g>
<g>
<title>schedule (41 samples, 0.66%)</title><rect x="821.9" y="707.0" width="7.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="824.9" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (38 samples, 0.61%)</title><rect x="822.4" y="691.0" width="7.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="825.4" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (38 samples, 0.61%)</title><rect x="822.4" y="675.0" width="7.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="825.4" y="686.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="829.2" y="659.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="832.2" y="670.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="829.2" y="643.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="832.2" y="654.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="829.2" y="627.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="832.2" y="638.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="829.2" y="611.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="832.2" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.05%)</title><rect x="829.8" y="819.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="832.8" y="830.0"></text>
</g>
<g>
<title>__GI___clock_gettime (7 samples, 0.11%)</title><rect x="830.5" y="819.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="833.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="831.3" y="803.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="834.3" y="814.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.05%)</title><rect x="831.9" y="819.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="834.9" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (5 samples, 0.08%)</title><rect x="832.6" y="819.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="835.6" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,394 samples, 22.31%)</title><rect x="833.6" y="851.0" width="263.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="836.6" y="862.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,389 samples, 22.23%)</title><rect x="834.5" y="835.0" width="262.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.5" y="846.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,238 samples, 19.82%)</title><rect x="834.5" y="819.0" width="233.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="837.5" y="830.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,185 samples, 18.97%)</title><rect x="836.2" y="803.0" width="223.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.2" y="814.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,180 samples, 18.89%)</title><rect x="837.0" y="787.0" width="222.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="840.0" y="798.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,167 samples, 18.68%)</title><rect x="837.0" y="771.0" width="220.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="840.0" y="782.0">RequestHandler1_entity.handle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (580 samples, 9.28%)</title><rect x="837.0" y="755.0" width="109.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="840.0" y="766.0">one/nio/http/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.16%)</title><rect x="838.3" y="739.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="841.3" y="750.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="838.9" y="723.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="841.9" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="839.6" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="842.6" y="734.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="839.8" y="707.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="842.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="839.8" y="691.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="842.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (561 samples, 8.98%)</title><rect x="840.2" y="739.0" width="105.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="843.2" y="750.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.21%)</title><rect x="840.2" y="723.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.2" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.13%)</title><rect x="841.1" y="707.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.1" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.10%)</title><rect x="841.1" y="691.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="844.1" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="842.3" y="691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="845.3" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="842.3" y="675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="845.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (548 samples, 8.77%)</title><rect x="842.6" y="723.0" width="103.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.6" y="734.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (548 samples, 8.77%)</title><rect x="842.6" y="707.0" width="103.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="845.6" y="718.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (548 samples, 8.77%)</title><rect x="842.6" y="691.0" width="103.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="845.6" y="702.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (548 samples, 8.77%)</title><rect x="842.6" y="675.0" width="103.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="845.6" y="686.0">one/nio/net/..</text>
</g>
<g>
<title>.annobin_send.c (524 samples, 8.39%)</title><rect x="843.6" y="659.0" width="99.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="846.6" y="670.0">.annobin_sen..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.03%)</title><rect x="846.0" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="849.0" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (509 samples, 8.15%)</title><rect x="846.4" y="643.0" width="96.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="849.4" y="654.0">entry_SYSCA..</text>
</g>
<g>
<title>do_syscall_64 (509 samples, 8.15%)</title><rect x="846.4" y="627.0" width="96.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="849.4" y="638.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (502 samples, 8.04%)</title><rect x="847.7" y="611.0" width="94.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="850.7" y="622.0">__x64_sys_s..</text>
</g>
<g>
<title>__sys_sendto (502 samples, 8.04%)</title><rect x="847.7" y="595.0" width="94.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="850.7" y="606.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (498 samples, 7.97%)</title><rect x="848.3" y="579.0" width="94.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="851.3" y="590.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (8 samples, 0.13%)</title><rect x="848.9" y="563.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="851.9" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (7 samples, 0.11%)</title><rect x="849.1" y="547.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="852.1" y="558.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.06%)</title><rect x="849.6" y="531.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="852.6" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg (487 samples, 7.80%)</title><rect x="850.4" y="563.0" width="92.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="853.4" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>release_sock (5 samples, 0.08%)</title><rect x="850.8" y="547.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="853.8" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="851.3" y="531.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="854.3" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (480 samples, 7.68%)</title><rect x="851.7" y="547.0" width="90.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="854.7" y="558.0">tcp_sendms..</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.05%)</title><rect x="853.6" y="531.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="856.6" y="542.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (435 samples, 6.96%)</title><rect x="854.2" y="531.0" width="82.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="857.2" y="542.0">__tcp_pus..</text>
</g>
<g>
<title>tcp_write_xmit (435 samples, 6.96%)</title><rect x="854.2" y="515.0" width="82.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="857.2" y="526.0">tcp_write..</text>
</g>
<g>
<title>__tcp_transmit_skb (422 samples, 6.76%)</title><rect x="855.1" y="499.0" width="79.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="858.1" y="510.0">__tcp_tra..</text>
</g>
<g>
<title>__ip_queue_xmit (412 samples, 6.60%)</title><rect x="856.0" y="483.0" width="77.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="859.0" y="494.0">__ip_queu..</text>
</g>
<g>
<title>__sk_dst_check (5 samples, 0.08%)</title><rect x="856.6" y="467.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="859.6" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="857.2" y="451.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="860.2" y="462.0"></text>
</g>
<g>
<title>ip_local_out (81 samples, 1.30%)</title><rect x="857.6" y="467.0" width="15.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="860.6" y="478.0"></text>
</g>
<g>
<title>__ip_local_out (81 samples, 1.30%)</title><rect x="857.6" y="451.0" width="15.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="860.6" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (80 samples, 1.28%)</title><rect x="857.7" y="435.0" width="15.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="860.7" y="446.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (17 samples, 0.27%)</title><rect x="858.3" y="419.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="861.3" y="430.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (14 samples, 0.22%)</title><rect x="861.5" y="419.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="864.5" y="430.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (11 samples, 0.18%)</title><rect x="862.1" y="403.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="865.1" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (4 samples, 0.06%)</title><rect x="864.4" y="419.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="867.4" y="430.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (30 samples, 0.48%)</title><rect x="865.1" y="419.0" width="5.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="868.1" y="430.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (5 samples, 0.08%)</title><rect x="866.4" y="403.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="869.4" y="414.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (3 samples, 0.05%)</title><rect x="867.4" y="403.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="870.4" y="414.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (2 samples, 0.03%)</title><rect x="867.9" y="403.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="870.9" y="414.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (10 samples, 0.16%)</title><rect x="868.3" y="403.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="871.3" y="414.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (2 samples, 0.03%)</title><rect x="869.8" y="387.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="872.8" y="398.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (3 samples, 0.05%)</title><rect x="870.2" y="403.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="873.2" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (9 samples, 0.14%)</title><rect x="870.8" y="419.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="873.8" y="430.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (4 samples, 0.06%)</title><rect x="871.5" y="403.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="874.5" y="414.0"></text>
</g>
<g>
<title>selinux_ipv4_output (2 samples, 0.03%)</title><rect x="872.5" y="419.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="875.5" y="430.0"></text>
</g>
<g>
<title>ip_output (323 samples, 5.17%)</title><rect x="872.9" y="467.0" width="61.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="875.9" y="478.0">ip_out..</text>
</g>
<g>
<title>ip_finish_output2 (282 samples, 4.51%)</title><rect x="874.0" y="451.0" width="53.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="877.0" y="462.0">ip_fi..</text>
</g>
<g>
<title>__dev_queue_xmit (27 samples, 0.43%)</title><rect x="874.6" y="435.0" width="5.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="877.6" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (17 samples, 0.27%)</title><rect x="876.1" y="419.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="879.1" y="430.0"></text>
</g>
<g>
<title>loopback_xmit (15 samples, 0.24%)</title><rect x="876.4" y="403.0" width="2.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="879.4" y="414.0"></text>
</g>
<g>
<title>eth_type_trans (4 samples, 0.06%)</title><rect x="876.8" y="387.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="879.8" y="398.0"></text>
</g>
<g>
<title>netif_rx (5 samples, 0.08%)</title><rect x="877.6" y="387.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="880.6" y="398.0"></text>
</g>
<g>
<title>netif_rx_internal (5 samples, 0.08%)</title><rect x="877.6" y="371.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="880.6" y="382.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.03%)</title><rect x="877.6" y="355.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="880.6" y="366.0"></text>
</g>
<g>
<title>ktime_get_with_offset (3 samples, 0.05%)</title><rect x="878.0" y="355.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="881.0" y="366.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.03%)</title><rect x="878.9" y="387.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="881.9" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.03%)</title><rect x="879.3" y="419.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="882.3" y="430.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (252 samples, 4.03%)</title><rect x="879.7" y="435.0" width="47.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="882.7" y="446.0">__lo..</text>
</g>
<g>
<title>do_softirq.part.0 (252 samples, 4.03%)</title><rect x="879.7" y="419.0" width="47.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="882.7" y="430.0">do_s..</text>
</g>
<g>
<title>do_softirq_own_stack (249 samples, 3.99%)</title><rect x="880.2" y="403.0" width="47.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="883.2" y="414.0">do_s..</text>
</g>
<g>
<title>__softirqentry_text_start (249 samples, 3.99%)</title><rect x="880.2" y="387.0" width="47.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="883.2" y="398.0">__so..</text>
</g>
<g>
<title>net_rx_action (242 samples, 3.87%)</title><rect x="881.5" y="371.0" width="45.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="884.5" y="382.0">net_..</text>
</g>
<g>
<title>process_backlog (241 samples, 3.86%)</title><rect x="881.7" y="355.0" width="45.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="884.7" y="366.0">proc..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (238 samples, 3.81%)</title><rect x="882.3" y="339.0" width="45.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="885.3" y="350.0">__ne..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.10%)</title><rect x="882.7" y="323.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="885.7" y="334.0"></text>
</g>
<g>
<title>ip_rcv (230 samples, 3.68%)</title><rect x="883.8" y="323.0" width="43.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="886.8" y="334.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (193 samples, 3.09%)</title><rect x="884.0" y="307.0" width="36.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="887.0" y="318.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver_finish (167 samples, 2.67%)</title><rect x="884.2" y="291.0" width="31.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="887.2" y="302.0">ip..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (167 samples, 2.67%)</title><rect x="884.2" y="275.0" width="31.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="887.2" y="286.0">ip..</text>
</g>
<g>
<title>raw_local_deliver (5 samples, 0.08%)</title><rect x="884.8" y="259.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="887.8" y="270.0"></text>
</g>
<g>
<title>tcp_v4_rcv (159 samples, 2.55%)</title><rect x="885.7" y="259.0" width="30.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="888.7" y="270.0">tc..</text>
</g>
<g>
<title>__inet_lookup_established (8 samples, 0.13%)</title><rect x="887.0" y="243.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="890.0" y="254.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.03%)</title><rect x="888.5" y="243.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="891.5" y="254.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.03%)</title><rect x="888.5" y="227.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="891.5" y="238.0"></text>
</g>
<g>
<title>sock_put (2 samples, 0.03%)</title><rect x="888.9" y="243.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="891.9" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (138 samples, 2.21%)</title><rect x="889.3" y="243.0" width="26.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="892.3" y="254.0">t..</text>
</g>
<g>
<title>tcp_rcv_established (138 samples, 2.21%)</title><rect x="889.3" y="227.0" width="26.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="892.3" y="238.0">t..</text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.10%)</title><rect x="889.3" y="211.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="892.3" y="222.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.10%)</title><rect x="889.3" y="195.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="892.3" y="206.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.10%)</title><rect x="889.3" y="179.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="892.3" y="190.0"></text>
</g>
<g>
<title>tcp_ack (28 samples, 0.45%)</title><rect x="890.4" y="211.0" width="5.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="893.4" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.14%)</title><rect x="892.1" y="195.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="895.1" y="206.0"></text>
</g>
<g>
<title>skb_release_data (7 samples, 0.11%)</title><rect x="892.5" y="179.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="895.5" y="190.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.03%)</title><rect x="894.8" y="195.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="897.8" y="206.0"></text>
</g>
<g>
<title>tcp_data_queue (103 samples, 1.65%)</title><rect x="895.7" y="211.0" width="19.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="898.7" y="222.0"></text>
</g>
<g>
<title>dst_release (2 samples, 0.03%)</title><rect x="896.5" y="195.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="899.5" y="206.0"></text>
</g>
<g>
<title>sock_def_readable (92 samples, 1.47%)</title><rect x="897.0" y="195.0" width="17.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="900.0" y="206.0"></text>
</g>
<g>
<title>__wake_up_common_lock (90 samples, 1.44%)</title><rect x="897.4" y="179.0" width="17.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="900.4" y="190.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (90 samples, 1.44%)</title><rect x="897.4" y="163.0" width="17.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="900.4" y="174.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.03%)</title><rect x="914.4" y="195.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="917.4" y="206.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.03%)</title><rect x="914.8" y="195.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="917.8" y="206.0"></text>
</g>
<g>
<title>nf_hook_slow (25 samples, 0.40%)</title><rect x="915.7" y="291.0" width="4.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="918.7" y="302.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (18 samples, 0.29%)</title><rect x="916.1" y="275.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="919.1" y="286.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (4 samples, 0.06%)</title><rect x="918.0" y="259.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="921.0" y="270.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (4 samples, 0.06%)</title><rect x="918.8" y="259.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="921.8" y="270.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (2 samples, 0.03%)</title><rect x="919.7" y="275.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="922.7" y="286.0"></text>
</g>
<g>
<title>nf_hook_slow (36 samples, 0.58%)</title><rect x="920.5" y="307.0" width="6.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="923.5" y="318.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (22 samples, 0.35%)</title><rect x="921.2" y="291.0" width="4.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="924.2" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (5 samples, 0.08%)</title><rect x="925.4" y="291.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="928.4" y="302.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (4 samples, 0.06%)</title><rect x="926.5" y="291.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="929.5" y="302.0"></text>
</g>
<g>
<title>ip_finish_output (7 samples, 0.11%)</title><rect x="927.3" y="451.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="930.3" y="462.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="928.2" y="435.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="931.2" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (28 samples, 0.45%)</title><rect x="928.6" y="451.0" width="5.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="931.6" y="462.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (5 samples, 0.08%)</title><rect x="929.1" y="435.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="932.1" y="446.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (3 samples, 0.05%)</title><rect x="930.1" y="435.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="933.1" y="446.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (5 samples, 0.08%)</title><rect x="930.7" y="435.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="933.7" y="446.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (3 samples, 0.05%)</title><rect x="931.0" y="419.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="934.0" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (6 samples, 0.10%)</title><rect x="931.6" y="435.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="934.6" y="446.0"></text>
</g>
<g>
<title>selinux_ip_postroute (5 samples, 0.08%)</title><rect x="932.7" y="435.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="935.7" y="446.0"></text>
</g>
<g>
<title>selinux_peerlbl_enabled (2 samples, 0.03%)</title><rect x="933.3" y="419.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="936.3" y="430.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="933.9" y="483.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="936.9" y="494.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.03%)</title><rect x="934.4" y="483.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="937.4" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.03%)</title><rect x="934.8" y="499.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="937.8" y="510.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.08%)</title><rect x="935.2" y="499.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="938.2" y="510.0"></text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.06%)</title><rect x="936.3" y="531.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="939.3" y="542.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.03%)</title><rect x="936.3" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="939.3" y="526.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (2 samples, 0.03%)</title><rect x="936.3" y="499.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="939.3" y="510.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.03%)</title><rect x="936.7" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="939.7" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (12 samples, 0.19%)</title><rect x="937.1" y="531.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="940.1" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (11 samples, 0.18%)</title><rect x="937.3" y="515.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="940.3" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (4 samples, 0.06%)</title><rect x="937.5" y="499.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="940.5" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.06%)</title><rect x="937.5" y="483.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="940.5" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (5 samples, 0.08%)</title><rect x="938.2" y="499.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="941.2" y="510.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.03%)</title><rect x="939.3" y="531.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="942.3" y="542.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.03%)</title><rect x="939.9" y="531.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="942.9" y="542.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="940.3" y="531.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="943.3" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (7 samples, 0.11%)</title><rect x="940.7" y="531.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="943.7" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.10%)</title><rect x="940.9" y="515.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="943.9" y="526.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.05%)</title><rect x="941.2" y="499.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="944.2" y="510.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="942.0" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="945.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.26%)</title><rect x="942.7" y="659.0" width="3.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="945.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.26%)</title><rect x="942.7" y="643.0" width="3.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="945.7" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (14 samples, 0.22%)</title><rect x="942.9" y="627.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="945.9" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="943.5" y="611.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="946.5" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.14%)</title><rect x="943.9" y="611.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="946.9" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="944.3" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="947.3" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.05%)</title><rect x="944.6" y="595.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.6" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.03%)</title><rect x="945.2" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.2" y="606.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="945.8" y="659.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="948.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="946.1" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.14%)</title><rect x="946.5" y="755.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="949.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.08%)</title><rect x="947.1" y="739.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="950.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.08%)</title><rect x="947.1" y="723.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="950.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (578 samples, 9.25%)</title><rect x="948.2" y="755.0" width="109.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="951.2" y="766.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/String.isEmpty (7 samples, 0.11%)</title><rect x="948.8" y="739.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="951.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.03%)</title><rect x="949.5" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="952.5" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="950.7" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="953.7" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="950.7" y="723.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="953.7" y="734.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="950.7" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.7" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.05%)</title><rect x="951.1" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="954.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.03%)</title><rect x="951.6" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="954.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="951.6" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="954.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (550 samples, 8.80%)</title><rect x="952.0" y="739.0" width="103.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.0" y="750.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (30 samples, 0.48%)</title><rect x="952.2" y="723.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.2" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (30 samples, 0.48%)</title><rect x="952.2" y="707.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.2" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (30 samples, 0.48%)</title><rect x="952.2" y="691.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="955.2" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (28 samples, 0.45%)</title><rect x="952.4" y="675.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (26 samples, 0.42%)</title><rect x="952.8" y="659.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="955.8" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.30%)</title><rect x="952.8" y="643.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="955.8" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.05%)</title><rect x="952.9" y="627.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="955.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="952.9" y="611.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="955.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="952.9" y="595.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="955.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (3 samples, 0.05%)</title><rect x="952.9" y="579.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="955.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.03%)</title><rect x="952.9" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="955.9" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="952.9" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="955.9" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="952.9" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.9" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5 samples, 0.08%)</title><rect x="953.5" y="627.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.5" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (5 samples, 0.08%)</title><rect x="953.5" y="611.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.5" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (3 samples, 0.05%)</title><rect x="953.9" y="595.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.9" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.05%)</title><rect x="953.9" y="579.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.05%)</title><rect x="953.9" y="563.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (3 samples, 0.05%)</title><rect x="953.9" y="547.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (3 samples, 0.05%)</title><rect x="953.9" y="531.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.9" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (3 samples, 0.05%)</title><rect x="953.9" y="515.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="956.9" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.05%)</title><rect x="953.9" y="499.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (3 samples, 0.05%)</title><rect x="953.9" y="483.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="956.9" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.05%)</title><rect x="953.9" y="467.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="956.9" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (3 samples, 0.05%)</title><rect x="953.9" y="451.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.9" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.05%)</title><rect x="953.9" y="435.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (2 samples, 0.03%)</title><rect x="954.1" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="957.1" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (10 samples, 0.16%)</title><rect x="954.5" y="627.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="957.5" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (10 samples, 0.16%)</title><rect x="954.5" y="611.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.5" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (10 samples, 0.16%)</title><rect x="954.5" y="595.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="957.5" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (10 samples, 0.16%)</title><rect x="954.5" y="579.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="957.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.14%)</title><rect x="954.6" y="563.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="957.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.14%)</title><rect x="954.6" y="547.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="957.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (6 samples, 0.10%)</title><rect x="954.8" y="531.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="957.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.10%)</title><rect x="954.8" y="515.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="957.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.10%)</title><rect x="954.8" y="499.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="957.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (6 samples, 0.10%)</title><rect x="954.8" y="483.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (3 samples, 0.05%)</title><rect x="954.8" y="467.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.03%)</title><rect x="955.4" y="467.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="958.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (2 samples, 0.03%)</title><rect x="956.0" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="959.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (2 samples, 0.03%)</title><rect x="956.0" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="959.0" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (2 samples, 0.03%)</title><rect x="956.0" y="499.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="959.0" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.03%)</title><rect x="956.0" y="483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="959.0" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (2 samples, 0.03%)</title><rect x="956.0" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="959.0" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.03%)</title><rect x="956.0" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="959.0" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (2 samples, 0.03%)</title><rect x="956.0" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="959.0" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.03%)</title><rect x="956.0" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="956.0" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="959.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="956.0" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.03%)</title><rect x="956.3" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="959.3" y="654.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="956.3" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$55/1238651899.apply (5 samples, 0.08%)</title><rect x="956.7" y="643.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.06%)</title><rect x="956.9" y="627.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="959.9" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.05%)</title><rect x="956.9" y="611.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="959.9" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.05%)</title><rect x="956.9" y="595.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.9" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.05%)</title><rect x="956.9" y="579.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="959.9" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="956.9" y="563.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="959.9" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="957.1" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="960.1" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="957.1" y="531.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="960.1" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="957.1" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="960.1" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (6 samples, 0.10%)</title><rect x="957.9" y="723.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="960.9" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (4 samples, 0.06%)</title><rect x="958.2" y="707.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="961.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$57/204060277.apply (4 samples, 0.06%)</title><rect x="958.2" y="691.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="961.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (4 samples, 0.06%)</title><rect x="958.2" y="675.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="961.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.06%)</title><rect x="958.2" y="659.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="961.2" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.06%)</title><rect x="958.2" y="643.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.2" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.06%)</title><rect x="958.2" y="627.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="961.2" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.06%)</title><rect x="958.2" y="611.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="961.2" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="958.2" y="595.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="961.2" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="958.2" y="579.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="961.2" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="958.2" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="961.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="958.2" y="547.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="961.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.03%)</title><rect x="959.0" y="723.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="962.0" y="734.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="959.0" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (510 samples, 8.16%)</title><rect x="959.6" y="723.0" width="96.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.6" y="734.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (510 samples, 8.16%)</title><rect x="959.6" y="707.0" width="96.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.6" y="718.0">ru/mail/pol..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (55 samples, 0.88%)</title><rect x="960.1" y="691.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="963.1" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (55 samples, 0.88%)</title><rect x="960.1" y="675.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="963.1" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.03%)</title><rect x="960.5" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="963.5" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (48 samples, 0.77%)</title><rect x="961.1" y="659.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="964.1" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (47 samples, 0.75%)</title><rect x="961.3" y="643.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="964.3" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (46 samples, 0.74%)</title><rect x="961.4" y="627.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="964.4" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (46 samples, 0.74%)</title><rect x="961.4" y="611.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="964.4" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (45 samples, 0.72%)</title><rect x="961.6" y="595.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="964.6" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (45 samples, 0.72%)</title><rect x="961.6" y="579.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="964.6" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (23 samples, 0.37%)</title><rect x="962.0" y="563.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="965.0" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (2 samples, 0.03%)</title><rect x="962.0" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.0" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="962.0" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="965.0" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="962.0" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="965.0" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (2 samples, 0.03%)</title><rect x="962.0" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.0" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.03%)</title><rect x="962.0" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="965.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (21 samples, 0.34%)</title><rect x="962.4" y="547.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="965.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (21 samples, 0.34%)</title><rect x="962.4" y="531.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="965.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (20 samples, 0.32%)</title><rect x="962.6" y="515.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="965.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (14 samples, 0.22%)</title><rect x="962.6" y="499.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="965.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (8 samples, 0.13%)</title><rect x="962.6" y="483.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="965.6" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (8 samples, 0.13%)</title><rect x="962.6" y="467.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="965.6" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.10%)</title><rect x="963.0" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="966.0" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="963.0" y="435.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="966.0" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="963.3" y="419.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="966.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="963.3" y="403.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="966.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="963.3" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="963.5" y="371.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.5" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="964.1" y="483.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="967.1" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="964.1" y="467.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="967.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.10%)</title><rect x="964.1" y="451.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="967.1" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.10%)</title><rect x="964.1" y="435.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="967.1" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.05%)</title><rect x="964.7" y="419.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="967.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.05%)</title><rect x="965.2" y="499.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="968.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (2 samples, 0.03%)</title><rect x="965.8" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.8" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="965.8" y="483.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="968.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (20 samples, 0.32%)</title><rect x="966.4" y="563.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="969.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (20 samples, 0.32%)</title><rect x="966.4" y="547.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="969.4" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (20 samples, 0.32%)</title><rect x="966.4" y="531.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="969.4" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (20 samples, 0.32%)</title><rect x="966.4" y="515.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.4" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (20 samples, 0.32%)</title><rect x="966.4" y="499.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="969.4" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (20 samples, 0.32%)</title><rect x="966.4" y="483.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="969.4" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (19 samples, 0.30%)</title><rect x="966.5" y="467.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="969.5" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (19 samples, 0.30%)</title><rect x="966.5" y="451.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="969.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.18%)</title><rect x="966.5" y="435.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="969.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.18%)</title><rect x="966.5" y="419.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="969.5" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.13%)</title><rect x="966.7" y="403.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="969.7" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="967.5" y="387.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="970.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1331501318.apply (8 samples, 0.13%)</title><rect x="968.6" y="435.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="971.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (8 samples, 0.13%)</title><rect x="968.6" y="419.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="971.6" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.10%)</title><rect x="969.0" y="403.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.0" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.10%)</title><rect x="969.0" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.08%)</title><rect x="969.2" y="371.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="972.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="969.2" y="355.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="972.2" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="969.4" y="339.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="969.4" y="323.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="972.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="969.4" y="307.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="972.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="969.8" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="969.8" y="275.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="969.8" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.8" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2 samples, 0.03%)</title><rect x="970.1" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="973.1" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.08%)</title><rect x="970.7" y="691.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="973.7" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 0.14%)</title><rect x="971.6" y="691.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="974.6" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 0.14%)</title><rect x="971.6" y="675.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.6" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7 samples, 0.11%)</title><rect x="972.0" y="659.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="975.0" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7 samples, 0.11%)</title><rect x="972.0" y="643.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.0" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (5 samples, 0.08%)</title><rect x="972.2" y="627.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="975.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (24 samples, 0.38%)</title><rect x="973.5" y="691.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="976.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (23 samples, 0.37%)</title><rect x="973.7" y="675.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="976.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.30%)</title><rect x="974.5" y="659.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="977.5" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.03%)</title><rect x="974.5" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="977.5" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.06%)</title><rect x="974.9" y="643.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="977.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="975.0" y="627.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="978.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (3 samples, 0.05%)</title><rect x="975.0" y="611.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="978.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (3 samples, 0.05%)</title><rect x="975.0" y="595.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (3 samples, 0.05%)</title><rect x="975.0" y="579.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="978.0" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="975.0" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="978.0" y="574.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="975.0" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="978.0" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="975.0" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="978.0" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="975.0" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.0" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.06%)</title><rect x="975.6" y="643.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="978.6" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4 samples, 0.06%)</title><rect x="975.6" y="627.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.6" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (3 samples, 0.05%)</title><rect x="975.8" y="611.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.8" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9 samples, 0.14%)</title><rect x="976.4" y="643.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="979.4" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9 samples, 0.14%)</title><rect x="976.4" y="627.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.4" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (9 samples, 0.14%)</title><rect x="976.4" y="611.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="979.4" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (9 samples, 0.14%)</title><rect x="976.4" y="595.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.13%)</title><rect x="976.6" y="579.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="979.6" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.13%)</title><rect x="976.6" y="563.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (6 samples, 0.10%)</title><rect x="976.6" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.10%)</title><rect x="976.6" y="531.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="979.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.10%)</title><rect x="976.6" y="515.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="979.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (6 samples, 0.10%)</title><rect x="976.6" y="499.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (2 samples, 0.03%)</title><rect x="976.6" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.6" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="976.6" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="979.6" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="976.6" y="451.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="979.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="976.6" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.6" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="976.6" y="419.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="979.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.05%)</title><rect x="976.9" y="483.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="979.9" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="976.9" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.9" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="976.9" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="979.9" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="976.9" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="979.9" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="976.9" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="979.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/907197707.compare (2 samples, 0.03%)</title><rect x="977.7" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (2 samples, 0.03%)</title><rect x="977.7" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="980.7" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (2 samples, 0.03%)</title><rect x="977.7" y="515.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.7" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.03%)</title><rect x="977.7" y="499.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="980.7" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1835501946.compare (2 samples, 0.03%)</title><rect x="977.7" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.7" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.03%)</title><rect x="977.7" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="980.7" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/256171401.compare (2 samples, 0.03%)</title><rect x="977.7" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="980.7" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.03%)</title><rect x="977.7" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (50 samples, 0.80%)</title><rect x="978.1" y="691.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="981.1" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (40 samples, 0.64%)</title><rect x="978.1" y="675.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="981.1" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (40 samples, 0.64%)</title><rect x="978.1" y="659.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="981.1" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (35 samples, 0.56%)</title><rect x="978.3" y="643.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="981.3" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (35 samples, 0.56%)</title><rect x="978.3" y="627.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="981.3" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (35 samples, 0.56%)</title><rect x="978.3" y="611.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="981.3" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (33 samples, 0.53%)</title><rect x="978.6" y="595.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="981.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (26 samples, 0.42%)</title><rect x="980.0" y="579.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="983.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.27%)</title><rect x="981.7" y="563.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="984.7" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 0.21%)</title><rect x="982.0" y="547.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.05%)</title><rect x="983.9" y="531.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="986.9" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="984.5" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.5" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (4 samples, 0.06%)</title><rect x="984.9" y="643.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="987.9" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (10 samples, 0.16%)</title><rect x="985.6" y="675.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="988.6" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (10 samples, 0.16%)</title><rect x="985.6" y="659.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="988.6" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (10 samples, 0.16%)</title><rect x="985.6" y="643.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.6" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (10 samples, 0.16%)</title><rect x="985.6" y="627.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.6" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (7 samples, 0.11%)</title><rect x="986.2" y="611.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="989.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.11%)</title><rect x="986.2" y="595.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="989.2" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.06%)</title><rect x="986.8" y="579.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="989.8" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.06%)</title><rect x="986.8" y="563.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="989.8" y="574.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="987.1" y="547.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="990.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (362 samples, 5.79%)</title><rect x="987.5" y="691.0" width="68.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="990.5" y="702.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (362 samples, 5.79%)</title><rect x="987.5" y="675.0" width="68.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="990.5" y="686.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (361 samples, 5.78%)</title><rect x="987.7" y="659.0" width="68.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="990.7" y="670.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (68 samples, 1.09%)</title><rect x="989.8" y="643.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="992.8" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.13%)</title><rect x="991.3" y="627.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="994.3" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.05%)</title><rect x="992.2" y="611.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="995.2" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (41 samples, 0.66%)</title><rect x="993.0" y="627.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="996.0" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.10%)</title><rect x="995.8" y="611.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="998.8" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="996.6" y="595.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="999.6" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (9 samples, 0.14%)</title><rect x="997.0" y="611.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1000.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.08%)</title><rect x="998.7" y="611.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1001.7" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.05%)</title><rect x="998.8" y="595.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1001.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.06%)</title><rect x="999.6" y="611.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1002.6" y="622.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="1000.4" y="611.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1003.4" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 0.14%)</title><rect x="1000.7" y="627.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.7" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.05%)</title><rect x="1000.9" y="611.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1003.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (5 samples, 0.08%)</title><rect x="1001.5" y="611.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1004.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (141 samples, 2.26%)</title><rect x="1002.6" y="643.0" width="26.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1005.6" y="654.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (44 samples, 0.70%)</title><rect x="1002.6" y="627.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.6" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (4 samples, 0.06%)</title><rect x="1002.6" y="611.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1005.6" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (40 samples, 0.64%)</title><rect x="1003.4" y="611.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1006.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (40 samples, 0.64%)</title><rect x="1003.4" y="595.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1006.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (40 samples, 0.64%)</title><rect x="1003.4" y="579.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1006.4" y="590.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (61 samples, 0.98%)</title><rect x="1010.9" y="627.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1013.9" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (61 samples, 0.98%)</title><rect x="1010.9" y="611.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1013.9" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (2 samples, 0.03%)</title><rect x="1012.4" y="595.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1015.4" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (51 samples, 0.82%)</title><rect x="1012.8" y="595.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1015.8" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (49 samples, 0.78%)</title><rect x="1013.2" y="579.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1016.2" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (48 samples, 0.77%)</title><rect x="1013.4" y="563.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1016.4" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (48 samples, 0.77%)</title><rect x="1013.4" y="547.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1016.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (48 samples, 0.77%)</title><rect x="1013.4" y="531.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1016.4" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (25 samples, 0.40%)</title><rect x="1016.8" y="515.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.8" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="1017.0" y="499.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.0" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.08%)</title><rect x="1017.2" y="483.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1020.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.08%)</title><rect x="1017.2" y="467.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.2" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.08%)</title><rect x="1017.2" y="451.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1020.2" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (18 samples, 0.29%)</title><rect x="1018.1" y="499.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.1" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="1019.6" y="483.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.6" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.06%)</title><rect x="1020.8" y="483.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1023.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="1020.8" y="467.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1023.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.06%)</title><rect x="1020.8" y="451.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1023.8" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="1021.5" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.05%)</title><rect x="1021.9" y="515.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1024.9" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (30 samples, 0.48%)</title><rect x="1022.5" y="627.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.5" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (22 samples, 0.35%)</title><rect x="1024.0" y="611.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.0" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (22 samples, 0.35%)</title><rect x="1024.0" y="595.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1027.0" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (22 samples, 0.35%)</title><rect x="1024.0" y="579.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1027.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.35%)</title><rect x="1024.0" y="563.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1027.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.35%)</title><rect x="1024.0" y="547.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1027.0" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.21%)</title><rect x="1024.9" y="531.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1027.9" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.11%)</title><rect x="1025.1" y="515.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1028.1" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.11%)</title><rect x="1025.1" y="499.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1028.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.06%)</title><rect x="1025.7" y="483.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.06%)</title><rect x="1025.7" y="467.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.7" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.08%)</title><rect x="1026.4" y="515.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1029.4" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.08%)</title><rect x="1026.4" y="499.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1029.4" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="1026.8" y="483.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1029.8" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.05%)</title><rect x="1026.8" y="467.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1029.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="1027.4" y="531.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.4" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="1028.1" y="627.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1031.1" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="1028.1" y="611.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.10%)</title><rect x="1028.1" y="595.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.1" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.10%)</title><rect x="1028.1" y="579.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1031.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (141 samples, 2.26%)</title><rect x="1029.3" y="643.0" width="26.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.3" y="654.0">r..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (45 samples, 0.72%)</title><rect x="1032.1" y="627.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1035.1" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (45 samples, 0.72%)</title><rect x="1032.1" y="611.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1035.1" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (41 samples, 0.66%)</title><rect x="1032.8" y="595.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1035.8" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (38 samples, 0.61%)</title><rect x="1033.4" y="579.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1036.4" y="590.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (35 samples, 0.56%)</title><rect x="1034.0" y="563.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1037.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.56%)</title><rect x="1034.0" y="547.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1037.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (35 samples, 0.56%)</title><rect x="1034.0" y="531.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1037.0" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (18 samples, 0.29%)</title><rect x="1036.1" y="515.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.1" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="1036.6" y="499.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1039.6" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.10%)</title><rect x="1036.6" y="483.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1039.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.08%)</title><rect x="1036.8" y="467.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1039.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.08%)</title><rect x="1036.8" y="451.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.8" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.14%)</title><rect x="1037.8" y="499.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1040.8" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (9 samples, 0.14%)</title><rect x="1037.8" y="483.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1040.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.06%)</title><rect x="1037.9" y="467.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1040.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="1038.7" y="467.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1041.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.06%)</title><rect x="1038.7" y="451.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1041.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.10%)</title><rect x="1039.5" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1042.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (31 samples, 0.50%)</title><rect x="1040.6" y="627.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1043.6" y="638.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (26 samples, 0.42%)</title><rect x="1041.5" y="611.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1044.5" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (26 samples, 0.42%)</title><rect x="1041.5" y="595.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1044.5" y="606.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (24 samples, 0.38%)</title><rect x="1041.9" y="579.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1044.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (24 samples, 0.38%)</title><rect x="1041.9" y="563.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1044.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (24 samples, 0.38%)</title><rect x="1041.9" y="547.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1044.9" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (20 samples, 0.32%)</title><rect x="1042.5" y="531.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.5" y="542.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="1042.9" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1045.9" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="1042.9" y="499.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1045.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1042.9" y="483.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1045.9" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="1042.9" y="467.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1045.9" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (16 samples, 0.26%)</title><rect x="1043.2" y="515.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1046.2" y="526.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (16 samples, 0.26%)</title><rect x="1043.2" y="499.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1046.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (16 samples, 0.26%)</title><rect x="1043.2" y="483.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1046.2" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (47 samples, 0.75%)</title><rect x="1046.4" y="627.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1049.4" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (44 samples, 0.70%)</title><rect x="1046.4" y="611.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.4" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.05%)</title><rect x="1054.8" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1057.8" y="622.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="1055.5" y="627.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1058.5" y="638.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.03%)</title><rect x="1055.5" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1058.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="1055.5" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1058.5" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="1055.5" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (8 samples, 0.13%)</title><rect x="1055.9" y="739.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1058.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (8 samples, 0.13%)</title><rect x="1055.9" y="723.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.9" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (3 samples, 0.05%)</title><rect x="1056.1" y="707.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1059.1" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1056.1" y="691.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1059.1" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (3 samples, 0.05%)</title><rect x="1056.1" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1059.1" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3 samples, 0.05%)</title><rect x="1056.8" y="707.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1059.8" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3 samples, 0.05%)</title><rect x="1056.8" y="691.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1059.8" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1056.8" y="675.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1059.8" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1056.8" y="659.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1059.8" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="1057.0" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1060.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.10%)</title><rect x="1057.4" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1060.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.10%)</title><rect x="1057.4" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1060.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.08%)</title><rect x="1057.4" y="739.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1060.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.05%)</title><rect x="1057.8" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7 samples, 0.11%)</title><rect x="1058.5" y="771.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1061.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.11%)</title><rect x="1058.5" y="755.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1061.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.06%)</title><rect x="1058.7" y="739.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1059.1" y="723.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1062.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (2 samples, 0.03%)</title><rect x="1059.5" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1062.5" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.26%)</title><rect x="1060.0" y="803.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1063.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1061.2" y="787.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1064.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1061.6" y="771.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1064.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1061.6" y="755.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="1061.9" y="787.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1064.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="1061.9" y="771.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1062.1" y="755.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1065.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (4 samples, 0.06%)</title><rect x="1062.1" y="739.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1065.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (14 samples, 0.22%)</title><rect x="1063.1" y="803.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1066.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.16%)</title><rect x="1063.1" y="787.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1066.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.16%)</title><rect x="1063.1" y="771.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1066.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.03%)</title><rect x="1063.4" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1066.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.03%)</title><rect x="1063.4" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1066.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.08%)</title><rect x="1063.8" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1066.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.05%)</title><rect x="1064.2" y="739.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (4 samples, 0.06%)</title><rect x="1065.0" y="787.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1068.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.06%)</title><rect x="1065.0" y="771.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1068.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.03%)</title><rect x="1065.7" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1068.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="1066.1" y="803.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1069.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (3 samples, 0.05%)</title><rect x="1066.7" y="803.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1069.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="1067.2" y="803.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1070.2" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.10%)</title><rect x="1067.2" y="787.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1070.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1067.6" y="771.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (4 samples, 0.06%)</title><rect x="1067.6" y="755.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1070.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (151 samples, 2.42%)</title><rect x="1068.4" y="819.0" width="28.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1071.4" y="830.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (143 samples, 2.29%)</title><rect x="1069.9" y="803.0" width="27.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1072.9" y="814.0">o..</text>
</g>
<g>
<title>[unknown] (29 samples, 0.46%)</title><rect x="1070.2" y="787.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1073.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.46%)</title><rect x="1070.2" y="771.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1073.2" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (20 samples, 0.32%)</title><rect x="1070.2" y="755.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1073.2" y="766.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.06%)</title><rect x="1071.0" y="739.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1074.0" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.16%)</title><rect x="1071.8" y="739.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1074.8" y="750.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="1072.3" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.3" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1072.7" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.05%)</title><rect x="1073.1" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.1" y="734.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="1073.6" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.6" y="750.0"></text>
</g>
<g>
<title>__libc_recv (6 samples, 0.10%)</title><rect x="1074.0" y="755.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1077.0" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.05%)</title><rect x="1075.2" y="755.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1078.2" y="766.0"></text>
</g>
<g>
<title>__libc_recv (111 samples, 1.78%)</title><rect x="1075.7" y="787.0" width="21.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1078.7" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (82 samples, 1.31%)</title><rect x="1081.2" y="771.0" width="15.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1084.2" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (82 samples, 1.31%)</title><rect x="1081.2" y="755.0" width="15.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1084.2" y="766.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (75 samples, 1.20%)</title><rect x="1082.5" y="739.0" width="14.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1085.5" y="750.0"></text>
</g>
<g>
<title>__sys_recvfrom (74 samples, 1.18%)</title><rect x="1082.7" y="723.0" width="14.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1085.7" y="734.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.05%)</title><rect x="1083.1" y="707.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1086.1" y="718.0"></text>
</g>
<g>
<title>inet_recvmsg (44 samples, 0.70%)</title><rect x="1083.7" y="707.0" width="8.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1086.7" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (44 samples, 0.70%)</title><rect x="1083.7" y="691.0" width="8.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1086.7" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.05%)</title><rect x="1086.1" y="675.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1089.1" y="686.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="1086.7" y="675.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1089.7" y="686.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.05%)</title><rect x="1087.4" y="675.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1090.4" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (16 samples, 0.26%)</title><rect x="1088.0" y="675.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1091.0" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (16 samples, 0.26%)</title><rect x="1088.0" y="659.0" width="3.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1091.0" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (7 samples, 0.11%)</title><rect x="1088.6" y="643.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1091.6" y="654.0"></text>
</g>
<g>
<title>copyout (6 samples, 0.10%)</title><rect x="1088.8" y="627.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1091.8" y="638.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.10%)</title><rect x="1088.8" y="611.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1091.8" y="622.0"></text>
</g>
<g>
<title>simple_copy_to_iter (6 samples, 0.10%)</title><rect x="1089.9" y="643.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1092.9" y="654.0"></text>
</g>
<g>
<title>__check_object_size (6 samples, 0.10%)</title><rect x="1089.9" y="627.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1092.9" y="638.0"></text>
</g>
<g>
<title>__check_heap_object (3 samples, 0.05%)</title><rect x="1090.1" y="611.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1093.1" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="1090.6" y="611.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1093.6" y="622.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.05%)</title><rect x="1091.2" y="675.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1094.2" y="686.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.05%)</title><rect x="1091.2" y="659.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1094.2" y="670.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="1091.4" y="643.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1094.4" y="654.0"></text>
</g>
<g>
<title>sock_recvmsg (18 samples, 0.29%)</title><rect x="1092.0" y="707.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1095.0" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (18 samples, 0.29%)</title><rect x="1092.0" y="691.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1095.0" y="702.0"></text>
</g>
<g>
<title>sock_has_perm (17 samples, 0.27%)</title><rect x="1092.2" y="675.0" width="3.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1095.2" y="686.0"></text>
</g>
<g>
<title>avc_has_perm (10 samples, 0.16%)</title><rect x="1093.5" y="659.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1096.5" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7 samples, 0.11%)</title><rect x="1095.4" y="707.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1098.4" y="718.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.11%)</title><rect x="1095.4" y="691.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1098.4" y="702.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.05%)</title><rect x="1096.1" y="675.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1099.1" y="686.0"></text>
</g>
<g>
<title>[tid=28425] (35 samples, 0.56%)</title><rect x="1096.9" y="883.0" width="6.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1099.9" y="894.0"></text>
</g>
<g>
<title>start_thread (35 samples, 0.56%)</title><rect x="1096.9" y="867.0" width="6.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1099.9" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (35 samples, 0.56%)</title><rect x="1096.9" y="851.0" width="6.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1099.9" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (35 samples, 0.56%)</title><rect x="1096.9" y="835.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.9" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (31 samples, 0.50%)</title><rect x="1097.1" y="819.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.1" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (23 samples, 0.37%)</title><rect x="1097.1" y="803.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.1" y="814.0"></text>
</g>
<g>
<title>SpinPause (22 samples, 0.35%)</title><rect x="1097.3" y="787.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1100.3" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.06%)</title><rect x="1101.4" y="803.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.4" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.06%)</title><rect x="1101.4" y="787.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.05%)</title><rect x="1101.6" y="771.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.6" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (3 samples, 0.05%)</title><rect x="1101.6" y="755.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.6" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.03%)</title><rect x="1101.8" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.8" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (2 samples, 0.03%)</title><rect x="1101.8" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.8" y="734.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.03%)</title><rect x="1101.8" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.8" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.03%)</title><rect x="1101.8" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.8" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.05%)</title><rect x="1102.4" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.4" y="814.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1102.9" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.9" y="830.0"></text>
</g>
<g>
<title>[tid=28429] (186 samples, 2.98%)</title><rect x="1103.5" y="883.0" width="35.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1106.5" y="894.0">[ti..</text>
</g>
<g>
<title>start_thread (186 samples, 2.98%)</title><rect x="1103.5" y="867.0" width="35.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1106.5" y="878.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (186 samples, 2.98%)</title><rect x="1103.5" y="851.0" width="35.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1106.5" y="862.0">thr..</text>
</g>
<g>
<title>GangWorker::loop() (186 samples, 2.98%)</title><rect x="1103.5" y="835.0" width="35.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.5" y="846.0">Gan..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (126 samples, 2.02%)</title><rect x="1103.5" y="819.0" width="23.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.5" y="830.0">G..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (123 samples, 1.97%)</title><rect x="1103.5" y="803.0" width="23.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.5" y="814.0">G..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.97] (3 samples, 0.05%)</title><rect x="1104.2" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.2" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.394] (3 samples, 0.05%)</title><rect x="1104.8" y="787.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.8" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (79 samples, 1.26%)</title><rect x="1105.4" y="787.0" width="14.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.4" y="798.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (60 samples, 0.96%)</title><rect x="1108.6" y="771.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.6" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (48 samples, 0.77%)</title><rect x="1110.7" y="755.0" width="9.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.7" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="1119.9" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.9" y="782.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (3 samples, 0.05%)</title><rect x="1120.3" y="787.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.3" y="798.0"></text>
</g>
<g>
<title>__GI_getrusage (3 samples, 0.05%)</title><rect x="1120.3" y="771.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1123.3" y="782.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (31 samples, 0.50%)</title><rect x="1120.9" y="787.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.9" y="798.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.03%)</title><rect x="1121.2" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.2" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (25 samples, 0.40%)</title><rect x="1121.6" y="771.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.6" y="782.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.394] (2 samples, 0.03%)</title><rect x="1126.7" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.7" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (60 samples, 0.96%)</title><rect x="1127.3" y="819.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.3" y="830.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (60 samples, 0.96%)</title><rect x="1127.3" y="803.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.3" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (59 samples, 0.94%)</title><rect x="1127.3" y="787.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.3" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.05%)</title><rect x="1134.1" y="771.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.1" y="782.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (5 samples, 0.08%)</title><rect x="1134.8" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.8" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (12 samples, 0.19%)</title><rect x="1135.8" y="771.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.8" y="782.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (8 samples, 0.13%)</title><rect x="1136.5" y="755.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.5" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="1138.1" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.1" y="782.0"></text>
</g>
<g>
<title>[tid=28432] (14 samples, 0.22%)</title><rect x="1138.8" y="883.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1141.8" y="894.0"></text>
</g>
<g>
<title>start_thread (12 samples, 0.19%)</title><rect x="1139.2" y="867.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1142.2" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (12 samples, 0.19%)</title><rect x="1139.2" y="851.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1142.2" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (12 samples, 0.19%)</title><rect x="1139.2" y="835.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.2" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (12 samples, 0.19%)</title><rect x="1139.2" y="819.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.2" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (8 samples, 0.13%)</title><rect x="1139.6" y="803.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.6" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (8 samples, 0.13%)</title><rect x="1139.6" y="787.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="798.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (8 samples, 0.13%)</title><rect x="1139.6" y="771.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (7 samples, 0.11%)</title><rect x="1139.6" y="755.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (3 samples, 0.05%)</title><rect x="1139.9" y="739.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.9" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (2 samples, 0.03%)</title><rect x="1139.9" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.9" y="734.0"></text>
</g>
<g>
<title>__GI_sched_yield (2 samples, 0.03%)</title><rect x="1141.1" y="803.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1144.1" y="814.0"></text>
</g>
<g>
<title>[tid=28436] (126 samples, 2.02%)</title><rect x="1141.5" y="883.0" width="23.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1144.5" y="894.0">[..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1141.5" y="867.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1144.5" y="878.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.03%)</title><rect x="1141.5" y="851.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1144.5" y="862.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.03%)</title><rect x="1142.2" y="867.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1145.2" y="878.0"></text>
</g>
<g>
<title>start_thread (119 samples, 1.90%)</title><rect x="1142.8" y="867.0" width="22.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1145.8" y="878.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (119 samples, 1.90%)</title><rect x="1142.8" y="851.0" width="22.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1145.8" y="862.0">t..</text>
</g>
<g>
<title>JavaThread::run() (119 samples, 1.90%)</title><rect x="1142.8" y="835.0" width="22.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.8" y="846.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (119 samples, 1.90%)</title><rect x="1142.8" y="819.0" width="22.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.8" y="830.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (119 samples, 1.90%)</title><rect x="1142.8" y="803.0" width="22.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.8" y="814.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (119 samples, 1.90%)</title><rect x="1142.8" y="787.0" width="22.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.8" y="798.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (119 samples, 1.90%)</title><rect x="1142.8" y="771.0" width="22.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.8" y="782.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (119 samples, 1.90%)</title><rect x="1142.8" y="755.0" width="22.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.8" y="766.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (71 samples, 1.14%)</title><rect x="1143.0" y="739.0" width="13.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.0" y="750.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.03%)</title><rect x="1143.0" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.0" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.03%)</title><rect x="1143.0" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.0" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.03%)</title><rect x="1143.0" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.0" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.03%)</title><rect x="1143.3" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="734.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.03%)</title><rect x="1143.3" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.14%)</title><rect x="1143.7" y="723.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.7" y="734.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.03%)</title><rect x="1143.7" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.7" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.11%)</title><rect x="1144.1" y="707.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.06%)</title><rect x="1144.5" y="691.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.5" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.03%)</title><rect x="1144.7" y="675.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.7" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (10 samples, 0.16%)</title><rect x="1145.6" y="723.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.6" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.14%)</title><rect x="1145.8" y="707.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.05%)</title><rect x="1145.8" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.03%)</title><rect x="1145.8" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.05%)</title><rect x="1146.4" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.4" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.05%)</title><rect x="1146.9" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.9" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.03%)</title><rect x="1147.1" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 0.75%)</title><rect x="1147.5" y="723.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.5" y="734.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.05%)</title><rect x="1147.5" y="707.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.05%)</title><rect x="1148.1" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.10%)</title><rect x="1148.6" y="707.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.14%)</title><rect x="1149.8" y="707.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.05%)</title><rect x="1150.9" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.10%)</title><rect x="1151.7" y="707.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.05%)</title><rect x="1152.0" y="691.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (2 samples, 0.03%)</title><rect x="1152.8" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.10%)</title><rect x="1153.4" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.06%)</title><rect x="1153.7" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.7" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.08%)</title><rect x="1154.7" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.7" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.08%)</title><rect x="1154.7" y="691.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.7" y="702.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.03%)</title><rect x="1154.7" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.7" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 0.48%)</title><rect x="1156.4" y="739.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (20 samples, 0.32%)</title><rect x="1157.1" y="723.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1157.3" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.16%)</title><rect x="1157.7" y="707.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 0.11%)</title><rect x="1158.3" y="691.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.08%)</title><rect x="1158.6" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.06%)</title><rect x="1158.8" y="659.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.03%)</title><rect x="1159.6" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.6" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.05%)</title><rect x="1160.0" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.05%)</title><rect x="1160.0" y="691.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.0" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.05%)</title><rect x="1160.9" y="723.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.05%)</title><rect x="1160.9" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.03%)</title><rect x="1161.5" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.03%)</title><rect x="1161.5" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="1161.5" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.24%)</title><rect x="1162.0" y="739.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.24%)</title><rect x="1162.0" y="723.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.24%)</title><rect x="1162.0" y="707.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.24%)</title><rect x="1162.0" y="691.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 0.24%)</title><rect x="1162.0" y="675.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.21%)</title><rect x="1162.0" y="659.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.16%)</title><rect x="1162.2" y="643.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.16%)</title><rect x="1162.2" y="627.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.14%)</title><rect x="1162.2" y="611.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.14%)</title><rect x="1162.2" y="595.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.14%)</title><rect x="1162.2" y="579.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.14%)</title><rect x="1162.2" y="563.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.11%)</title><rect x="1162.2" y="547.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.11%)</title><rect x="1162.2" y="531.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.10%)</title><rect x="1162.4" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.10%)</title><rect x="1162.4" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.10%)</title><rect x="1162.4" y="483.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.08%)</title><rect x="1162.6" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1162.6" y="451.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1162.6" y="435.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1162.6" y="419.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1162.6" y="403.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1162.6" y="387.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1163.0" y="451.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1163.0" y="435.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1163.0" y="419.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1163.0" y="403.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1163.0" y="387.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.05%)</title><rect x="1163.0" y="371.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1163.0" y="355.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.2" y="339.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.2" y="323.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1163.2" y="307.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1163.2" y="291.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1163.2" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1163.2" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1163.2" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.2" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1163.2" y="211.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1163.2" y="195.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1163.2" y="179.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1163.2" y="163.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1163.2" y="147.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.2" y="131.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.2" y="115.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1163.2" y="99.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1163.2" y="83.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1163.2" y="67.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1163.2" y="51.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1163.2" y="35.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.6" y="547.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.6" y="531.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1163.6" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1163.6" y="499.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1163.6" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1163.6" y="467.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1163.6" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1163.6" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1163.6" y="419.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1163.6" y="403.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1163.6" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1163.6" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.6" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1164.1" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1164.1" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1164.1" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1164.1" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1164.1" y="579.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1164.1" y="563.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1164.1" y="547.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="558.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.03%)</title><rect x="1164.9" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="750.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.9" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="734.0"></text>
</g>
<g>
<title>[tid=28437] (7 samples, 0.11%)</title><rect x="1165.3" y="883.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1168.3" y="894.0"></text>
</g>
<g>
<title>start_thread (5 samples, 0.08%)</title><rect x="1165.6" y="867.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1168.6" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.08%)</title><rect x="1165.6" y="851.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1168.6" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.08%)</title><rect x="1165.6" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.08%)</title><rect x="1165.6" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.6" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.08%)</title><rect x="1165.6" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="814.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 0.08%)</title><rect x="1165.6" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.6" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 0.08%)</title><rect x="1165.6" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.6" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 0.08%)</title><rect x="1165.6" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 0.08%)</title><rect x="1165.6" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.6" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 0.08%)</title><rect x="1165.6" y="723.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.6" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (2 samples, 0.03%)</title><rect x="1165.6" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.03%)</title><rect x="1166.2" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="718.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.03%)</title><rect x="1166.2" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.2" y="702.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.03%)</title><rect x="1166.2" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.2" y="686.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.03%)</title><rect x="1166.2" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.2" y="670.0"></text>
</g>
<g>
<title>[tid=28439] (2 samples, 0.03%)</title><rect x="1166.6" y="883.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1169.6" y="894.0"></text>
</g>
<g>
<title>[tid=28440] (4 samples, 0.06%)</title><rect x="1167.0" y="883.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1170.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1167.0" y="867.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1170.0" y="878.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.03%)</title><rect x="1167.3" y="867.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1170.3" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="1167.3" y="851.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1170.3" y="862.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.03%)</title><rect x="1167.3" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.3" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.03%)</title><rect x="1167.3" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.3" y="830.0"></text>
</g>
<g>
<title>[tid=28457] (41 samples, 0.66%)</title><rect x="1167.7" y="883.0" width="7.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>start_thread (40 samples, 0.64%)</title><rect x="1167.9" y="867.0" width="7.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1170.9" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (40 samples, 0.64%)</title><rect x="1167.9" y="851.0" width="7.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1170.9" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (40 samples, 0.64%)</title><rect x="1167.9" y="835.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="846.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="1167.9" y="819.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (3 samples, 0.05%)</title><rect x="1167.9" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="814.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.05%)</title><rect x="1167.9" y="787.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1170.9" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (33 samples, 0.53%)</title><rect x="1168.5" y="819.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (29 samples, 0.46%)</title><rect x="1168.5" y="803.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="814.0"></text>
</g>
<g>
<title>SpinPause (28 samples, 0.45%)</title><rect x="1168.7" y="787.0" width="5.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1171.7" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.05%)</title><rect x="1174.1" y="803.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="814.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.03%)</title><rect x="1174.3" y="787.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.3" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.03%)</title><rect x="1174.3" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="782.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="1174.7" y="819.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.7" y="830.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (2 samples, 0.03%)</title><rect x="1174.7" y="803.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="814.0"></text>
</g>
<g>
<title>[tid=28458] (38 samples, 0.61%)</title><rect x="1175.5" y="883.0" width="7.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1178.5" y="894.0"></text>
</g>
<g>
<title>start_thread (38 samples, 0.61%)</title><rect x="1175.5" y="867.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1178.5" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (38 samples, 0.61%)</title><rect x="1175.5" y="851.0" width="7.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1178.5" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (38 samples, 0.61%)</title><rect x="1175.5" y="835.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="846.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (4 samples, 0.06%)</title><rect x="1175.5" y="819.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (4 samples, 0.06%)</title><rect x="1175.5" y="803.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="814.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.06%)</title><rect x="1175.5" y="787.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (30 samples, 0.48%)</title><rect x="1176.4" y="819.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (26 samples, 0.42%)</title><rect x="1176.4" y="803.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>SpinPause (26 samples, 0.42%)</title><rect x="1176.4" y="787.0" width="4.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.05%)</title><rect x="1181.5" y="803.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.05%)</title><rect x="1181.5" y="787.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.05%)</title><rect x="1181.5" y="771.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1181.7" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>nmethod::test_set_oops_do_mark() (2 samples, 0.03%)</title><rect x="1181.7" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>[tid=28459] (39 samples, 0.62%)</title><rect x="1182.6" y="883.0" width="7.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1185.6" y="894.0"></text>
</g>
<g>
<title>start_thread (38 samples, 0.61%)</title><rect x="1182.8" y="867.0" width="7.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (38 samples, 0.61%)</title><rect x="1182.8" y="851.0" width="7.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (38 samples, 0.61%)</title><rect x="1182.8" y="835.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (3 samples, 0.05%)</title><rect x="1182.8" y="819.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (3 samples, 0.05%)</title><rect x="1182.8" y="803.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.05%)</title><rect x="1182.8" y="787.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (29 samples, 0.46%)</title><rect x="1183.4" y="819.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (25 samples, 0.40%)</title><rect x="1183.4" y="803.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="814.0"></text>
</g>
<g>
<title>SpinPause (24 samples, 0.38%)</title><rect x="1183.6" y="787.0" width="4.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.06%)</title><rect x="1188.1" y="803.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.03%)</title><rect x="1188.3" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="798.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1188.9" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (2 samples, 0.03%)</title><rect x="1188.9" y="803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1189.4" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="830.0"></text>
</g>
</g>
</svg>
