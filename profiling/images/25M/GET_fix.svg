<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1317"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1317"> </text>
<g id="frames">
<g>
<title>all (3,493 samples, 100.00%)</title><rect x="10.0" y="1283.0" width="1180.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="1294.0">all</text>
</g>
<g>
<title>[NIO Selector #3 tid=2759] (3,096 samples, 88.63%)</title><rect x="10.0" y="1267.0" width="1045.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="1278.0">[NIO Selector #3 tid=2759]</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="10.0" y="1251.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.3" y="1251.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.3" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="1235.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.7" y="1251.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.7" y="1262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.7" y="1235.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.7" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.7" y="1219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.7" y="1203.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="1214.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="10.7" y="1187.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (11 samples, 0.31%)</title><rect x="11.0" y="1251.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.0" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (9 samples, 0.26%)</title><rect x="11.4" y="1235.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.4" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (9 samples, 0.26%)</title><rect x="11.4" y="1219.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.4" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.26%)</title><rect x="11.4" y="1203.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.4" y="1214.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.03%)</title><rect x="11.4" y="1187.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.4" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (7 samples, 0.20%)</title><rect x="11.7" y="1187.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (6 samples, 0.17%)</title><rect x="11.7" y="1171.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.7" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (6 samples, 0.17%)</title><rect x="11.7" y="1155.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.7" y="1166.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.06%)</title><rect x="11.7" y="1139.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.7" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="11.7" y="1123.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.7" y="1134.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="11.7" y="1107.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.7" y="1118.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="11.7" y="1091.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.7" y="1102.0"></text>
</g>
<g>
<title>G1ConcurrentRefine::max_num_threads() (1 samples, 0.03%)</title><rect x="11.7" y="1075.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.7" y="1086.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.03%)</title><rect x="12.0" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.0" y="1134.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="12.4" y="1139.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.4" y="1150.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (3 samples, 0.09%)</title><rect x="12.7" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.7" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.09%)</title><rect x="12.7" y="1123.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.7" y="1134.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (3 samples, 0.09%)</title><rect x="12.7" y="1107.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.7" y="1118.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.09%)</title><rect x="12.7" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.7" y="1102.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.03%)</title><rect x="12.7" y="1075.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.7" y="1086.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (2 samples, 0.06%)</title><rect x="13.0" y="1075.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.0" y="1086.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="13.7" y="1171.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.7" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="13.7" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.7" y="1166.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="14.1" y="1187.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="17.1" y="1198.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="14.4" y="1235.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.4" y="1246.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="14.7" y="1251.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="17.7" y="1262.0"></text>
</g>
<g>
<title>[unknown_Java] (20 samples, 0.57%)</title><rect x="15.1" y="1251.0" width="6.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="18.1" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="21.5" y="1235.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="24.5" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="21.8" y="1251.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.8" y="1262.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="21.8" y="1235.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="1246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="21.8" y="1219.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.8" y="1230.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="21.8" y="1203.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.8" y="1214.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,059 samples, 87.58%)</title><rect x="22.2" y="1251.0" width="1033.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="1262.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (291 samples, 8.33%)</title><rect x="23.9" y="1235.0" width="98.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.9" y="1246.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (6 samples, 0.17%)</title><rect x="25.2" y="1219.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.2" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.09%)</title><rect x="26.2" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.2" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$000 (1 samples, 0.03%)</title><rect x="26.9" y="1187.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.9" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (281 samples, 8.04%)</title><rect x="27.2" y="1219.0" width="95.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.2" y="1230.0">one/nio/net..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (247 samples, 7.07%)</title><rect x="30.9" y="1203.0" width="83.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="33.9" y="1214.0">.annobin_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (195 samples, 5.58%)</title><rect x="48.5" y="1187.0" width="65.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="51.5" y="1198.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (195 samples, 5.58%)</title><rect x="48.5" y="1171.0" width="65.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="51.5" y="1182.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (177 samples, 5.07%)</title><rect x="54.6" y="1155.0" width="59.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="57.6" y="1166.0">__x64_..</text>
</g>
<g>
<title>do_epoll_wait (169 samples, 4.84%)</title><rect x="57.3" y="1139.0" width="57.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="60.3" y="1150.0">do_epo..</text>
</g>
<g>
<title>__fget_light (11 samples, 0.31%)</title><rect x="58.3" y="1123.0" width="3.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="61.3" y="1134.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.23%)</title><rect x="59.3" y="1107.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="62.3" y="1118.0"></text>
</g>
<g>
<title>ep_poll (155 samples, 4.44%)</title><rect x="62.0" y="1123.0" width="52.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="65.0" y="1134.0">ep_poll</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="69.5" y="1107.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="72.5" y="1118.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="69.5" y="1091.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="72.5" y="1102.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="69.5" y="1075.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="72.5" y="1086.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="69.5" y="1059.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="72.5" y="1070.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="69.5" y="1043.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="72.5" y="1054.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="69.5" y="1027.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="72.5" y="1038.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (107 samples, 3.06%)</title><rect x="69.8" y="1107.0" width="36.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="72.8" y="1118.0">ep_..</text>
</g>
<g>
<title>_raw_write_lock_irq (2 samples, 0.06%)</title><rect x="77.6" y="1091.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="80.6" y="1102.0"></text>
</g>
<g>
<title>ep_send_events_proc (71 samples, 2.03%)</title><rect x="78.2" y="1091.0" width="24.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="81.2" y="1102.0">e..</text>
</g>
<g>
<title>ep_item_poll.isra.0 (59 samples, 1.69%)</title><rect x="82.3" y="1075.0" width="19.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="85.3" y="1086.0"></text>
</g>
<g>
<title>sock_poll (50 samples, 1.43%)</title><rect x="85.3" y="1059.0" width="16.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="88.3" y="1070.0"></text>
</g>
<g>
<title>tcp_poll (24 samples, 0.69%)</title><rect x="94.1" y="1043.0" width="8.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="97.1" y="1054.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.09%)</title><rect x="101.2" y="1027.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="104.2" y="1038.0"></text>
</g>
<g>
<title>mutex_lock (8 samples, 0.23%)</title><rect x="102.2" y="1091.0" width="2.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="105.2" y="1102.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="104.6" y="1075.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="107.6" y="1086.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.09%)</title><rect x="104.9" y="1091.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="107.9" y="1102.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (25 samples, 0.72%)</title><rect x="105.9" y="1107.0" width="8.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="108.9" y="1118.0"></text>
</g>
<g>
<title>schedule (24 samples, 0.69%)</title><rect x="106.3" y="1091.0" width="8.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="109.3" y="1102.0"></text>
</g>
<g>
<title>__sched_text_start (21 samples, 0.60%)</title><rect x="107.3" y="1075.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="110.3" y="1086.0"></text>
</g>
<g>
<title>finish_task_switch (21 samples, 0.60%)</title><rect x="107.3" y="1059.0" width="7.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="110.3" y="1070.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.09%)</title><rect x="114.4" y="1203.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="117.4" y="1214.0"></text>
</g>
<g>
<title>__GI___clock_gettime (13 samples, 0.37%)</title><rect x="115.4" y="1203.0" width="4.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="118.4" y="1214.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.23%)</title><rect x="117.1" y="1187.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="120.1" y="1198.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.06%)</title><rect x="119.8" y="1203.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="122.8" y="1214.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (5 samples, 0.14%)</title><rect x="120.5" y="1203.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="123.5" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,763 samples, 79.10%)</title><rect x="122.2" y="1235.0" width="933.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.2" y="1246.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,757 samples, 78.93%)</title><rect x="124.2" y="1219.0" width="931.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="127.2" y="1230.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,563 samples, 73.38%)</title><rect x="124.9" y="1203.0" width="865.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="127.9" y="1214.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,513 samples, 71.94%)</title><rect x="130.6" y="1187.0" width="848.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.6" y="1198.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,512 samples, 71.92%)</title><rect x="130.9" y="1171.0" width="848.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.9" y="1182.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,497 samples, 71.49%)</title><rect x="130.9" y="1155.0" width="843.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.9" y="1166.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,144 samples, 32.75%)</title><rect x="131.3" y="1139.0" width="386.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.3" y="1150.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,129 samples, 32.32%)</title><rect x="135.0" y="1123.0" width="381.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="138.0" y="1134.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 0.74%)</title><rect x="135.0" y="1107.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.0" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="137.7" y="1091.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="140.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.43%)</title><rect x="138.7" y="1091.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.06%)</title><rect x="138.7" y="1075.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.7" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.17%)</title><rect x="139.4" y="1075.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.09%)</title><rect x="140.1" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.09%)</title><rect x="140.1" y="1043.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="141.1" y="1059.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="141.1" y="1043.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.20%)</title><rect x="141.4" y="1075.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.4" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.20%)</title><rect x="141.4" y="1059.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="142.8" y="1043.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.06%)</title><rect x="142.8" y="1027.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.8" y="1038.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.03%)</title><rect x="143.4" y="1043.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.4" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,103 samples, 31.58%)</title><rect x="143.8" y="1107.0" width="372.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.8" y="1118.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,103 samples, 31.58%)</title><rect x="143.8" y="1091.0" width="372.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.8" y="1102.0">one/nio/net/Session.write</text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="144.5" y="1075.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="147.5" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,094 samples, 31.32%)</title><rect x="144.8" y="1075.0" width="369.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.8" y="1086.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,092 samples, 31.26%)</title><rect x="145.5" y="1059.0" width="368.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.5" y="1070.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>.annobin_send.c (1,061 samples, 30.38%)</title><rect x="146.8" y="1043.0" width="358.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="149.8" y="1054.0">.annobin_send.c</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.23%)</title><rect x="157.3" y="1027.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="160.3" y="1038.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,022 samples, 29.26%)</title><rect x="160.0" y="1027.0" width="345.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="163.0" y="1038.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (1,022 samples, 29.26%)</title><rect x="160.0" y="1011.0" width="345.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="163.0" y="1022.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,005 samples, 28.77%)</title><rect x="165.4" y="995.0" width="339.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="168.4" y="1006.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,003 samples, 28.71%)</title><rect x="166.1" y="979.0" width="338.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="169.1" y="990.0">__sys_sendto</text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="167.1" y="963.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="170.1" y="974.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.06%)</title><rect x="167.4" y="963.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="170.4" y="974.0"></text>
</g>
<g>
<title>sock_sendmsg (989 samples, 28.31%)</title><rect x="168.1" y="963.0" width="334.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="171.1" y="974.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (14 samples, 0.40%)</title><rect x="168.4" y="947.0" width="4.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="171.4" y="958.0"></text>
</g>
<g>
<title>sock_has_perm (14 samples, 0.40%)</title><rect x="168.4" y="931.0" width="4.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="171.4" y="942.0"></text>
</g>
<g>
<title>avc_has_perm (6 samples, 0.17%)</title><rect x="171.1" y="915.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="174.1" y="926.0"></text>
</g>
<g>
<title>tcp_sendmsg (974 samples, 27.88%)</title><rect x="173.2" y="947.0" width="329.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="176.2" y="958.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="173.2" y="931.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="176.2" y="942.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.11%)</title><rect x="173.8" y="931.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="176.8" y="942.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.06%)</title><rect x="173.8" y="915.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="176.8" y="926.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.06%)</title><rect x="174.5" y="915.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="177.5" y="926.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.17%)</title><rect x="175.2" y="931.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="178.2" y="942.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="175.5" y="915.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="178.5" y="926.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.11%)</title><rect x="175.9" y="915.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="178.9" y="926.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (962 samples, 27.54%)</title><rect x="177.2" y="931.0" width="325.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="180.2" y="942.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (7 samples, 0.20%)</title><rect x="179.2" y="915.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="182.2" y="926.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.09%)</title><rect x="180.6" y="899.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="183.6" y="910.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (892 samples, 25.54%)</title><rect x="181.6" y="915.0" width="301.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="184.6" y="926.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (891 samples, 25.51%)</title><rect x="181.9" y="899.0" width="301.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="184.9" y="910.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (869 samples, 24.88%)</title><rect x="184.3" y="883.0" width="293.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="187.3" y="894.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (843 samples, 24.13%)</title><rect x="186.3" y="867.0" width="284.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="189.3" y="878.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.09%)</title><rect x="187.7" y="851.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="190.7" y="862.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.06%)</title><rect x="188.0" y="835.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="191.0" y="846.0"></text>
</g>
<g>
<title>ip_local_out (155 samples, 4.44%)</title><rect x="188.7" y="851.0" width="52.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="191.7" y="862.0">ip_lo..</text>
</g>
<g>
<title>__ip_local_out (154 samples, 4.41%)</title><rect x="189.0" y="835.0" width="52.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="192.0" y="846.0">__ip_..</text>
</g>
<g>
<title>ip_send_check (3 samples, 0.09%)</title><rect x="189.4" y="819.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="192.4" y="830.0"></text>
</g>
<g>
<title>nf_hook_slow (150 samples, 4.29%)</title><rect x="190.4" y="819.0" width="50.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="193.4" y="830.0">nf_ho..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (34 samples, 0.97%)</title><rect x="191.7" y="803.0" width="11.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="194.7" y="814.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (3 samples, 0.09%)</title><rect x="203.2" y="803.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="206.2" y="814.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (17 samples, 0.49%)</title><rect x="204.2" y="803.0" width="5.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="207.2" y="814.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (11 samples, 0.31%)</title><rect x="206.3" y="787.0" width="3.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="209.3" y="798.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (6 samples, 0.17%)</title><rect x="210.0" y="803.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="213.0" y="814.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (4 samples, 0.11%)</title><rect x="212.0" y="803.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="215.0" y="814.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (6 samples, 0.17%)</title><rect x="213.4" y="803.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="216.4" y="814.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (7 samples, 0.20%)</title><rect x="215.4" y="803.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="218.4" y="814.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (59 samples, 1.69%)</title><rect x="217.8" y="803.0" width="19.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="220.8" y="814.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (10 samples, 0.29%)</title><rect x="219.8" y="787.0" width="3.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="222.8" y="798.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (4 samples, 0.11%)</title><rect x="223.2" y="787.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="226.2" y="798.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (7 samples, 0.20%)</title><rect x="224.5" y="787.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="227.5" y="798.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (24 samples, 0.69%)</title><rect x="226.9" y="787.0" width="8.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="229.9" y="798.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct	[nf_conntrack] (2 samples, 0.06%)</title><rect x="232.3" y="771.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="235.3" y="782.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="233.0" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="236.0" y="782.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (5 samples, 0.14%)</title><rect x="233.3" y="771.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="236.3" y="782.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (8 samples, 0.23%)</title><rect x="235.0" y="787.0" width="2.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="238.0" y="798.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (6 samples, 0.17%)</title><rect x="237.7" y="803.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="240.7" y="814.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.06%)</title><rect x="238.0" y="787.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="241.0" y="798.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (2 samples, 0.06%)</title><rect x="238.7" y="787.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="241.7" y="798.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (1 samples, 0.03%)</title><rect x="239.4" y="787.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="242.4" y="798.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4 samples, 0.11%)</title><rect x="239.7" y="803.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="242.7" y="814.0"></text>
</g>
<g>
<title>netlbl_enabled (1 samples, 0.03%)</title><rect x="240.7" y="787.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="243.7" y="798.0"></text>
</g>
<g>
<title>ip_output (681 samples, 19.50%)</title><rect x="241.1" y="851.0" width="230.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="244.1" y="862.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (625 samples, 17.89%)</title><rect x="242.8" y="835.0" width="211.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="245.8" y="846.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (62 samples, 1.77%)</title><rect x="247.8" y="819.0" width="21.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="250.8" y="830.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (43 samples, 1.23%)</title><rect x="252.9" y="803.0" width="14.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="255.9" y="814.0"></text>
</g>
<g>
<title>loopback_xmit (40 samples, 1.15%)</title><rect x="253.9" y="787.0" width="13.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="256.9" y="798.0"></text>
</g>
<g>
<title>eth_type_trans (7 samples, 0.20%)</title><rect x="255.6" y="771.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="258.6" y="782.0"></text>
</g>
<g>
<title>netif_rx (19 samples, 0.54%)</title><rect x="258.0" y="771.0" width="6.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="261.0" y="782.0"></text>
</g>
<g>
<title>netif_rx_internal (19 samples, 0.54%)</title><rect x="258.0" y="755.0" width="6.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="261.0" y="766.0"></text>
</g>
<g>
<title>enqueue_to_backlog (9 samples, 0.26%)</title><rect x="258.6" y="739.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="261.6" y="750.0"></text>
</g>
<g>
<title>ktime_get_with_offset (8 samples, 0.23%)</title><rect x="261.7" y="739.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="264.7" y="750.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="264.0" y="723.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="267.0" y="734.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.06%)</title><rect x="264.4" y="771.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="267.4" y="782.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (4 samples, 0.11%)</title><rect x="265.1" y="771.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="268.1" y="782.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.09%)</title><rect x="266.4" y="771.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="269.4" y="782.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.03%)</title><rect x="267.4" y="803.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="270.4" y="814.0"></text>
</g>
<g>
<title>validate_xmit_skb (3 samples, 0.09%)</title><rect x="267.8" y="803.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="270.8" y="814.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.03%)</title><rect x="267.8" y="787.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="270.8" y="798.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.03%)</title><rect x="267.8" y="771.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="270.8" y="782.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (2 samples, 0.06%)</title><rect x="268.1" y="787.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="271.1" y="798.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (547 samples, 15.66%)</title><rect x="268.8" y="819.0" width="184.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="271.8" y="830.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (545 samples, 15.60%)</title><rect x="269.4" y="803.0" width="184.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="272.4" y="814.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (541 samples, 15.49%)</title><rect x="270.8" y="787.0" width="182.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="273.8" y="798.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (541 samples, 15.49%)</title><rect x="270.8" y="771.0" width="182.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="273.8" y="782.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (530 samples, 15.17%)</title><rect x="274.5" y="755.0" width="179.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="277.5" y="766.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.06%)</title><rect x="276.5" y="739.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="279.5" y="750.0"></text>
</g>
<g>
<title>__list_del_entry_valid (3 samples, 0.09%)</title><rect x="277.2" y="739.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="280.2" y="750.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="278.2" y="739.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="281.2" y="750.0"></text>
</g>
<g>
<title>process_backlog (518 samples, 14.83%)</title><rect x="278.6" y="739.0" width="175.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="281.6" y="750.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb_one_core (504 samples, 14.43%)</title><rect x="283.3" y="723.0" width="170.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="286.3" y="734.0">__netif_receive_skb_on..</text>
</g>
<g>
<title>__netif_receive_skb_core (17 samples, 0.49%)</title><rect x="284.0" y="707.0" width="5.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="287.0" y="718.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="289.7" y="707.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="292.7" y="718.0"></text>
</g>
<g>
<title>ip_rcv (484 samples, 13.86%)</title><rect x="290.1" y="707.0" width="163.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="293.1" y="718.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (383 samples, 10.96%)</title><rect x="291.4" y="691.0" width="129.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="294.4" y="702.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (325 samples, 9.30%)</title><rect x="291.7" y="675.0" width="109.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="294.7" y="686.0">ip_local_deli..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (324 samples, 9.28%)</title><rect x="292.1" y="659.0" width="109.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="295.1" y="670.0">ip_protocol_d..</text>
</g>
<g>
<title>raw_local_deliver (4 samples, 0.11%)</title><rect x="292.8" y="643.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="295.8" y="654.0"></text>
</g>
<g>
<title>tcp_v4_rcv (318 samples, 9.10%)</title><rect x="294.1" y="643.0" width="107.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="297.1" y="654.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (14 samples, 0.40%)</title><rect x="298.5" y="627.0" width="4.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="301.5" y="638.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="302.9" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="305.9" y="622.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.06%)</title><rect x="303.2" y="627.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="306.2" y="638.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.06%)</title><rect x="303.2" y="611.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="306.2" y="622.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (2 samples, 0.06%)</title><rect x="303.2" y="595.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="306.2" y="606.0"></text>
</g>
<g>
<title>sock_put (3 samples, 0.09%)</title><rect x="303.9" y="627.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="306.9" y="638.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (284 samples, 8.13%)</title><rect x="304.9" y="627.0" width="96.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="307.9" y="638.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="304.9" y="611.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="307.9" y="622.0"></text>
</g>
<g>
<title>tcp_rcv_established (283 samples, 8.10%)</title><rect x="305.3" y="611.0" width="95.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="308.3" y="622.0">tcp_rcv_est..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.03%)</title><rect x="307.6" y="595.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="310.6" y="606.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.17%)</title><rect x="308.0" y="595.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="311.0" y="606.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.17%)</title><rect x="308.0" y="579.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="311.0" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.11%)</title><rect x="308.3" y="563.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="311.3" y="574.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="309.6" y="563.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="312.6" y="574.0"></text>
</g>
<g>
<title>tcp_ack (71 samples, 2.03%)</title><rect x="310.0" y="595.0" width="24.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="313.0" y="606.0">t..</text>
</g>
<g>
<title>__kfree_skb (15 samples, 0.43%)</title><rect x="315.7" y="579.0" width="5.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="318.7" y="590.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.14%)</title><rect x="315.7" y="563.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="318.7" y="574.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="317.4" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="320.4" y="574.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.03%)</title><rect x="317.8" y="563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="320.8" y="574.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="317.8" y="547.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="320.8" y="558.0"></text>
</g>
<g>
<title>skb_release_data (8 samples, 0.23%)</title><rect x="318.1" y="563.0" width="2.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="321.1" y="574.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="320.8" y="579.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="323.8" y="590.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.06%)</title><rect x="321.1" y="579.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="324.1" y="590.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.09%)</title><rect x="321.8" y="579.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="324.8" y="590.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="322.8" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="325.8" y="590.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.06%)</title><rect x="323.2" y="579.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="326.2" y="590.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.03%)</title><rect x="323.5" y="563.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="326.5" y="574.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.03%)</title><rect x="323.8" y="579.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="326.8" y="590.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (9 samples, 0.26%)</title><rect x="324.2" y="579.0" width="3.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="327.2" y="590.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="326.2" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="329.2" y="574.0"></text>
</g>
<g>
<title>jiffies_to_usecs (2 samples, 0.06%)</title><rect x="326.5" y="563.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="329.5" y="574.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="327.2" y="579.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="330.2" y="590.0"></text>
</g>
<g>
<title>tcp_newly_delivered (4 samples, 0.11%)</title><rect x="327.5" y="579.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="330.5" y="590.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.03%)</title><rect x="328.9" y="579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="331.9" y="590.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.03%)</title><rect x="329.2" y="579.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="332.2" y="590.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.03%)</title><rect x="329.6" y="579.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="332.6" y="590.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (8 samples, 0.23%)</title><rect x="329.9" y="579.0" width="2.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="332.9" y="590.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (4 samples, 0.11%)</title><rect x="332.6" y="579.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="335.6" y="590.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.06%)</title><rect x="334.0" y="595.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="337.0" y="606.0"></text>
</g>
<g>
<title>tcp_data_queue (184 samples, 5.27%)</title><rect x="334.6" y="595.0" width="62.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="337.6" y="606.0">tcp_da..</text>
</g>
<g>
<title>dst_release (6 samples, 0.17%)</title><rect x="337.7" y="579.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="340.7" y="590.0"></text>
</g>
<g>
<title>sock_def_readable (160 samples, 4.58%)</title><rect x="339.7" y="579.0" width="54.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="342.7" y="590.0">sock_..</text>
</g>
<g>
<title>__wake_up_common_lock (155 samples, 4.44%)</title><rect x="341.4" y="563.0" width="52.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="344.4" y="574.0">__wak..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (154 samples, 4.41%)</title><rect x="341.7" y="547.0" width="52.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="344.7" y="558.0">_raw_..</text>
</g>
<g>
<title>tcp_event_data_recv (8 samples, 0.23%)</title><rect x="393.8" y="579.0" width="2.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="396.8" y="590.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.03%)</title><rect x="396.5" y="579.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="399.5" y="590.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (12 samples, 0.34%)</title><rect x="396.8" y="595.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="399.8" y="606.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.03%)</title><rect x="400.5" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="403.5" y="590.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="400.5" y="563.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="403.5" y="574.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.03%)</title><rect x="400.9" y="627.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="403.9" y="638.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.03%)</title><rect x="401.2" y="627.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="404.2" y="638.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.03%)</title><rect x="401.2" y="611.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="404.2" y="622.0"></text>
</g>
<g>
<title>nf_hook_slow (57 samples, 1.63%)</title><rect x="401.5" y="675.0" width="19.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="404.5" y="686.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (41 samples, 1.17%)</title><rect x="402.9" y="659.0" width="13.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="405.9" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="413.0" y="643.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="416.0" y="654.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (2 samples, 0.06%)</title><rect x="413.7" y="643.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="416.7" y="654.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (7 samples, 0.20%)</title><rect x="414.4" y="643.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="417.4" y="654.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (2 samples, 0.06%)</title><rect x="416.7" y="659.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="419.7" y="670.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (2 samples, 0.06%)</title><rect x="417.4" y="659.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="420.4" y="670.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (3 samples, 0.09%)</title><rect x="418.1" y="659.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="421.1" y="670.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (5 samples, 0.14%)</title><rect x="419.1" y="659.0" width="1.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="422.1" y="670.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (5 samples, 0.14%)</title><rect x="419.1" y="643.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="422.1" y="654.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.11%)</title><rect x="420.8" y="691.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="423.8" y="702.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.06%)</title><rect x="422.1" y="691.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="425.1" y="702.0"></text>
</g>
<g>
<title>nf_hook_slow (91 samples, 2.61%)</title><rect x="422.8" y="691.0" width="30.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="425.8" y="702.0">nf..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (64 samples, 1.83%)</title><rect x="424.5" y="675.0" width="21.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="427.5" y="686.0">i..</text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.09%)</title><rect x="445.1" y="659.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="448.1" y="670.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.09%)</title><rect x="446.1" y="675.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="449.1" y="686.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (6 samples, 0.17%)</title><rect x="447.1" y="675.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="450.1" y="686.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (2 samples, 0.06%)</title><rect x="449.2" y="675.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="452.2" y="686.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (5 samples, 0.14%)</title><rect x="449.8" y="675.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="452.8" y="686.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (6 samples, 0.17%)</title><rect x="451.5" y="675.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="454.5" y="686.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.06%)</title><rect x="452.9" y="659.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="455.9" y="670.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.03%)</title><rect x="453.6" y="819.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="456.6" y="830.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.11%)</title><rect x="453.9" y="835.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="456.9" y="846.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.06%)</title><rect x="454.6" y="819.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="457.6" y="830.0"></text>
</g>
<g>
<title>nf_hook_slow (47 samples, 1.35%)</title><rect x="455.2" y="835.0" width="15.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="458.2" y="846.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (15 samples, 0.43%)</title><rect x="456.9" y="819.0" width="5.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="459.9" y="830.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (1 samples, 0.03%)</title><rect x="462.0" y="819.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="465.0" y="830.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (6 samples, 0.17%)</title><rect x="462.3" y="819.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="465.3" y="830.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (5 samples, 0.14%)</title><rect x="464.4" y="819.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="467.4" y="830.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (4 samples, 0.11%)</title><rect x="464.7" y="803.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="467.7" y="814.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (7 samples, 0.20%)</title><rect x="466.1" y="819.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="469.1" y="830.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (2 samples, 0.06%)</title><rect x="467.4" y="803.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="470.4" y="814.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (1 samples, 0.03%)</title><rect x="468.1" y="803.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="471.1" y="814.0"></text>
</g>
<g>
<title>selinux_ip_postroute (6 samples, 0.17%)</title><rect x="468.4" y="819.0" width="2.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="471.4" y="830.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (2 samples, 0.06%)</title><rect x="470.4" y="819.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="473.4" y="830.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.11%)</title><rect x="471.1" y="867.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="474.1" y="878.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="472.1" y="851.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="475.1" y="862.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.06%)</title><rect x="472.5" y="867.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="475.5" y="878.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="473.1" y="867.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="476.1" y="878.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.11%)</title><rect x="473.5" y="867.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="476.5" y="878.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.09%)</title><rect x="474.8" y="867.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="477.8" y="878.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.03%)</title><rect x="475.9" y="867.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="478.9" y="878.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.03%)</title><rect x="476.2" y="867.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="479.2" y="878.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="476.5" y="867.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="479.5" y="878.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.06%)</title><rect x="476.9" y="867.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="479.9" y="878.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.03%)</title><rect x="477.5" y="867.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="480.5" y="878.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.06%)</title><rect x="477.9" y="883.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="480.9" y="894.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="477.9" y="867.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="480.9" y="878.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (9 samples, 0.26%)</title><rect x="478.6" y="883.0" width="3.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="481.6" y="894.0"></text>
</g>
<g>
<title>rb_insert_color (2 samples, 0.06%)</title><rect x="479.6" y="867.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="482.6" y="878.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.11%)</title><rect x="480.2" y="867.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="483.2" y="878.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.09%)</title><rect x="480.6" y="851.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="483.6" y="862.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="481.3" y="835.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="484.3" y="846.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.11%)</title><rect x="481.6" y="883.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="484.6" y="894.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="482.3" y="867.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="485.3" y="878.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="482.6" y="867.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="485.6" y="878.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.03%)</title><rect x="482.9" y="915.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="485.9" y="926.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="482.9" y="899.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="485.9" y="910.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (31 samples, 0.89%)</title><rect x="483.3" y="915.0" width="10.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="486.3" y="926.0"></text>
</g>
<g>
<title>__alloc_skb (30 samples, 0.86%)</title><rect x="483.6" y="899.0" width="10.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="486.6" y="910.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (7 samples, 0.20%)</title><rect x="485.0" y="883.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="488.0" y="894.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (7 samples, 0.20%)</title><rect x="485.0" y="867.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="488.0" y="878.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="487.0" y="851.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="490.0" y="862.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (15 samples, 0.43%)</title><rect x="487.3" y="883.0" width="5.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="490.3" y="894.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.09%)</title><rect x="491.1" y="867.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="494.1" y="878.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="492.1" y="867.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="495.1" y="878.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="492.1" y="851.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="495.1" y="862.0"></text>
</g>
<g>
<title>ksize (4 samples, 0.11%)</title><rect x="492.4" y="883.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="495.4" y="894.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.06%)</title><rect x="493.8" y="915.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="496.8" y="926.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.03%)</title><rect x="494.1" y="899.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="497.1" y="910.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.03%)</title><rect x="494.4" y="915.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="497.4" y="926.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.03%)</title><rect x="494.8" y="915.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="497.8" y="926.0"></text>
</g>
<g>
<title>tcp_send_mss (18 samples, 0.52%)</title><rect x="495.1" y="915.0" width="6.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="498.1" y="926.0"></text>
</g>
<g>
<title>tcp_current_mss (18 samples, 0.52%)</title><rect x="495.1" y="899.0" width="6.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="498.1" y="910.0"></text>
</g>
<g>
<title>ipv4_mtu (12 samples, 0.34%)</title><rect x="496.5" y="883.0" width="4.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="499.5" y="894.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.06%)</title><rect x="500.5" y="883.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="503.5" y="894.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="501.2" y="915.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="504.2" y="926.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.06%)</title><rect x="501.5" y="915.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="504.5" y="926.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.23%)</title><rect x="502.2" y="963.0" width="2.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="505.2" y="974.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.23%)</title><rect x="502.2" y="947.0" width="2.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="505.2" y="958.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.23%)</title><rect x="502.2" y="931.0" width="2.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="505.2" y="942.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="504.9" y="995.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="507.9" y="1006.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.09%)</title><rect x="505.2" y="1043.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="508.2" y="1054.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.60%)</title><rect x="506.3" y="1043.0" width="7.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="509.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.60%)</title><rect x="506.3" y="1027.0" width="7.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="509.3" y="1038.0"></text>
</g>
<g>
<title>.annobin_send.c (1 samples, 0.03%)</title><rect x="506.3" y="1011.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="509.3" y="1022.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (18 samples, 0.52%)</title><rect x="506.6" y="1011.0" width="6.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="509.6" y="1022.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="507.6" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="510.6" y="1006.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="507.9" y="995.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="510.9" y="1006.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.17%)</title><rect x="508.3" y="995.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="511.3" y="1006.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.20%)</title><rect x="510.3" y="995.0" width="2.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="513.3" y="1006.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="511.3" y="979.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="514.3" y="990.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.09%)</title><rect x="511.7" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="514.7" y="990.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.06%)</title><rect x="512.7" y="1011.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="515.7" y="1022.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.09%)</title><rect x="513.3" y="1043.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="516.3" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.17%)</title><rect x="514.4" y="1075.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="517.4" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="514.7" y="1059.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="517.7" y="1070.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="515.0" y="1059.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="518.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.11%)</title><rect x="515.0" y="1043.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="518.0" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.06%)</title><rect x="516.4" y="1123.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="516.7" y="1107.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="516.7" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.06%)</title><rect x="517.1" y="1123.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="520.1" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (15 samples, 0.43%)</title><rect x="517.7" y="1139.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.09%)</title><rect x="517.7" y="1123.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="520.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.09%)</title><rect x="517.7" y="1107.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.7" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="518.4" y="1091.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="521.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.14%)</title><rect x="518.8" y="1123.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="521.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.14%)</title><rect x="518.8" y="1107.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="521.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.11%)</title><rect x="520.4" y="1123.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="523.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.11%)</title><rect x="520.4" y="1107.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="521.8" y="1123.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="521.8" y="1107.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="524.8" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="522.1" y="1123.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="525.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="522.5" y="1107.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="525.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="522.5" y="1091.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="522.5" y="1075.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="525.5" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (1,337 samples, 38.28%)</title><rect x="522.8" y="1139.0" width="451.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.8" y="1150.0">ru/mail/polis/service/shakhmin/SimpleHttpServer.entity</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.03%)</title><rect x="522.8" y="1123.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="525.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="523.1" y="1123.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="523.1" y="1107.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="526.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="523.1" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="523.1" y="1075.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.1" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.03%)</title><rect x="523.5" y="1123.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="523.5" y="1107.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.5" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="523.5" y="1091.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="523.5" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.5" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="523.5" y="1059.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="526.5" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="523.5" y="1043.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.03%)</title><rect x="523.5" y="1027.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="526.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.31%)</title><rect x="523.8" y="1123.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.8" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.31%)</title><rect x="523.8" y="1107.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="526.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.31%)</title><rect x="523.8" y="1091.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="526.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.31%)</title><rect x="523.8" y="1075.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="526.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.31%)</title><rect x="523.8" y="1059.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="526.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.06%)</title><rect x="525.8" y="1043.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="528.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.06%)</title><rect x="525.8" y="1027.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="525.8" y="1011.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="526.2" y="1011.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="529.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="526.5" y="1043.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="529.5" y="1054.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="526.9" y="1043.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="529.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="527.5" y="1123.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="527.5" y="1107.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="527.5" y="1091.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="527.5" y="1075.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.5" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="527.5" y="1059.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="527.5" y="1043.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="530.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="527.5" y="1027.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="530.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="527.5" y="1011.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="527.5" y="995.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="527.5" y="979.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.5" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="527.5" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.5" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.03%)</title><rect x="527.9" y="1123.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.9" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="527.9" y="1107.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.9" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="527.9" y="1091.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="530.9" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,311 samples, 37.53%)</title><rect x="528.2" y="1123.0" width="442.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.2" y="1134.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (51 samples, 1.46%)</title><rect x="528.2" y="1107.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.2" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (51 samples, 1.46%)</title><rect x="528.2" y="1091.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="531.2" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (51 samples, 1.46%)</title><rect x="528.2" y="1075.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="531.2" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (51 samples, 1.46%)</title><rect x="528.2" y="1059.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="531.2" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (49 samples, 1.40%)</title><rect x="528.6" y="1043.0" width="16.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="531.6" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (32 samples, 0.92%)</title><rect x="529.9" y="1027.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.9" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 0.09%)</title><rect x="529.9" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.9" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (3 samples, 0.09%)</title><rect x="529.9" y="995.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="532.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="529.9" y="979.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="532.9" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.hasNext (2 samples, 0.06%)</title><rect x="530.2" y="979.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.2" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.03%)</title><rect x="530.9" y="1011.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.9" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (1 samples, 0.03%)</title><rect x="530.9" y="995.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.9" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (1 samples, 0.03%)</title><rect x="530.9" y="979.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.9" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (1 samples, 0.03%)</title><rect x="530.9" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="533.9" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (1 samples, 0.03%)</title><rect x="530.9" y="947.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.9" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="530.9" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.9" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="530.9" y="915.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="533.9" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="530.9" y="899.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.9" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="530.9" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.9" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="530.9" y="867.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="533.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="530.9" y="851.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="533.9" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="530.9" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.9" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="530.9" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.9" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="530.9" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="533.9" y="814.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (10 samples, 0.29%)</title><rect x="531.3" y="1011.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.3" y="1022.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (10 samples, 0.29%)</title><rect x="531.3" y="995.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.3" y="1006.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (10 samples, 0.29%)</title><rect x="531.3" y="979.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="534.3" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.29%)</title><rect x="531.3" y="963.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.3" y="974.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.29%)</title><rect x="531.3" y="947.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.3" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/641956499.compare (9 samples, 0.26%)</title><rect x="531.6" y="931.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.6" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (9 samples, 0.26%)</title><rect x="531.6" y="915.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.6" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (9 samples, 0.26%)</title><rect x="531.6" y="899.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.6" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.26%)</title><rect x="531.6" y="883.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.6" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (2 samples, 0.06%)</title><rect x="531.6" y="867.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="534.6" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.06%)</title><rect x="531.6" y="851.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (2 samples, 0.06%)</title><rect x="531.6" y="835.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="534.6" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.06%)</title><rect x="531.6" y="819.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.6" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="531.6" y="803.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="534.6" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="531.6" y="787.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.6" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="531.9" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.9" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="531.9" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.9" y="766.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (7 samples, 0.20%)</title><rect x="532.3" y="867.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="535.3" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.20%)</title><rect x="532.3" y="851.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.3" y="862.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (7 samples, 0.20%)</title><rect x="532.3" y="835.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.3" y="846.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.20%)</title><rect x="532.3" y="819.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="535.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.14%)</title><rect x="532.3" y="803.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.3" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.14%)</title><rect x="532.3" y="787.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="535.3" y="798.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.09%)</title><rect x="532.6" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.6" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.03%)</title><rect x="533.6" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="536.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (2 samples, 0.06%)</title><rect x="534.0" y="803.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.06%)</title><rect x="534.0" y="787.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.0" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="534.0" y="771.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.0" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="534.0" y="755.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="537.0" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="534.0" y="739.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="537.0" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="534.0" y="723.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="537.0" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="534.0" y="707.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="537.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="534.0" y="691.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="537.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="534.0" y="675.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="537.0" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (18 samples, 0.52%)</title><rect x="534.6" y="1011.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="537.6" y="1022.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (18 samples, 0.52%)</title><rect x="534.6" y="995.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.6" y="1006.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.03%)</title><rect x="534.6" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.6" y="990.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (17 samples, 0.49%)</title><rect x="535.0" y="979.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.0" y="990.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (17 samples, 0.49%)</title><rect x="535.0" y="963.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.0" y="974.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.49%)</title><rect x="535.0" y="947.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.0" y="958.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.49%)</title><rect x="535.0" y="931.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.0" y="942.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (14 samples, 0.40%)</title><rect x="535.3" y="915.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="538.3" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (4 samples, 0.11%)</title><rect x="535.3" y="899.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.3" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.11%)</title><rect x="535.3" y="883.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="538.3" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.11%)</title><rect x="535.3" y="867.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.3" y="878.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (4 samples, 0.11%)</title><rect x="535.3" y="851.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="538.3" y="862.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="536.3" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="539.3" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (10 samples, 0.29%)</title><rect x="536.7" y="899.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="539.7" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (10 samples, 0.29%)</title><rect x="536.7" y="883.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.7" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.hasNext (1 samples, 0.03%)</title><rect x="537.0" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.0" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (8 samples, 0.23%)</title><rect x="537.3" y="867.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.3" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (4 samples, 0.11%)</title><rect x="537.3" y="851.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.3" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (2 samples, 0.06%)</title><rect x="537.3" y="835.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.3" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.03%)</title><rect x="537.7" y="819.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.7" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="538.0" y="835.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="538.0" y="819.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="541.0" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="538.0" y="803.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="541.0" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="538.0" y="787.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="541.0" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="538.0" y="771.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.0" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="538.0" y="755.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="541.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="538.0" y="739.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="541.0" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="538.0" y="723.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.0" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="538.3" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.3" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="538.3" y="691.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="541.3" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="538.3" y="675.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.3" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="538.3" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="541.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.06%)</title><rect x="538.7" y="851.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="538.7" y="835.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="541.7" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="538.7" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="541.7" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="538.7" y="803.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="541.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.03%)</title><rect x="538.7" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.7" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (1 samples, 0.03%)</title><rect x="539.0" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (1 samples, 0.03%)</title><rect x="539.0" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (2 samples, 0.06%)</title><rect x="539.4" y="851.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.4" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="539.4" y="835.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="542.4" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="539.4" y="819.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.4" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="539.4" y="803.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.4" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="539.4" y="787.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="542.4" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="539.4" y="771.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="539.4" y="755.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="542.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="539.4" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.4" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="539.4" y="723.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="542.4" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="539.4" y="707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.4" y="718.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="539.4" y="691.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="539.4" y="675.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.4" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="539.4" y="659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.4" y="670.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="539.7" y="707.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="542.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/641956499.compare (2 samples, 0.06%)</title><rect x="540.0" y="915.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.0" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (2 samples, 0.06%)</title><rect x="540.0" y="899.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.0" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (2 samples, 0.06%)</title><rect x="540.0" y="883.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.0" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.06%)</title><rect x="540.0" y="867.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.0" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (2 samples, 0.06%)</title><rect x="540.0" y="851.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.0" y="862.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.06%)</title><rect x="540.0" y="835.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.0" y="846.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (2 samples, 0.06%)</title><rect x="540.0" y="819.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.0" y="830.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.06%)</title><rect x="540.0" y="803.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.0" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="540.0" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="540.0" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="543.0" y="782.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="540.0" y="755.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.0" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="540.0" y="739.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="543.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (1 samples, 0.03%)</title><rect x="540.4" y="787.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="543.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (1 samples, 0.03%)</title><rect x="540.4" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="543.4" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="540.4" y="755.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.4" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="540.4" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="543.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="540.4" y="723.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="543.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="540.4" y="707.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.4" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="540.4" y="691.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="543.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.09%)</title><rect x="540.7" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="543.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.09%)</title><rect x="540.7" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="541.4" y="995.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="544.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="541.4" y="979.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="544.4" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$54/214794876.apply (10 samples, 0.29%)</title><rect x="541.7" y="1027.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.7" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (10 samples, 0.29%)</title><rect x="541.7" y="1011.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.17%)</title><rect x="542.1" y="995.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="545.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.14%)</title><rect x="542.4" y="979.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.4" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.14%)</title><rect x="542.4" y="963.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.4" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="542.4" y="947.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="545.4" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.address (1 samples, 0.03%)</title><rect x="542.4" y="931.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.4" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="542.7" y="931.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="545.7" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="542.7" y="915.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.7" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="542.7" y="899.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="545.7" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="542.7" y="883.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.7" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="543.8" y="867.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.8" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.09%)</title><rect x="544.1" y="995.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="547.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="544.4" y="979.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="547.4" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="544.4" y="963.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="547.4" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="544.4" y="947.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.4" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.4" y="931.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.4" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="544.8" y="931.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.8" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$55/1637319465.apply (1 samples, 0.03%)</title><rect x="545.1" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="548.1" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$rowsIterator$1 (1 samples, 0.03%)</title><rect x="545.1" y="1027.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.1" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (7 samples, 0.20%)</title><rect x="545.4" y="1107.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.4" y="1118.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.03%)</title><rect x="545.4" y="1091.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.4" y="1102.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.03%)</title><rect x="545.4" y="1075.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.4" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.03%)</title><rect x="545.4" y="1059.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="548.4" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.03%)</title><rect x="545.4" y="1043.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="548.4" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 0.17%)</title><rect x="545.8" y="1091.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="548.8" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$56/1243836598.apply (6 samples, 0.17%)</title><rect x="545.8" y="1075.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="548.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (6 samples, 0.17%)</title><rect x="545.8" y="1059.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.8" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (1 samples, 0.03%)</title><rect x="545.8" y="1043.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="548.8" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.&lt;init&gt; (1 samples, 0.03%)</title><rect x="545.8" y="1027.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="548.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="545.8" y="1011.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="548.8" y="1022.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.03%)</title><rect x="545.8" y="995.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="548.8" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (1 samples, 0.03%)</title><rect x="546.1" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="549.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="546.1" y="1027.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="549.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="546.1" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="546.1" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="549.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="546.1" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="549.1" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (4 samples, 0.11%)</title><rect x="546.5" y="1043.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="549.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="546.5" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="546.8" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="549.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.03%)</title><rect x="546.8" y="995.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="549.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="547.1" y="1027.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="550.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (6 samples, 0.17%)</title><rect x="547.8" y="1107.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="550.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.17%)</title><rect x="547.8" y="1091.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="550.8" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.06%)</title><rect x="548.8" y="1075.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.8" y="1086.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="549.5" y="1075.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="552.5" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.06%)</title><rect x="549.8" y="1107.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="549.8" y="1091.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="549.8" y="1075.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="552.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="549.8" y="1059.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="549.8" y="1043.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="550.2" y="1027.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.2" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (1,245 samples, 35.64%)</title><rect x="550.5" y="1107.0" width="420.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.5" y="1118.0">ru/mail/polis/dao/shakhmin/LSMDao.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (1,245 samples, 35.64%)</title><rect x="550.5" y="1091.0" width="420.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.5" y="1102.0">ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (152 samples, 4.35%)</title><rect x="550.8" y="1075.0" width="51.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.8" y="1086.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (152 samples, 4.35%)</title><rect x="550.8" y="1059.0" width="51.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.8" y="1070.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.06%)</title><rect x="552.5" y="1043.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.5" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.06%)</title><rect x="553.2" y="1043.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="556.2" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.03%)</title><rect x="553.9" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="556.9" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (2 samples, 0.06%)</title><rect x="554.2" y="1043.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.2" y="1054.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (140 samples, 4.01%)</title><rect x="554.9" y="1043.0" width="47.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.9" y="1054.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (140 samples, 4.01%)</title><rect x="554.9" y="1027.0" width="47.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.9" y="1038.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (3 samples, 0.09%)</title><rect x="554.9" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="555.6" y="995.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.6" y="1006.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (137 samples, 3.92%)</title><rect x="555.9" y="1011.0" width="46.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="558.9" y="1022.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (137 samples, 3.92%)</title><rect x="555.9" y="995.0" width="46.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="558.9" y="1006.0">java..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (136 samples, 3.89%)</title><rect x="556.3" y="979.0" width="45.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.3" y="990.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (135 samples, 3.86%)</title><rect x="556.6" y="963.0" width="45.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.6" y="974.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (99 samples, 2.83%)</title><rect x="557.3" y="947.0" width="33.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.3" y="958.0">co..</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (17 samples, 0.49%)</title><rect x="558.6" y="931.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.6" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (16 samples, 0.46%)</title><rect x="559.0" y="915.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="562.0" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (16 samples, 0.46%)</title><rect x="559.0" y="899.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.0" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (16 samples, 0.46%)</title><rect x="559.0" y="883.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.0" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="561.3" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="564.3" y="878.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (8 samples, 0.23%)</title><rect x="561.7" y="867.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="564.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (78 samples, 2.23%)</title><rect x="564.4" y="931.0" width="26.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="567.4" y="942.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (78 samples, 2.23%)</title><rect x="564.4" y="915.0" width="26.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="567.4" y="926.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (73 samples, 2.09%)</title><rect x="566.0" y="899.0" width="24.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.0" y="910.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (13 samples, 0.37%)</title><rect x="566.4" y="883.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.4" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 0.20%)</title><rect x="566.7" y="867.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="569.7" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 0.20%)</title><rect x="566.7" y="851.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.20%)</title><rect x="566.7" y="835.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.7" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="566.7" y="819.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.7" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="566.7" y="803.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="566.7" y="787.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="569.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="566.7" y="771.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="569.7" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="567.7" y="755.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="570.7" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="568.8" y="755.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="571.8" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.06%)</title><rect x="569.1" y="867.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.1" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="569.8" y="867.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.8" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="569.8" y="851.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.8" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="569.8" y="835.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.8" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.06%)</title><rect x="569.8" y="819.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="572.8" y="830.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="570.4" y="867.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="573.4" y="878.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="570.4" y="851.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="573.4" y="862.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="570.4" y="835.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="573.4" y="846.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="570.4" y="819.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="573.4" y="830.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="570.4" y="803.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="573.4" y="814.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.03%)</title><rect x="570.4" y="787.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="573.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (39 samples, 1.12%)</title><rect x="570.8" y="883.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (24 samples, 0.69%)</title><rect x="571.1" y="867.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="574.1" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (24 samples, 0.69%)</title><rect x="571.1" y="851.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="574.1" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (20 samples, 0.57%)</title><rect x="572.5" y="835.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.5" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.40%)</title><rect x="574.5" y="819.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="577.5" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (14 samples, 0.40%)</title><rect x="574.5" y="803.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="577.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.40%)</title><rect x="574.5" y="787.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="577.5" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.37%)</title><rect x="574.8" y="771.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="577.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.23%)</title><rect x="575.5" y="755.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.5" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.11%)</title><rect x="576.2" y="739.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="579.2" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="577.2" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="580.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="577.2" y="707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.2" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="577.2" y="691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="580.2" y="702.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="577.5" y="739.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="580.5" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="577.5" y="723.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="580.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="577.5" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="580.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="577.5" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="580.5" y="702.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="577.9" y="739.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="580.9" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.09%)</title><rect x="578.2" y="755.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="581.2" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6 samples, 0.17%)</title><rect x="579.2" y="867.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="582.2" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.17%)</title><rect x="579.2" y="851.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="582.2" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="579.2" y="835.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.2" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="579.2" y="819.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="582.2" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="579.2" y="803.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="582.2" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="579.2" y="787.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.2" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="579.9" y="771.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.9" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="580.6" y="755.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="583.6" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (5 samples, 0.14%)</title><rect x="581.3" y="867.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="584.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLong (1 samples, 0.03%)</title><rect x="582.6" y="851.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="585.6" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.09%)</title><rect x="582.9" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="585.9" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.09%)</title><rect x="582.9" y="851.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="585.9" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="583.3" y="835.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.3" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="583.6" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="586.6" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="583.6" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="586.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="583.6" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.6" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (5 samples, 0.14%)</title><rect x="584.0" y="883.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.0" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.14%)</title><rect x="584.0" y="867.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="587.0" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.14%)</title><rect x="584.0" y="851.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.0" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="584.0" y="835.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.0" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="584.0" y="819.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="584.0" y="803.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="587.0" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="584.0" y="787.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.0" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="584.0" y="771.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="587.0" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="585.0" y="755.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (15 samples, 0.43%)</title><rect x="585.6" y="883.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="588.6" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (9 samples, 0.26%)</title><rect x="585.6" y="867.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="588.6" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (9 samples, 0.26%)</title><rect x="585.6" y="851.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.6" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (9 samples, 0.26%)</title><rect x="585.6" y="835.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.6" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (9 samples, 0.26%)</title><rect x="585.6" y="819.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.6" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (9 samples, 0.26%)</title><rect x="585.6" y="803.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.26%)</title><rect x="585.6" y="787.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.6" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.23%)</title><rect x="586.0" y="771.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="589.0" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="586.7" y="755.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="589.7" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.11%)</title><rect x="587.3" y="755.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="590.3" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (6 samples, 0.17%)</title><rect x="588.7" y="867.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.7" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.17%)</title><rect x="588.7" y="851.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="591.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="588.7" y="835.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.7" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="588.7" y="819.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="591.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="588.7" y="803.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="591.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="588.7" y="787.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="591.7" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="588.7" y="771.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="591.7" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="589.7" y="755.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="592.7" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.06%)</title><rect x="590.0" y="755.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="593.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/641956499.compare (34 samples, 0.97%)</title><rect x="590.7" y="947.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.7" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (34 samples, 0.97%)</title><rect x="590.7" y="931.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.7" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (33 samples, 0.94%)</title><rect x="591.0" y="915.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.0" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.94%)</title><rect x="591.0" y="899.0" width="11.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="594.0" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (7 samples, 0.20%)</title><rect x="591.0" y="883.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.0" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 0.20%)</title><rect x="591.0" y="867.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.0" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (7 samples, 0.20%)</title><rect x="591.0" y="851.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="594.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (7 samples, 0.20%)</title><rect x="591.0" y="835.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="594.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.14%)</title><rect x="591.7" y="819.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.7" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.14%)</title><rect x="591.7" y="803.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.7" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.11%)</title><rect x="592.1" y="787.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="595.1" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="592.1" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="595.1" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="592.7" y="755.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.7" y="766.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (26 samples, 0.74%)</title><rect x="593.4" y="883.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="596.4" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (26 samples, 0.74%)</title><rect x="593.4" y="867.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.4" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (26 samples, 0.74%)</title><rect x="593.4" y="851.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.4" y="862.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (26 samples, 0.74%)</title><rect x="593.4" y="835.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="596.4" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.37%)</title><rect x="593.4" y="819.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="596.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.31%)</title><rect x="594.1" y="803.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="597.1" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="594.4" y="787.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="597.4" y="798.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.23%)</title><rect x="594.8" y="787.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.8" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.06%)</title><rect x="595.8" y="771.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="598.8" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.03%)</title><rect x="596.5" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="599.5" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="596.8" y="771.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="599.8" y="782.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="597.1" y="771.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="600.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.03%)</title><rect x="597.5" y="787.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="600.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (13 samples, 0.37%)</title><rect x="597.8" y="819.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="600.8" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (13 samples, 0.37%)</title><rect x="597.8" y="803.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.8" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.17%)</title><rect x="597.8" y="787.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="600.8" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.17%)</title><rect x="597.8" y="771.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="600.8" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.17%)</title><rect x="597.8" y="755.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="600.8" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="598.5" y="739.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="601.5" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="598.5" y="723.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="601.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="598.5" y="707.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="601.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="598.5" y="691.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="601.5" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="599.5" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="602.5" y="686.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="599.5" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="602.5" y="670.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="599.5" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="602.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="599.5" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="602.5" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="599.5" y="611.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="602.5" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.20%)</title><rect x="599.8" y="787.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="602.8" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (7 samples, 0.20%)</title><rect x="599.8" y="771.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="602.8" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="599.8" y="755.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="602.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="599.8" y="739.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.8" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="600.2" y="723.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.11%)</title><rect x="600.5" y="707.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="603.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.09%)</title><rect x="600.8" y="691.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="603.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="601.9" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.9" y="718.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="601.9" y="691.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="604.9" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (4 samples, 0.11%)</title><rect x="602.2" y="1075.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="605.2" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="603.5" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="606.5" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.09%)</title><rect x="603.9" y="1075.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="606.9" y="1086.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.03%)</title><rect x="603.9" y="1059.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="606.9" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.06%)</title><rect x="604.2" y="1059.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="607.2" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.06%)</title><rect x="604.2" y="1043.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.2" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.06%)</title><rect x="604.2" y="1027.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="607.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="604.6" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.6" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.17%)</title><rect x="604.9" y="1075.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="607.9" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (3 samples, 0.09%)</title><rect x="605.9" y="1059.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="608.9" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.06%)</title><rect x="605.9" y="1043.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="608.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="606.6" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.6" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="606.9" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="606.9" y="1059.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.9" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="606.9" y="1043.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.9" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="606.9" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.9" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="606.9" y="1011.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.9" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="606.9" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.9" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="606.9" y="979.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="609.9" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getByteBuffer (1 samples, 0.03%)</title><rect x="606.9" y="963.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="609.9" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.cachedInputStream (1 samples, 0.03%)</title><rect x="606.9" y="947.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.9" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader$1.getInputStream (1 samples, 0.03%)</title><rect x="606.9" y="931.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="609.9" y="942.0"></text>
</g>
<g>
<title>java/io/FileInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="606.9" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.9" y="926.0"></text>
</g>
<g>
<title>java/io/FileInputStream.open (1 samples, 0.03%)</title><rect x="606.9" y="899.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.9" y="910.0"></text>
</g>
<g>
<title>java/io/FileInputStream.open0 (1 samples, 0.03%)</title><rect x="606.9" y="883.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="606.9" y="867.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="609.9" y="878.0"></text>
</g>
<g>
<title>open (1 samples, 0.03%)</title><rect x="606.9" y="851.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="609.9" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="606.9" y="835.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="609.9" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="606.9" y="819.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="609.9" y="830.0"></text>
</g>
<g>
<title>do_sys_open (1 samples, 0.03%)</title><rect x="606.9" y="803.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="609.9" y="814.0"></text>
</g>
<g>
<title>do_filp_open (1 samples, 0.03%)</title><rect x="606.9" y="787.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="609.9" y="798.0"></text>
</g>
<g>
<title>path_openat (1 samples, 0.03%)</title><rect x="606.9" y="771.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="609.9" y="782.0"></text>
</g>
<g>
<title>do_dentry_open (1 samples, 0.03%)</title><rect x="606.9" y="755.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="609.9" y="766.0"></text>
</g>
<g>
<title>file_ra_state_init (1 samples, 0.03%)</title><rect x="606.9" y="739.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="609.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (47 samples, 1.35%)</title><rect x="607.3" y="1075.0" width="15.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="610.3" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (47 samples, 1.35%)</title><rect x="607.3" y="1059.0" width="15.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="610.3" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (47 samples, 1.35%)</title><rect x="607.3" y="1043.0" width="15.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.3" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.06%)</title><rect x="607.3" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.3" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.06%)</title><rect x="607.3" y="1011.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.3" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (6 samples, 0.17%)</title><rect x="607.9" y="1027.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.9" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.17%)</title><rect x="607.9" y="1011.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.9" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.17%)</title><rect x="607.9" y="995.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.9" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (6 samples, 0.17%)</title><rect x="607.9" y="979.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.9" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (4 samples, 0.11%)</title><rect x="607.9" y="963.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.9" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.11%)</title><rect x="607.9" y="947.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.9" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.11%)</title><rect x="607.9" y="931.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="610.9" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.11%)</title><rect x="607.9" y="915.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="610.9" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="607.9" y="899.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.9" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="607.9" y="883.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="610.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="607.9" y="867.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="610.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="607.9" y="851.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.9" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.11%)</title><rect x="607.9" y="835.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.9" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.09%)</title><rect x="607.9" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.9" y="830.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="609.0" y="819.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="612.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.06%)</title><rect x="609.3" y="963.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="612.3" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="609.3" y="947.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.3" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="609.3" y="931.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="612.3" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="609.3" y="915.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="612.3" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="609.3" y="899.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="612.3" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="609.3" y="883.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="612.3" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="609.3" y="867.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="612.3" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="609.3" y="851.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="612.3" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (1 samples, 0.03%)</title><rect x="609.6" y="947.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="612.6" y="958.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (1 samples, 0.03%)</title><rect x="609.6" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="612.6" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (16 samples, 0.46%)</title><rect x="610.0" y="1027.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.0" y="1038.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (16 samples, 0.46%)</title><rect x="610.0" y="1011.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="613.0" y="1022.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (15 samples, 0.43%)</title><rect x="610.3" y="995.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="613.3" y="1006.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 0.37%)</title><rect x="610.6" y="979.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="613.6" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 0.34%)</title><rect x="611.0" y="963.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.0" y="974.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3 samples, 0.09%)</title><rect x="611.7" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.7" y="958.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.03%)</title><rect x="612.3" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.3" y="942.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="612.3" y="915.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.3" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="612.3" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.3" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.03%)</title><rect x="612.3" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.3" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="612.3" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.3" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/641956499.compare (7 samples, 0.20%)</title><rect x="612.7" y="947.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="615.7" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (7 samples, 0.20%)</title><rect x="612.7" y="931.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.7" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (7 samples, 0.20%)</title><rect x="612.7" y="915.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="615.7" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 0.20%)</title><rect x="612.7" y="899.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.7" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (4 samples, 0.11%)</title><rect x="612.7" y="883.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="615.7" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.11%)</title><rect x="612.7" y="867.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="615.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (4 samples, 0.11%)</title><rect x="612.7" y="851.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="615.7" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.09%)</title><rect x="613.0" y="835.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="613.0" y="819.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.0" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="613.0" y="803.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="616.0" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.03%)</title><rect x="613.0" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.0" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="613.3" y="787.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.3" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="613.3" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="616.3" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="613.3" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.3" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="613.7" y="819.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="616.7" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="613.7" y="803.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="613.7" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="613.7" y="771.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.7" y="782.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (3 samples, 0.09%)</title><rect x="614.0" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="617.0" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.09%)</title><rect x="614.0" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="617.0" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (3 samples, 0.09%)</title><rect x="614.0" y="851.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="617.0" y="862.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.09%)</title><rect x="614.0" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.0" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="614.0" y="819.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="614.0" y="803.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.0" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="614.0" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.0" y="798.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="614.4" y="787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="614.4" y="771.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="617.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (1 samples, 0.03%)</title><rect x="614.7" y="819.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.7" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (1 samples, 0.03%)</title><rect x="614.7" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="614.7" y="787.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.7" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="614.7" y="771.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="617.7" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="614.7" y="755.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="614.7" y="739.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.7" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="614.7" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.7" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="614.7" y="707.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="614.7" y="691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.7" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (1 samples, 0.03%)</title><rect x="615.0" y="979.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="618.0" y="990.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (23 samples, 0.66%)</title><rect x="615.4" y="1027.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="618.4" y="1038.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (21 samples, 0.60%)</title><rect x="616.0" y="1011.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="619.0" y="1022.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (21 samples, 0.60%)</title><rect x="616.0" y="995.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="619.0" y="1006.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (21 samples, 0.60%)</title><rect x="616.0" y="979.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.0" y="990.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (21 samples, 0.60%)</title><rect x="616.0" y="963.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="619.0" y="974.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (21 samples, 0.60%)</title><rect x="616.0" y="947.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="619.0" y="958.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (13 samples, 0.37%)</title><rect x="616.0" y="931.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.0" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (4 samples, 0.11%)</title><rect x="616.7" y="915.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.7" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.11%)</title><rect x="616.7" y="899.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.7" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.11%)</title><rect x="616.7" y="883.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="619.7" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (4 samples, 0.11%)</title><rect x="616.7" y="867.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.7" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="617.4" y="851.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="620.4" y="862.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="617.7" y="851.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.7" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.20%)</title><rect x="618.1" y="915.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.1" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (7 samples, 0.20%)</title><rect x="618.1" y="899.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="621.1" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (7 samples, 0.20%)</title><rect x="618.1" y="883.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.1" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (1 samples, 0.03%)</title><rect x="618.1" y="867.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="621.1" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="618.1" y="851.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.1" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.1" y="835.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.1" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.1" y="819.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="621.1" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.1" y="803.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="621.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.1" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.1" y="771.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.1" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.1" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="621.1" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="618.1" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (2 samples, 0.06%)</title><rect x="618.4" y="867.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="621.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="618.4" y="851.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="621.4" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="618.4" y="835.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.4" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.4" y="819.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.4" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="618.7" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="621.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.7" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="621.7" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.7" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="621.7" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.7" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="621.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="618.7" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="621.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (4 samples, 0.11%)</title><rect x="619.1" y="867.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="622.1" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="619.1" y="851.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.1" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="619.1" y="835.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="622.1" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.1" y="819.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.1" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.1" y="803.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.1" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.1" y="787.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.1" y="771.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.1" y="755.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.1" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="619.4" y="739.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="622.4" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.06%)</title><rect x="619.8" y="851.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.8" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.8" y="835.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.8" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.8" y="819.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.8" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.8" y="803.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="622.8" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.8" y="787.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.8" y="771.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="619.8" y="755.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.8" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="620.1" y="739.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/641956499.compare (8 samples, 0.23%)</title><rect x="620.4" y="931.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.4" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (8 samples, 0.23%)</title><rect x="620.4" y="915.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.4" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (8 samples, 0.23%)</title><rect x="620.4" y="899.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.4" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.23%)</title><rect x="620.4" y="883.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="623.4" y="894.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (3 samples, 0.09%)</title><rect x="620.4" y="867.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="623.4" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.09%)</title><rect x="620.4" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.4" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (3 samples, 0.09%)</title><rect x="620.4" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="623.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.09%)</title><rect x="620.4" y="819.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.4" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="620.4" y="803.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.4" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="620.4" y="787.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="623.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="620.4" y="771.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.4" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="620.4" y="755.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.4" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="621.1" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.1" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="621.1" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.1" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="621.1" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="624.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="621.1" y="755.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="624.1" y="766.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1749659110.compare (5 samples, 0.14%)</title><rect x="621.5" y="867.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="624.5" y="878.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5 samples, 0.14%)</title><rect x="621.5" y="851.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.5" y="862.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/2045291716.compare (5 samples, 0.14%)</title><rect x="621.5" y="835.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.5" y="846.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.14%)</title><rect x="621.5" y="819.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.09%)</title><rect x="621.5" y="803.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="624.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.09%)</title><rect x="621.5" y="787.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="624.5" y="798.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="621.5" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.5" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.06%)</title><rect x="621.8" y="771.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="624.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.06%)</title><rect x="621.8" y="755.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/1470223404.apply (2 samples, 0.06%)</title><rect x="622.5" y="803.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="625.5" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (2 samples, 0.06%)</title><rect x="622.5" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.5" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="622.5" y="771.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="625.5" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.06%)</title><rect x="622.5" y="755.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.5" y="766.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="622.5" y="739.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="625.5" y="750.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="622.8" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (105 samples, 3.01%)</title><rect x="623.1" y="1075.0" width="35.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.1" y="1086.0">ru/..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (82 samples, 2.35%)</title><rect x="623.1" y="1059.0" width="27.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.1" y="1070.0">j..</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (82 samples, 2.35%)</title><rect x="623.1" y="1043.0" width="27.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.1" y="1054.0">j..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (73 samples, 2.09%)</title><rect x="624.5" y="1027.0" width="24.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="627.5" y="1038.0">j..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (2 samples, 0.06%)</title><rect x="624.5" y="1011.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="627.5" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="624.8" y="995.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="627.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="624.8" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.8" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (71 samples, 2.03%)</title><rect x="625.2" y="1011.0" width="24.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="628.2" y="1022.0">j..</text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (64 samples, 1.83%)</title><rect x="627.5" y="995.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.5" y="1006.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="629.6" y="979.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.6" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (56 samples, 1.60%)</title><rect x="630.2" y="979.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="633.2" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (47 samples, 1.35%)</title><rect x="633.3" y="963.0" width="15.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (38 samples, 1.09%)</title><rect x="636.3" y="947.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="637.3" y="931.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.3" y="942.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (29 samples, 0.83%)</title><rect x="637.7" y="931.0" width="9.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.7" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.03%)</title><rect x="642.4" y="915.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.4" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.17%)</title><rect x="642.7" y="915.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.7" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.09%)</title><rect x="643.7" y="899.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="646.7" y="910.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.11%)</title><rect x="644.8" y="915.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.8" y="926.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.11%)</title><rect x="646.1" y="915.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="649.1" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.14%)</title><rect x="647.5" y="931.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.5" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.09%)</title><rect x="647.5" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.5" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.06%)</title><rect x="648.5" y="915.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="651.5" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (5 samples, 0.14%)</title><rect x="649.2" y="1027.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="652.2" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.&lt;init&gt; (4 samples, 0.11%)</title><rect x="649.5" y="1011.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="652.5" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.&lt;init&gt; (2 samples, 0.06%)</title><rect x="650.2" y="995.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.2" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (2 samples, 0.06%)</title><rect x="650.2" y="979.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.2" y="990.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (4 samples, 0.11%)</title><rect x="650.8" y="1059.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.8" y="1070.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.&lt;init&gt; (1 samples, 0.03%)</title><rect x="651.9" y="1043.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.9" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.03%)</title><rect x="651.9" y="1027.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="654.9" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (19 samples, 0.54%)</title><rect x="652.2" y="1059.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.2" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (19 samples, 0.54%)</title><rect x="652.2" y="1043.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.2" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (19 samples, 0.54%)</title><rect x="652.2" y="1027.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.2" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (19 samples, 0.54%)</title><rect x="652.2" y="1011.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="655.2" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (12 samples, 0.34%)</title><rect x="654.6" y="995.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.09%)</title><rect x="654.9" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="655.6" y="963.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.6" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="655.6" y="947.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.6" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="655.6" y="931.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.6" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.23%)</title><rect x="655.9" y="979.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.9" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.20%)</title><rect x="656.2" y="963.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.2" y="974.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.20%)</title><rect x="656.2" y="947.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.2" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="656.9" y="931.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.9" y="942.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.06%)</title><rect x="657.3" y="931.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.3" y="942.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.06%)</title><rect x="657.9" y="931.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="660.9" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (925 samples, 26.48%)</title><rect x="658.6" y="1075.0" width="312.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="661.6" y="1086.0">ru/mail/polis/dao/shakhmin/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (925 samples, 26.48%)</title><rect x="658.6" y="1059.0" width="312.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.6" y="1070.0">ru/mail/polis/dao/shakhmin/SSTable$SSTable..</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (924 samples, 26.45%)</title><rect x="658.9" y="1043.0" width="312.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.9" y="1054.0">ru/mail/polis/dao/shakhmin/SSTable.position</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (196 samples, 5.61%)</title><rect x="668.1" y="1027.0" width="66.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.1" y="1038.0">java/ni..</text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.03%)</title><rect x="675.8" y="1011.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.8" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.31%)</title><rect x="676.2" y="1011.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="679.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="679.6" y="995.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (137 samples, 3.92%)</title><rect x="679.9" y="1011.0" width="46.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.9" y="1022.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (37 samples, 1.06%)</title><rect x="700.2" y="995.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="703.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.26%)</title><rect x="709.3" y="979.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.03%)</title><rect x="712.3" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="715.3" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (11 samples, 0.31%)</title><rect x="712.7" y="995.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.34%)</title><rect x="716.4" y="995.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.26%)</title><rect x="717.4" y="979.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="720.4" y="990.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (9 samples, 0.26%)</title><rect x="720.4" y="995.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.4" y="1006.0"></text>
</g>
<g>
<title>vtable stub (8 samples, 0.23%)</title><rect x="723.5" y="995.0" width="2.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="726.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (16 samples, 0.46%)</title><rect x="726.2" y="1011.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="729.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.26%)</title><rect x="727.9" y="995.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.9" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (2 samples, 0.06%)</title><rect x="730.9" y="995.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.17%)</title><rect x="731.6" y="1011.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="734.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.11%)</title><rect x="731.9" y="995.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="734.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.03%)</title><rect x="733.3" y="995.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="736.3" y="1006.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.06%)</title><rect x="733.6" y="1011.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="736.6" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (330 samples, 9.45%)</title><rect x="734.3" y="1027.0" width="111.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.3" y="1038.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (103 samples, 2.95%)</title><rect x="734.3" y="1011.0" width="34.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.3" y="1022.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (9 samples, 0.26%)</title><rect x="734.3" y="995.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="737.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (94 samples, 2.69%)</title><rect x="737.3" y="995.0" width="31.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="740.3" y="1006.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (94 samples, 2.69%)</title><rect x="737.3" y="979.0" width="31.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="740.3" y="990.0">jd..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (89 samples, 2.55%)</title><rect x="739.0" y="963.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="742.0" y="974.0">jd..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (133 samples, 3.81%)</title><rect x="769.1" y="1011.0" width="44.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.1" y="1022.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (133 samples, 3.81%)</title><rect x="769.1" y="995.0" width="44.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.1" y="1006.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="771.8" y="979.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="774.8" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (124 samples, 3.55%)</title><rect x="772.1" y="979.0" width="41.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.1" y="990.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (121 samples, 3.46%)</title><rect x="773.1" y="963.0" width="40.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.1" y="974.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (115 samples, 3.29%)</title><rect x="775.2" y="947.0" width="38.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="778.2" y="958.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (115 samples, 3.29%)</title><rect x="775.2" y="931.0" width="38.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.2" y="942.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (115 samples, 3.29%)</title><rect x="775.2" y="915.0" width="38.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.2" y="926.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (58 samples, 1.66%)</title><rect x="788.7" y="899.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.7" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.43%)</title><rect x="790.0" y="883.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.0" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.29%)</title><rect x="791.7" y="867.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.29%)</title><rect x="791.7" y="851.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.7" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.29%)</title><rect x="791.7" y="835.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.7" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (39 samples, 1.12%)</title><rect x="795.1" y="883.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.1" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (7 samples, 0.20%)</title><rect x="803.5" y="867.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.5" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.20%)</title><rect x="805.9" y="867.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="808.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.17%)</title><rect x="806.2" y="851.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.2" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.17%)</title><rect x="806.2" y="835.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="809.2" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.23%)</title><rect x="808.3" y="899.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="811.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (9 samples, 0.26%)</title><rect x="811.0" y="899.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.0" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (84 samples, 2.40%)</title><rect x="814.0" y="1011.0" width="28.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.0" y="1022.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (63 samples, 1.80%)</title><rect x="821.1" y="995.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="824.1" y="1006.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (63 samples, 1.80%)</title><rect x="821.1" y="979.0" width="21.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="824.1" y="990.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (57 samples, 1.63%)</title><rect x="823.1" y="963.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.1" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (57 samples, 1.63%)</title><rect x="823.1" y="947.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.1" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (57 samples, 1.63%)</title><rect x="823.1" y="931.0" width="19.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.1" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (43 samples, 1.23%)</title><rect x="824.8" y="915.0" width="14.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.8" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.57%)</title><rect x="825.2" y="899.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.2" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.57%)</title><rect x="825.2" y="883.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="828.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (17 samples, 0.49%)</title><rect x="826.2" y="867.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="829.2" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (17 samples, 0.49%)</title><rect x="826.2" y="851.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.2" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (22 samples, 0.63%)</title><rect x="831.9" y="899.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.9" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (22 samples, 0.63%)</title><rect x="831.9" y="883.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.14%)</title><rect x="835.0" y="867.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.0" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.23%)</title><rect x="836.6" y="867.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="839.6" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.23%)</title><rect x="836.6" y="851.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.6" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.26%)</title><rect x="839.3" y="915.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="842.3" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.29%)</title><rect x="842.4" y="1011.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (10 samples, 0.29%)</title><rect x="842.4" y="995.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.29%)</title><rect x="842.4" y="979.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.4" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.29%)</title><rect x="842.4" y="963.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="845.4" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (371 samples, 10.62%)</title><rect x="845.8" y="1027.0" width="125.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="848.8" y="1038.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (132 samples, 3.78%)</title><rect x="855.9" y="1011.0" width="44.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="858.9" y="1022.0">java..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (132 samples, 3.78%)</title><rect x="855.9" y="995.0" width="44.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="858.9" y="1006.0">java..</text>
</g>
<g>
<title>java/nio/Buffer.capacity (3 samples, 0.09%)</title><rect x="859.3" y="979.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.3" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.09%)</title><rect x="860.3" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="863.3" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="861.3" y="979.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="864.3" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (115 samples, 3.29%)</title><rect x="861.6" y="979.0" width="38.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="864.6" y="990.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (114 samples, 3.26%)</title><rect x="862.0" y="963.0" width="38.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.0" y="974.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (107 samples, 3.06%)</title><rect x="864.3" y="947.0" width="36.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="867.3" y="958.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (107 samples, 3.06%)</title><rect x="864.3" y="931.0" width="36.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="867.3" y="942.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (107 samples, 3.06%)</title><rect x="864.3" y="915.0" width="36.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.3" y="926.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (52 samples, 1.49%)</title><rect x="879.5" y="899.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="882.5" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.57%)</title><rect x="883.3" y="883.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="886.3" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (20 samples, 0.57%)</title><rect x="883.3" y="867.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.3" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (15 samples, 0.43%)</title><rect x="884.9" y="851.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="887.9" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (11 samples, 0.31%)</title><rect x="886.3" y="835.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="889.3" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.60%)</title><rect x="890.0" y="883.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="893.0" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (21 samples, 0.60%)</title><rect x="890.0" y="867.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="893.0" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.20%)</title><rect x="892.0" y="851.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="895.0" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.23%)</title><rect x="894.4" y="851.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="897.4" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="894.4" y="835.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="897.4" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (7 samples, 0.20%)</title><rect x="894.7" y="835.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="897.7" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (10 samples, 0.29%)</title><rect x="897.1" y="899.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.1" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (94 samples, 2.69%)</title><rect x="900.5" y="1011.0" width="31.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="903.5" y="1022.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (86 samples, 2.46%)</title><rect x="903.2" y="995.0" width="29.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.2" y="1006.0">ja..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (86 samples, 2.46%)</title><rect x="903.2" y="979.0" width="29.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="906.2" y="990.0">ja..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="906.9" y="963.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="909.9" y="974.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="906.9" y="947.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="909.9" y="958.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="906.9" y="931.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="909.9" y="942.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="906.9" y="915.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="909.9" y="926.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="906.9" y="899.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="909.9" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (74 samples, 2.12%)</title><rect x="907.2" y="963.0" width="25.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="910.2" y="974.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (74 samples, 2.12%)</title><rect x="907.2" y="947.0" width="25.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="910.2" y="958.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (74 samples, 2.12%)</title><rect x="907.2" y="931.0" width="25.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="910.2" y="942.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (64 samples, 1.83%)</title><rect x="909.6" y="915.0" width="21.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="912.6" y="926.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.43%)</title><rect x="911.6" y="899.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="914.6" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (15 samples, 0.43%)</title><rect x="911.6" y="883.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="914.6" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (15 samples, 0.43%)</title><rect x="911.6" y="867.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.6" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.34%)</title><rect x="912.7" y="851.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.7" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (43 samples, 1.23%)</title><rect x="916.7" y="899.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="919.7" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (43 samples, 1.23%)</title><rect x="916.7" y="883.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.7" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (43 samples, 1.23%)</title><rect x="916.7" y="867.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="919.7" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (12 samples, 0.34%)</title><rect x="924.5" y="851.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.5" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.23%)</title><rect x="928.5" y="851.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="931.5" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.09%)</title><rect x="931.2" y="915.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="934.2" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (103 samples, 2.95%)</title><rect x="932.2" y="1011.0" width="34.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="935.2" y="1022.0">ja..</text>
</g>
<g>
<title>java/nio/Bits.swap (86 samples, 2.46%)</title><rect x="932.2" y="995.0" width="29.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.2" y="1006.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 0.40%)</title><rect x="961.3" y="995.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (3 samples, 0.09%)</title><rect x="966.0" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="969.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.11%)</title><rect x="967.0" y="1011.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="970.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.11%)</title><rect x="967.0" y="995.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="970.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.11%)</title><rect x="967.0" y="979.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="970.0" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.11%)</title><rect x="967.0" y="963.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="970.0" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.23%)</title><rect x="968.4" y="1011.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (8 samples, 0.23%)</title><rect x="968.4" y="995.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="971.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.23%)</title><rect x="968.4" y="979.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="971.4" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.23%)</title><rect x="968.4" y="963.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="971.4" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (10 samples, 0.29%)</title><rect x="971.1" y="1123.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.1" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (10 samples, 0.29%)</title><rect x="971.1" y="1107.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="974.1" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (6 samples, 0.17%)</title><rect x="971.1" y="1091.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="974.1" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (6 samples, 0.17%)</title><rect x="971.1" y="1075.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="971.1" y="1059.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="974.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="971.1" y="1043.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="974.1" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (5 samples, 0.14%)</title><rect x="971.4" y="1059.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="974.4" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="971.4" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="974.4" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (4 samples, 0.11%)</title><rect x="971.8" y="1043.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.8" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 0.09%)</title><rect x="972.1" y="1027.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="975.1" y="1038.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (1 samples, 0.03%)</title><rect x="973.1" y="1091.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="976.1" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.&lt;init&gt; (1 samples, 0.03%)</title><rect x="973.1" y="1075.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="976.1" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.03%)</title><rect x="973.1" y="1059.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="973.1" y="1043.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="976.1" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.03%)</title><rect x="973.5" y="1091.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="976.5" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.03%)</title><rect x="973.5" y="1075.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="976.5" y="1086.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="973.5" y="1059.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="976.5" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="973.5" y="1043.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="976.5" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (2 samples, 0.06%)</title><rect x="973.8" y="1091.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="976.8" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="974.5" y="1155.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.5" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (11 samples, 0.31%)</title><rect x="974.8" y="1155.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="977.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.31%)</title><rect x="974.8" y="1139.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.23%)</title><rect x="974.8" y="1123.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="977.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.17%)</title><rect x="975.5" y="1107.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="978.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.09%)</title><rect x="976.2" y="1091.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="979.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="977.2" y="1091.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="980.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.09%)</title><rect x="977.5" y="1123.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="980.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.09%)</title><rect x="977.5" y="1107.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.09%)</title><rect x="977.5" y="1091.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.5" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.09%)</title><rect x="978.5" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="981.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.09%)</title><rect x="978.5" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="981.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="978.5" y="1123.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="981.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="978.9" y="1123.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="981.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="978.9" y="1107.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="981.9" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="978.9" y="1091.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="981.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="979.2" y="1107.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="982.2" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.60%)</title><rect x="979.5" y="1187.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="982.5" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="981.9" y="1171.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="984.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="981.9" y="1155.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="984.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="981.9" y="1139.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="981.9" y="1123.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.9" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.23%)</title><rect x="982.2" y="1171.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.2" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.23%)</title><rect x="982.2" y="1155.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="985.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="984.6" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="987.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="984.6" y="1123.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.6" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.14%)</title><rect x="984.9" y="1171.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="987.9" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="985.6" y="1155.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="988.6" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.09%)</title><rect x="986.6" y="1187.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="989.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="986.6" y="1171.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="989.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="986.6" y="1155.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.6" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.06%)</title><rect x="987.0" y="1171.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="990.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="987.6" y="1187.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="990.6" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="987.6" y="1171.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="990.6" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.06%)</title><rect x="988.0" y="1187.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="988.3" y="1171.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="991.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="988.3" y="1155.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="991.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="988.3" y="1139.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="991.3" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.17%)</title><rect x="988.7" y="1187.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="991.7" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.17%)</title><rect x="988.7" y="1171.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="991.7" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (192 samples, 5.50%)</title><rect x="990.7" y="1203.0" width="64.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.7" y="1214.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (192 samples, 5.50%)</title><rect x="990.7" y="1187.0" width="64.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="993.7" y="1198.0">one/nio..</text>
</g>
<g>
<title>[unknown] (27 samples, 0.77%)</title><rect x="991.0" y="1171.0" width="9.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="994.0" y="1182.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.77%)</title><rect x="991.0" y="1155.0" width="9.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="994.0" y="1166.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (24 samples, 0.69%)</title><rect x="991.0" y="1139.0" width="8.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="994.0" y="1150.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.11%)</title><rect x="991.4" y="1123.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.4" y="1134.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="992.7" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.7" y="1134.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="993.1" y="1123.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.1" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.03%)</title><rect x="993.4" y="1123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.4" y="1134.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.06%)</title><rect x="993.7" y="1123.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="996.7" y="1134.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (13 samples, 0.37%)</title><rect x="994.4" y="1123.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="997.4" y="1134.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="996.1" y="1107.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.1" y="1118.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.11%)</title><rect x="996.4" y="1107.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.4" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.09%)</title><rect x="997.8" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1000.8" y="1118.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="998.8" y="1123.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.8" y="1134.0"></text>
</g>
<g>
<title>__libc_recv (1 samples, 0.03%)</title><rect x="999.1" y="1139.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1002.1" y="1150.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.06%)</title><rect x="999.5" y="1139.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1002.5" y="1150.0"></text>
</g>
<g>
<title>__libc_recv (160 samples, 4.58%)</title><rect x="1000.1" y="1171.0" width="54.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1003.1" y="1182.0">__lib..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.06%)</title><rect x="1009.9" y="1155.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1012.9" y="1166.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (129 samples, 3.69%)</title><rect x="1010.6" y="1155.0" width="43.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1013.6" y="1166.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (129 samples, 3.69%)</title><rect x="1010.6" y="1139.0" width="43.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1013.6" y="1150.0">do_s..</text>
</g>
<g>
<title>__x64_sys_recvfrom (113 samples, 3.24%)</title><rect x="1016.0" y="1123.0" width="38.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1019.0" y="1134.0">__x..</text>
</g>
<g>
<title>__sys_recvfrom (110 samples, 3.15%)</title><rect x="1017.0" y="1107.0" width="37.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1020.0" y="1118.0">__s..</text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="1017.7" y="1091.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1020.7" y="1102.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="1018.1" y="1091.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1021.1" y="1102.0"></text>
</g>
<g>
<title>inet_recvmsg (70 samples, 2.00%)</title><rect x="1018.4" y="1091.0" width="23.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1021.4" y="1102.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (68 samples, 1.95%)</title><rect x="1019.1" y="1075.0" width="22.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1022.1" y="1086.0">t..</text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.26%)</title><rect x="1022.1" y="1059.0" width="3.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1025.1" y="1070.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.20%)</title><rect x="1022.1" y="1043.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1025.1" y="1054.0"></text>
</g>
<g>
<title>skb_release_head_state (7 samples, 0.20%)</title><rect x="1022.1" y="1027.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1025.1" y="1038.0"></text>
</g>
<g>
<title>sock_rfree (7 samples, 0.20%)</title><rect x="1022.1" y="1011.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1025.1" y="1022.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.06%)</title><rect x="1024.5" y="1043.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1027.5" y="1054.0"></text>
</g>
<g>
<title>lock_sock_nested (10 samples, 0.29%)</title><rect x="1025.1" y="1059.0" width="3.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1028.1" y="1070.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.06%)</title><rect x="1025.1" y="1043.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1028.1" y="1054.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="1025.5" y="1027.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1028.5" y="1038.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (8 samples, 0.23%)</title><rect x="1025.8" y="1043.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1028.8" y="1054.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (26 samples, 0.74%)</title><rect x="1028.5" y="1059.0" width="8.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1031.5" y="1070.0"></text>
</g>
<g>
<title>__skb_datagram_iter (26 samples, 0.74%)</title><rect x="1028.5" y="1043.0" width="8.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1031.5" y="1054.0"></text>
</g>
<g>
<title>_copy_to_iter (8 samples, 0.23%)</title><rect x="1029.2" y="1027.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1032.2" y="1038.0"></text>
</g>
<g>
<title>copyout (7 samples, 0.20%)</title><rect x="1029.5" y="1011.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1032.5" y="1022.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (7 samples, 0.20%)</title><rect x="1029.5" y="995.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1032.5" y="1006.0"></text>
</g>
<g>
<title>simple_copy_to_iter (16 samples, 0.46%)</title><rect x="1031.9" y="1027.0" width="5.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1034.9" y="1038.0"></text>
</g>
<g>
<title>__check_object_size (15 samples, 0.43%)</title><rect x="1032.2" y="1011.0" width="5.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1035.2" y="1022.0"></text>
</g>
<g>
<title>__check_heap_object (3 samples, 0.09%)</title><rect x="1033.3" y="995.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1036.3" y="1006.0"></text>
</g>
<g>
<title>__virt_addr_valid (9 samples, 0.26%)</title><rect x="1034.3" y="995.0" width="3.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1037.3" y="1006.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.09%)</title><rect x="1037.3" y="1059.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1040.3" y="1070.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.06%)</title><rect x="1037.6" y="1043.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1040.6" y="1054.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (9 samples, 0.26%)</title><rect x="1038.3" y="1059.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1041.3" y="1070.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (9 samples, 0.26%)</title><rect x="1038.3" y="1043.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1041.3" y="1054.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.11%)</title><rect x="1040.0" y="1027.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1043.0" y="1038.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="1040.7" y="1011.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1043.7" y="1022.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (2 samples, 0.06%)</title><rect x="1041.4" y="1059.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1044.4" y="1070.0"></text>
</g>
<g>
<title>sock_recvmsg (24 samples, 0.69%)</title><rect x="1042.0" y="1091.0" width="8.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1045.0" y="1102.0"></text>
</g>
<g>
<title>security_socket_recvmsg (24 samples, 0.69%)</title><rect x="1042.0" y="1075.0" width="8.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1045.0" y="1086.0"></text>
</g>
<g>
<title>selinux_socket_recvmsg (3 samples, 0.09%)</title><rect x="1042.0" y="1059.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1045.0" y="1070.0"></text>
</g>
<g>
<title>sock_has_perm (21 samples, 0.60%)</title><rect x="1043.0" y="1059.0" width="7.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1046.0" y="1070.0"></text>
</g>
<g>
<title>avc_has_perm (10 samples, 0.29%)</title><rect x="1046.8" y="1043.0" width="3.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1049.8" y="1054.0"></text>
</g>
<g>
<title>sockfd_lookup_light (12 samples, 0.34%)</title><rect x="1050.1" y="1091.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1053.1" y="1102.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.29%)</title><rect x="1050.8" y="1075.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1053.8" y="1086.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.20%)</title><rect x="1051.8" y="1059.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1054.8" y="1070.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.11%)</title><rect x="1054.2" y="1171.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1057.2" y="1182.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.03%)</title><rect x="1055.5" y="1251.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1058.5" y="1262.0"></text>
</g>
<g>
<title>[tid=2735] (21 samples, 0.60%)</title><rect x="1055.9" y="1267.0" width="7.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1058.9" y="1278.0"></text>
</g>
<g>
<title>start_thread (21 samples, 0.60%)</title><rect x="1055.9" y="1251.0" width="7.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1058.9" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (21 samples, 0.60%)</title><rect x="1055.9" y="1235.0" width="7.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1058.9" y="1246.0"></text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 0.60%)</title><rect x="1055.9" y="1219.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.9" y="1230.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1055.9" y="1203.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.9" y="1214.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1055.9" y="1187.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.9" y="1198.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1055.9" y="1171.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.9" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1055.9" y="1155.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.9" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.03%)</title><rect x="1055.9" y="1139.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.9" y="1150.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::zero_bottom_entry_raw() (1 samples, 0.03%)</title><rect x="1055.9" y="1123.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.9" y="1134.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.03%)</title><rect x="1056.2" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.2" y="1198.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 0.46%)</title><rect x="1056.6" y="1203.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.6" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 0.43%)</title><rect x="1056.6" y="1187.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.6" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1056.6" y="1171.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.6" y="1182.0"></text>
</g>
<g>
<title>SpinPause (14 samples, 0.40%)</title><rect x="1056.9" y="1171.0" width="4.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1059.9" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1061.6" y="1187.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.6" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1061.6" y="1171.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.6" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1061.6" y="1155.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1064.6" y="1166.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1061.6" y="1139.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.6" y="1150.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1061.6" y="1123.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.6" y="1134.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1062.0" y="1203.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.0" y="1214.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (1 samples, 0.03%)</title><rect x="1062.0" y="1187.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.0" y="1198.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.03%)</title><rect x="1062.0" y="1171.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1065.0" y="1182.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.03%)</title><rect x="1062.0" y="1155.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.0" y="1166.0"></text>
</g>
<g>
<title>G1ReclaimEmptyRegionsTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1062.3" y="1203.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.3" y="1214.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.03%)</title><rect x="1062.6" y="1187.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.6" y="1198.0"></text>
</g>
<g>
<title>[tid=2741] (120 samples, 3.44%)</title><rect x="1063.0" y="1267.0" width="40.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1066.0" y="1278.0">[ti..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1063.0" y="1251.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1066.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1063.0" y="1235.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1066.0" y="1246.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (1 samples, 0.03%)</title><rect x="1063.0" y="1219.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1066.0" y="1230.0"></text>
</g>
<g>
<title>start_thread (119 samples, 3.41%)</title><rect x="1063.3" y="1251.0" width="40.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1066.3" y="1262.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (119 samples, 3.41%)</title><rect x="1063.3" y="1235.0" width="40.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1066.3" y="1246.0">thr..</text>
</g>
<g>
<title>GangWorker::loop() (119 samples, 3.41%)</title><rect x="1063.3" y="1219.0" width="40.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.3" y="1230.0">Gan..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (78 samples, 2.23%)</title><rect x="1063.3" y="1203.0" width="26.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.3" y="1214.0">G..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (77 samples, 2.20%)</title><rect x="1063.3" y="1187.0" width="26.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.3" y="1198.0">G..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.97] (2 samples, 0.06%)</title><rect x="1064.0" y="1171.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.0" y="1182.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.394] (1 samples, 0.03%)</title><rect x="1064.7" y="1171.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.7" y="1182.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (52 samples, 1.49%)</title><rect x="1065.0" y="1171.0" width="17.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.0" y="1182.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.03%)</title><rect x="1069.4" y="1155.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.4" y="1166.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.03%)</title><rect x="1069.4" y="1139.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1072.4" y="1150.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1069.4" y="1123.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1072.4" y="1134.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1069.4" y="1107.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1072.4" y="1118.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.09%)</title><rect x="1069.7" y="1155.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.7" y="1166.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (34 samples, 0.97%)</title><rect x="1070.8" y="1155.0" width="11.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.8" y="1166.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (32 samples, 0.92%)</title><rect x="1071.4" y="1139.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.4" y="1150.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1082.2" y="1155.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.2" y="1166.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (20 samples, 0.57%)</title><rect x="1082.6" y="1171.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.6" y="1182.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.03%)</title><rect x="1083.6" y="1155.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.6" y="1166.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1083.9" y="1155.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1086.9" y="1166.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (11 samples, 0.31%)</title><rect x="1084.3" y="1155.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.3" y="1166.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1088.0" y="1155.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.0" y="1166.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.09%)</title><rect x="1088.3" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.3" y="1166.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.394] (1 samples, 0.03%)</title><rect x="1089.3" y="1187.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="1198.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (41 samples, 1.17%)</title><rect x="1089.7" y="1203.0" width="13.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.7" y="1214.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (41 samples, 1.17%)</title><rect x="1089.7" y="1187.0" width="13.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.7" y="1198.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (39 samples, 1.12%)</title><rect x="1089.7" y="1171.0" width="13.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.7" y="1182.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.03%)</title><rect x="1096.1" y="1155.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.1" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.03%)</title><rect x="1096.1" y="1139.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.1" y="1150.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (2 samples, 0.06%)</title><rect x="1096.4" y="1155.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.4" y="1166.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (3 samples, 0.09%)</title><rect x="1097.1" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.1" y="1166.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (14 samples, 0.40%)</title><rect x="1098.1" y="1155.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.1" y="1166.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1101.8" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.8" y="1150.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (2 samples, 0.06%)</title><rect x="1102.2" y="1139.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.2" y="1150.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1102.8" y="1171.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.8" y="1182.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1103.2" y="1171.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.2" y="1182.0"></text>
</g>
<g>
<title>[tid=2743] (1 samples, 0.03%)</title><rect x="1103.5" y="1267.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1106.5" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1103.5" y="1251.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1106.5" y="1262.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.03%)</title><rect x="1103.5" y="1235.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1106.5" y="1246.0"></text>
</g>
<g>
<title>[tid=2744] (7 samples, 0.20%)</title><rect x="1103.9" y="1267.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1106.9" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1103.9" y="1251.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1106.9" y="1262.0"></text>
</g>
<g>
<title>__vsnprintf_internal (1 samples, 0.03%)</title><rect x="1103.9" y="1235.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1106.9" y="1246.0"></text>
</g>
<g>
<title>__strchrnul_avx2 (1 samples, 0.03%)</title><rect x="1103.9" y="1219.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1106.9" y="1230.0"></text>
</g>
<g>
<title>start_thread (6 samples, 0.17%)</title><rect x="1104.2" y="1251.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1107.2" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.17%)</title><rect x="1104.2" y="1235.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1107.2" y="1246.0"></text>
</g>
<g>
<title>VMThread::run() (6 samples, 0.17%)</title><rect x="1104.2" y="1219.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.2" y="1230.0"></text>
</g>
<g>
<title>VMThread::loop() (6 samples, 0.17%)</title><rect x="1104.2" y="1203.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.2" y="1214.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="1104.2" y="1187.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.2" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.03%)</title><rect x="1104.2" y="1171.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.2" y="1182.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.03%)</title><rect x="1104.2" y="1155.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.2" y="1166.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="1104.2" y="1139.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.2" y="1150.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1104.2" y="1123.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1107.2" y="1134.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1104.2" y="1107.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1107.2" y="1118.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1104.2" y="1091.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1107.2" y="1102.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1104.2" y="1075.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1107.2" y="1086.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1104.2" y="1059.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1107.2" y="1070.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1104.2" y="1043.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1107.2" y="1054.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1104.2" y="1027.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1107.2" y="1038.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1104.2" y="1011.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1107.2" y="1022.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="1104.2" y="995.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1107.2" y="1006.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (5 samples, 0.14%)</title><rect x="1104.5" y="1187.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.5" y="1198.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.14%)</title><rect x="1104.5" y="1171.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.5" y="1182.0"></text>
</g>
<g>
<title>VM_CGC_Operation::doit() (1 samples, 0.03%)</title><rect x="1104.5" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.5" y="1166.0"></text>
</g>
<g>
<title>G1ConcurrentMark::remark() (1 samples, 0.03%)</title><rect x="1104.5" y="1139.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.5" y="1150.0"></text>
</g>
<g>
<title>G1ConcurrentMark::finalize_marking() (1 samples, 0.03%)</title><rect x="1104.5" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.5" y="1134.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.03%)</title><rect x="1104.5" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.5" y="1118.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="1104.5" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.5" y="1102.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1104.5" y="1075.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1107.5" y="1086.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1104.5" y="1059.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1107.5" y="1070.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1104.5" y="1043.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1107.5" y="1054.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1104.5" y="1027.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1107.5" y="1038.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1104.5" y="1011.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1107.5" y="1022.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1104.5" y="995.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1107.5" y="1006.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1104.5" y="979.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1107.5" y="990.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1104.5" y="963.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1107.5" y="974.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="1104.5" y="947.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1107.5" y="958.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (4 samples, 0.11%)</title><rect x="1104.9" y="1155.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.9" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (4 samples, 0.11%)</title><rect x="1104.9" y="1139.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.9" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (1 samples, 0.03%)</title><rect x="1104.9" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.9" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.06%)</title><rect x="1105.2" y="1123.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.2" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.03%)</title><rect x="1105.2" y="1107.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.2" y="1118.0"></text>
</g>
<g>
<title>MallocTracker::record_free(void*) (1 samples, 0.03%)</title><rect x="1105.2" y="1091.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.2" y="1102.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.03%)</title><rect x="1105.5" y="1107.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.5" y="1118.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.03%)</title><rect x="1105.5" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.5" y="1102.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::reset() (1 samples, 0.03%)</title><rect x="1105.9" y="1123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.9" y="1134.0"></text>
</g>
<g>
<title>[tid=2748] (175 samples, 5.01%)</title><rect x="1106.2" y="1267.0" width="59.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1109.2" y="1278.0">[tid=2..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.11%)</title><rect x="1106.2" y="1251.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1109.2" y="1262.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.09%)</title><rect x="1106.2" y="1235.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1109.2" y="1246.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="1107.2" y="1235.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1110.2" y="1246.0"></text>
</g>
<g>
<title>start_thread (170 samples, 4.87%)</title><rect x="1107.6" y="1251.0" width="57.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1110.6" y="1262.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (170 samples, 4.87%)</title><rect x="1107.6" y="1235.0" width="57.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1110.6" y="1246.0">thread..</text>
</g>
<g>
<title>JavaThread::run() (170 samples, 4.87%)</title><rect x="1107.6" y="1219.0" width="57.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.6" y="1230.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (170 samples, 4.87%)</title><rect x="1107.6" y="1203.0" width="57.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.6" y="1214.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (170 samples, 4.87%)</title><rect x="1107.6" y="1187.0" width="57.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.6" y="1198.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (170 samples, 4.87%)</title><rect x="1107.6" y="1171.0" width="57.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.6" y="1182.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (170 samples, 4.87%)</title><rect x="1107.6" y="1155.0" width="57.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.6" y="1166.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (170 samples, 4.87%)</title><rect x="1107.6" y="1139.0" width="57.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.6" y="1150.0">Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.03%)</title><rect x="1107.6" y="1123.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.6" y="1134.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1107.6" y="1107.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.6" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1107.6" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.6" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1107.6" y="1075.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1107.6" y="1059.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1107.6" y="1043.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1107.6" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1107.6" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.6" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1107.6" y="995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.6" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1107.6" y="979.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.6" y="990.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (94 samples, 2.69%)</title><rect x="1107.9" y="1123.0" width="31.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.9" y="1134.0">Co..</text>
</g>
<g>
<title>Block::code_alignment() const (1 samples, 0.03%)</title><rect x="1107.9" y="1107.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.9" y="1118.0"></text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.11%)</title><rect x="1108.2" y="1107.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.2" y="1118.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.09%)</title><rect x="1108.2" y="1091.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.2" y="1102.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.06%)</title><rect x="1108.2" y="1075.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.2" y="1086.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.03%)</title><rect x="1108.2" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.2" y="1070.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.03%)</title><rect x="1108.6" y="1059.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.6" y="1070.0"></text>
</g>
<g>
<title>PhaseRegAlloc::reg2offset(int) const (1 samples, 0.03%)</title><rect x="1108.6" y="1043.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.6" y="1054.0"></text>
</g>
<g>
<title>Repl4F_zero_evexNode::reloc() const (1 samples, 0.03%)</title><rect x="1108.9" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.9" y="1086.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.03%)</title><rect x="1109.3" y="1091.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1112.3" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.11%)</title><rect x="1109.6" y="1107.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.6" y="1118.0"></text>
</g>
<g>
<title>MachOper::constant_reloc() const (1 samples, 0.03%)</title><rect x="1109.9" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.9" y="1102.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.06%)</title><rect x="1110.3" y="1091.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.3" y="1102.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="1110.6" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.6" y="1086.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.03%)</title><rect x="1111.0" y="1107.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.0" y="1118.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.29%)</title><rect x="1111.3" y="1107.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.3" y="1118.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.03%)</title><rect x="1111.3" y="1091.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.3" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.26%)</title><rect x="1111.6" y="1091.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.6" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.06%)</title><rect x="1112.0" y="1075.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.0" y="1086.0"></text>
</g>
<g>
<title>CmpNNode::Opcode() const (1 samples, 0.03%)</title><rect x="1112.6" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.6" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.06%)</title><rect x="1113.0" y="1075.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.0" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.03%)</title><rect x="1113.3" y="1059.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.3" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="1113.3" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.3" y="1054.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.03%)</title><rect x="1113.3" y="1027.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.3" y="1038.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1113.3" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.3" y="1022.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="1113.3" y="995.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1116.3" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.09%)</title><rect x="1113.7" y="1075.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.7" y="1086.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.03%)</title><rect x="1113.7" y="1059.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.7" y="1070.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1113.7" y="1043.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1116.7" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.06%)</title><rect x="1114.0" y="1059.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.0" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.03%)</title><rect x="1114.0" y="1043.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.0" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.03%)</title><rect x="1114.0" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.0" y="1038.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.03%)</title><rect x="1114.0" y="1011.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.0" y="1022.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.03%)</title><rect x="1114.0" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.0" y="1006.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.03%)</title><rect x="1114.3" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.3" y="1054.0"></text>
</g>
<g>
<title>State::_sub_Op_CMoveI(Node const*) (1 samples, 0.03%)</title><rect x="1114.3" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.03%)</title><rect x="1114.7" y="1107.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.7" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.03%)</title><rect x="1114.7" y="1091.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.23%)</title><rect x="1115.0" y="1107.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.23%)</title><rect x="1115.0" y="1091.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.06%)</title><rect x="1115.0" y="1075.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.0" y="1086.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.03%)</title><rect x="1115.3" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.06%)</title><rect x="1115.7" y="1075.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.03%)</title><rect x="1115.7" y="1059.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1115.7" y="1043.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.7" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="1115.7" y="1027.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.03%)</title><rect x="1116.0" y="1059.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.06%)</title><rect x="1116.4" y="1075.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.4" y="1086.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="1116.7" y="1059.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.7" y="1070.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.03%)</title><rect x="1116.7" y="1043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.7" y="1054.0"></text>
</g>
<g>
<title>__memset_avx2_erms (2 samples, 0.06%)</title><rect x="1117.0" y="1075.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1120.0" y="1086.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="1117.4" y="1059.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1120.4" y="1070.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="1117.4" y="1043.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1120.4" y="1054.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="1117.4" y="1027.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1120.4" y="1038.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="1117.4" y="1011.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1120.4" y="1022.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="1117.4" y="995.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1120.4" y="1006.0"></text>
</g>
<g>
<title>__lru_cache_add (1 samples, 0.03%)</title><rect x="1117.4" y="979.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1120.4" y="990.0"></text>
</g>
<g>
<title>pagevec_lru_move_fn (1 samples, 0.03%)</title><rect x="1117.4" y="963.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1120.4" y="974.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="1117.4" y="947.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1120.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (65 samples, 1.86%)</title><rect x="1117.7" y="1107.0" width="22.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.7" y="1118.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="1117.7" y="1091.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.7" y="1102.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.03%)</title><rect x="1118.0" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.0" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.09%)</title><rect x="1118.4" y="1091.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.4" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.14%)</title><rect x="1119.4" y="1091.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.11%)</title><rect x="1119.4" y="1075.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.4" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.09%)</title><rect x="1119.7" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.7" y="1070.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.03%)</title><rect x="1120.7" y="1075.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.06%)</title><rect x="1121.1" y="1091.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.1" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="1121.1" y="1075.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.03%)</title><rect x="1121.4" y="1075.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.20%)</title><rect x="1121.8" y="1091.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.03%)</title><rect x="1123.4" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="1086.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.03%)</title><rect x="1123.4" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.03%)</title><rect x="1123.8" y="1075.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1123.8" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.8" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.03%)</title><rect x="1123.8" y="1043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (17 samples, 0.49%)</title><rect x="1124.1" y="1091.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1125.5" y="1075.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.17%)</title><rect x="1125.8" y="1075.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.8" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1127.5" y="1059.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 0.14%)</title><rect x="1127.8" y="1075.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.8" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1127.8" y="1059.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.8" y="1070.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1128.2" y="1059.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.2" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.09%)</title><rect x="1128.5" y="1059.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.03%)</title><rect x="1129.5" y="1075.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.03%)</title><rect x="1129.9" y="1091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.03%)</title><rect x="1129.9" y="1075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.11%)</title><rect x="1130.2" y="1091.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.2" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.06%)</title><rect x="1130.9" y="1075.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (1 samples, 0.03%)</title><rect x="1131.6" y="1091.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.6" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1131.6" y="1075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.06%)</title><rect x="1131.9" y="1091.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.17%)</title><rect x="1132.6" y="1091.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.14%)</title><rect x="1132.9" y="1075.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.03%)</title><rect x="1134.6" y="1091.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.6" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.03%)</title><rect x="1134.6" y="1075.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.03%)</title><rect x="1134.6" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.06%)</title><rect x="1134.9" y="1091.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.9" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1135.3" y="1075.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.09%)</title><rect x="1135.6" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.06%)</title><rect x="1135.9" y="1075.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.03%)</title><rect x="1136.6" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.6" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.23%)</title><rect x="1137.0" y="1091.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.0" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.03%)</title><rect x="1137.6" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.6" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.14%)</title><rect x="1138.0" y="1075.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="1086.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="1138.3" y="1059.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.3" y="1070.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="1138.3" y="1043.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1141.3" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.09%)</title><rect x="1138.7" y="1059.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.7" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (59 samples, 1.69%)</title><rect x="1139.7" y="1123.0" width="19.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.06%)</title><rect x="1139.7" y="1107.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.06%)</title><rect x="1139.7" y="1091.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="1140.0" y="1075.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.0" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1140.0" y="1059.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.11%)</title><rect x="1140.3" y="1107.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (48 samples, 1.37%)</title><rect x="1141.7" y="1107.0" width="16.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.06%)</title><rect x="1141.7" y="1091.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.7" y="1102.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.03%)</title><rect x="1142.0" y="1075.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.06%)</title><rect x="1142.4" y="1091.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (36 samples, 1.03%)</title><rect x="1143.0" y="1091.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (34 samples, 0.97%)</title><rect x="1143.7" y="1075.0" width="11.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (30 samples, 0.86%)</title><rect x="1144.7" y="1059.0" width="10.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.03%)</title><rect x="1146.8" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1146.8" y="1027.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (23 samples, 0.66%)</title><rect x="1147.1" y="1043.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.1" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.03%)</title><rect x="1154.9" y="1059.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.03%)</title><rect x="1155.2" y="1091.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.06%)</title><rect x="1155.5" y="1091.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.5" y="1102.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1155.9" y="1075.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.09%)</title><rect x="1156.2" y="1091.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.03%)</title><rect x="1156.2" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1156.2" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.06%)</title><rect x="1156.6" y="1075.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.03%)</title><rect x="1156.6" y="1059.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1156.6" y="1043.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.6" y="1054.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1156.6" y="1027.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1156.9" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1156.9" y="1043.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.9" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.03%)</title><rect x="1156.9" y="1027.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.06%)</title><rect x="1157.2" y="1091.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1157.2" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="1157.6" y="1075.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.6" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1157.6" y="1059.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.138] (1 samples, 0.03%)</title><rect x="1157.6" y="1043.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.6" y="1027.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.6" y="1011.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.6" y="995.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.6" y="979.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.6" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (1 samples, 0.03%)</title><rect x="1157.6" y="963.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.6" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1157.6" y="947.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.09%)</title><rect x="1157.9" y="1107.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.09%)</title><rect x="1157.9" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.9" y="1102.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.09%)</title><rect x="1157.9" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.138] (3 samples, 0.09%)</title><rect x="1157.9" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.09%)</title><rect x="1157.9" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.9" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.09%)</title><rect x="1157.9" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.9" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.09%)</title><rect x="1157.9" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="995.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="979.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="963.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="947.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="931.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="915.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="899.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.06%)</title><rect x="1157.9" y="883.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="787.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.9" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (1 samples, 0.03%)</title><rect x="1157.9" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.9" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1157.9" y="691.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.9" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (1 samples, 0.03%)</title><rect x="1158.2" y="867.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.2" y="878.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1158.2" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.2" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (1 samples, 0.03%)</title><rect x="1158.6" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.6" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1158.6" y="979.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.6" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.03%)</title><rect x="1158.9" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.03%)</title><rect x="1158.9" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1158.9" y="1075.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1158.9" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.9" y="1070.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1158.9" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="1054.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="1159.3" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.3" y="1118.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="1159.3" y="1091.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="1102.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="1159.3" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.3" y="1086.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.03%)</title><rect x="1159.6" y="1123.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1134.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="1159.6" y="1107.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.03%)</title><rect x="1159.6" y="1091.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.6" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.40%)</title><rect x="1159.9" y="1123.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.40%)</title><rect x="1159.9" y="1107.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.40%)</title><rect x="1159.9" y="1091.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.40%)</title><rect x="1159.9" y="1075.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.03%)</title><rect x="1159.9" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="1070.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.03%)</title><rect x="1159.9" y="1043.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.9" y="1054.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.03%)</title><rect x="1159.9" y="1027.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1159.9" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.9" y="1022.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="1159.9" y="995.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.37%)</title><rect x="1160.3" y="1059.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.37%)</title><rect x="1160.3" y="1043.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.3" y="1054.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1160.3" y="1027.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.3" y="1038.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1160.3" y="1011.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.3" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1160.3" y="995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.03%)</title><rect x="1160.3" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.3" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.03%)</title><rect x="1160.3" y="963.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.3" y="974.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.03%)</title><rect x="1160.3" y="947.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="958.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.03%)</title><rect x="1160.3" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.23%)</title><rect x="1160.6" y="1027.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.23%)</title><rect x="1160.6" y="1011.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.23%)</title><rect x="1160.6" y="995.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.23%)</title><rect x="1160.6" y="979.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.23%)</title><rect x="1160.6" y="963.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.20%)</title><rect x="1160.6" y="947.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="958.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1160.6" y="931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.6" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1160.6" y="915.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1160.6" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1160.6" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1160.6" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="1160.6" y="851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1160.6" y="835.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1160.6" y="819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.6" y="830.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="1160.6" y="803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.6" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="1160.6" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="798.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1160.6" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1160.9" y="931.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1160.9" y="915.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1160.9" y="899.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1160.9" y="883.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1160.9" y="867.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1160.9" y="851.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.9" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1160.9" y="835.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1160.9" y="819.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1160.9" y="803.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1160.9" y="787.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1160.9" y="771.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1160.9" y="755.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1160.9" y="739.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.9" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1160.9" y="723.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1160.9" y="707.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1160.9" y="691.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1160.9" y="675.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1160.9" y="659.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1160.9" y="643.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1160.9" y="627.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1160.9" y="611.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.9" y="622.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.03%)</title><rect x="1160.9" y="595.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1160.9" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.9" y="590.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1160.9" y="563.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="574.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.03%)</title><rect x="1160.9" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.9" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.03%)</title><rect x="1161.3" y="611.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1161.6" y="931.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1161.6" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1161.6" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1161.6" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1161.6" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1161.6" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1161.6" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1161.6" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1161.6" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1161.6" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1161.6" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1161.6" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1161.6" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1161.6" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1161.6" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1161.6" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1161.6" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1161.6" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1161.6" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1161.6" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1161.6" y="611.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1161.6" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1161.6" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1161.6" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1161.6" y="547.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1161.6" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1161.6" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1161.6" y="499.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1161.6" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1161.6" y="467.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1161.6" y="451.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1161.6" y="435.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1161.6" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1161.6" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.6" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1161.6" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1161.6" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.6" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1161.6" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.6" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1161.6" y="339.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1161.6" y="323.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.6" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1161.6" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1161.6" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1161.6" y="275.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1161.6" y="259.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.6" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1161.6" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1161.6" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="238.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1161.6" y="211.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.6" y="222.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1161.6" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.6" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1161.6" y="179.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.6" y="190.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.03%)</title><rect x="1161.6" y="163.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="174.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.03%)</title><rect x="1161.6" y="147.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1164.6" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.0" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.0" y="419.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.0" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.0" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.0" y="371.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.0" y="355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.03%)</title><rect x="1162.0" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.0" y="350.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="1162.0" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.0" y="334.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.03%)</title><rect x="1162.0" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="318.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1162.0" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.0" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1162.0" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="286.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1162.0" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="270.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.03%)</title><rect x="1162.3" y="451.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.3" y="462.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.03%)</title><rect x="1162.3" y="435.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.3" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1162.3" y="419.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.3" y="430.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1162.3" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="899.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="787.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="563.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="547.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="467.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="451.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="435.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="403.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="339.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="307.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="291.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="275.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="259.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="243.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="227.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="195.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1162.6" y="179.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1162.6" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1162.6" y="147.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1162.6" y="131.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1162.6" y="115.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1162.6" y="99.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.03%)</title><rect x="1162.6" y="83.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1162.6" y="67.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.6" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1162.6" y="51.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.03%)</title><rect x="1162.6" y="35.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1163.0" y="947.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1163.0" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.0" y="942.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.03%)</title><rect x="1163.0" y="915.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.0" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1163.0" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1163.0" y="883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.0" y="894.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1163.0" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.0" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1163.3" y="1027.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1163.3" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1163.3" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1163.3" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1163.3" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1163.3" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1163.3" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1163.3" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1163.3" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1163.3" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1163.3" y="867.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1163.3" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1163.3" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1163.3" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1163.3" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1163.3" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1163.3" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1163.3" y="755.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1163.3" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1163.3" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1163.3" y="707.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1163.3" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1163.3" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1163.3" y="659.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1163.3" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1163.3" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1163.3" y="611.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1163.3" y="595.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1163.3" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1163.3" y="563.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1163.3" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.09%)</title><rect x="1163.3" y="531.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.09%)</title><rect x="1163.3" y="515.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.09%)</title><rect x="1163.3" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.09%)</title><rect x="1163.3" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.09%)</title><rect x="1163.3" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.09%)</title><rect x="1163.3" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1163.3" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1163.3" y="419.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1163.3" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1163.3" y="387.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1163.3" y="371.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1163.3" y="355.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1163.3" y="339.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1163.3" y="323.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1163.3" y="307.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1163.3" y="291.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1163.3" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1163.3" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1163.3" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1163.3" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1163.3" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1163.3" y="195.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1163.3" y="179.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1163.3" y="163.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1163.3" y="147.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1163.3" y="131.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1163.3" y="115.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="126.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1163.3" y="99.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="110.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1163.3" y="83.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="94.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.03%)</title><rect x="1163.3" y="67.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.3" y="78.0"></text>
</g>
<g>
<title>IdealKit::IdealKit(GraphKit*, bool, bool) (1 samples, 0.03%)</title><rect x="1163.3" y="51.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1163.3" y="35.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.06%)</title><rect x="1163.7" y="435.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.06%)</title><rect x="1163.7" y="419.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1163.7" y="403.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="414.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1163.7" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="398.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1163.7" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="382.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1163.7" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="366.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1163.7" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.7" y="350.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1163.7" y="323.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="334.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1163.7" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.7" y="318.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.138] (1 samples, 0.03%)</title><rect x="1163.7" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.7" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="195.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="179.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="131.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="115.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="126.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.131] (1 samples, 0.03%)</title><rect x="1163.7" y="99.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="110.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1163.7" y="83.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1164.0" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1164.0" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.0" y="398.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1164.0" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="382.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1164.0" y="355.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="366.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1164.0" y="339.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1167.0" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1164.3" y="1011.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1164.3" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1164.3" y="979.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1164.3" y="963.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1164.3" y="947.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1164.3" y="931.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1164.3" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1164.3" y="899.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1164.3" y="883.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1164.3" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1164.3" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1164.3" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1164.3" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1164.3" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1164.3" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1164.3" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1164.3" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1164.3" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1164.3" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1164.3" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1164.3" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="702.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="1164.3" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.3" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="1164.7" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="1134.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="1164.7" y="1107.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="1118.0"></text>
</g>
<g>
<title>ConvI2LNode::Opcode() const (1 samples, 0.03%)</title><rect x="1164.7" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="1102.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.03%)</title><rect x="1165.0" y="1251.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1168.0" y="1262.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="1165.0" y="1235.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1168.0" y="1246.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="1165.0" y="1219.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1168.0" y="1230.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="1165.0" y="1203.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1168.0" y="1214.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="1165.0" y="1187.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1168.0" y="1198.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="1165.0" y="1171.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1168.0" y="1182.0"></text>
</g>
<g>
<title>__lru_cache_add (1 samples, 0.03%)</title><rect x="1165.0" y="1155.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1168.0" y="1166.0"></text>
</g>
<g>
<title>[tid=2749] (5 samples, 0.14%)</title><rect x="1165.3" y="1267.0" width="1.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1168.3" y="1278.0"></text>
</g>
<g>
<title>start_thread (5 samples, 0.14%)</title><rect x="1165.3" y="1251.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1168.3" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.14%)</title><rect x="1165.3" y="1235.0" width="1.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1168.3" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.14%)</title><rect x="1165.3" y="1219.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.3" y="1230.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.14%)</title><rect x="1165.3" y="1203.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.3" y="1214.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.14%)</title><rect x="1165.3" y="1187.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.3" y="1198.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 0.14%)</title><rect x="1165.3" y="1171.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.3" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 0.14%)</title><rect x="1165.3" y="1155.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 0.14%)</title><rect x="1165.3" y="1139.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 0.14%)</title><rect x="1165.3" y="1123.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.3" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 0.14%)</title><rect x="1165.3" y="1107.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (2 samples, 0.06%)</title><rect x="1165.3" y="1091.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.3" y="1102.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.06%)</title><rect x="1165.3" y="1075.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.3" y="1086.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.06%)</title><rect x="1165.3" y="1059.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.3" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.06%)</title><rect x="1165.3" y="1043.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.3" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.06%)</title><rect x="1165.3" y="1027.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.3" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.06%)</title><rect x="1165.3" y="1011.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.06%)</title><rect x="1165.3" y="995.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.3" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.06%)</title><rect x="1165.3" y="979.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.06%)</title><rect x="1165.3" y="963.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.3" y="974.0"></text>
</g>
<g>
<title>Instruction::as_Local() (1 samples, 0.03%)</title><rect x="1165.3" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="958.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.03%)</title><rect x="1165.7" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.7" y="958.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="1165.7" y="931.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.7" y="942.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1165.7" y="915.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="926.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1165.7" y="899.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="910.0"></text>
</g>
<g>
<title>MethodData::initialize() (1 samples, 0.03%)</title><rect x="1165.7" y="883.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.7" y="894.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="1165.7" y="867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.7" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.03%)</title><rect x="1166.0" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.0" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.03%)</title><rect x="1166.0" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.0" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.03%)</title><rect x="1166.0" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.0" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.06%)</title><rect x="1166.4" y="1091.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.4" y="1102.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.03%)</title><rect x="1166.4" y="1075.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.4" y="1086.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1166.4" y="1059.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.4" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.03%)</title><rect x="1166.4" y="1043.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.4" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.03%)</title><rect x="1166.4" y="1027.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.4" y="1038.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.03%)</title><rect x="1166.7" y="1075.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.7" y="1086.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.03%)</title><rect x="1166.7" y="1059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="1070.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.03%)</title><rect x="1166.7" y="1043.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="1054.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.03%)</title><rect x="1166.7" y="1027.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.7" y="1038.0"></text>
</g>
<g>
<title>[tid=2751] (3 samples, 0.09%)</title><rect x="1167.0" y="1267.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1170.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1167.0" y="1251.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1170.0" y="1262.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.03%)</title><rect x="1167.0" y="1235.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1170.0" y="1246.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.06%)</title><rect x="1167.4" y="1251.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1170.4" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.06%)</title><rect x="1167.4" y="1235.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1170.4" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.06%)</title><rect x="1167.4" y="1219.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.4" y="1230.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.06%)</title><rect x="1167.4" y="1203.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.4" y="1214.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.06%)</title><rect x="1167.4" y="1187.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.4" y="1198.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.06%)</title><rect x="1167.4" y="1171.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.4" y="1182.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.06%)</title><rect x="1167.4" y="1155.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="1166.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.03%)</title><rect x="1167.4" y="1139.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.4" y="1150.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.03%)</title><rect x="1167.7" y="1139.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1170.7" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.03%)</title><rect x="1167.7" y="1123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="1134.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.03%)</title><rect x="1167.7" y="1107.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="1118.0"></text>
</g>
<g>
<title>[tid=2752] (3 samples, 0.09%)</title><rect x="1168.0" y="1267.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1171.0" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1168.0" y="1251.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1171.0" y="1262.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.03%)</title><rect x="1168.0" y="1235.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1171.0" y="1246.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.06%)</title><rect x="1168.4" y="1251.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1171.4" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.06%)</title><rect x="1168.4" y="1235.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1171.4" y="1246.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.06%)</title><rect x="1168.4" y="1219.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.4" y="1230.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.03%)</title><rect x="1168.4" y="1203.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.4" y="1214.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.03%)</title><rect x="1168.4" y="1187.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.4" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.03%)</title><rect x="1168.7" y="1203.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.7" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1168.7" y="1187.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1168.7" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.7" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="1168.7" y="1155.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1171.7" y="1166.0"></text>
</g>
<g>
<title>[tid=2990] (21 samples, 0.60%)</title><rect x="1169.1" y="1267.0" width="7.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1172.1" y="1278.0"></text>
</g>
<g>
<title>start_thread (21 samples, 0.60%)</title><rect x="1169.1" y="1251.0" width="7.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1172.1" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (21 samples, 0.60%)</title><rect x="1169.1" y="1235.0" width="7.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1172.1" y="1246.0"></text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 0.60%)</title><rect x="1169.1" y="1219.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.1" y="1230.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1169.1" y="1203.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.1" y="1214.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.06%)</title><rect x="1169.1" y="1187.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.1" y="1198.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1169.1" y="1171.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1172.1" y="1182.0"></text>
</g>
<g>
<title>__GI_getrusage (1 samples, 0.03%)</title><rect x="1169.4" y="1171.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1172.4" y="1182.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1169.4" y="1155.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1172.4" y="1166.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1169.4" y="1139.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1172.4" y="1150.0"></text>
</g>
<g>
<title>__do_sys_getrusage (1 samples, 0.03%)</title><rect x="1169.4" y="1123.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1172.4" y="1134.0"></text>
</g>
<g>
<title>getrusage (1 samples, 0.03%)</title><rect x="1169.4" y="1107.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1172.4" y="1118.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 0.46%)</title><rect x="1169.7" y="1203.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 0.40%)</title><rect x="1169.7" y="1187.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1169.7" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="1182.0"></text>
</g>
<g>
<title>SpinPause (13 samples, 0.37%)</title><rect x="1170.1" y="1171.0" width="4.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1173.1" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.5" y="1187.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.5" y="1171.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.5" y="1155.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.5" y="1166.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.5" y="1139.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="1150.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.5" y="1123.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.03%)</title><rect x="1174.5" y="1107.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="1118.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.03%)</title><rect x="1174.5" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.8" y="1187.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.8" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1174.8" y="1171.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1174.8" y="1155.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="1166.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1174.8" y="1139.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.8" y="1150.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.03%)</title><rect x="1174.8" y="1123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="1134.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1175.1" y="1203.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="1214.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (1 samples, 0.03%)</title><rect x="1175.1" y="1187.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="1198.0"></text>
</g>
<g>
<title>nmethod::do_unloading_oops(unsigned char*, BoolObjectClosure*) (1 samples, 0.03%)</title><rect x="1175.1" y="1171.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.1" y="1182.0"></text>
</g>
<g>
<title>G1CMIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.03%)</title><rect x="1175.1" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.1" y="1166.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1175.5" y="1203.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.03%)</title><rect x="1175.5" y="1187.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="1198.0"></text>
</g>
<g>
<title>CardTable::clear(MemRegion) (1 samples, 0.03%)</title><rect x="1175.5" y="1171.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="1182.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="1175.8" y="1203.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="1214.0"></text>
</g>
<g>
<title>PosixSemaphore::wait() (1 samples, 0.03%)</title><rect x="1175.8" y="1187.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="1198.0"></text>
</g>
<g>
<title>[tid=2991] (21 samples, 0.60%)</title><rect x="1176.1" y="1267.0" width="7.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1179.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1176.1" y="1251.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1179.1" y="1262.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (2 samples, 0.06%)</title><rect x="1176.1" y="1235.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1179.1" y="1246.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1176.5" y="1219.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1179.5" y="1230.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1176.5" y="1203.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1179.5" y="1214.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1176.5" y="1187.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1179.5" y="1198.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1176.5" y="1171.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1179.5" y="1182.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="1176.5" y="1155.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1179.5" y="1166.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="1176.5" y="1139.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1179.5" y="1150.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1176.5" y="1123.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1179.5" y="1134.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1176.5" y="1107.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1179.5" y="1118.0"></text>
</g>
<g>
<title>start_thread (19 samples, 0.54%)</title><rect x="1176.8" y="1251.0" width="6.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1179.8" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (19 samples, 0.54%)</title><rect x="1176.8" y="1235.0" width="6.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1179.8" y="1246.0"></text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 0.54%)</title><rect x="1176.8" y="1219.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="1230.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1177.2" y="1203.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="1214.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.03%)</title><rect x="1177.2" y="1187.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.2" y="1198.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1177.2" y="1171.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1180.2" y="1182.0"></text>
</g>
<g>
<title>Threads::threads_do(ThreadClosure*) (1 samples, 0.03%)</title><rect x="1177.5" y="1187.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="1198.0"></text>
</g>
<g>
<title>SATBMarkQueue::apply_closure_and_empty(SATBBufferClosure*) (1 samples, 0.03%)</title><rect x="1177.5" y="1171.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="1182.0"></text>
</g>
<g>
<title>G1CMSATBBufferClosure::do_buffer(void**, unsigned long) (1 samples, 0.03%)</title><rect x="1177.5" y="1155.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1177.5" y="1139.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="1150.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1177.8" y="1203.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="1214.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1177.8" y="1187.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1198.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1177.8" y="1171.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="1182.0"></text>
</g>
<g>
<title>SurvRateGroup::record_surviving_words(int, unsigned long) (1 samples, 0.03%)</title><rect x="1177.8" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="1166.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 0.43%)</title><rect x="1178.2" y="1203.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 0.40%)</title><rect x="1178.2" y="1187.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.2" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.03%)</title><rect x="1178.5" y="1171.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1178.5" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="1166.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1178.9" y="1171.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="1182.0"></text>
</g>
<g>
<title>SpinPause (11 samples, 0.31%)</title><rect x="1179.2" y="1171.0" width="3.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1182.2" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1182.9" y="1187.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1182.9" y="1171.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1182.9" y="1155.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="1166.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1182.9" y="1139.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="1150.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1182.9" y="1123.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="1134.0"></text>
</g>
<g>
<title>[tid=2992] (20 samples, 0.57%)</title><rect x="1183.2" y="1267.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1186.2" y="1278.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1183.2" y="1251.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1186.2" y="1262.0"></text>
</g>
<g>
<title>start_thread (19 samples, 0.54%)</title><rect x="1183.6" y="1251.0" width="6.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.6" y="1262.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (19 samples, 0.54%)</title><rect x="1183.6" y="1235.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1186.6" y="1246.0"></text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 0.54%)</title><rect x="1183.6" y="1219.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="1230.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (3 samples, 0.09%)</title><rect x="1183.6" y="1203.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1214.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.06%)</title><rect x="1183.6" y="1187.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1183.6" y="1171.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="1182.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1183.9" y="1171.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1186.9" y="1182.0"></text>
</g>
<g>
<title>Threads::threads_do(ThreadClosure*) (1 samples, 0.03%)</title><rect x="1184.3" y="1187.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="1198.0"></text>
</g>
<g>
<title>SATBMarkQueue::apply_closure_and_empty(SATBBufferClosure*) (1 samples, 0.03%)</title><rect x="1184.3" y="1171.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1182.0"></text>
</g>
<g>
<title>G1CMSATBBufferClosure::do_buffer(void**, unsigned long) (1 samples, 0.03%)</title><rect x="1184.3" y="1155.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="1166.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1184.3" y="1139.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="1150.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 0.43%)</title><rect x="1184.6" y="1203.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 0.34%)</title><rect x="1184.6" y="1187.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="1198.0"></text>
</g>
<g>
<title>SpinPause (12 samples, 0.34%)</title><rect x="1184.6" y="1171.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1187.6" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.6" y="1187.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.6" y="1171.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.6" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.6" y="1155.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="1166.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.6" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="1150.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.6" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.03%)</title><rect x="1188.6" y="1107.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.6" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1188.6" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1189.0" y="1187.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1198.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1189.0" y="1171.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="1182.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1189.0" y="1155.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="1166.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.03%)</title><rect x="1189.3" y="1187.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.3" y="1198.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1189.7" y="1203.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.7" y="1214.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.03%)</title><rect x="1189.7" y="1187.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.7" y="1198.0"></text>
</g>
</g>
</svg>
