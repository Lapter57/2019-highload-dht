<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (4,395 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=4678] (4,052 samples, 92.20%)</title><rect x="10.0" y="1347.0" width="1087.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="1358.0">[NIO Selector #0 tid=4678]</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (2 samples, 0.05%)</title><rect x="10.0" y="1331.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (29 samples, 0.66%)</title><rect x="10.5" y="1331.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.5" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="10.8" y="1315.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (25 samples, 0.57%)</title><rect x="11.3" y="1315.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.3" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (25 samples, 0.57%)</title><rect x="11.3" y="1299.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.3" y="1310.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (22 samples, 0.50%)</title><rect x="11.3" y="1283.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.3" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.02%)</title><rect x="11.9" y="1267.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.9" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.02%)</title><rect x="12.1" y="1267.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.1" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (17 samples, 0.39%)</title><rect x="12.4" y="1267.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.4" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (13 samples, 0.30%)</title><rect x="12.4" y="1251.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.4" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (12 samples, 0.27%)</title><rect x="12.7" y="1235.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.7" y="1246.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.05%)</title><rect x="12.7" y="1219.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.7" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.05%)</title><rect x="12.7" y="1203.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.7" y="1214.0"></text>
</g>
<g>
<title>HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="12.7" y="1187.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.7" y="1198.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.02%)</title><rect x="13.0" y="1187.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.0" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="13.2" y="1219.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.2" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.02%)</title><rect x="13.5" y="1219.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.5" y="1230.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (7 samples, 0.16%)</title><rect x="13.8" y="1219.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.8" y="1230.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*) (1 samples, 0.02%)</title><rect x="13.8" y="1203.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.8" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.07%)</title><rect x="14.0" y="1203.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.0" y="1214.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (3 samples, 0.07%)</title><rect x="14.0" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.0" y="1198.0"></text>
</g>
<g>
<title>G1Analytics::predict_object_copy_time_ms(unsigned long, bool) const (1 samples, 0.02%)</title><rect x="14.0" y="1171.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.0" y="1182.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.05%)</title><rect x="14.3" y="1171.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.3" y="1182.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.02%)</title><rect x="14.3" y="1155.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.3" y="1166.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.02%)</title><rect x="14.6" y="1155.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.6" y="1166.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="14.8" y="1203.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.8" y="1214.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.02%)</title><rect x="15.1" y="1203.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.1" y="1214.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.02%)</title><rect x="15.1" y="1187.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.1" y="1198.0"></text>
</g>
<g>
<title>HSpaceCounters::update_used(unsigned long) (1 samples, 0.02%)</title><rect x="15.4" y="1203.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.4" y="1214.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit_prologue() (1 samples, 0.02%)</title><rect x="15.6" y="1219.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.6" y="1230.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (4 samples, 0.09%)</title><rect x="15.9" y="1251.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.9" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.05%)</title><rect x="15.9" y="1235.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="18.9" y="1246.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="16.2" y="1219.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.2" y="1230.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="16.4" y="1235.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.4" y="1246.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="16.7" y="1235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.7" y="1246.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="17.0" y="1267.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.0" y="1278.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="17.2" y="1283.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="20.2" y="1294.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="17.5" y="1283.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="20.5" y="1294.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.02%)</title><rect x="18.1" y="1315.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.1" y="1326.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.02%)</title><rect x="18.3" y="1331.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="21.3" y="1342.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (1 samples, 0.02%)</title><rect x="18.3" y="1315.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="21.3" y="1326.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) [clone .part.36] (1 samples, 0.02%)</title><rect x="18.3" y="1299.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.3" y="1310.0"></text>
</g>
<g>
<title>compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, CompiledMethod*) (1 samples, 0.02%)</title><rect x="18.3" y="1283.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.3" y="1294.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.02%)</title><rect x="18.3" y="1267.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="21.3" y="1278.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool) (1 samples, 0.02%)</title><rect x="18.3" y="1251.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="21.3" y="1262.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.02%)</title><rect x="18.6" y="1331.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="21.6" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.02%)</title><rect x="18.6" y="1315.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="21.6" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="18.9" y="1331.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="21.9" y="1342.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.02%)</title><rect x="18.9" y="1315.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="21.9" y="1326.0"></text>
</g>
<g>
<title>[unknown_Java] (25 samples, 0.57%)</title><rect x="19.1" y="1331.0" width="6.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="22.1" y="1342.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="25.3" y="1315.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="28.3" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="25.3" y="1299.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.3" y="1310.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="25.6" y="1315.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="28.6" y="1326.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,992 samples, 90.83%)</title><rect x="25.8" y="1331.0" width="1071.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.8" y="1342.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (152 samples, 3.46%)</title><rect x="27.5" y="1315.0" width="40.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.5" y="1326.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (4 samples, 0.09%)</title><rect x="28.3" y="1299.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.3" y="1310.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.05%)</title><rect x="28.8" y="1283.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (145 samples, 3.30%)</title><rect x="29.3" y="1299.0" width="39.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.3" y="1310.0">one..</text>
</g>
<g>
<title>.annobin_epoll_wait.c (131 samples, 2.98%)</title><rect x="30.9" y="1283.0" width="35.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="33.9" y="1294.0">.an..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (62 samples, 1.41%)</title><rect x="49.5" y="1267.0" width="16.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="52.5" y="1278.0"></text>
</g>
<g>
<title>do_syscall_64 (62 samples, 1.41%)</title><rect x="49.5" y="1251.0" width="16.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="52.5" y="1262.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (53 samples, 1.21%)</title><rect x="51.9" y="1235.0" width="14.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="54.9" y="1246.0"></text>
</g>
<g>
<title>do_epoll_wait (50 samples, 1.14%)</title><rect x="52.7" y="1219.0" width="13.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="55.7" y="1230.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.16%)</title><rect x="53.5" y="1203.0" width="1.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="56.5" y="1214.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.11%)</title><rect x="54.0" y="1187.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="57.0" y="1198.0"></text>
</g>
<g>
<title>ep_poll (39 samples, 0.89%)</title><rect x="55.4" y="1203.0" width="10.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="58.4" y="1214.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (27 samples, 0.61%)</title><rect x="57.0" y="1187.0" width="7.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="60.0" y="1198.0"></text>
</g>
<g>
<title>ep_send_events_proc (19 samples, 0.43%)</title><rect x="58.1" y="1171.0" width="5.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="61.1" y="1182.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (14 samples, 0.32%)</title><rect x="59.4" y="1155.0" width="3.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="62.4" y="1166.0"></text>
</g>
<g>
<title>sock_poll (11 samples, 0.25%)</title><rect x="60.2" y="1139.0" width="3.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="63.2" y="1150.0"></text>
</g>
<g>
<title>tcp_poll (5 samples, 0.11%)</title><rect x="61.8" y="1123.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="64.8" y="1134.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.02%)</title><rect x="62.9" y="1107.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="65.9" y="1118.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.07%)</title><rect x="63.2" y="1171.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="66.2" y="1182.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.02%)</title><rect x="64.0" y="1171.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="67.0" y="1182.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.02%)</title><rect x="64.2" y="1187.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="67.2" y="1198.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (5 samples, 0.11%)</title><rect x="64.5" y="1187.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="67.5" y="1198.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.07%)</title><rect x="65.0" y="1171.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="68.0" y="1182.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.07%)</title><rect x="65.0" y="1155.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="68.0" y="1166.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.05%)</title><rect x="65.3" y="1139.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="68.3" y="1150.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.02%)</title><rect x="65.8" y="1203.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="68.8" y="1214.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.02%)</title><rect x="66.1" y="1283.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="69.1" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="66.4" y="1283.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="69.4" y="1294.0"></text>
</g>
<g>
<title>__GI___clock_gettime (4 samples, 0.09%)</title><rect x="66.7" y="1283.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="69.7" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="67.5" y="1267.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="70.5" y="1278.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.02%)</title><rect x="67.7" y="1283.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="70.7" y="1294.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="68.0" y="1283.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="71.0" y="1294.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (3,834 samples, 87.24%)</title><rect x="68.3" y="1315.0" width="1029.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.3" y="1326.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,832 samples, 87.19%)</title><rect x="68.5" y="1299.0" width="1028.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.5" y="1310.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,714 samples, 84.51%)</title><rect x="68.8" y="1283.0" width="997.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.8" y="1294.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,664 samples, 83.37%)</title><rect x="71.5" y="1267.0" width="983.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.5" y="1278.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,663 samples, 83.34%)</title><rect x="71.8" y="1251.0" width="983.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.8" y="1262.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (3,654 samples, 83.14%)</title><rect x="72.0" y="1235.0" width="981.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.0" y="1246.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (728 samples, 16.56%)</title><rect x="72.0" y="1219.0" width="195.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.0" y="1230.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (718 samples, 16.34%)</title><rect x="73.9" y="1203.0" width="192.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.9" y="1214.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.20%)</title><rect x="73.9" y="1187.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.9" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.14%)</title><rect x="74.7" y="1171.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.7" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.02%)</title><rect x="74.7" y="1155.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.07%)</title><rect x="75.0" y="1155.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="75.2" y="1139.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="75.2" y="1123.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="75.5" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="75.5" y="1123.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="75.8" y="1155.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.8" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="75.8" y="1139.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.8" y="1150.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (709 samples, 16.13%)</title><rect x="76.3" y="1187.0" width="190.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.3" y="1198.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (709 samples, 16.13%)</title><rect x="76.3" y="1171.0" width="190.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.3" y="1182.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (707 samples, 16.09%)</title><rect x="76.6" y="1155.0" width="189.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.6" y="1166.0">one/nio/net/Session$Array..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (707 samples, 16.09%)</title><rect x="76.6" y="1139.0" width="189.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.6" y="1150.0">one/nio/net/NativeSocket...</text>
</g>
<g>
<title>.annobin_send.c (693 samples, 15.77%)</title><rect x="77.4" y="1123.0" width="186.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="80.4" y="1134.0">.annobin_send.c</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.05%)</title><rect x="86.0" y="1107.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="89.0" y="1118.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (659 samples, 14.99%)</title><rect x="86.5" y="1107.0" width="177.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="89.5" y="1118.0">entry_SYSCALL_64_after_..</text>
</g>
<g>
<title>do_syscall_64 (659 samples, 14.99%)</title><rect x="86.5" y="1091.0" width="177.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="89.5" y="1102.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (644 samples, 14.65%)</title><rect x="90.5" y="1075.0" width="173.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="93.5" y="1086.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (643 samples, 14.63%)</title><rect x="90.8" y="1059.0" width="172.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="93.8" y="1070.0">__sys_sendto</text>
</g>
<g>
<title>fput (1 samples, 0.02%)</title><rect x="91.6" y="1043.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="94.6" y="1054.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.02%)</title><rect x="91.9" y="1043.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="94.9" y="1054.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.05%)</title><rect x="92.2" y="1043.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="95.2" y="1054.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.02%)</title><rect x="92.4" y="1027.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="95.4" y="1038.0"></text>
</g>
<g>
<title>sock_sendmsg (626 samples, 14.24%)</title><rect x="92.7" y="1043.0" width="168.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="95.7" y="1054.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (1 samples, 0.02%)</title><rect x="92.7" y="1027.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="95.7" y="1038.0"></text>
</g>
<g>
<title>security_socket_sendmsg (8 samples, 0.18%)</title><rect x="93.0" y="1027.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="96.0" y="1038.0"></text>
</g>
<g>
<title>sock_has_perm (7 samples, 0.16%)</title><rect x="93.2" y="1011.0" width="1.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="96.2" y="1022.0"></text>
</g>
<g>
<title>avc_has_perm (6 samples, 0.14%)</title><rect x="93.5" y="995.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="96.5" y="1006.0"></text>
</g>
<g>
<title>tcp_sendmsg (617 samples, 14.04%)</title><rect x="95.1" y="1027.0" width="165.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="98.1" y="1038.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.05%)</title><rect x="95.1" y="1011.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="98.1" y="1022.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.07%)</title><rect x="95.6" y="1011.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="98.6" y="1022.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="95.9" y="995.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="98.9" y="1006.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.02%)</title><rect x="96.2" y="995.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="99.2" y="1006.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.02%)</title><rect x="96.5" y="1011.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="99.5" y="1022.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (611 samples, 13.90%)</title><rect x="96.7" y="1011.0" width="164.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="99.7" y="1022.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.02%)</title><rect x="98.6" y="995.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="101.6" y="1006.0"></text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.02%)</title><rect x="98.6" y="979.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="101.6" y="990.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (580 samples, 13.20%)</title><rect x="98.9" y="995.0" width="155.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="101.9" y="1006.0">__tcp_push_pending_f..</text>
</g>
<g>
<title>tcp_write_xmit (580 samples, 13.20%)</title><rect x="98.9" y="979.0" width="155.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="101.9" y="990.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (559 samples, 12.72%)</title><rect x="101.8" y="963.0" width="150.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="104.8" y="974.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (529 samples, 12.04%)</title><rect x="104.5" y="947.0" width="142.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="107.5" y="958.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (7 samples, 0.16%)</title><rect x="105.8" y="931.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="108.8" y="942.0"></text>
</g>
<g>
<title>ipv4_dst_check (5 samples, 0.11%)</title><rect x="106.4" y="915.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="109.4" y="926.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.02%)</title><rect x="107.7" y="931.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="110.7" y="942.0"></text>
</g>
<g>
<title>ip_local_out (106 samples, 2.41%)</title><rect x="108.0" y="931.0" width="28.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="111.0" y="942.0">ip..</text>
</g>
<g>
<title>__ip_local_out (106 samples, 2.41%)</title><rect x="108.0" y="915.0" width="28.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="111.0" y="926.0">__..</text>
</g>
<g>
<title>ip_send_check (1 samples, 0.02%)</title><rect x="108.0" y="899.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="111.0" y="910.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="108.0" y="883.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="111.0" y="894.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="108.0" y="867.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="111.0" y="878.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="108.0" y="851.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="111.0" y="862.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="108.0" y="835.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="111.0" y="846.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="108.0" y="819.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="111.0" y="830.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.02%)</title><rect x="108.0" y="803.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="111.0" y="814.0"></text>
</g>
<g>
<title>nf_hook_slow (105 samples, 2.39%)</title><rect x="108.3" y="899.0" width="28.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="111.3" y="910.0">nf..</text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (23 samples, 0.52%)</title><rect x="108.5" y="883.0" width="6.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="111.5" y="894.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (3 samples, 0.07%)</title><rect x="114.7" y="883.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="117.7" y="894.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (11 samples, 0.25%)</title><rect x="115.5" y="883.0" width="3.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="118.5" y="894.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (9 samples, 0.20%)</title><rect x="116.1" y="867.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="119.1" y="878.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (2 samples, 0.05%)</title><rect x="118.5" y="883.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="121.5" y="894.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (1 samples, 0.02%)</title><rect x="119.0" y="883.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="122.0" y="894.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (3 samples, 0.07%)</title><rect x="119.3" y="883.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="122.3" y="894.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack] (4 samples, 0.09%)</title><rect x="120.1" y="883.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="123.1" y="894.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (50 samples, 1.14%)</title><rect x="121.2" y="883.0" width="13.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="124.2" y="894.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (9 samples, 0.20%)</title><rect x="124.4" y="867.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="127.4" y="878.0"></text>
</g>
<g>
<title>get_l4proto	[nf_conntrack] (7 samples, 0.16%)</title><rect x="126.8" y="867.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="129.8" y="878.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (6 samples, 0.14%)</title><rect x="128.7" y="867.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="131.7" y="878.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet	[nf_conntrack] (11 samples, 0.25%)</title><rect x="130.3" y="867.0" width="2.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="133.3" y="878.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (3 samples, 0.07%)</title><rect x="132.4" y="851.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="135.4" y="862.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (5 samples, 0.11%)</title><rect x="133.2" y="867.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="136.2" y="878.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat] (3 samples, 0.07%)</title><rect x="134.6" y="883.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="137.6" y="894.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (1 samples, 0.02%)</title><rect x="134.6" y="867.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="137.6" y="878.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (2 samples, 0.05%)</title><rect x="134.8" y="867.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="137.8" y="878.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4 samples, 0.09%)</title><rect x="135.4" y="883.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="138.4" y="894.0"></text>
</g>
<g>
<title>netlbl_enabled (1 samples, 0.02%)</title><rect x="136.2" y="867.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="139.2" y="878.0"></text>
</g>
<g>
<title>ip_output (410 samples, 9.33%)</title><rect x="136.5" y="931.0" width="110.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="139.5" y="942.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (384 samples, 8.74%)</title><rect x="137.8" y="915.0" width="103.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="140.8" y="926.0">ip_finish_ou..</text>
</g>
<g>
<title>__dev_queue_xmit (32 samples, 0.73%)</title><rect x="138.1" y="899.0" width="8.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="141.1" y="910.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (23 samples, 0.52%)</title><rect x="139.9" y="883.0" width="6.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="142.9" y="894.0"></text>
</g>
<g>
<title>loopback_xmit (21 samples, 0.48%)</title><rect x="140.5" y="867.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="143.5" y="878.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.02%)</title><rect x="141.6" y="851.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="144.6" y="862.0"></text>
</g>
<g>
<title>netif_rx (10 samples, 0.23%)</title><rect x="141.8" y="851.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="144.8" y="862.0"></text>
</g>
<g>
<title>netif_rx_internal (10 samples, 0.23%)</title><rect x="141.8" y="835.0" width="2.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="144.8" y="846.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.11%)</title><rect x="142.1" y="819.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="145.1" y="830.0"></text>
</g>
<g>
<title>ktime_get_with_offset (4 samples, 0.09%)</title><rect x="143.4" y="819.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="146.4" y="830.0"></text>
</g>
<g>
<title>sk_free (4 samples, 0.09%)</title><rect x="144.5" y="851.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="147.5" y="862.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.05%)</title><rect x="145.6" y="851.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="148.6" y="862.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.02%)</title><rect x="146.1" y="883.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="149.1" y="894.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.02%)</title><rect x="146.4" y="883.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="149.4" y="894.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.02%)</title><rect x="146.4" y="867.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="149.4" y="878.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (351 samples, 7.99%)</title><rect x="146.7" y="899.0" width="94.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="149.7" y="910.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (350 samples, 7.96%)</title><rect x="146.9" y="883.0" width="94.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="149.9" y="894.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (344 samples, 7.83%)</title><rect x="148.5" y="867.0" width="92.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="151.5" y="878.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (344 samples, 7.83%)</title><rect x="148.5" y="851.0" width="92.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="151.5" y="862.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (338 samples, 7.69%)</title><rect x="150.2" y="835.0" width="90.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="153.2" y="846.0">net_rx_act..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.02%)</title><rect x="151.0" y="819.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="154.0" y="830.0"></text>
</g>
<g>
<title>process_backlog (334 samples, 7.60%)</title><rect x="151.2" y="819.0" width="89.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="154.2" y="830.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (328 samples, 7.46%)</title><rect x="152.8" y="803.0" width="88.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="155.8" y="814.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (7 samples, 0.16%)</title><rect x="153.4" y="787.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="156.4" y="798.0"></text>
</g>
<g>
<title>ip_rcv (319 samples, 7.26%)</title><rect x="155.3" y="787.0" width="85.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="158.3" y="798.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (254 samples, 5.78%)</title><rect x="156.1" y="771.0" width="68.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="159.1" y="782.0">ip_loca..</text>
</g>
<g>
<title>ip_local_deliver_finish (208 samples, 4.73%)</title><rect x="157.1" y="755.0" width="55.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="160.1" y="766.0">ip_lo..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (204 samples, 4.64%)</title><rect x="158.2" y="739.0" width="54.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="161.2" y="750.0">ip_pr..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.05%)</title><rect x="159.0" y="723.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="162.0" y="734.0"></text>
</g>
<g>
<title>tcp_v4_rcv (199 samples, 4.53%)</title><rect x="159.5" y="723.0" width="53.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="162.5" y="734.0">tcp_v..</text>
</g>
<g>
<title>__inet_lookup_established (15 samples, 0.34%)</title><rect x="160.6" y="707.0" width="4.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="163.6" y="718.0"></text>
</g>
<g>
<title>inet_ehashfn (4 samples, 0.09%)</title><rect x="163.6" y="691.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="166.6" y="702.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (4 samples, 0.09%)</title><rect x="164.6" y="707.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="167.6" y="718.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (4 samples, 0.09%)</title><rect x="164.6" y="691.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="167.6" y="702.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (4 samples, 0.09%)</title><rect x="164.6" y="675.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="167.6" y="686.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (174 samples, 3.96%)</title><rect x="165.7" y="707.0" width="46.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="168.7" y="718.0">tcp_..</text>
</g>
<g>
<title>tcp_rcv_established (173 samples, 3.94%)</title><rect x="166.0" y="691.0" width="46.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="169.0" y="702.0">tcp_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.02%)</title><rect x="166.5" y="675.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="169.5" y="686.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.02%)</title><rect x="166.8" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="169.8" y="686.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.02%)</title><rect x="166.8" y="659.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="169.8" y="670.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.02%)</title><rect x="166.8" y="643.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="169.8" y="654.0"></text>
</g>
<g>
<title>tcp_ack (62 samples, 1.41%)</title><rect x="167.1" y="675.0" width="16.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="170.1" y="686.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.14%)</title><rect x="172.2" y="659.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="175.2" y="670.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.07%)</title><rect x="172.2" y="643.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="175.2" y="654.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.05%)</title><rect x="173.0" y="643.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="176.0" y="654.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.02%)</title><rect x="173.5" y="643.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="176.5" y="654.0"></text>
</g>
<g>
<title>bictcp_acked (6 samples, 0.14%)</title><rect x="173.8" y="659.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="176.8" y="670.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.07%)</title><rect x="175.4" y="659.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="178.4" y="670.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.02%)</title><rect x="176.2" y="659.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="179.2" y="670.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.07%)</title><rect x="176.5" y="659.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="179.5" y="670.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.07%)</title><rect x="176.5" y="643.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="179.5" y="654.0"></text>
</g>
<g>
<title>rb_erase (2 samples, 0.05%)</title><rect x="177.3" y="659.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="180.3" y="670.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.05%)</title><rect x="177.8" y="659.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="180.8" y="670.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.02%)</title><rect x="178.3" y="659.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="181.3" y="670.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (8 samples, 0.18%)</title><rect x="178.6" y="659.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="181.6" y="670.0"></text>
</g>
<g>
<title>jiffies_to_usecs (2 samples, 0.05%)</title><rect x="180.2" y="643.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="183.2" y="654.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.02%)</title><rect x="180.8" y="659.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="183.8" y="670.0"></text>
</g>
<g>
<title>tcp_newly_delivered (4 samples, 0.09%)</title><rect x="181.0" y="659.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="184.0" y="670.0"></text>
</g>
<g>
<title>tcp_rack_advance (2 samples, 0.05%)</title><rect x="182.1" y="659.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="185.1" y="670.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.02%)</title><rect x="182.6" y="659.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="185.6" y="670.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.07%)</title><rect x="182.9" y="659.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="185.9" y="670.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.02%)</title><rect x="183.7" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="186.7" y="686.0"></text>
</g>
<g>
<title>tcp_data_queue (105 samples, 2.39%)</title><rect x="184.0" y="675.0" width="28.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="187.0" y="686.0">tc..</text>
</g>
<g>
<title>dst_release (1 samples, 0.02%)</title><rect x="185.3" y="659.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="188.3" y="670.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.02%)</title><rect x="185.6" y="659.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="188.6" y="670.0"></text>
</g>
<g>
<title>sock_def_readable (92 samples, 2.09%)</title><rect x="185.9" y="659.0" width="24.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="188.9" y="670.0">s..</text>
</g>
<g>
<title>__wake_up_common_lock (88 samples, 2.00%)</title><rect x="186.9" y="643.0" width="23.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="189.9" y="654.0">_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.05%)</title><rect x="187.5" y="627.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="190.5" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (84 samples, 1.91%)</title><rect x="188.0" y="627.0" width="22.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="191.0" y="638.0">_..</text>
</g>
<g>
<title>tcp_event_data_recv (4 samples, 0.09%)</title><rect x="210.6" y="659.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="213.6" y="670.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.05%)</title><rect x="211.6" y="659.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="214.6" y="670.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.02%)</title><rect x="212.2" y="675.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="215.2" y="686.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.02%)</title><rect x="212.2" y="659.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="215.2" y="670.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.02%)</title><rect x="212.4" y="707.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="215.4" y="718.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.02%)</title><rect x="212.7" y="707.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="215.7" y="718.0"></text>
</g>
<g>
<title>nf_hook_slow (42 samples, 0.96%)</title><rect x="213.0" y="755.0" width="11.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="216.0" y="766.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (29 samples, 0.66%)</title><rect x="213.8" y="739.0" width="7.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="216.8" y="750.0"></text>
</g>
<g>
<title>conntrack_mt	[xt_conntrack] (2 samples, 0.05%)</title><rect x="220.5" y="723.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="223.5" y="734.0"></text>
</g>
<g>
<title>conntrack_mt_v3	[xt_conntrack] (2 samples, 0.05%)</title><rect x="221.0" y="723.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="224.0" y="734.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (1 samples, 0.02%)</title><rect x="221.6" y="739.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="224.6" y="750.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (2 samples, 0.05%)</title><rect x="221.8" y="739.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="224.8" y="750.0"></text>
</g>
<g>
<title>iptable_security_hook	[iptable_security] (3 samples, 0.07%)</title><rect x="222.4" y="739.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="225.4" y="750.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (1 samples, 0.02%)</title><rect x="223.2" y="739.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="226.2" y="750.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (2 samples, 0.05%)</title><rect x="223.4" y="739.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="226.4" y="750.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (2 samples, 0.05%)</title><rect x="223.4" y="723.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="226.4" y="734.0"></text>
</g>
<g>
<title>nf_nat_inet_fn	[nf_nat] (1 samples, 0.02%)</title><rect x="224.0" y="739.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="227.0" y="750.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (5 samples, 0.11%)</title><rect x="224.3" y="771.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="227.3" y="782.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.02%)</title><rect x="225.6" y="771.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="228.6" y="782.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (1 samples, 0.02%)</title><rect x="225.6" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="228.6" y="766.0"></text>
</g>
<g>
<title>nf_hook_slow (56 samples, 1.27%)</title><rect x="225.9" y="771.0" width="15.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="228.9" y="782.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (2 samples, 0.05%)</title><rect x="227.2" y="755.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="230.2" y="766.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (39 samples, 0.89%)</title><rect x="227.7" y="755.0" width="10.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="230.7" y="766.0"></text>
</g>
<g>
<title>iptable_mangle_hook	[iptable_mangle] (1 samples, 0.02%)</title><rect x="238.2" y="755.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="241.2" y="766.0"></text>
</g>
<g>
<title>iptable_raw_hook	[iptable_raw] (3 samples, 0.07%)</title><rect x="238.5" y="755.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="241.5" y="766.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (1 samples, 0.02%)</title><rect x="239.3" y="755.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="242.3" y="766.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack] (2 samples, 0.05%)</title><rect x="239.6" y="755.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="242.6" y="766.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (2 samples, 0.05%)</title><rect x="240.1" y="755.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="243.1" y="766.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat] (1 samples, 0.02%)</title><rect x="240.6" y="755.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="243.6" y="766.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat] (1 samples, 0.02%)</title><rect x="240.6" y="739.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="243.6" y="750.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.09%)</title><rect x="240.9" y="915.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="243.9" y="926.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.02%)</title><rect x="241.7" y="899.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="244.7" y="910.0"></text>
</g>
<g>
<title>nf_hook_slow (17 samples, 0.39%)</title><rect x="242.0" y="915.0" width="4.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="245.0" y="926.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (7 samples, 0.16%)</title><rect x="242.5" y="899.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="245.5" y="910.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack] (1 samples, 0.02%)</title><rect x="244.4" y="899.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="247.4" y="910.0"></text>
</g>
<g>
<title>nf_confirm	[nf_conntrack] (3 samples, 0.07%)</title><rect x="244.7" y="899.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="247.7" y="910.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (3 samples, 0.07%)</title><rect x="244.7" y="883.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="247.7" y="894.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat] (1 samples, 0.02%)</title><rect x="245.5" y="899.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="248.5" y="910.0"></text>
</g>
<g>
<title>selinux_ip_postroute (2 samples, 0.05%)</title><rect x="245.7" y="899.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="248.7" y="910.0"></text>
</g>
<g>
<title>selinux_ipv4_postroute (1 samples, 0.02%)</title><rect x="246.3" y="899.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="249.3" y="910.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.09%)</title><rect x="246.5" y="947.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="249.5" y="958.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.02%)</title><rect x="247.6" y="947.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="250.6" y="958.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.02%)</title><rect x="247.9" y="947.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="250.9" y="958.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.05%)</title><rect x="248.1" y="947.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="251.1" y="958.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.05%)</title><rect x="248.7" y="947.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="251.7" y="958.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.05%)</title><rect x="249.2" y="947.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="252.2" y="958.0"></text>
</g>
<g>
<title>skb_push (2 samples, 0.05%)</title><rect x="249.8" y="947.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="252.8" y="958.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.05%)</title><rect x="250.3" y="947.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="253.3" y="958.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.02%)</title><rect x="250.8" y="947.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="253.8" y="958.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (3 samples, 0.07%)</title><rect x="251.1" y="947.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="254.1" y="958.0"></text>
</g>
<g>
<title>__list_del_entry_valid (1 samples, 0.02%)</title><rect x="251.6" y="931.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="254.6" y="942.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.09%)</title><rect x="251.9" y="963.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="254.9" y="974.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.07%)</title><rect x="253.0" y="963.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="256.0" y="974.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.02%)</title><rect x="253.0" y="947.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="256.0" y="958.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.02%)</title><rect x="253.0" y="931.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="256.0" y="942.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.02%)</title><rect x="253.2" y="947.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="256.2" y="958.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.02%)</title><rect x="253.5" y="947.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="256.5" y="958.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.07%)</title><rect x="253.8" y="963.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="256.8" y="974.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.05%)</title><rect x="254.1" y="947.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="257.1" y="958.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.02%)</title><rect x="254.6" y="995.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="257.6" y="1006.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.02%)</title><rect x="254.6" y="979.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="257.6" y="990.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.02%)</title><rect x="254.6" y="963.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="257.6" y="974.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (14 samples, 0.32%)</title><rect x="254.9" y="995.0" width="3.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="257.9" y="1006.0"></text>
</g>
<g>
<title>__alloc_skb (14 samples, 0.32%)</title><rect x="254.9" y="979.0" width="3.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="257.9" y="990.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (7 samples, 0.16%)</title><rect x="255.7" y="963.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="258.7" y="974.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (7 samples, 0.16%)</title><rect x="255.7" y="947.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="258.7" y="958.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.07%)</title><rect x="256.5" y="931.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="259.5" y="942.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.02%)</title><rect x="257.3" y="931.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="260.3" y="942.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.05%)</title><rect x="257.5" y="963.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="260.5" y="974.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.05%)</title><rect x="258.1" y="963.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="261.1" y="974.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.05%)</title><rect x="258.6" y="995.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="261.6" y="1006.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.02%)</title><rect x="258.9" y="979.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="261.9" y="990.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.02%)</title><rect x="259.2" y="995.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="262.2" y="1006.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.09%)</title><rect x="259.4" y="995.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="262.4" y="1006.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.09%)</title><rect x="259.4" y="979.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="262.4" y="990.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.07%)</title><rect x="259.7" y="963.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="262.7" y="974.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.02%)</title><rect x="260.5" y="995.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="263.5" y="1006.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.23%)</title><rect x="260.8" y="1043.0" width="2.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="263.8" y="1054.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.23%)</title><rect x="260.8" y="1027.0" width="2.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="263.8" y="1038.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.20%)</title><rect x="261.0" y="1011.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="264.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="263.5" y="1123.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="266.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.20%)</title><rect x="263.5" y="1107.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="266.5" y="1118.0"></text>
</g>
<g>
<title>.annobin_send.c (1 samples, 0.02%)</title><rect x="263.5" y="1091.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="266.5" y="1102.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (8 samples, 0.18%)</title><rect x="263.7" y="1091.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="266.7" y="1102.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="264.3" y="1075.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="267.3" y="1086.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.11%)</title><rect x="264.5" y="1075.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="267.5" y="1086.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.07%)</title><rect x="265.1" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="268.1" y="1070.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.05%)</title><rect x="265.9" y="1123.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="268.9" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="266.4" y="1155.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="269.4" y="1166.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="266.4" y="1139.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="269.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="266.4" y="1123.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="269.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.02%)</title><rect x="266.7" y="1203.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.7" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.02%)</title><rect x="266.9" y="1203.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.9" y="1214.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.02%)</title><rect x="267.2" y="1203.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.02%)</title><rect x="267.2" y="1187.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.2" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakhmin/SimpleHttpServer.entity (2,926 samples, 66.58%)</title><rect x="267.5" y="1219.0" width="785.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.5" y="1230.0">ru/mail/polis/service/shakhmin/SimpleHttpServer.entity</text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.09%)</title><rect x="268.0" y="1203.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="269.1" y="1203.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.1" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.05%)</title><rect x="269.4" y="1203.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.4" y="1214.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.05%)</title><rect x="269.4" y="1187.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.4" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.05%)</title><rect x="269.4" y="1171.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.4" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.05%)</title><rect x="269.4" y="1155.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.4" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.05%)</title><rect x="269.4" y="1139.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.4" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.02%)</title><rect x="269.4" y="1123.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.4" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkNativeAddress (1 samples, 0.02%)</title><rect x="269.4" y="1107.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.4" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.02%)</title><rect x="269.6" y="1123.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="269.9" y="1203.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.9" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="269.9" y="1187.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.9" y="1198.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="269.9" y="1171.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.9" y="1182.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="269.9" y="1155.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.9" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.05%)</title><rect x="270.2" y="1203.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.2" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (2,913 samples, 66.28%)</title><rect x="270.7" y="1203.0" width="782.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.7" y="1214.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (57 samples, 1.30%)</title><rect x="270.7" y="1187.0" width="15.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.7" y="1198.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (57 samples, 1.30%)</title><rect x="270.7" y="1171.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.7" y="1182.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (56 samples, 1.27%)</title><rect x="271.0" y="1155.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.0" y="1166.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (56 samples, 1.27%)</title><rect x="271.0" y="1139.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.0" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (56 samples, 1.27%)</title><rect x="271.0" y="1123.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.0" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (48 samples, 1.09%)</title><rect x="271.2" y="1107.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.2" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (21 samples, 0.48%)</title><rect x="271.8" y="1091.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.8" y="1102.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (21 samples, 0.48%)</title><rect x="271.8" y="1075.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.8" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (19 samples, 0.43%)</title><rect x="272.3" y="1059.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.3" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.43%)</title><rect x="272.3" y="1043.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.3" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (17 samples, 0.39%)</title><rect x="272.8" y="1027.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.02%)</title><rect x="272.8" y="1011.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.8" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/656433593.compare (16 samples, 0.36%)</title><rect x="273.1" y="1011.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.1" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (16 samples, 0.36%)</title><rect x="273.1" y="995.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (16 samples, 0.36%)</title><rect x="273.1" y="979.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.1" y="990.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (16 samples, 0.36%)</title><rect x="273.1" y="963.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.1" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (16 samples, 0.36%)</title><rect x="273.1" y="947.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.1" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (16 samples, 0.36%)</title><rect x="273.1" y="931.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.1" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1956470100.compare (16 samples, 0.36%)</title><rect x="273.1" y="915.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.1" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (16 samples, 0.36%)</title><rect x="273.1" y="899.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.1" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.11%)</title><rect x="273.1" y="883.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.11%)</title><rect x="273.1" y="867.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.1" y="878.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.09%)</title><rect x="273.4" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.4" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.02%)</title><rect x="273.9" y="835.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.9" y="846.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="274.2" y="835.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="277.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/514717142.apply (11 samples, 0.25%)</title><rect x="274.5" y="883.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.5" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (11 samples, 0.25%)</title><rect x="274.5" y="867.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.5" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="275.5" y="851.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.5" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.07%)</title><rect x="275.5" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="278.5" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="275.5" y="819.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.5" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="275.5" y="803.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.5" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="275.8" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="276.1" y="771.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="276.1" y="755.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="276.1" y="739.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.1" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="276.1" y="723.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.1" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="276.1" y="707.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="276.1" y="691.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.1" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="276.1" y="675.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.1" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.09%)</title><rect x="276.3" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.3" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.02%)</title><rect x="276.6" y="835.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.6" y="846.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="276.6" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.6" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="276.9" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.9" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="276.9" y="819.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.9" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="276.9" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.9" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.05%)</title><rect x="276.9" y="787.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (25 samples, 0.57%)</title><rect x="277.4" y="1091.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.4" y="1102.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (25 samples, 0.57%)</title><rect x="277.4" y="1075.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.4" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.05%)</title><rect x="277.4" y="1059.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.4" y="1070.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (23 samples, 0.52%)</title><rect x="277.9" y="1059.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.9" y="1070.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (23 samples, 0.52%)</title><rect x="277.9" y="1043.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.9" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.43%)</title><rect x="279.0" y="1027.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.0" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.43%)</title><rect x="279.0" y="1011.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.0" y="1022.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9 samples, 0.20%)</title><rect x="279.3" y="995.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.3" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.02%)</title><rect x="279.3" y="979.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.3" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.02%)</title><rect x="279.3" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.3" y="974.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.02%)</title><rect x="279.3" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.3" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.02%)</title><rect x="279.3" y="931.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.3" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (8 samples, 0.18%)</title><rect x="279.6" y="979.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.6" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (8 samples, 0.18%)</title><rect x="279.6" y="963.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.6" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (8 samples, 0.18%)</title><rect x="279.6" y="947.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.6" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (5 samples, 0.11%)</title><rect x="279.6" y="931.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.6" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="279.8" y="915.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.8" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.07%)</title><rect x="279.8" y="899.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.8" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="279.8" y="883.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="279.8" y="867.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.8" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="279.8" y="851.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.8" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="279.8" y="835.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.8" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="279.8" y="819.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.8" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="279.8" y="803.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.8" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="280.1" y="787.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.1" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="280.1" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="280.1" y="755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="283.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="280.1" y="739.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.1" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="280.4" y="787.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.4" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.02%)</title><rect x="280.6" y="915.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.6" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.6" y="899.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.6" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.6" y="883.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.6" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.6" y="867.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.6" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.6" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.6" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.6" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.6" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.6" y="819.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (1 samples, 0.02%)</title><rect x="280.9" y="931.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.9" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="280.9" y="915.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.9" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="280.9" y="899.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.9" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.9" y="883.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.9" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.9" y="867.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.9" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.9" y="851.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.9" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.9" y="835.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="280.9" y="819.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (2 samples, 0.05%)</title><rect x="281.2" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.2" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="281.2" y="915.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.2" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="281.2" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.2" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="281.4" y="883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.4" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="281.4" y="867.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.4" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/656433593.compare (9 samples, 0.20%)</title><rect x="281.7" y="995.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.7" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (9 samples, 0.20%)</title><rect x="281.7" y="979.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.7" y="990.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (9 samples, 0.20%)</title><rect x="281.7" y="963.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.7" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.20%)</title><rect x="281.7" y="947.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.7" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (9 samples, 0.20%)</title><rect x="281.7" y="931.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.7" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.20%)</title><rect x="281.7" y="915.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.7" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1956470100.compare (9 samples, 0.20%)</title><rect x="281.7" y="899.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.7" y="910.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.20%)</title><rect x="281.7" y="883.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.7" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.11%)</title><rect x="281.7" y="867.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.09%)</title><rect x="282.0" y="851.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.0" y="862.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.09%)</title><rect x="282.0" y="835.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="282.5" y="819.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.5" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.02%)</title><rect x="282.8" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.8" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/514717142.apply (4 samples, 0.09%)</title><rect x="283.1" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.1" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (4 samples, 0.09%)</title><rect x="283.1" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.1" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="283.3" y="835.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.3" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="283.3" y="819.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.3" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="283.3" y="803.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.3" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="283.3" y="787.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.3" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="283.9" y="835.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.05%)</title><rect x="284.1" y="1107.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="284.4" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.4" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.02%)</title><rect x="284.4" y="1075.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.4" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$54/1528022004.apply (5 samples, 0.11%)</title><rect x="284.7" y="1107.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.7" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.07%)</title><rect x="285.2" y="1091.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="285.2" y="1075.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.07%)</title><rect x="285.2" y="1059.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="285.2" y="1043.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="285.2" y="1027.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="285.5" y="1011.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="285.5" y="995.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.5" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="285.5" y="979.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.5" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="285.5" y="963.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.5" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="285.5" y="947.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.5" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="285.5" y="931.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.5" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="285.5" y="915.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.5" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="285.5" y="899.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.5" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="285.7" y="963.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.7" y="974.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (11 samples, 0.25%)</title><rect x="286.0" y="1187.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.0" y="1198.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (8 samples, 0.18%)</title><rect x="286.8" y="1171.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.8" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$56/1073865301.apply (8 samples, 0.18%)</title><rect x="286.8" y="1155.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.8" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.lambda$iterator$0 (7 samples, 0.16%)</title><rect x="287.1" y="1139.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.1" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (3 samples, 0.07%)</title><rect x="287.1" y="1123.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.1" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="287.1" y="1107.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.07%)</title><rect x="287.1" y="1091.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="287.1" y="1075.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.1" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="287.1" y="1059.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.1" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="287.3" y="1043.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="287.3" y="1027.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="287.3" y="1011.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="287.3" y="995.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="287.3" y="979.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.3" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="287.3" y="963.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="287.3" y="947.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="287.3" y="931.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.3" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="287.6" y="1043.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.6" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Value.getData (4 samples, 0.09%)</title><rect x="287.9" y="1123.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="287.9" y="1107.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="287.9" y="1091.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="287.9" y="1075.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="287.9" y="1059.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="287.9" y="1043.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="287.9" y="1027.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="287.9" y="1011.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="288.2" y="995.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="288.2" y="979.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.2" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="288.2" y="963.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.2" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="288.2" y="947.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.2" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="288.4" y="1107.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="291.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="288.4" y="1091.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.05%)</title><rect x="289.0" y="1187.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.0" y="1198.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="289.0" y="1171.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.0" y="1182.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="289.0" y="1155.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.0" y="1166.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.02%)</title><rect x="289.0" y="1139.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.0" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.02%)</title><rect x="289.2" y="1155.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.2" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (1 samples, 0.02%)</title><rect x="289.5" y="1187.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.5" y="1198.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="289.5" y="1171.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.5" y="1182.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="289.5" y="1155.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.5" y="1166.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="289.5" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.5" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="289.5" y="1123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.5" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (1 samples, 0.02%)</title><rect x="289.8" y="1187.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.8" y="1198.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="289.8" y="1171.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.8" y="1182.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="289.8" y="1155.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.8" y="1166.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="289.8" y="1139.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="289.8" y="1123.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.8" y="1134.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="289.8" y="1107.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="289.8" y="1091.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="289.8" y="1075.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.iterator (2,841 samples, 64.64%)</title><rect x="290.0" y="1187.0" width="762.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.0" y="1198.0">ru/mail/polis/dao/shakhmin/LSMDao.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator (2,841 samples, 64.64%)</title><rect x="290.0" y="1171.0" width="762.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.0" y="1182.0">ru/mail/polis/dao/shakhmin/LSMDao.rowsIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (195 samples, 4.44%)</title><rect x="290.3" y="1155.0" width="52.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.3" y="1166.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (195 samples, 4.44%)</title><rect x="290.3" y="1139.0" width="52.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.3" y="1150.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.05%)</title><rect x="298.1" y="1123.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.1" y="1134.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (1 samples, 0.02%)</title><rect x="298.4" y="1107.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.4" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (1 samples, 0.02%)</title><rect x="298.6" y="1123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.6" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (3 samples, 0.07%)</title><rect x="298.9" y="1123.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.9" y="1134.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (4 samples, 0.09%)</title><rect x="299.7" y="1123.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="302.7" y="1134.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.02%)</title><rect x="300.5" y="1107.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.5" y="1118.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (156 samples, 3.55%)</title><rect x="300.8" y="1123.0" width="41.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.8" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (156 samples, 3.55%)</title><rect x="300.8" y="1107.0" width="41.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.8" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (9 samples, 0.20%)</title><rect x="301.0" y="1091.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.0" y="1102.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (5 samples, 0.11%)</title><rect x="302.1" y="1075.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="305.1" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (146 samples, 3.32%)</title><rect x="303.5" y="1091.0" width="39.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.5" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (146 samples, 3.32%)</title><rect x="303.5" y="1075.0" width="39.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.5" y="1086.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (143 samples, 3.25%)</title><rect x="303.7" y="1059.0" width="38.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.7" y="1070.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (141 samples, 3.21%)</title><rect x="304.3" y="1043.0" width="37.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.3" y="1054.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (97 samples, 2.21%)</title><rect x="304.8" y="1027.0" width="26.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.8" y="1038.0">c..</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (19 samples, 0.43%)</title><rect x="305.1" y="1011.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.1" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (19 samples, 0.43%)</title><rect x="305.1" y="995.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.1" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (19 samples, 0.43%)</title><rect x="305.1" y="979.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.1" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (19 samples, 0.43%)</title><rect x="305.1" y="963.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="308.1" y="974.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (7 samples, 0.16%)</title><rect x="308.3" y="947.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="309.1" y="931.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.1" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (77 samples, 1.75%)</title><rect x="310.2" y="1011.0" width="20.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.2" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (77 samples, 1.75%)</title><rect x="310.2" y="995.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.2" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (77 samples, 1.75%)</title><rect x="310.2" y="979.0" width="20.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.2" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (30 samples, 0.68%)</title><rect x="310.7" y="963.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.7" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (17 samples, 0.39%)</title><rect x="311.2" y="947.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.2" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (17 samples, 0.39%)</title><rect x="311.2" y="931.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.2" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.14%)</title><rect x="314.2" y="915.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.2" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="314.2" y="899.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.2" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="314.2" y="883.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="314.2" y="867.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.2" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="314.2" y="851.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.2" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="314.7" y="835.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.7" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.07%)</title><rect x="315.0" y="819.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.0" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="315.5" y="803.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="315.5" y="787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.5" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="315.5" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.5" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (11 samples, 0.25%)</title><rect x="315.8" y="947.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.8" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (10 samples, 0.23%)</title><rect x="316.1" y="931.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.1" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="316.1" y="915.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.1" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="316.1" y="899.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.1" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="316.1" y="883.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="316.1" y="867.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.1" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="316.1" y="851.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.1" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.09%)</title><rect x="316.6" y="835.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.6" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="317.7" y="835.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.7" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="317.7" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="317.7" y="803.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.7" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="317.7" y="787.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.7" y="798.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.07%)</title><rect x="318.0" y="835.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="321.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (24 samples, 0.55%)</title><rect x="318.8" y="963.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.8" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (6 samples, 0.14%)</title><rect x="319.3" y="947.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.3" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (6 samples, 0.14%)</title><rect x="319.3" y="931.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="322.3" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (6 samples, 0.14%)</title><rect x="319.3" y="915.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="322.3" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="319.3" y="899.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="322.3" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="319.3" y="883.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="322.3" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="319.3" y="867.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.3" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="319.3" y="851.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.3" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="320.4" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.4" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="320.4" y="819.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.4" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="320.4" y="803.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.4" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="320.4" y="787.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="323.4" y="798.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="320.6" y="819.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.6" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="320.6" y="803.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="320.6" y="787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.6" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="320.6" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.6" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (11 samples, 0.25%)</title><rect x="320.9" y="947.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.9" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 0.25%)</title><rect x="320.9" y="931.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="323.9" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (11 samples, 0.25%)</title><rect x="320.9" y="915.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.9" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="321.2" y="899.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.2" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="321.2" y="883.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.23%)</title><rect x="321.2" y="867.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.2" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.11%)</title><rect x="321.4" y="851.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.4" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.11%)</title><rect x="321.4" y="835.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.4" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.11%)</title><rect x="321.4" y="819.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.11%)</title><rect x="321.4" y="803.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.4" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.07%)</title><rect x="321.7" y="787.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.7" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="322.5" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.5" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.09%)</title><rect x="322.8" y="851.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.8" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (4 samples, 0.09%)</title><rect x="323.9" y="947.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.9" y="958.0"></text>
</g>
<g>
<title>java/nio/Bits.swap (3 samples, 0.07%)</title><rect x="323.9" y="931.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="326.9" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="324.7" y="931.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.7" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="324.9" y="947.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.9" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="324.9" y="931.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.9" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="324.9" y="915.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.9" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="324.9" y="899.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.9" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.timestampAt (11 samples, 0.25%)</title><rect x="325.2" y="963.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="328.2" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (10 samples, 0.23%)</title><rect x="325.5" y="947.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.5" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.02%)</title><rect x="326.0" y="931.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.0" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.16%)</title><rect x="326.3" y="931.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.3" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="326.3" y="915.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.3" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="326.3" y="899.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.3" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="326.5" y="883.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.5" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="326.5" y="867.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.5" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="326.5" y="851.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.5" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="327.9" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (10 samples, 0.23%)</title><rect x="328.2" y="963.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.2" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="328.2" y="947.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.2" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.07%)</title><rect x="328.2" y="931.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="331.2" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="328.2" y="915.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.2" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="328.2" y="899.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.2" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="328.2" y="883.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.2" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="328.2" y="867.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.2" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="328.4" y="851.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.4" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (7 samples, 0.16%)</title><rect x="329.0" y="947.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.0" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 0.16%)</title><rect x="329.0" y="931.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.0" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="329.0" y="915.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.0" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="329.0" y="899.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.0" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="329.0" y="883.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.0" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="329.0" y="867.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.0" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="329.8" y="851.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.8" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.05%)</title><rect x="330.3" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="333.3" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.05%)</title><rect x="330.3" y="819.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title><rect x="330.3" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.3" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.05%)</title><rect x="330.3" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.3" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/656433593.compare (42 samples, 0.96%)</title><rect x="330.8" y="1027.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.8" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (41 samples, 0.93%)</title><rect x="331.1" y="1011.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (41 samples, 0.93%)</title><rect x="331.1" y="995.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (41 samples, 0.93%)</title><rect x="331.1" y="979.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.1" y="990.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (41 samples, 0.93%)</title><rect x="331.1" y="963.0" width="11.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.1" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (41 samples, 0.93%)</title><rect x="331.1" y="947.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.1" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1956470100.compare (40 samples, 0.91%)</title><rect x="331.1" y="931.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.1" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (40 samples, 0.91%)</title><rect x="331.1" y="915.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.1" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.43%)</title><rect x="331.1" y="899.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.1" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.43%)</title><rect x="331.1" y="883.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.1" y="894.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.32%)</title><rect x="332.2" y="867.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="335.2" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.09%)</title><rect x="333.5" y="851.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.5" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="334.1" y="835.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.1" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="334.3" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.3" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (2 samples, 0.05%)</title><rect x="334.6" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.05%)</title><rect x="335.1" y="851.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="338.1" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="335.4" y="835.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="338.4" y="846.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="335.7" y="851.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="338.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="335.9" y="867.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.9" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="335.9" y="851.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.9" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/514717142.apply (21 samples, 0.48%)</title><rect x="336.2" y="899.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.2" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (21 samples, 0.48%)</title><rect x="336.2" y="883.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.2" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (14 samples, 0.32%)</title><rect x="337.3" y="867.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.3" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (14 samples, 0.32%)</title><rect x="337.3" y="851.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.3" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (14 samples, 0.32%)</title><rect x="337.3" y="835.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.3" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (14 samples, 0.32%)</title><rect x="337.3" y="819.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.3" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.11%)</title><rect x="339.7" y="803.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="340.0" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="340.0" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.0" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="340.0" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.0" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.05%)</title><rect x="340.5" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.5" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.05%)</title><rect x="340.5" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title><rect x="340.5" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.05%)</title><rect x="340.5" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.5" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="341.0" y="867.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="344.0" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.02%)</title><rect x="341.0" y="851.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="344.0" y="862.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="341.0" y="835.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.0" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="341.3" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.3" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="341.3" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="344.3" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="341.3" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="344.3" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="341.6" y="803.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.6" y="814.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (1 samples, 0.02%)</title><rect x="341.8" y="931.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.8" y="942.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="341.8" y="915.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="344.8" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2 samples, 0.05%)</title><rect x="342.1" y="1059.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.1" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (8 samples, 0.18%)</title><rect x="342.7" y="1155.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.7" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (8 samples, 0.18%)</title><rect x="342.7" y="1139.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="345.7" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.14%)</title><rect x="343.2" y="1123.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.2" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.14%)</title><rect x="343.2" y="1107.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.2" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (3 samples, 0.07%)</title><rect x="343.2" y="1091.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="346.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.02%)</title><rect x="343.7" y="1075.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.07%)</title><rect x="344.0" y="1091.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.0" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.02%)</title><rect x="344.8" y="1155.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.8" y="1166.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.02%)</title><rect x="344.8" y="1139.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.8" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (43 samples, 0.98%)</title><rect x="345.1" y="1155.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.1" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (43 samples, 0.98%)</title><rect x="345.1" y="1139.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.1" y="1150.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (43 samples, 0.98%)</title><rect x="345.1" y="1123.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.1" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (21 samples, 0.48%)</title><rect x="345.1" y="1107.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.1" y="1118.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (21 samples, 0.48%)</title><rect x="345.1" y="1091.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.1" y="1102.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (21 samples, 0.48%)</title><rect x="345.1" y="1075.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.1" y="1086.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.43%)</title><rect x="345.3" y="1059.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.3" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19 samples, 0.43%)</title><rect x="345.3" y="1043.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="348.3" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2 samples, 0.05%)</title><rect x="345.3" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.3" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/656433593.compare (17 samples, 0.39%)</title><rect x="345.9" y="1027.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.9" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (17 samples, 0.39%)</title><rect x="345.9" y="1011.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (17 samples, 0.39%)</title><rect x="345.9" y="995.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (16 samples, 0.36%)</title><rect x="346.1" y="979.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.1" y="990.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (15 samples, 0.34%)</title><rect x="346.4" y="963.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.4" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (15 samples, 0.34%)</title><rect x="346.4" y="947.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.4" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1956470100.compare (15 samples, 0.34%)</title><rect x="346.4" y="931.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.4" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (15 samples, 0.34%)</title><rect x="346.4" y="915.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.4" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.09%)</title><rect x="346.4" y="899.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="349.4" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.09%)</title><rect x="346.4" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="349.4" y="894.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.07%)</title><rect x="346.4" y="867.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.05%)</title><rect x="346.7" y="851.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="349.7" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.02%)</title><rect x="346.7" y="835.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="349.7" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="347.0" y="835.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title><rect x="347.2" y="867.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.2" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="347.2" y="851.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.2" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/514717142.apply (11 samples, 0.25%)</title><rect x="347.5" y="899.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.5" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (11 samples, 0.25%)</title><rect x="347.5" y="883.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.5" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (5 samples, 0.11%)</title><rect x="348.0" y="867.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.0" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (5 samples, 0.11%)</title><rect x="348.0" y="851.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.0" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (5 samples, 0.11%)</title><rect x="348.0" y="835.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.0" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="348.0" y="819.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.0" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="348.6" y="819.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="351.6" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.09%)</title><rect x="349.4" y="867.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.4" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.02%)</title><rect x="349.4" y="851.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="352.4" y="862.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="349.4" y="835.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.4" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="349.6" y="851.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="352.6" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="349.9" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="350.2" y="819.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.2" y="830.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1 samples, 0.02%)</title><rect x="350.4" y="1059.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.4" y="1070.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (22 samples, 0.50%)</title><rect x="350.7" y="1107.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.7" y="1118.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (22 samples, 0.50%)</title><rect x="350.7" y="1091.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.7" y="1102.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (22 samples, 0.50%)</title><rect x="350.7" y="1075.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.7" y="1086.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (22 samples, 0.50%)</title><rect x="350.7" y="1059.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.7" y="1070.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.46%)</title><rect x="351.0" y="1043.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.0" y="1054.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.46%)</title><rect x="351.0" y="1027.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.0" y="1038.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9 samples, 0.20%)</title><rect x="351.0" y="1011.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.0" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (2 samples, 0.05%)</title><rect x="351.2" y="995.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.2" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="351.2" y="979.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.2" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="351.2" y="963.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.2" y="974.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (2 samples, 0.05%)</title><rect x="351.2" y="947.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.2" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.02%)</title><rect x="351.5" y="931.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.5" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="351.5" y="915.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="354.5" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.14%)</title><rect x="351.8" y="995.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.8" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.next (6 samples, 0.14%)</title><rect x="351.8" y="979.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.8" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.transform (5 samples, 0.11%)</title><rect x="352.1" y="963.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (1 samples, 0.02%)</title><rect x="352.1" y="947.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.1" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="352.1" y="931.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.1" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.02%)</title><rect x="352.1" y="915.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.1" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.1" y="899.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.1" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.1" y="883.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.1" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.1" y="867.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.1" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.1" y="851.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.1" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.1" y="835.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.1" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.1" y="819.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.1" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (3 samples, 0.07%)</title><rect x="352.3" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.3" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="352.3" y="931.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.3" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.05%)</title><rect x="352.3" y="915.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.3" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="352.3" y="899.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.3" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.6" y="883.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.6" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.6" y="867.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.6" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.6" y="851.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.6" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.6" y="835.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.6" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.02%)</title><rect x="352.9" y="931.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.9" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.9" y="915.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.9" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.9" y="899.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.9" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.9" y="883.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.9" y="867.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.9" y="851.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.9" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="352.9" y="835.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.9" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="352.9" y="819.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.9" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="352.9" y="803.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.9" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="352.9" y="787.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.9" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.valueAt (1 samples, 0.02%)</title><rect x="353.1" y="947.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.1" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.02%)</title><rect x="353.1" y="931.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.1" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="353.1" y="915.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.1" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="353.1" y="899.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.1" y="910.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="353.1" y="883.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="353.1" y="867.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="356.1" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="353.1" y="851.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.1" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="353.1" y="835.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.1" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="353.1" y="819.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.1" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="353.1" y="803.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="353.1" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.1" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="353.1" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao$$Lambda$53/656433593.compare (11 samples, 0.25%)</title><rect x="353.4" y="1011.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.4" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.compareTo (11 samples, 0.25%)</title><rect x="353.4" y="995.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (11 samples, 0.25%)</title><rect x="353.4" y="979.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.4" y="990.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 0.25%)</title><rect x="353.4" y="963.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.4" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (10 samples, 0.23%)</title><rect x="353.7" y="947.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.7" y="958.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.23%)</title><rect x="353.7" y="931.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.7" y="942.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$49/1956470100.compare (9 samples, 0.20%)</title><rect x="353.7" y="915.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.7" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.20%)</title><rect x="353.7" y="899.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.7" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.07%)</title><rect x="353.7" y="883.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.7" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.07%)</title><rect x="353.7" y="867.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.7" y="878.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.07%)</title><rect x="353.7" y="851.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (3 samples, 0.07%)</title><rect x="353.7" y="835.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.7" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row$$Lambda$48/514717142.apply (6 samples, 0.14%)</title><rect x="354.5" y="883.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="357.5" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/Row.getKey (6 samples, 0.14%)</title><rect x="354.5" y="867.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.5" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.07%)</title><rect x="354.7" y="851.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.07%)</title><rect x="354.7" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.7" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.07%)</title><rect x="354.7" y="819.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.7" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="355.0" y="803.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.0" y="814.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="355.0" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="355.0" y="771.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.0" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="355.0" y="755.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.0" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="355.3" y="739.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.3" y="750.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="355.3" y="723.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.3" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="355.3" y="707.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.3" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="355.3" y="691.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.3" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="355.3" y="675.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.3" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="355.5" y="851.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.5" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="355.5" y="835.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.5" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="355.5" y="819.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="355.8" y="803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.8" y="814.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$51/1311333448.compare (1 samples, 0.02%)</title><rect x="356.1" y="915.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.1" y="926.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1 samples, 0.02%)</title><rect x="356.3" y="1043.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.3" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (110 samples, 2.50%)</title><rect x="356.6" y="1155.0" width="29.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.6" y="1166.0">ru..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (72 samples, 1.64%)</title><rect x="357.2" y="1139.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.2" y="1150.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (72 samples, 1.64%)</title><rect x="357.2" y="1123.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.2" y="1134.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (65 samples, 1.48%)</title><rect x="357.7" y="1107.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.7" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (15 samples, 0.34%)</title><rect x="357.7" y="1091.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="360.7" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (15 samples, 0.34%)</title><rect x="357.7" y="1075.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.7" y="1086.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (50 samples, 1.14%)</title><rect x="361.7" y="1091.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.7" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (50 samples, 1.14%)</title><rect x="361.7" y="1075.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.7" y="1086.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (47 samples, 1.07%)</title><rect x="362.5" y="1059.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (3 samples, 0.07%)</title><rect x="363.9" y="1043.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (39 samples, 0.89%)</title><rect x="364.7" y="1043.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (29 samples, 0.66%)</title><rect x="367.4" y="1027.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="367.6" y="1011.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.07%)</title><rect x="367.9" y="1011.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.9" y="1022.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (22 samples, 0.50%)</title><rect x="368.7" y="1011.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.02%)</title><rect x="370.3" y="995.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.27%)</title><rect x="370.6" y="995.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.11%)</title><rect x="371.9" y="979.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.9" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.05%)</title><rect x="373.3" y="979.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (3 samples, 0.07%)</title><rect x="373.8" y="995.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="376.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.02%)</title><rect x="374.3" y="979.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="377.3" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="374.6" y="1011.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.05%)</title><rect x="374.6" y="995.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.6" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (5 samples, 0.11%)</title><rect x="375.1" y="1107.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.1" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.&lt;init&gt; (2 samples, 0.05%)</title><rect x="375.9" y="1091.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="378.9" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (11 samples, 0.25%)</title><rect x="376.5" y="1139.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="379.5" y="1150.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.&lt;init&gt; (2 samples, 0.05%)</title><rect x="378.9" y="1123.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.9" y="1134.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="379.2" y="1107.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.2" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (25 samples, 0.57%)</title><rect x="379.4" y="1139.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.4" y="1150.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (25 samples, 0.57%)</title><rect x="379.4" y="1123.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.4" y="1134.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (25 samples, 0.57%)</title><rect x="379.4" y="1107.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="382.4" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (25 samples, 0.57%)</title><rect x="379.4" y="1091.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.4" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (11 samples, 0.25%)</title><rect x="383.2" y="1075.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.23%)</title><rect x="383.5" y="1059.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.23%)</title><rect x="383.5" y="1043.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.11%)</title><rect x="383.7" y="1027.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="384.3" y="1011.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.05%)</title><rect x="384.5" y="1011.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.09%)</title><rect x="385.1" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.07%)</title><rect x="385.3" y="1011.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.3" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.iterator (2,483 samples, 56.50%)</title><rect x="386.2" y="1155.0" width="666.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.2" y="1166.0">ru/mail/polis/dao/shakhmin/SSTable.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="386.4" y="1139.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="389.4" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt; (2,480 samples, 56.43%)</title><rect x="387.0" y="1139.0" width="665.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="390.0" y="1150.0">ru/mail/polis/dao/shakhmin/SSTable$SSTableIterator.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.position (2,477 samples, 56.36%)</title><rect x="387.8" y="1123.0" width="665.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.8" y="1134.0">ru/mail/polis/dao/shakhmin/SSTable.position</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (542 samples, 12.33%)</title><rect x="392.6" y="1107.0" width="145.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.6" y="1118.0">java/nio/ByteBuffe..</text>
</g>
<g>
<title>java/nio/Buffer.position (38 samples, 0.86%)</title><rect x="407.9" y="1091.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (22 samples, 0.50%)</title><rect x="412.2" y="1075.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (15 samples, 0.34%)</title><rect x="418.1" y="1091.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="421.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (345 samples, 7.85%)</title><rect x="422.1" y="1091.0" width="92.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.1" y="1102.0">java/nio/Bu..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (23 samples, 0.52%)</title><rect x="456.2" y="1075.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (41 samples, 0.93%)</title><rect x="462.4" y="1075.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 0.32%)</title><rect x="467.8" y="1059.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="470.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (7 samples, 0.16%)</title><rect x="471.5" y="1059.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (31 samples, 0.71%)</title><rect x="473.4" y="1075.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (47 samples, 1.07%)</title><rect x="481.7" y="1075.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="484.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (11 samples, 0.25%)</title><rect x="491.4" y="1059.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.4" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (35 samples, 0.80%)</title><rect x="494.4" y="1075.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="497.4" y="1086.0"></text>
</g>
<g>
<title>vtable stub (41 samples, 0.93%)</title><rect x="503.7" y="1075.0" width="11.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="506.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (62 samples, 1.41%)</title><rect x="514.8" y="1091.0" width="16.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.8" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.18%)</title><rect x="527.9" y="1075.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="530.9" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (5 samples, 0.11%)</title><rect x="530.1" y="1075.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="533.1" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (25 samples, 0.57%)</title><rect x="531.4" y="1091.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.4" y="1102.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (25 samples, 0.57%)</title><rect x="531.4" y="1075.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.4" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.keyAt (237 samples, 5.39%)</title><rect x="538.1" y="1107.0" width="63.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.1" y="1118.0">ru/mail..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (1 samples, 0.02%)</title><rect x="538.1" y="1091.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="541.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (1 samples, 0.02%)</title><rect x="538.1" y="1075.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.1" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (1 samples, 0.02%)</title><rect x="538.1" y="1059.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.1" y="1070.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.02%)</title><rect x="538.1" y="1043.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="541.1" y="1054.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.02%)</title><rect x="538.1" y="1027.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="541.1" y="1038.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.02%)</title><rect x="538.1" y="1011.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="541.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (136 samples, 3.09%)</title><rect x="538.4" y="1091.0" width="36.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="541.4" y="1102.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (136 samples, 3.09%)</title><rect x="538.4" y="1075.0" width="36.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="541.4" y="1086.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (136 samples, 3.09%)</title><rect x="538.4" y="1059.0" width="36.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.4" y="1070.0">jav..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (136 samples, 3.09%)</title><rect x="538.4" y="1043.0" width="36.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.4" y="1054.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (136 samples, 3.09%)</title><rect x="538.4" y="1027.0" width="36.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="541.4" y="1038.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (136 samples, 3.09%)</title><rect x="538.4" y="1011.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="541.4" y="1022.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (136 samples, 3.09%)</title><rect x="538.4" y="995.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="541.4" y="1006.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (136 samples, 3.09%)</title><rect x="538.4" y="979.0" width="36.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.4" y="990.0">jav..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (44 samples, 1.00%)</title><rect x="538.4" y="963.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.4" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (30 samples, 0.68%)</title><rect x="542.1" y="947.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.1" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (28 samples, 0.64%)</title><rect x="542.7" y="931.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.7" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (28 samples, 0.64%)</title><rect x="542.7" y="915.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="545.7" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (92 samples, 2.09%)</title><rect x="550.2" y="963.0" width="24.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.2" y="974.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.50%)</title><rect x="564.4" y="947.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="567.4" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (17 samples, 0.39%)</title><rect x="570.3" y="947.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.3" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (11 samples, 0.25%)</title><rect x="571.9" y="931.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="574.9" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.25%)</title><rect x="571.9" y="915.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.9" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (100 samples, 2.28%)</title><rect x="574.9" y="1091.0" width="26.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="577.9" y="1102.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (100 samples, 2.28%)</title><rect x="574.9" y="1075.0" width="26.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="577.9" y="1086.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (100 samples, 2.28%)</title><rect x="574.9" y="1059.0" width="26.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="577.9" y="1070.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (100 samples, 2.28%)</title><rect x="574.9" y="1043.0" width="26.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.9" y="1054.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (100 samples, 2.28%)</title><rect x="574.9" y="1027.0" width="26.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="577.9" y="1038.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (100 samples, 2.28%)</title><rect x="574.9" y="1011.0" width="26.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.9" y="1022.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (100 samples, 2.28%)</title><rect x="574.9" y="995.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="577.9" y="1006.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (32 samples, 0.73%)</title><rect x="575.2" y="979.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.2" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (32 samples, 0.73%)</title><rect x="575.2" y="963.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.2" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (25 samples, 0.57%)</title><rect x="577.0" y="947.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="580.0" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (25 samples, 0.57%)</title><rect x="577.0" y="931.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="580.0" y="942.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="583.5" y="915.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="586.5" y="926.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="583.5" y="899.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="586.5" y="910.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="583.5" y="883.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="586.5" y="894.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="583.5" y="867.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="586.5" y="878.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="583.5" y="851.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="586.5" y="862.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="583.5" y="835.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="586.5" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (67 samples, 1.52%)</title><rect x="583.8" y="979.0" width="17.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.8" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (67 samples, 1.52%)</title><rect x="583.8" y="963.0" width="17.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.8" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (18 samples, 0.41%)</title><rect x="590.5" y="947.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.5" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (24 samples, 0.55%)</title><rect x="595.3" y="947.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="598.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (23 samples, 0.52%)</title><rect x="595.6" y="931.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.6" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (1,680 samples, 38.23%)</title><rect x="601.7" y="1107.0" width="451.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="604.7" y="1118.0">ru/mail/polis/dao/shakhmin/SSTable.rowAt</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (961 samples, 21.87%)</title><rect x="630.2" y="1091.0" width="258.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.2" y="1102.0">java/nio/DirectByteBufferR.asReadO..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (928 samples, 21.11%)</title><rect x="639.1" y="1075.0" width="249.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="642.1" y="1086.0">java/nio/DirectByteBufferR.duplic..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 0.34%)</title><rect x="678.5" y="1059.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="681.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (766 samples, 17.43%)</title><rect x="682.6" y="1059.0" width="205.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.6" y="1070.0">java/nio/DirectByteBufferR...</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (766 samples, 17.43%)</title><rect x="682.6" y="1043.0" width="205.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="685.6" y="1054.0">java/nio/DirectByteBuffer.&lt;..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (748 samples, 17.02%)</title><rect x="687.4" y="1027.0" width="200.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.4" y="1038.0">java/nio/MappedByteBuffer...</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (719 samples, 16.36%)</title><rect x="695.2" y="1011.0" width="193.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="698.2" y="1022.0">java/nio/ByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (693 samples, 15.77%)</title><rect x="702.2" y="995.0" width="186.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.2" y="1006.0">java/nio/ByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (674 samples, 15.34%)</title><rect x="707.3" y="979.0" width="180.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.3" y="990.0">java/nio/Buffer.&lt;init&gt;</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="799.1" y="963.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="802.1" y="974.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="799.1" y="947.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="802.1" y="958.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="799.1" y="931.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="802.1" y="942.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="799.1" y="915.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="802.1" y="926.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.02%)</title><rect x="799.1" y="899.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="802.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.05%)</title><rect x="799.4" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="802.4" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (239 samples, 5.44%)</title><rect x="799.9" y="963.0" width="64.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="802.9" y="974.0">java/ni..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (22 samples, 0.50%)</title><rect x="846.9" y="947.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="849.9" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 0.50%)</title><rect x="846.9" y="931.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.9" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (22 samples, 0.50%)</title><rect x="846.9" y="915.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="849.9" y="926.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (42 samples, 0.96%)</title><rect x="852.8" y="947.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.8" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (90 samples, 2.05%)</title><rect x="864.1" y="963.0" width="24.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="867.1" y="974.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (24 samples, 0.55%)</title><rect x="874.8" y="947.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="877.8" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (26 samples, 0.59%)</title><rect x="881.2" y="947.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="884.2" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (26 samples, 0.59%)</title><rect x="881.2" y="931.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.2" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (26 samples, 0.59%)</title><rect x="881.2" y="915.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="884.2" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (222 samples, 5.05%)</title><rect x="888.2" y="1091.0" width="59.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.2" y="1102.0">java/n..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (219 samples, 4.98%)</title><rect x="889.0" y="1075.0" width="58.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="892.0" y="1086.0">java/n..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (219 samples, 4.98%)</title><rect x="889.0" y="1059.0" width="58.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="892.0" y="1070.0">java/n..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (219 samples, 4.98%)</title><rect x="889.0" y="1043.0" width="58.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="892.0" y="1054.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (208 samples, 4.73%)</title><rect x="892.0" y="1027.0" width="55.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.0" y="1038.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (207 samples, 4.71%)</title><rect x="892.2" y="1011.0" width="55.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="895.2" y="1022.0">java/..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (188 samples, 4.28%)</title><rect x="895.7" y="995.0" width="50.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="898.7" y="1006.0">java/..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (39 samples, 0.89%)</title><rect x="903.8" y="979.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="906.8" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (24 samples, 0.55%)</title><rect x="907.8" y="963.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="910.8" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (20 samples, 0.46%)</title><rect x="908.9" y="947.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="911.9" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (16 samples, 0.36%)</title><rect x="910.0" y="931.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="913.0" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (119 samples, 2.71%)</title><rect x="914.3" y="979.0" width="31.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="917.3" y="990.0">ja..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (103 samples, 2.34%)</title><rect x="918.6" y="963.0" width="27.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.6" y="974.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (27 samples, 0.61%)</title><rect x="929.6" y="947.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="932.6" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (35 samples, 0.80%)</title><rect x="936.8" y="947.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="939.8" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (32 samples, 0.73%)</title><rect x="937.6" y="931.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="940.6" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (6 samples, 0.14%)</title><rect x="946.2" y="995.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectLongBufferS.get (303 samples, 6.89%)</title><rect x="947.8" y="1091.0" width="81.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.8" y="1102.0">java/nio/..</text>
</g>
<g>
<title>java/nio/Bits.swap (1 samples, 0.02%)</title><rect x="958.0" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="961.0" y="1086.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.02%)</title><rect x="958.0" y="1059.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="961.0" y="1070.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.02%)</title><rect x="958.0" y="1043.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="961.0" y="1054.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.02%)</title><rect x="958.0" y="1027.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="961.0" y="1038.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.02%)</title><rect x="958.0" y="1011.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="961.0" y="1022.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.02%)</title><rect x="958.0" y="995.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="961.0" y="1006.0"></text>
</g>
<g>
<title>filemap_map_pages (1 samples, 0.02%)</title><rect x="958.0" y="979.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="961.0" y="990.0"></text>
</g>
<g>
<title>alloc_set_pte (1 samples, 0.02%)</title><rect x="958.0" y="963.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="961.0" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (252 samples, 5.73%)</title><rect x="958.3" y="1075.0" width="67.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.3" y="1086.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectLongBufferS.ix (10 samples, 0.23%)</title><rect x="1026.0" y="1075.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.0" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLong (2 samples, 0.05%)</title><rect x="1028.6" y="1075.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (60 samples, 1.37%)</title><rect x="1029.2" y="1091.0" width="16.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.2" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (24 samples, 0.55%)</title><rect x="1030.3" y="1075.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (32 samples, 0.73%)</title><rect x="1036.7" y="1075.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1039.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (30 samples, 0.68%)</title><rect x="1037.2" y="1059.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1040.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (30 samples, 0.68%)</title><rect x="1037.2" y="1043.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1040.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (20 samples, 0.46%)</title><rect x="1039.9" y="1027.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1042.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (28 samples, 0.64%)</title><rect x="1045.3" y="1091.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1048.3" y="1102.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (28 samples, 0.64%)</title><rect x="1045.3" y="1075.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (28 samples, 0.64%)</title><rect x="1045.3" y="1059.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (26 samples, 0.59%)</title><rect x="1045.8" y="1043.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1048.8" y="1054.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/LSMDao.upsert (1 samples, 0.02%)</title><rect x="1052.8" y="1203.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1055.8" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/MemTable.iterator (1 samples, 0.02%)</title><rect x="1052.8" y="1187.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.8" y="1198.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.02%)</title><rect x="1052.8" y="1171.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1055.8" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1052.8" y="1155.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1055.8" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.14%)</title><rect x="1053.1" y="1235.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1056.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.07%)</title><rect x="1053.9" y="1219.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.9" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="1053.9" y="1203.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1056.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.02%)</title><rect x="1053.9" y="1187.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.9" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1 samples, 0.02%)</title><rect x="1054.1" y="1187.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.1" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="1054.4" y="1203.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1057.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="1054.4" y="1187.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1057.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="1054.4" y="1171.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.4" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.02%)</title><rect x="1054.4" y="1155.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1057.4" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.05%)</title><rect x="1054.7" y="1235.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="1054.7" y="1219.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1057.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="1054.7" y="1203.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1057.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1054.7" y="1187.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="1055.0" y="1187.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.0" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (24 samples, 0.55%)</title><rect x="1055.2" y="1267.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1058.2" y="1278.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.18%)</title><rect x="1056.0" y="1251.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1059.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.16%)</title><rect x="1056.3" y="1235.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.11%)</title><rect x="1056.8" y="1219.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1059.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.11%)</title><rect x="1056.8" y="1203.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.8" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.23%)</title><rect x="1058.2" y="1251.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.2" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.23%)</title><rect x="1058.2" y="1235.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1061.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1060.1" y="1219.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1060.1" y="1203.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1063.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (2 samples, 0.05%)</title><rect x="1060.1" y="1187.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1063.1" y="1198.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.02%)</title><rect x="1060.6" y="1219.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1063.6" y="1230.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.07%)</title><rect x="1060.9" y="1251.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1063.9" y="1262.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="1061.4" y="1235.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.4" y="1246.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1061.4" y="1219.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1064.4" y="1230.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1061.4" y="1203.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1064.4" y="1214.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="1061.4" y="1187.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1064.4" y="1198.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="1061.4" y="1171.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1064.4" y="1182.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.02%)</title><rect x="1061.4" y="1155.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1064.4" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.02%)</title><rect x="1061.7" y="1267.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1064.7" y="1278.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="1061.7" y="1251.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1064.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="1061.7" y="1235.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.7" y="1246.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (5 samples, 0.11%)</title><rect x="1061.9" y="1267.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1064.9" y="1278.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="1063.0" y="1251.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1066.0" y="1262.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.16%)</title><rect x="1063.3" y="1267.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1066.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.07%)</title><rect x="1063.8" y="1251.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1066.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="1064.3" y="1235.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1067.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="1064.6" y="1251.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1067.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="1064.6" y="1235.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1067.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="1064.6" y="1219.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1067.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title><rect x="1064.6" y="1203.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1067.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.05%)</title><rect x="1064.6" y="1187.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1067.6" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="1065.2" y="1267.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1068.2" y="1278.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.07%)</title><rect x="1065.2" y="1251.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1068.2" y="1262.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (117 samples, 2.66%)</title><rect x="1066.0" y="1283.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1069.0" y="1294.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (117 samples, 2.66%)</title><rect x="1066.0" y="1267.0" width="31.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1069.0" y="1278.0">on..</text>
</g>
<g>
<title>[unknown] (19 samples, 0.43%)</title><rect x="1066.0" y="1251.0" width="5.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1069.0" y="1262.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.43%)</title><rect x="1066.0" y="1235.0" width="5.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1069.0" y="1246.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (16 samples, 0.36%)</title><rect x="1066.0" y="1219.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1069.0" y="1230.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.07%)</title><rect x="1066.0" y="1203.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.0" y="1214.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.07%)</title><rect x="1066.8" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.8" y="1214.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.02%)</title><rect x="1067.6" y="1203.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.6" y="1214.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.18%)</title><rect x="1067.8" y="1203.0" width="2.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1070.8" y="1214.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.07%)</title><rect x="1068.1" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.1" y="1198.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.05%)</title><rect x="1068.9" y="1187.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.9" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.05%)</title><rect x="1069.4" y="1187.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.4" y="1198.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="1070.0" y="1203.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.0" y="1214.0"></text>
</g>
<g>
<title>__libc_recv (3 samples, 0.07%)</title><rect x="1070.3" y="1219.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1073.3" y="1230.0"></text>
</g>
<g>
<title>__libc_recv (98 samples, 2.23%)</title><rect x="1071.1" y="1251.0" width="26.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1074.1" y="1262.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (73 samples, 1.66%)</title><rect x="1077.8" y="1235.0" width="19.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1080.8" y="1246.0"></text>
</g>
<g>
<title>do_syscall_64 (73 samples, 1.66%)</title><rect x="1077.8" y="1219.0" width="19.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1080.8" y="1230.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (68 samples, 1.55%)</title><rect x="1079.1" y="1203.0" width="18.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1082.1" y="1214.0"></text>
</g>
<g>
<title>__sys_recvfrom (64 samples, 1.46%)</title><rect x="1080.2" y="1187.0" width="17.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1083.2" y="1198.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.02%)</title><rect x="1080.5" y="1171.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1083.5" y="1182.0"></text>
</g>
<g>
<title>inet_recvmsg (49 samples, 1.11%)</title><rect x="1080.7" y="1171.0" width="13.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1083.7" y="1182.0"></text>
</g>
<g>
<title>tcp_recvmsg (49 samples, 1.11%)</title><rect x="1080.7" y="1155.0" width="13.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1083.7" y="1166.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.05%)</title><rect x="1083.7" y="1139.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1086.7" y="1150.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.05%)</title><rect x="1083.7" y="1123.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1086.7" y="1134.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.05%)</title><rect x="1083.7" y="1107.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1086.7" y="1118.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.05%)</title><rect x="1083.7" y="1091.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1086.7" y="1102.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.02%)</title><rect x="1084.2" y="1139.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1087.2" y="1150.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.18%)</title><rect x="1084.5" y="1139.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1087.5" y="1150.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (7 samples, 0.16%)</title><rect x="1084.8" y="1123.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1087.8" y="1134.0"></text>
</g>
<g>
<title>ns_to_timespec64 (1 samples, 0.02%)</title><rect x="1086.6" y="1139.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1089.6" y="1150.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (19 samples, 0.43%)</title><rect x="1086.9" y="1139.0" width="5.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1089.9" y="1150.0"></text>
</g>
<g>
<title>__skb_datagram_iter (19 samples, 0.43%)</title><rect x="1086.9" y="1123.0" width="5.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1089.9" y="1134.0"></text>
</g>
<g>
<title>_copy_to_iter (8 samples, 0.18%)</title><rect x="1087.2" y="1107.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1090.2" y="1118.0"></text>
</g>
<g>
<title>copyout (8 samples, 0.18%)</title><rect x="1087.2" y="1091.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1090.2" y="1102.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (7 samples, 0.16%)</title><rect x="1087.4" y="1075.0" width="1.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1090.4" y="1086.0"></text>
</g>
<g>
<title>simple_copy_to_iter (10 samples, 0.23%)</title><rect x="1089.3" y="1107.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1092.3" y="1118.0"></text>
</g>
<g>
<title>__check_object_size (8 samples, 0.18%)</title><rect x="1089.9" y="1091.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1092.9" y="1102.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.05%)</title><rect x="1090.7" y="1075.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1093.7" y="1086.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.07%)</title><rect x="1091.2" y="1075.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1094.2" y="1086.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.02%)</title><rect x="1092.0" y="1139.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1095.0" y="1150.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.02%)</title><rect x="1092.0" y="1123.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1095.0" y="1134.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.07%)</title><rect x="1092.3" y="1139.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1095.3" y="1150.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.02%)</title><rect x="1092.8" y="1123.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1095.8" y="1134.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.02%)</title><rect x="1092.8" y="1107.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1095.8" y="1118.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.02%)</title><rect x="1092.8" y="1091.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1095.8" y="1102.0"></text>
</g>
<g>
<title>tcp_recv_timestamp (3 samples, 0.07%)</title><rect x="1093.1" y="1139.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1096.1" y="1150.0"></text>
</g>
<g>
<title>sock_recvmsg (6 samples, 0.14%)</title><rect x="1093.9" y="1171.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1096.9" y="1182.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.11%)</title><rect x="1094.2" y="1155.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1097.2" y="1166.0"></text>
</g>
<g>
<title>sock_has_perm (5 samples, 0.11%)</title><rect x="1094.2" y="1139.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1097.2" y="1150.0"></text>
</g>
<g>
<title>avc_has_perm (4 samples, 0.09%)</title><rect x="1094.4" y="1123.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1097.4" y="1134.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7 samples, 0.16%)</title><rect x="1095.5" y="1171.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1098.5" y="1182.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.16%)</title><rect x="1095.5" y="1155.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1098.5" y="1166.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.16%)</title><rect x="1095.5" y="1139.0" width="1.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1098.5" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="1097.4" y="1299.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.4" y="1310.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1097.4" y="1283.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1100.4" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="1097.4" y="1267.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1100.4" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/shakhmin/SSTable.rowAt (1 samples, 0.02%)</title><rect x="1097.6" y="1331.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1100.6" y="1342.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (1 samples, 0.02%)</title><rect x="1097.6" y="1315.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.6" y="1326.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1097.6" y="1299.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.6" y="1310.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1097.6" y="1283.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1100.6" y="1294.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1097.6" y="1267.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1100.6" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1097.6" y="1251.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1100.6" y="1262.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1097.6" y="1235.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1100.6" y="1246.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1097.6" y="1219.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1100.6" y="1230.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="1097.6" y="1203.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1100.6" y="1214.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.02%)</title><rect x="1097.6" y="1187.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1100.6" y="1198.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="1097.6" y="1171.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.6" y="1182.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="1097.6" y="1155.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1100.6" y="1166.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.02%)</title><rect x="1097.6" y="1139.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.6" y="1150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="1097.6" y="1123.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1100.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="1097.6" y="1107.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1100.6" y="1118.0"></text>
</g>
<g>
<title>[tid=4661] (49 samples, 1.11%)</title><rect x="1097.9" y="1347.0" width="13.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1100.9" y="1358.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.02%)</title><rect x="1097.9" y="1331.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1100.9" y="1342.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="1098.2" y="1331.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1101.2" y="1342.0"></text>
</g>
<g>
<title>start_thread (47 samples, 1.07%)</title><rect x="1098.4" y="1331.0" width="12.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1101.4" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (47 samples, 1.07%)</title><rect x="1098.4" y="1315.0" width="12.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1101.4" y="1326.0"></text>
</g>
<g>
<title>GangWorker::loop() (47 samples, 1.07%)</title><rect x="1098.4" y="1299.0" width="12.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.4" y="1310.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (45 samples, 1.02%)</title><rect x="1098.4" y="1283.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.4" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (40 samples, 0.91%)</title><rect x="1098.4" y="1267.0" width="10.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.4" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1098.4" y="1251.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.4" y="1262.0"></text>
</g>
<g>
<title>SpinPause (39 samples, 0.89%)</title><rect x="1098.7" y="1251.0" width="10.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1101.7" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1109.2" y="1267.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.2" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1109.2" y="1251.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.2" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.02%)</title><rect x="1109.2" y="1235.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.2" y="1246.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.02%)</title><rect x="1109.2" y="1219.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.2" y="1230.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.02%)</title><rect x="1109.2" y="1203.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.2" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.02%)</title><rect x="1109.2" y="1187.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.2" y="1198.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.02%)</title><rect x="1109.2" y="1171.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.2" y="1182.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1109.2" y="1155.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.2" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1109.5" y="1267.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.5" y="1278.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.02%)</title><rect x="1109.5" y="1251.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.5" y="1262.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1109.5" y="1235.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.5" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.07%)</title><rect x="1109.7" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.7" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.05%)</title><rect x="1109.7" y="1251.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.7" y="1262.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.05%)</title><rect x="1109.7" y="1235.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.7" y="1246.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.05%)</title><rect x="1109.7" y="1219.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.7" y="1230.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.05%)</title><rect x="1109.7" y="1203.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.7" y="1214.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.02%)</title><rect x="1109.7" y="1187.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.7" y="1198.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.02%)</title><rect x="1109.7" y="1171.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.7" y="1182.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.02%)</title><rect x="1109.7" y="1155.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.7" y="1166.0"></text>
</g>
<g>
<title>oop_Relocation::unpack_data() (1 samples, 0.02%)</title><rect x="1110.0" y="1187.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.0" y="1198.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.02%)</title><rect x="1110.3" y="1251.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.3" y="1262.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1110.5" y="1283.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.5" y="1294.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.02%)</title><rect x="1110.5" y="1267.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.5" y="1278.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1110.5" y="1251.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1113.5" y="1262.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1110.8" y="1283.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1113.8" y="1294.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1110.8" y="1267.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1113.8" y="1278.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1110.8" y="1251.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1113.8" y="1262.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1110.8" y="1235.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1113.8" y="1246.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1110.8" y="1219.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1113.8" y="1230.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1110.8" y="1203.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1113.8" y="1214.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="1110.8" y="1187.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1113.8" y="1198.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="1110.8" y="1171.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1113.8" y="1182.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="1110.8" y="1155.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1113.8" y="1166.0"></text>
</g>
<g>
<title>[tid=4663] (3 samples, 0.07%)</title><rect x="1111.1" y="1347.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1114.1" y="1358.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.07%)</title><rect x="1111.1" y="1331.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1114.1" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.07%)</title><rect x="1111.1" y="1315.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1114.1" y="1326.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.07%)</title><rect x="1111.1" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.1" y="1310.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1111.1" y="1283.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.1" y="1294.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.02%)</title><rect x="1111.1" y="1267.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.1" y="1278.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (1 samples, 0.02%)</title><rect x="1111.1" y="1251.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.1" y="1262.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.02%)</title><rect x="1111.1" y="1235.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.1" y="1246.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1111.1" y="1219.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.1" y="1230.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1111.3" y="1283.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.3" y="1294.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (2 samples, 0.05%)</title><rect x="1111.3" y="1267.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.3" y="1278.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.05%)</title><rect x="1111.3" y="1251.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.3" y="1262.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1111.6" y="1235.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.6" y="1246.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.02%)</title><rect x="1111.6" y="1219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.6" y="1230.0"></text>
</g>
<g>
<title>[tid=4665] (1 samples, 0.02%)</title><rect x="1111.9" y="1347.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1114.9" y="1358.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.02%)</title><rect x="1111.9" y="1331.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1114.9" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1111.9" y="1315.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1114.9" y="1326.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.02%)</title><rect x="1111.9" y="1299.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.9" y="1310.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.02%)</title><rect x="1111.9" y="1283.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.9" y="1294.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.02%)</title><rect x="1111.9" y="1267.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.9" y="1278.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1111.9" y="1251.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.9" y="1262.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="1111.9" y="1235.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.9" y="1246.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.02%)</title><rect x="1111.9" y="1219.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.9" y="1230.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.02%)</title><rect x="1111.9" y="1203.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.9" y="1214.0"></text>
</g>
<g>
<title>[tid=4666] (21 samples, 0.48%)</title><rect x="1112.1" y="1347.0" width="5.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1115.1" y="1358.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.07%)</title><rect x="1112.1" y="1331.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1115.1" y="1342.0"></text>
</g>
<g>
<title>CodeBlob::is_buffer_blob() const (1 samples, 0.02%)</title><rect x="1112.1" y="1315.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.1" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1112.1" y="1299.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1115.1" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1112.1" y="1283.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1115.1" y="1294.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.02%)</title><rect x="1112.1" y="1267.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1115.1" y="1278.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1112.4" y="1315.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1115.4" y="1326.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (1 samples, 0.02%)</title><rect x="1112.4" y="1299.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1115.4" y="1310.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1112.4" y="1283.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1115.4" y="1294.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1112.4" y="1267.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1115.4" y="1278.0"></text>
</g>
<g>
<title>__vsnprintf_internal (1 samples, 0.02%)</title><rect x="1112.7" y="1315.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1115.7" y="1326.0"></text>
</g>
<g>
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="1112.7" y="1299.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1115.7" y="1310.0"></text>
</g>
<g>
<title>.annobin_divrem.c (1 samples, 0.02%)</title><rect x="1112.7" y="1283.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1115.7" y="1294.0"></text>
</g>
<g>
<title>_IO_default_xsputn (1 samples, 0.02%)</title><rect x="1112.9" y="1331.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1115.9" y="1342.0"></text>
</g>
<g>
<title>start_thread (17 samples, 0.39%)</title><rect x="1113.2" y="1331.0" width="4.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1116.2" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (17 samples, 0.39%)</title><rect x="1113.2" y="1315.0" width="4.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1116.2" y="1326.0"></text>
</g>
<g>
<title>VMThread::run() (17 samples, 0.39%)</title><rect x="1113.2" y="1299.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.2" y="1310.0"></text>
</g>
<g>
<title>VMThread::loop() (17 samples, 0.39%)</title><rect x="1113.2" y="1283.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.2" y="1294.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.05%)</title><rect x="1113.2" y="1267.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.2" y="1278.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.05%)</title><rect x="1113.2" y="1251.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.2" y="1262.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="1113.5" y="1235.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.5" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.09%)</title><rect x="1113.7" y="1267.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.7" y="1278.0"></text>
</g>
<g>
<title>MarkScope::~MarkScope() (1 samples, 0.02%)</title><rect x="1114.0" y="1251.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.0" y="1262.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.05%)</title><rect x="1114.3" y="1251.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.3" y="1262.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.05%)</title><rect x="1114.3" y="1235.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.3" y="1246.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.05%)</title><rect x="1114.3" y="1219.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.3" y="1230.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1114.3" y="1203.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1117.3" y="1214.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1114.6" y="1187.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1117.6" y="1198.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1114.6" y="1171.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1117.6" y="1182.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1114.6" y="1155.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1117.6" y="1166.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1114.6" y="1139.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1117.6" y="1150.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1114.6" y="1123.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1117.6" y="1134.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (10 samples, 0.23%)</title><rect x="1114.8" y="1267.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.8" y="1278.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (10 samples, 0.23%)</title><rect x="1114.8" y="1251.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.8" y="1262.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (10 samples, 0.23%)</title><rect x="1114.8" y="1235.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.8" y="1246.0"></text>
</g>
<g>
<title>G1Allocator::init_mutator_alloc_region() (1 samples, 0.02%)</title><rect x="1114.8" y="1219.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.8" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (8 samples, 0.18%)</title><rect x="1115.1" y="1219.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.1" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::print_heap_after_gc() (1 samples, 0.02%)</title><rect x="1115.1" y="1203.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.1" y="1214.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.02%)</title><rect x="1115.1" y="1187.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.1" y="1198.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.02%)</title><rect x="1115.1" y="1171.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.1" y="1182.0"></text>
</g>
<g>
<title>stringStream::write(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="1115.1" y="1155.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.1" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, EvacuationInfo&amp;, unsigned long const*) (2 samples, 0.05%)</title><rect x="1115.4" y="1203.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.4" y="1214.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title><rect x="1115.4" y="1187.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.4" y="1198.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title><rect x="1115.4" y="1171.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.4" y="1182.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.02%)</title><rect x="1115.6" y="1187.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.6" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.02%)</title><rect x="1115.9" y="1203.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.9" y="1214.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize_all_tlabs() (1 samples, 0.02%)</title><rect x="1115.9" y="1187.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.9" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.02%)</title><rect x="1116.2" y="1203.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.2" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (1 samples, 0.02%)</title><rect x="1116.2" y="1187.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.2" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::pre_evacuate_collection_set() (1 samples, 0.02%)</title><rect x="1116.4" y="1203.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.4" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.02%)</title><rect x="1116.4" y="1187.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.4" y="1198.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.02%)</title><rect x="1116.4" y="1171.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.4" y="1182.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1116.4" y="1155.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.4" y="1166.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.02%)</title><rect x="1116.7" y="1203.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="1214.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.02%)</title><rect x="1116.7" y="1187.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.7" y="1198.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::debug_time_for_reference(char const*, double) const (1 samples, 0.02%)</title><rect x="1116.7" y="1171.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.7" y="1182.0"></text>
</g>
<g>
<title>TraceCollectorStats::TraceCollectorStats(CollectorCounters*) (1 samples, 0.02%)</title><rect x="1117.0" y="1203.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.0" y="1214.0"></text>
</g>
<g>
<title>__strncpy_avx2 (1 samples, 0.02%)</title><rect x="1117.2" y="1219.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1120.2" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="1117.5" y="1267.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1120.5" y="1278.0"></text>
</g>
<g>
<title>[tid=4670] (107 samples, 2.43%)</title><rect x="1117.8" y="1347.0" width="28.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1120.8" y="1358.0">[t..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="1117.8" y="1331.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1120.8" y="1342.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (4 samples, 0.09%)</title><rect x="1117.8" y="1315.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1120.8" y="1326.0"></text>
</g>
<g>
<title>start_thread (102 samples, 2.32%)</title><rect x="1118.9" y="1331.0" width="27.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1121.9" y="1342.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (102 samples, 2.32%)</title><rect x="1118.9" y="1315.0" width="27.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1121.9" y="1326.0">t..</text>
</g>
<g>
<title>JavaThread::run() (102 samples, 2.32%)</title><rect x="1118.9" y="1299.0" width="27.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.9" y="1310.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (102 samples, 2.32%)</title><rect x="1118.9" y="1283.0" width="27.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.9" y="1294.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (102 samples, 2.32%)</title><rect x="1118.9" y="1267.0" width="27.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.9" y="1278.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (102 samples, 2.32%)</title><rect x="1118.9" y="1251.0" width="27.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.9" y="1262.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (101 samples, 2.30%)</title><rect x="1118.9" y="1235.0" width="27.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.9" y="1246.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (101 samples, 2.30%)</title><rect x="1118.9" y="1219.0" width="27.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.9" y="1230.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (62 samples, 1.41%)</title><rect x="1118.9" y="1203.0" width="16.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.9" y="1214.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.02%)</title><rect x="1118.9" y="1187.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.9" y="1198.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.02%)</title><rect x="1118.9" y="1171.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.9" y="1182.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.02%)</title><rect x="1118.9" y="1155.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.9" y="1166.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.02%)</title><rect x="1118.9" y="1139.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.9" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.05%)</title><rect x="1119.1" y="1187.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.1" y="1198.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.02%)</title><rect x="1119.1" y="1171.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.1" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1119.1" y="1155.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.1" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1119.1" y="1139.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.1" y="1150.0"></text>
</g>
<g>
<title>indIndexOffsetOper::disp(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.02%)</title><rect x="1119.4" y="1171.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.14%)</title><rect x="1119.7" y="1187.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.7" y="1198.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.02%)</title><rect x="1119.7" y="1171.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.7" y="1182.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.02%)</title><rect x="1119.9" y="1171.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.9" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.09%)</title><rect x="1120.2" y="1171.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.2" y="1182.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.09%)</title><rect x="1120.2" y="1155.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.2" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.07%)</title><rect x="1120.5" y="1139.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.5" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.07%)</title><rect x="1120.5" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.5" y="1134.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.05%)</title><rect x="1120.5" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.5" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.02%)</title><rect x="1120.5" y="1091.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.5" y="1102.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.02%)</title><rect x="1120.5" y="1075.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.5" y="1086.0"></text>
</g>
<g>
<title>State::_sub_Op_ConvI2L(Node const*) (1 samples, 0.02%)</title><rect x="1120.5" y="1059.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.5" y="1070.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.02%)</title><rect x="1120.7" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.7" y="1102.0"></text>
</g>
<g>
<title>Node::find_long_type() const (1 samples, 0.02%)</title><rect x="1120.7" y="1075.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.7" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.02%)</title><rect x="1121.0" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.14%)</title><rect x="1121.3" y="1187.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.02%)</title><rect x="1121.3" y="1171.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.3" y="1182.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.02%)</title><rect x="1121.3" y="1155.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.11%)</title><rect x="1121.5" y="1171.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.02%)</title><rect x="1121.5" y="1155.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.02%)</title><rect x="1121.5" y="1139.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.02%)</title><rect x="1121.5" y="1123.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1121.5" y="1107.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.5" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.02%)</title><rect x="1121.5" y="1091.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1121.8" y="1155.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.02%)</title><rect x="1122.1" y="1155.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.1" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.02%)</title><rect x="1122.3" y="1155.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.3" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.02%)</title><rect x="1122.3" y="1139.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.3" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1122.3" y="1123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.3" y="1134.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.02%)</title><rect x="1122.6" y="1155.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.6" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.02%)</title><rect x="1122.9" y="1187.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 1.05%)</title><rect x="1123.1" y="1187.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.1" y="1198.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.02%)</title><rect x="1123.1" y="1171.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.1" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.02%)</title><rect x="1123.4" y="1171.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.09%)</title><rect x="1123.7" y="1171.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.02%)</title><rect x="1124.5" y="1155.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.07%)</title><rect x="1124.8" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1125.0" y="1155.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.07%)</title><rect x="1125.6" y="1171.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 0.32%)</title><rect x="1126.4" y="1171.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.4" y="1182.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.05%)</title><rect x="1127.4" y="1155.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1128.0" y="1155.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.0" y="1166.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.02%)</title><rect x="1128.2" y="1155.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.05%)</title><rect x="1128.5" y="1155.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="1166.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.02%)</title><rect x="1128.5" y="1139.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.5" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.02%)</title><rect x="1128.8" y="1139.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.09%)</title><rect x="1129.1" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.1" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1129.3" y="1139.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.3" y="1150.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.05%)</title><rect x="1129.6" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.05%)</title><rect x="1130.1" y="1171.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.02%)</title><rect x="1130.4" y="1155.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.02%)</title><rect x="1130.7" y="1171.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.09%)</title><rect x="1130.9" y="1171.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.9" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.05%)</title><rect x="1131.5" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.07%)</title><rect x="1132.0" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.05%)</title><rect x="1132.3" y="1155.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.09%)</title><rect x="1132.8" y="1171.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.02%)</title><rect x="1133.9" y="1171.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.9" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1133.9" y="1155.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.9" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.11%)</title><rect x="1134.2" y="1171.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.2" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.09%)</title><rect x="1134.4" y="1155.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1135.0" y="1139.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.0" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 0.66%)</title><rect x="1135.5" y="1203.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="1214.0"></text>
</g>
<g>
<title>CallNode::bottom_type() const (1 samples, 0.02%)</title><rect x="1135.5" y="1187.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.02%)</title><rect x="1135.8" y="1187.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.02%)</title><rect x="1135.8" y="1171.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.8" y="1155.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.8" y="1139.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.02%)</title><rect x="1135.8" y="1123.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.02%)</title><rect x="1135.8" y="1107.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (22 samples, 0.50%)</title><rect x="1136.0" y="1187.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.0" y="1198.0"></text>
</g>
<g>
<title>ConvI2LNode::Opcode() const (1 samples, 0.02%)</title><rect x="1136.0" y="1171.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.0" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.02%)</title><rect x="1136.3" y="1171.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.3" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.02%)</title><rect x="1136.3" y="1155.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.02%)</title><rect x="1136.6" y="1171.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1136.8" y="1171.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.16%)</title><rect x="1137.1" y="1171.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.11%)</title><rect x="1137.6" y="1155.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.6" y="1166.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.02%)</title><rect x="1137.6" y="1139.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.09%)</title><rect x="1137.9" y="1139.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.09%)</title><rect x="1137.9" y="1123.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.07%)</title><rect x="1139.0" y="1171.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.05%)</title><rect x="1139.3" y="1155.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.02%)</title><rect x="1139.5" y="1139.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.09%)</title><rect x="1139.8" y="1171.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.8" y="1182.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.02%)</title><rect x="1140.1" y="1155.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.02%)</title><rect x="1140.3" y="1155.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::can_split_if(Node*) (1 samples, 0.02%)</title><rect x="1140.3" y="1139.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.02%)</title><rect x="1140.6" y="1155.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.02%)</title><rect x="1140.6" y="1139.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.07%)</title><rect x="1140.9" y="1171.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.07%)</title><rect x="1140.9" y="1155.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.9" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1141.1" y="1139.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.1" y="1150.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.02%)</title><rect x="1141.1" y="1123.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.1" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1141.4" y="1139.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.4" y="1150.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.02%)</title><rect x="1141.7" y="1171.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.11%)</title><rect x="1141.9" y="1187.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.9" y="1198.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.02%)</title><rect x="1141.9" y="1171.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.09%)</title><rect x="1142.2" y="1171.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.2" y="1182.0"></text>
</g>
<g>
<title>IfNode::dominated_by(Node*, PhaseIterGVN*) (1 samples, 0.02%)</title><rect x="1142.2" y="1155.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.2" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.02%)</title><rect x="1142.2" y="1139.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.2" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1142.5" y="1155.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1142.7" y="1155.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.7" y="1166.0"></text>
</g>
<g>
<title>RangeCheckNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1143.0" y="1155.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.0" y="1166.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.02%)</title><rect x="1143.0" y="1139.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.02%)</title><rect x="1143.0" y="1123.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1143.0" y="1107.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.0" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.02%)</title><rect x="1143.0" y="1091.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.0" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.23%)</title><rect x="1143.3" y="1203.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.3" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.23%)</title><rect x="1143.3" y="1187.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.23%)</title><rect x="1143.3" y="1171.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.23%)</title><rect x="1143.3" y="1155.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.23%)</title><rect x="1143.3" y="1139.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.23%)</title><rect x="1143.3" y="1123.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.3" y="1134.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1143.3" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.3" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1143.3" y="1091.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.02%)</title><rect x="1143.3" y="1075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.3" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.02%)</title><rect x="1143.3" y="1059.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.3" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.02%)</title><rect x="1143.3" y="1043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.3" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1143.3" y="1027.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.3" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.02%)</title><rect x="1143.3" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.3" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.02%)</title><rect x="1143.3" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.02%)</title><rect x="1143.3" y="979.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.3" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.02%)</title><rect x="1143.3" y="963.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.3" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1143.3" y="947.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1143.3" y="931.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.3" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1143.3" y="915.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.02%)</title><rect x="1143.3" y="899.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="910.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.02%)</title><rect x="1143.3" y="883.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="894.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.02%)</title><rect x="1143.3" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.3" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.02%)</title><rect x="1143.3" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.3" y="862.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.02%)</title><rect x="1143.3" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.3" y="846.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.02%)</title><rect x="1143.3" y="819.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1146.3" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1143.3" y="803.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1146.3" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1143.3" y="787.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1146.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.16%)</title><rect x="1143.6" y="1107.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.6" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.16%)</title><rect x="1143.6" y="1091.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.16%)</title><rect x="1143.6" y="1075.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.16%)</title><rect x="1143.6" y="1059.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.16%)</title><rect x="1143.6" y="1043.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.16%)</title><rect x="1143.6" y="1027.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.6" y="1038.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.02%)</title><rect x="1143.6" y="1011.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.6" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1143.6" y="995.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.6" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.02%)</title><rect x="1143.6" y="979.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.6" y="990.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.02%)</title><rect x="1143.6" y="963.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.6" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1143.8" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.8" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1143.8" y="995.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1143.8" y="979.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1143.8" y="963.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1143.8" y="947.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.8" y="958.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.02%)</title><rect x="1143.8" y="931.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.8" y="942.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.02%)</title><rect x="1143.8" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.8" y="926.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1143.8" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.8" y="910.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.02%)</title><rect x="1143.8" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.8" y="894.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.02%)</title><rect x="1143.8" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.8" y="878.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.02%)</title><rect x="1143.8" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.8" y="862.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.02%)</title><rect x="1143.8" y="835.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.8" y="846.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.02%)</title><rect x="1143.8" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.8" y="830.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.02%)</title><rect x="1143.8" y="803.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1144.1" y="931.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.1" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.1" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.1" y="899.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1144.1" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1144.1" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1144.1" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1144.1" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1144.1" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.1" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.1" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.1" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.1" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1144.1" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1144.1" y="755.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1144.1" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1144.1" y="723.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1144.1" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.1" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1144.1" y="675.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1144.1" y="659.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1144.1" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1144.1" y="627.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1144.1" y="611.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.1" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.1" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.1" y="579.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.1" y="563.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.1" y="547.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.1" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.1" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.1" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.1" y="483.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.1" y="467.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.1" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.1" y="435.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.1" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.1" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.1" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.1" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.1" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.1" y="339.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.1" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.1" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.1" y="291.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.1" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.1" y="259.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.1" y="243.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.02%)</title><rect x="1144.1" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.1" y="238.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.02%)</title><rect x="1144.1" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.1" y="222.0"></text>
</g>
<g>
<title>GraphKit::make_exception_state(Node*) (1 samples, 0.02%)</title><rect x="1144.1" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.1" y="206.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.02%)</title><rect x="1144.1" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.1" y="190.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1144.1" y="163.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1147.1" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.4" y="579.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.4" y="563.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.4" y="547.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.4" y="531.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.4" y="515.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.4" y="499.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.4" y="483.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.4" y="467.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.4" y="451.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.4" y="435.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.4" y="419.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.4" y="403.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.4" y="387.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.4" y="371.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.4" y="355.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.4" y="339.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.4" y="323.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.4" y="307.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.4" y="291.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.4" y="275.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.4" y="259.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.4" y="243.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.4" y="227.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.4" y="211.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.4" y="195.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.4" y="179.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.4" y="163.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.4" y="147.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.4" y="131.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.4" y="115.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.4" y="99.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.02%)</title><rect x="1144.4" y="83.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.4" y="94.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.02%)</title><rect x="1144.4" y="67.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1144.4" y="51.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.4" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1144.4" y="35.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1144.6" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1144.6" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1144.6" y="979.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1144.6" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1144.6" y="947.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1144.6" y="931.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1144.6" y="915.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1144.6" y="899.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1144.6" y="883.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1144.6" y="867.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1144.6" y="851.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1144.6" y="835.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1144.6" y="819.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.6" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.02%)</title><rect x="1144.6" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.6" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1144.6" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.6" y="798.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.02%)</title><rect x="1144.6" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.6" y="782.0"></text>
</g>
<g>
<title>DirectiveSet::should_not_inline(ciMethod*) (1 samples, 0.02%)</title><rect x="1144.6" y="755.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.6" y="766.0"></text>
</g>
<g>
<title>CompilerOracle::should_not_inline(methodHandle const&amp;) (1 samples, 0.02%)</title><rect x="1144.6" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.9" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1144.9" y="787.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1144.9" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1144.9" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1144.9" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1144.9" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.9" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1144.9" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1144.9" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1144.9" y="659.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1144.9" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1144.9" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.9" y="611.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1144.9" y="595.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1144.9" y="579.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1144.9" y="563.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1144.9" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1144.9" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1144.9" y="515.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1144.9" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.9" y="483.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.9" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.9" y="451.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.9" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.9" y="419.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.9" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.9" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.9" y="371.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.9" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.9" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.9" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.9" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.9" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.9" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.9" y="259.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1144.9" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1144.9" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1144.9" y="211.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1144.9" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1144.9" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1144.9" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.9" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1144.9" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.9" y="158.0"></text>
</g>
<g>
<title>AddLNode::Identity(PhaseGVN*) (1 samples, 0.02%)</title><rect x="1144.9" y="131.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.9" y="142.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1144.9" y="115.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.9" y="126.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.02%)</title><rect x="1144.9" y="99.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.9" y="110.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.83] (1 samples, 0.02%)</title><rect x="1145.2" y="483.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.2" y="494.0"></text>
</g>
<g>
<title>VirtualCallData::cell_count() const (1 samples, 0.02%)</title><rect x="1145.2" y="467.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.2" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1145.4" y="1107.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.4" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="1091.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.4" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.4" y="1075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.4" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.4" y="1043.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.4" y="1027.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.4" y="1011.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="995.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.4" y="979.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.4" y="963.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.4" y="947.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.4" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.4" y="915.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.4" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="899.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="883.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.4" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.4" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.4" y="835.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.4" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.4" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="787.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.4" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.4" y="755.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.4" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.4" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.4" y="707.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.4" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.4" y="659.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.4" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.4" y="627.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.4" y="611.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.4" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="579.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.4" y="563.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.4" y="547.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.4" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.4" y="515.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.4" y="499.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.4" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.4" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.4" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.4" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.4" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.4" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.4" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.02%)</title><rect x="1145.4" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.4" y="382.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.02%)</title><rect x="1145.4" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.4" y="366.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.02%)</title><rect x="1145.4" y="339.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.4" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.7" y="1091.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.7" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.7" y="1075.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.7" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.7" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.7" y="1043.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.7" y="1027.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.7" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.7" y="995.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.7" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.7" y="979.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.7" y="963.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.7" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.7" y="931.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.7" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.7" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.7" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.7" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.7" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.7" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.7" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.7" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.7" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.7" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.7" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.7" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.7" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.7" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1145.7" y="691.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1145.7" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1145.7" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1145.7" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1145.7" y="627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1145.7" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.7" y="622.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.02%)</title><rect x="1145.7" y="595.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.7" y="606.0"></text>
</g>
<g>
<title>ReplacedNodes::transfer_from(ReplacedNodes const&amp;, unsigned int) (1 samples, 0.02%)</title><rect x="1145.7" y="579.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.7" y="590.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (1 samples, 0.02%)</title><rect x="1146.0" y="1235.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.0" y="1246.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.02%)</title><rect x="1146.0" y="1219.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.0" y="1230.0"></text>
</g>
<g>
<title>Klass::external_name() const (1 samples, 0.02%)</title><rect x="1146.0" y="1203.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.0" y="1214.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.02%)</title><rect x="1146.2" y="1331.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1149.2" y="1342.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.02%)</title><rect x="1146.2" y="1315.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1149.2" y="1326.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.02%)</title><rect x="1146.2" y="1299.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1149.2" y="1310.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.02%)</title><rect x="1146.2" y="1283.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1149.2" y="1294.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.02%)</title><rect x="1146.2" y="1267.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1149.2" y="1278.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.02%)</title><rect x="1146.2" y="1251.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1149.2" y="1262.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (1 samples, 0.02%)</title><rect x="1146.2" y="1235.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1149.2" y="1246.0"></text>
</g>
<g>
<title>[tid=4671] (5 samples, 0.11%)</title><rect x="1146.5" y="1347.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1149.5" y="1358.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.02%)</title><rect x="1146.5" y="1331.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1149.5" y="1342.0"></text>
</g>
<g>
<title>start_thread (4 samples, 0.09%)</title><rect x="1146.8" y="1331.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1149.8" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.09%)</title><rect x="1146.8" y="1315.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1149.8" y="1326.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.09%)</title><rect x="1146.8" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.8" y="1310.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.09%)</title><rect x="1146.8" y="1283.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.8" y="1294.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.09%)</title><rect x="1146.8" y="1267.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.8" y="1278.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.09%)</title><rect x="1146.8" y="1251.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.8" y="1262.0"></text>
</g>
<g>
<title>CompileBroker::set_last_compile(CompilerThread*, methodHandle const&amp;, bool, int) (1 samples, 0.02%)</title><rect x="1146.8" y="1235.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.8" y="1246.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.02%)</title><rect x="1146.8" y="1219.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.8" y="1230.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1146.8" y="1203.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.8" y="1214.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.07%)</title><rect x="1147.0" y="1235.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="1246.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.02%)</title><rect x="1147.0" y="1219.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.0" y="1230.0"></text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.02%)</title><rect x="1147.0" y="1203.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.0" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.05%)</title><rect x="1147.3" y="1219.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.3" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.05%)</title><rect x="1147.3" y="1203.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.3" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.05%)</title><rect x="1147.3" y="1187.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.3" y="1198.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.05%)</title><rect x="1147.3" y="1171.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.3" y="1182.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::optimize(BlockList*) (1 samples, 0.02%)</title><rect x="1147.3" y="1155.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.3" y="1166.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::delete_unnecessary_jumps(BlockList*) (1 samples, 0.02%)</title><rect x="1147.3" y="1139.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.3" y="1150.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.02%)</title><rect x="1147.6" y="1155.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.6" y="1166.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.02%)</title><rect x="1147.6" y="1139.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.6" y="1150.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.232] (1 samples, 0.02%)</title><rect x="1147.6" y="1123.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.6" y="1134.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.02%)</title><rect x="1147.6" y="1107.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.6" y="1118.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.02%)</title><rect x="1147.6" y="1091.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.6" y="1102.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (1 samples, 0.02%)</title><rect x="1147.6" y="1075.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.6" y="1086.0"></text>
</g>
<g>
<title>[tid=4673] (2 samples, 0.05%)</title><rect x="1147.8" y="1347.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1150.8" y="1358.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.05%)</title><rect x="1147.8" y="1331.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1150.8" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.05%)</title><rect x="1147.8" y="1315.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1150.8" y="1326.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.05%)</title><rect x="1147.8" y="1299.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.8" y="1310.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.05%)</title><rect x="1147.8" y="1283.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.8" y="1294.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.05%)</title><rect x="1147.8" y="1267.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.8" y="1278.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.05%)</title><rect x="1147.8" y="1251.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.8" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.05%)</title><rect x="1147.8" y="1235.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.8" y="1246.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (2 samples, 0.05%)</title><rect x="1147.8" y="1219.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.8" y="1230.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.05%)</title><rect x="1147.8" y="1203.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.8" y="1214.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.05%)</title><rect x="1147.8" y="1187.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.8" y="1198.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="1148.1" y="1171.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.1" y="1182.0"></text>
</g>
<g>
<title>[tid=4674] (3 samples, 0.07%)</title><rect x="1148.4" y="1347.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1151.4" y="1358.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.07%)</title><rect x="1148.4" y="1331.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1151.4" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.07%)</title><rect x="1148.4" y="1315.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1151.4" y="1326.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.07%)</title><rect x="1148.4" y="1299.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.4" y="1310.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.05%)</title><rect x="1148.4" y="1283.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.4" y="1294.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.02%)</title><rect x="1148.7" y="1267.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.7" y="1278.0"></text>
</g>
<g>
<title>HighResTimeSampler::take_sample() (1 samples, 0.02%)</title><rect x="1148.7" y="1251.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.7" y="1262.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.02%)</title><rect x="1148.9" y="1283.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="1294.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1148.9" y="1267.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.9" y="1278.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1148.9" y="1251.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.9" y="1262.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="1148.9" y="1235.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1151.9" y="1246.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1148.9" y="1219.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1151.9" y="1230.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1148.9" y="1203.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1151.9" y="1214.0"></text>
</g>
<g>
<title>[tid=4830] (52 samples, 1.18%)</title><rect x="1149.2" y="1347.0" width="14.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1152.2" y="1358.0"></text>
</g>
<g>
<title>__GI___clock_gettime (2 samples, 0.05%)</title><rect x="1149.2" y="1331.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1152.2" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="1149.5" y="1315.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1152.5" y="1326.0"></text>
</g>
<g>
<title>start_thread (50 samples, 1.14%)</title><rect x="1149.7" y="1331.0" width="13.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1152.7" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (50 samples, 1.14%)</title><rect x="1149.7" y="1315.0" width="13.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1152.7" y="1326.0"></text>
</g>
<g>
<title>GangWorker::loop() (50 samples, 1.14%)</title><rect x="1149.7" y="1299.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="1310.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (48 samples, 1.09%)</title><rect x="1149.7" y="1283.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.7" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (41 samples, 0.93%)</title><rect x="1149.7" y="1267.0" width="11.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.7" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1149.7" y="1251.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="1262.0"></text>
</g>
<g>
<title>SpinPause (40 samples, 0.91%)</title><rect x="1150.0" y="1251.0" width="10.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1153.0" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1160.7" y="1267.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.7" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1160.7" y="1251.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="1262.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(CardTableEntryClosure*, unsigned int) (1 samples, 0.02%)</title><rect x="1160.7" y="1235.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1161.0" y="1267.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="1278.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.02%)</title><rect x="1161.0" y="1251.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.0" y="1262.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1161.0" y="1235.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="1246.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.02%)</title><rect x="1161.0" y="1219.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="1230.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.02%)</title><rect x="1161.0" y="1203.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.0" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.11%)</title><rect x="1161.3" y="1267.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="1278.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.02%)</title><rect x="1161.3" y="1251.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.3" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.02%)</title><rect x="1161.5" y="1251.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.07%)</title><rect x="1161.8" y="1251.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.8" y="1262.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.07%)</title><rect x="1161.8" y="1235.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.8" y="1246.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.07%)</title><rect x="1161.8" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.8" y="1230.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.02%)</title><rect x="1161.8" y="1203.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.8" y="1214.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.02%)</title><rect x="1161.8" y="1187.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.8" y="1198.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.02%)</title><rect x="1161.8" y="1171.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.8" y="1182.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.02%)</title><rect x="1161.8" y="1155.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.8" y="1166.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.05%)</title><rect x="1162.1" y="1203.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.1" y="1214.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.02%)</title><rect x="1162.3" y="1187.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.3" y="1198.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle const&amp;, int, InterpreterOopMap*) (1 samples, 0.02%)</title><rect x="1162.3" y="1171.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.3" y="1182.0"></text>
</g>
<g>
<title>OopMapCacheEntry::fill(methodHandle const&amp;, int) (1 samples, 0.02%)</title><rect x="1162.3" y="1155.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.3" y="1166.0"></text>
</g>
<g>
<title>GenerateOopMap::compute_map(Thread*) (1 samples, 0.02%)</title><rect x="1162.3" y="1139.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.3" y="1150.0"></text>
</g>
<g>
<title>GenerateOopMap::mark_bbheaders_and_count_gc_points() (1 samples, 0.02%)</title><rect x="1162.3" y="1123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="1134.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1162.3" y="1107.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1165.3" y="1118.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1162.6" y="1283.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="1294.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.02%)</title><rect x="1162.9" y="1267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.9" y="1278.0"></text>
</g>
<g>
<title>[tid=4831] (52 samples, 1.18%)</title><rect x="1163.2" y="1347.0" width="13.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1166.2" y="1358.0"></text>
</g>
<g>
<title>start_thread (52 samples, 1.18%)</title><rect x="1163.2" y="1331.0" width="13.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1166.2" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (52 samples, 1.18%)</title><rect x="1163.2" y="1315.0" width="13.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1166.2" y="1326.0"></text>
</g>
<g>
<title>GangWorker::loop() (52 samples, 1.18%)</title><rect x="1163.2" y="1299.0" width="13.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="1310.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1163.2" y="1283.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="1294.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (2 samples, 0.05%)</title><rect x="1163.2" y="1267.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="1278.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (2 samples, 0.05%)</title><rect x="1163.2" y="1251.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1163.4" y="1235.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="1246.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.02%)</title><rect x="1163.4" y="1219.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.4" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (50 samples, 1.14%)</title><rect x="1163.7" y="1283.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (46 samples, 1.05%)</title><rect x="1163.7" y="1267.0" width="12.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="1278.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1163.7" y="1251.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="1262.0"></text>
</g>
<g>
<title>SpinPause (45 samples, 1.02%)</title><rect x="1164.0" y="1251.0" width="12.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1167.0" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1176.0" y="1267.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegionClosure*, unsigned int) (1 samples, 0.02%)</title><rect x="1176.0" y="1251.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.07%)</title><rect x="1176.3" y="1267.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="1278.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int) (1 samples, 0.02%)</title><rect x="1176.3" y="1251.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.05%)</title><rect x="1176.6" y="1251.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.02%)</title><rect x="1176.6" y="1235.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="1246.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1176.8" y="1235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="1246.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1176.8" y="1219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1230.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.02%)</title><rect x="1176.8" y="1203.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="1214.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.02%)</title><rect x="1176.8" y="1187.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1198.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.02%)</title><rect x="1176.8" y="1171.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1182.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.02%)</title><rect x="1176.8" y="1155.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="1166.0"></text>
</g>
<g>
<title>[tid=4832] (48 samples, 1.09%)</title><rect x="1177.1" y="1347.0" width="12.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1180.1" y="1358.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.02%)</title><rect x="1177.1" y="1331.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1180.1" y="1342.0"></text>
</g>
<g>
<title>start_thread (47 samples, 1.07%)</title><rect x="1177.4" y="1331.0" width="12.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1180.4" y="1342.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (47 samples, 1.07%)</title><rect x="1177.4" y="1315.0" width="12.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1180.4" y="1326.0"></text>
</g>
<g>
<title>GangWorker::loop() (47 samples, 1.07%)</title><rect x="1177.4" y="1299.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="1310.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (46 samples, 1.05%)</title><rect x="1177.4" y="1283.0" width="12.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1294.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (43 samples, 0.98%)</title><rect x="1177.4" y="1267.0" width="11.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="1278.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.02%)</title><rect x="1177.4" y="1251.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.02%)</title><rect x="1177.4" y="1235.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1177.6" y="1251.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="1262.0"></text>
</g>
<g>
<title>SpinPause (41 samples, 0.93%)</title><rect x="1177.9" y="1251.0" width="11.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1180.9" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title><rect x="1188.9" y="1267.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="1278.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.02%)</title><rect x="1188.9" y="1251.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="1262.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1188.9" y="1235.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="1246.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.02%)</title><rect x="1188.9" y="1219.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="1230.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.02%)</title><rect x="1188.9" y="1203.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="1214.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.02%)</title><rect x="1188.9" y="1187.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.05%)</title><rect x="1189.2" y="1267.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.2" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.05%)</title><rect x="1189.2" y="1251.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.2" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.02%)</title><rect x="1189.2" y="1235.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.2" y="1246.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1189.5" y="1235.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.5" y="1246.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1189.5" y="1219.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.5" y="1230.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.02%)</title><rect x="1189.5" y="1203.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.5" y="1214.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1189.7" y="1283.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1192.7" y="1294.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1189.7" y="1267.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1192.7" y="1278.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1189.7" y="1251.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1192.7" y="1262.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1189.7" y="1235.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1192.7" y="1246.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1189.7" y="1219.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1192.7" y="1230.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1189.7" y="1203.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1192.7" y="1214.0"></text>
</g>
</g>
</svg>
